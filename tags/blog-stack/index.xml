<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/blog-stack/index.xml</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>0001-01-01T00:00:00+00:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/11/3-formas-sencillas-de-monetizar-un-blog/</id>
        <title>3 formas sencillas de monetizar un blog</title>        
        <updated>2016-11-06T11:00:00+01:00</updated>
        <published>2016-11-06T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/11/3-formas-sencillas-de-monetizar-un-blog/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Si tenemos un blog probablemente tengamos algún gasto como el dominio o el &lt;em&gt;hosting&lt;/em&gt;. Pasado un tiempo si los artículos del blog son interesantes empezaremos a tener visitas que podemos monetizar para costear los gastos y seguramente algo más. En este artículo comento 3 formas sencillas de monetizar un blog que no nos requieren mucho trabajo.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;Lo que más cuesta de tener un blog es el tiempo que requiere escribir los artículos, editarlos, hacer un ejemplo de código si es el caso y obtener las imágenes a incluir, cada artículo puede suponer un trabajo de entre 3 y 10 horas según mi experiencia. A pesar de todo solo es nuestro tiempo y muchos si seguimos escribiendo en un blog lo hacemos de buen gusto y nuestra propia motivación. Sin embargo, otra parte es que quizá el &lt;em&gt;hosting&lt;/em&gt; y tener un dominio para el blog nos cueste algo de dinero, el dominio alrededor de 12€ al año y el hosting 5€, 10€ o algo más al mes con lo que al año serían unos 130€ aproximadamente. Si tenemos una cifra de páginas visitas respetable a partir de 25K al mes hay varias formas de monetizar un blog para sufragar los gastos que nos ocasione, aunque probablemente no compensen el tiempo de dedicación al blog.&lt;/p&gt;

&lt;p&gt;El tiempo de dedicación que requiere un blog y los gastos que genera son dos motivos por los que un blog puede ser abandonado al cabo de unos meses o pocos años. Para minimizar el problema de los costes o conseguir otra motivación podemos obtener ingresos de algunas formas sencillas.&lt;/p&gt;

&lt;h3 id=&#34;publicidad-adsense-y-enlaces-de-afiliado-de-amazon&#34;&gt;Publicidad AdSense y enlaces de afiliado de Amazon&lt;/h3&gt;

&lt;p&gt;En mi caso actualmente con unas 25K páginas vistas al mes tengo uno ingresos de 20€/mes con &lt;a href=&#34;https://www.google.com/adsense/&#34;&gt;AdSense&lt;/a&gt; (hasta hace pocos meses conseguía 12€/mes) y unos 30€/año por los enlaces de &lt;a href=&#34;https://afiliados.amazon.es&#34;&gt;afiliado de Amazon&lt;/a&gt; cuando alguien hace una compra a través del enlace obtenemos una pequeña comisión, pueden ser libros, películas, aparatos electrónicos, ropa, &amp;hellip; cualquier artículo de una de las mayores y populares tiendas de comercio electrónico como &lt;a href=&#34;http://www.amazon.es/&#34;&gt;Amazon&lt;/a&gt; que esté relacionado con la temática del blog o del artículo donde incluimos los enlaces. Y esto con las vistas que tengo en mi blog, otros blogs con mayor número de visitas los ingresos serán notablemente mayores, suficientes para costear los gastos del blog y permitirnos algún pequeño capricho.&lt;/p&gt;

&lt;p&gt;AdSense y los enlaces de afiliado de Amazon son dos formas sencillas y pasivas de monetizar un blog que dependen del número de páginas vistas, a mayor número de páginas vistas los ingresos serán mayores en proporción similar. Para aumentar las vistas en un blog no hay secretos y son escribir cuanto más contenido mejor y contenido de calidad que les interese a los lectores para atraer visitas de los buscadores, suscriptores de las herramientas de sindicación y de las redes sociales en las que se compartan los artículos.&lt;/p&gt;

&lt;p&gt;Llegar a tener una cifra respetable de visitas no es fácil, cuesta mucho tiempo de dedicación al blog y constancia para escribir artículos al ritmo de al menos uno a la semana durante meses e incluso algún año. Este blog tiene ya tres años, 200 artículos escritos (multiplícalo por las horas de dedicación por artículo) y aún solo tengo esas 25K páginas vistas.&lt;/p&gt;

&lt;h3 id=&#34;artículos-patrocinados&#34;&gt;Artículos patrocinados&lt;/h3&gt;

&lt;p&gt;Otra forma son la de aceptar artículos patrocinados por los que se suele pagar entre 50€ y 150€ aproximadamente por artículo con unas 300 y 500 palabras de contenido, dependiendo de las visitas de nuestro blog, posicionamiento en los buscadores y de lo que valoremos nuestro tiempo para redactar y publicar el artículo.&lt;/p&gt;

&lt;p&gt;Dos de las plataformas que ponen en contacto anunciantes y editores para recibir propuestas de artículos patrocinados son &lt;a href=&#34;https://www.publisuites.com/aff/b6b76b095907d91e588d1c714c4a39ad9735c8cf/&#34;&gt;Publisuites&lt;/a&gt; y &lt;a href=&#34;http://coobis.com/&#34;&gt;Coobis&lt;/a&gt;. Es recomendable que el artículo lo escribamos nosotros para que los buscadores no lo detecten como contenido duplicado y nos penalicen a nivel de &lt;abbr title=&#34;Search Engine Optimization&#34;&gt;SEO&lt;/abbr&gt;. En cualquier caso cuando recibimos una propuesta no tenemos la obligación de escribir el artículo si su temática no corresponde con la linea editorial de nuestro blog o por cualquier otro motivo si por ejemplo en ese momento no tenemos tiempo, aunque si deberemos dar una respuesta en un plazo de unos días aunque sea negativa.&lt;/p&gt;

&lt;p&gt;La forma de pago es a través de &lt;a href=&#34;https://www.paypal.com/&#34;&gt;PayPal&lt;/a&gt; o transferencia bancaria y los pagos superada una cantidad no muy elevada de saldo se realizan de forma semanal.&lt;/p&gt;

&lt;p&gt;Por otra parte tampoco conviene abusar de la publicidad o artículos patrocinados, no ha de ser excesiva con muchos &lt;em&gt;banners&lt;/em&gt; de publicidad, tampoco molesta con ventanas emergentes ni que impidan leer correctamente el contenido de la página y los artículos patrocinados deberían ser de interés para el lector según la temática del blog y para ser honestos con un aviso de que el artículo está patrocinado aunque la opinión sea propia y sincera.&lt;/p&gt;

&lt;p&gt;Estas no son las únicas formas de monetizar un blog pero son 3 de las más sencillas y la de AdSense y enlaces de afiliado de Amazon son ingresos pasivos y más constantes.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/</id>
        <title>Histórico de datos, auditoría y diferencias entre objetos con Javers en Java</title>        
        <updated>2016-11-05T11:00:00+01:00</updated>
        <published>2016-11-05T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Por seguridad, por auditoría o histórico de datos una aplicación puede requerir no solo guardar los valores actuales de los datos que maneja sino también las versiones anteriores y los cambios en cada valor de los mismos. En Java hay una librería llamada Javers que nos proporciona funcionalidades como comparación, &lt;em&gt;snapshots&lt;/em&gt;, persistencia y un lenguaje de consulta para hacer búsquedas.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Por necesidades de negocio y requerimientos funcionales puede ser necesario guardar un histórico de ciertos datos de una aplicación en vez de solo la última versión de los datos. Tener solo la última versión de algunos datos puede no ser lo que se necesita. Por ejemplo, supongamos que una aplicación maneja una entidad de dominio producto y esta tiene un campo que es el precio y queremos guardar los cambios que se hacen a esta entidad para conocer el cambio de precio que han sufrido los productos. Otras necesidades pueden ser por auditoría o seguridad para saber que usuario ha hecho que cambios en los datos, para disponer de versiones anteriores de una entidad, comparar dos versiones de la misma entidad o lanzar consultas para obtener información de los cambios que se han producido.&lt;/p&gt;

&lt;p&gt;Una librería que en Java nos ofrece toda esta información de auditoría es &lt;a href=&#34;http://javers.org/&#34;&gt;Javers&lt;/a&gt; con la posibilidad de persistirla en diferentes sistemas, en las tradicionales base de datos relacionales o en una base de datos no SQL como &lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;. En la documentación encontramos como podemos &lt;a href=&#34;http://javers.org/documentation/diff-examples/&#34;&gt;comparar dos objetos&lt;/a&gt;, &lt;a href=&#34;http://javers.org/documentation/repository-examples/&#34;&gt;persistir cambios&lt;/a&gt; o &lt;a href=&#34;http://javers.org/documentation/jql-examples/&#34;&gt;lanzar consultas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Javers diferencia dos tipos de objetos &lt;a href=&#34;http://javers.org/documentation/diff-examples/#compare-entities&#34;&gt;Entities&lt;/a&gt; o &lt;a href=&#34;http://javers.org/documentation/diff-examples/#compare-valueobjects&#34;&gt;ValueObjects&lt;/a&gt;. Los ValueObjects son objetos &lt;em&gt;java bean&lt;/em&gt; tradicionales de Java que no tenen identificador asignado y no son persistibles pero se pueden usar para hacer comparaciones entre dos objetos según las propiedades de los &lt;em&gt;java beans&lt;/em&gt;. Los objetos &lt;em&gt;java bean&lt;/em&gt; Entities tienen una propiedad que representa el identificativo de la entidad y las comparaciones se pueden hacer entre diferentes versiones del mismo.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo muestro como hacer comparaciones, como hacer cambios y persistirlos, como lanzar una consulta para obtener los cambios que se han producido u obtener &lt;em&gt;snapshots&lt;/em&gt; de versiones anteriores y como persistir estos cambios en una base de datos &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; en la que utilizaré &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. En la primera sección del ejemplo se comparan dos objetos y obtienen sus diferencias, posteriormente se persisten varios cambios y finalmente se realiza una consulta para obtener los cambios que haya habido en la propiedad &lt;em&gt;price&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Category.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Product.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=System.out&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;La información se persistirán en varias tablas en este caso en un base de datos relacional PostgreSQL que Javers creará al iniciarse la aplicación, ejecutada la aplicación encontraremos datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=tables.sql&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJavers&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/</id>
        <title>Elegir una distribución GNU/Linux según el usuario, uso o equipo</title>        
        <updated>2016-10-30T01:30:00+02:00</updated>
        <published>2016-10-29T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;En GNU/Linux hay multitud de distribuciones, no existe la mejor distribución sino aquella que mejor se adapta según el usuario o sus preferencias. En muchas distribuciones hay posibilidad de elegir diferentes &lt;em&gt;sabores&lt;/em&gt; según el entorno de escritorio. Para usuarios nuevos, intermedios, avanzados, para servidor, que requieren pocos recursos o con menor cantidad de software no libre.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/linux.png&#34; class=&#34;right&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/gnu.png&#34; class=&#34;right&#34; alt=&#34;GNU&#34; title=&#34;GNU&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Linux es el núcleo del sistema operativo de las distribuciones &lt;a href=&#34;http://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. GNU es el conjunto de herramientas de usuario que permiten interactuar mediante programas específicos según la tarea con el núcleo Linux. Tanto GNU como Linux son software libre y su licencia otorga al usuario &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.es.html&#34;&gt;las 4 libertades que debe poseer todo software libre&lt;/a&gt; para ser calificado como tal. Como las herramientas GNU, Linux y otros proyectos de software libre como los entornos de escritorio &lt;a href=&#34;http://gnome.org/&#34;&gt;GNOME&lt;/a&gt;, &lt;a href=&#34;https://www.kde.org/&#34;&gt;KDE&lt;/a&gt;, &lt;a href=&#34;http://www.xfce.org/&#34;&gt;XFCE&lt;/a&gt;, &lt;a href=&#34;http://lxde.org/&#34;&gt;LXDE&lt;/a&gt; y programas como &lt;a href=&#34;http://www.videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;, &lt;a href=&#34;http://www.libreoffice.org/&#34;&gt;LibreOffice&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; entre otros están disponibles en la mayoría de los casos de forma gratuita, grupos de usuarios y organizaciones forman distribuciones que contienen las herramientas GNU, el núcleo Linux, y un gestor de paquetes de los programas para instalarlos de forma sencilla junto con sus dependencias.&lt;/p&gt;

&lt;p&gt;En otros sistemas operativos solo hay una versión del sistema operativo o varias pero muy parecidas entre ellas, es el caso de &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; o &lt;a href=&#34;http://www.apple.com/macos/&#34;&gt;macOS&lt;/a&gt;. Esto hace que en algunas circunstancias no se adapten bien a las necesidades o preferencias de los usuarios, por ejemplo, equipos antiguos se quedan sin soporte por no poder actualizar a la versión más reciente haciendo que incluso se queden sin actualizaciones de seguridad aún siendo perfectamente útiles. El software libre permite ajustarse mejor a las necesidades del usuario habiendo por ejemplo distribuciones para equipos antiguos que requieren menos recursos. Hace algunos lustros instalar una distribución GNU/Linux no era sencillo para un usuario nuevo o con pocos conocimientos de informática, afortunadamente hoy instalar un sistema GNU/Linux es tan sencillo como instalar Windows o macOS gracias a los instaladores gráficos, sencillos y guiados paso a paso y prácticamente todo el hardware común está soportado y funciona correctamente.&lt;/p&gt;

&lt;p&gt;Dado que en GNU/Linux hay muchas distribuciones un nuevo usuario puede sentirse tentado de buscar la «mejor distribución», sin embargo, no existe la «mejor distribución» sino aquella que se mejor se adapta a las preferencias o necesidades de ese usuario. Y también, y no menos importante, una vez elegida una no tiene que ser para siempre, si pasado un tiempo hay otra distribución que pasa a adaptarse mejor a las necesidades o preferencias del usuario puede cambiarse de distribución. Aún así hay algunas distribuciones GNU/Linux que son más usadas que otras por su mayor tiempo de vida o fama y hay distribuciones que son derivadas de otras más grandes.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;figure&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/ubuntu.png&#34; alt=&#34;Ubuntu&#34; title=&#34;Ubuntu&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/opensuse.png&#34; alt=&#34;openSUSE&#34; title=&#34;openSUSE&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/debian.png&#34; alt=&#34;Debian&#34; title=&#34;Debian&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/archlinux-arch.png&#34; alt=&#34;Arch Linux&#34; title=&#34;Arch Linux&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/fedora.png&#34; alt=&#34;Fedora&#34; title=&#34;Fedora&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/elementary.png&#34; alt=&#34;Elementary OS&#34; title=&#34;Elementary OS&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/trisquel.png&#34; alt=&#34;Trisquel&#34; title=&#34;Trisquel&#34;&gt;
    &lt;figcaption&gt;Logotipos de varias de las distribuciones GNU/Linux más importantes y usadas&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Esta categorización que he hecho es general y muchos usuarios avanzados usan distribuciones que en esta categorización incluyo como para usuarios nuevos. Algunas distribuciones publican nuevas versiones cada seis meses o versiones más estables cada dos años con soporte durante mayor periodo de tiempo como Ubuntu y sus &lt;abbr title=&#34;Long Term Support&#34;&gt;LTS&lt;/abbr&gt;. Algunas otras distribuciones se califican como en continua actualización o &lt;em&gt;rolling release&lt;/em&gt; que no siguen un calendario de publicaciones en las que en cada actualización completa del sistema se tiene la última versión disponible de cada paquete y programas. Algunas categorías y distribuciones son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para nuevo usuario de GNU/Linux:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;: una de las distribuciones más usadas y que más han contribuido a popularizar GNU/Linux. Posee varios sabores según el entorno de escritorio usado GNOME, KDE, XFCE, LXDE.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elementary.io/es/&#34;&gt;elementary OS&lt;/a&gt;: es una distribución con una estética muy cuidada con ciertas similitudes a macOS. Está basada en Ubuntu, tiene buenas opiniones y es una de las mejores candidatas para un usuario recién llegado a GNU/Linux o que quiera un sistema para trabajar sin complicaciones.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxmint.com/&#34;&gt;Linux Mint&lt;/a&gt;: basada en Ubuntu ha ganado popularidad en la medida que los usuarios de Ubuntu están descontentos con su interfaz de escritorio Unity.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.opensuse.org/es/&#34;&gt;openSUSE&lt;/a&gt;: la distribución comunitaria de SUSE. Hace no mucho ha cambiado su política de versionado ofreciendo una más estable basada en la versión empresarial SUSE llamada &lt;a href=&#34;https://en.opensuse.org/Portal:Leap&#34;&gt;openSUSE Leap&lt;/a&gt; y otra con un modelo &lt;em&gt;rolling release&lt;/em&gt; y con las últimas versiones del software llamda &lt;a href=&#34;https://en.opensuse.org/Portal:Tumbleweed&#34;&gt;openSUSE Tumbleweed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt;: una de las distribuciones más antiguas y con mayor número de derivadas, una de ellas Ubuntu. Posee tres ramas según la confianza de cada una del software que contiene. Para servidores la recomendación es usar la rama estable y para un usuario la rama &lt;em&gt;testing&lt;/em&gt; que contiene software más reciente.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/ubuntu-installer.png&#34; title=&#34;Instalador de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/ubuntu-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/ubuntu.png&#34; title=&#34;Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/ubuntu-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Ubuntu con Unity&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/elementary-os-installer.png&#34; title=&#34;Instalador de elementary OS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/elementary-os-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/elementary-os.png&#34; title=&#34;Elementary OS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/elementary-os-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Elementary OS&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/linux-mint-installer.png&#34; title=&#34;Instalador de Linux Mint&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/linux-mint-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/linux-mint.png&#34; title=&#34;Linux Mint con Cinnamon&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/linux-mint-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Linux Mint con Cinnamon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/opensuse-installer.png&#34; title=&#34;Instalador de openSUSE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/opensuse-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/opensuse.png&#34; title=&#34;openSUSE con KDE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/opensuse-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;openSUSE con KDE&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/debian-installer-1.png&#34; title=&#34;Instalador de Debian (1)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/debian-installer-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/debian-installer-2.png&#34; title=&#34;Instalador de Debian (2)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/debian-installer-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Instalador de Debian&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Para usuario intermedio:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;: de las distribuciones &lt;em&gt;rolling release&lt;/em&gt; es una de las más populares, no posee instalador gráfico y su instalación puede intimidar a un usuario nuevo de GNU/Linux que se hace leyendo la &lt;a href=&#34;https://wiki.archlinux.org/index.php/Installation_guide&#34;&gt;guía de instalación&lt;/a&gt; y sus referencias, adaptándola cada uno a sus preferencias y equipo y ejecutando comandos en la terminal paso a paso desde la selección desde la disposición del teclado, pasando por el particionado del disco hasta la instalación del cargador de arranque. &lt;a href=&#34;https://arch-anywhere.org/&#34;&gt;arch-anywhere&lt;/a&gt; ofrece un instalador que hace más fácil y rápida la instalación de una distribución Arch Linux.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fedoraproject.org/&#34;&gt;Fedora&lt;/a&gt;: es la distribución comunitario que ofrece &lt;a href=&#34;https://www.redhat.com/es&#34;&gt;RedHat&lt;/a&gt; a los usuarios en la que desarrollan los cambios que luego se incorporan a la distribución empresarial RHEL.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux-installer-1.png&#34; title=&#34;Instalador de Arch Linux (1)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux-installer-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux-installer-2.png&#34; title=&#34;Instalador de Arch Linux (2)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux-installer-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Instalador de Arch Linux&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux.jpg&#34; title=&#34;Arch Linux con GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/archlinux-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Arch Linux con GNOME&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/arch-anywhere-installer-1.png&#34; title=&#34;Instalador de arch-anywhere (1)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/arch-anywhere-installer-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/arch-anywhere-installer-2.png&#34; title=&#34;Instalador de arch-anywhere (2)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/arch-anywhere-installer-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Instalador de arch-anywhere&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/fedora-installer.png&#34; title=&#34;Instalador de Fedora&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/fedora-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/fedora.png&#34; title=&#34;Fedora con GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/fedora-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Fedora con GNOME&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Para usuario avanzado:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gentoo.org/&#34;&gt;Gentoo&lt;/a&gt;: la instalación de los programas se hace compilando el código fuente. Permite personalizar y obtener el máximo rendimiento del equipo en que sea instalado pero el tiempo de compilación puede ser notable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Para servidor:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;: la versión para servidores de Ubuntu, con características empresariales desarrollada por &lt;a href=&#34;http://www.canonical.com/&#34;&gt;Canonical&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://es.redhat.com/products/enterprise-linux/&#34;&gt;RHEL&lt;/a&gt;: distribución con soporte empresarial y orientada a la empresa creada por RedHat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.centos.org/&#34;&gt;CentOS&lt;/a&gt;: distribución basada en RHEL sin el coste del soporte empresarial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.suse.com/es-es/&#34;&gt;SUSE&lt;/a&gt;: distribución con soporte empresarial y orientada a las empresas.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Para equipos antiguos: aún con el gran avance que se produce en la tecnología cada pocos meses equipos con algún lustro siguen siendo útiles para muchos usuarios. Con una distribución que use pocos recursos el equipo seguirá siendo válido.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://puppylinux.com/&#34;&gt;Puppy Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lubuntu.net/&#34;&gt;Lubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xubuntu.org/&#34;&gt;Xubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/xubuntu-installer.png&#34; title=&#34;Instalador de Xubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/xubuntu-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/xubuntu.png&#34; title=&#34;Xubuntu con XFCE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/xubuntu-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Xubuntu con XFCE&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Para usuarios con preferencias de software libre: aunque las distribuciones GNU/Linux son en su mayoría software libre hay algunas partes que no lo son como controladores privativos de la tarjeta gráfica o diversos firmwares del núcleo o controladores. Estas distribuciones tratan de eliminar la mayor parte posible de ese software que no es libre.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gnewsense.org/&#34;&gt;gNewSense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trisquel.info/es&#34;&gt;Trisquel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/triquel-installer.png&#34; title=&#34;Instalador de Trisquel&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/triquel-installer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/trisquel.png&#34; title=&#34;Trisquel&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/190/trisquel-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Trisquel&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Estas son solo algunas de las distribuciones más populares y usadas de GNU/Linux y las que recomiendo pero en &lt;a href=&#34;http://distrowatch.com/&#34;&gt;DistroWatch&lt;/a&gt; hay un listado más completo. En el libro &lt;a href=&#34;http://amzn.to/2fol03B&#34;&gt;Introduction Linux Distros&lt;/a&gt; encontraremos una introducción más detallada a GNU/Linux y sus distribuciones.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484213939&amp;linkId=f78ab092f9be61313e9c686e15cc3441&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/&#34;&gt;Windows es fácil usarlo sin licencia&lt;/a&gt; y es muy común con el consentimiento de la compañía estadounidense, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/07/a-microsoft-no-le-importa-que-uses-windows-u-office-sin-licencia/&#34;&gt;a Microsoft no le importa que Windows sea usado sin licencia&lt;/a&gt;, pero como muestro en este artículo hay opciones que en muchos casos no tienen nada que envidiar a los sistemas operativos privativos y en otros aspectos son mucho mejores ya que son software libre generalmente gratuito, no incluyen &lt;em&gt;bloatware&lt;/em&gt;, software espía y con un soporte durante mayor tiempo que el que ofrecen &lt;a href=&#34;http://www.microsoft.com/&#34;&gt;Microsoft&lt;/a&gt; o &lt;a href=&#34;http://www.apple.com/&#34;&gt;Apple&lt;/a&gt; en sus equipos.&lt;/p&gt;

&lt;p&gt;Descarga una distribución GNU/Linux que consideres adecuada para ti o según tus preferencias de escritorio gráfico y pruébalas sin compromiso en una máquina virtual con &lt;a href=&#34;http://virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; aunque ten en cuenta que la experiencia de uso no será la misma que la instalación sobre el hardware te servirá para comprobar si te gusta. En GNU/Linux encontrarás software, numerosa documentación en la web, gente dispuesta a ayudarte ante cualquier problema o duda que tengas como yo (así que puedes preguntarme :) y varias opciones para cualquier tarea que realices como edición gráfica o de vídeo, programación, música, fotos, compartición P2P, correo electrónico, navegadores web, reproductores de vídeos e incluso numerosos juegos con los que pasar ratos como los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/juegos-incluidos-en-el-entorno-de-escritorio-gnome/&#34;&gt;juegos casuales proporcionados por GNOME&lt;/a&gt;, una &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/&#34;&gt;colección de 22 buenos juegos de diferentes géneros&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/jugar-a-videojuegos-clasicos-y-miticos-de-arcade-con-mame-en-gnu-linux/&#34;&gt;juegos clásicos y míticos de arcade con Mame&lt;/a&gt; o &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/varios-juegos-de-culto-con-scummvm-en-gnu-linux/&#34;&gt;juegos de culto con ScummVM&lt;/a&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/</id>
        <title>Añadir botones selectores de opciones a select múltiple de bootsrap-select</title>        
        <updated>2016-10-26T14:30:00+02:00</updated>
        <published>2016-10-25T15:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La librería &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; nos permite crear elementos &lt;em&gt;select&lt;/em&gt; enriquecidos con más funcionalidades que las propias ofrecidas por el navegador para seleccionar una única opción o para seleccionar múltiples opciones. Usando esta librería y añadiendo algunos atributos a las etiquetas HTML &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;optgroup&lt;/em&gt; y &lt;em&gt;option&lt;/em&gt; añadirá varias funcionalidades interesantes como comento en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/&#34;&gt;Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una de las opciones que añade es poniendo en la etiqueta &lt;em&gt;select&lt;/em&gt; el atributo &lt;em&gt;data-actions-box&lt;/em&gt; son dos botones para seleccionar todas las opciones o para deseleccionar todas las opciones.&lt;/p&gt;

&lt;p&gt;Este es el aspecto de un elemento de selección con los botones de seleccionar todas las opciones y ninguna que son muy útiles para el usuario evitándose seleccionar una a una cada una de las opciones.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-todos.png&#34; title=&#34;Multiselect con opciones Todos y Ninguno&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-todos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect.png&#34; title=&#34;Opciones seleccionadas de Multiselect&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;MultiSelect con opciones Todos y Ninguno&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;A pesar de todas las opciones adicionales que añade &lt;em&gt;bootstrap-select&lt;/em&gt; incluidas los botones de seleccionar todas las opciones y ninguna aún quizá queramos personalizar más el comportamiento, por ejemplo, permitir seleccionar con botones adicionales un grupo de opciones relacionadas. Supongamos que tenemos un componente de selección múltiple de países y queremos seleccionar los países de Europa, América o Asia además de las opciones que &lt;em&gt;bootstrap-select&lt;/em&gt; de todos y ninguno.&lt;/p&gt;

&lt;p&gt;Un atributo que usa &lt;em&gt;bootstrap-select&lt;/em&gt; para la opción de filtrado es el atributo &lt;em&gt;data-tokens&lt;/em&gt;, si el valor introducido en el filtro coincide con este atributo la opción se muestra y en las que no coincide se oculta. Para no añadir más atributos usaré este atributo para asociar a la opción a los grupos que pertenecen o los &lt;em&gt;tokens&lt;/em&gt; que tiene asociados. Dada una serie de &lt;em&gt;tokens&lt;/em&gt; para los que queremos botón de filtrado en el atributo &lt;em&gt;data-tokens-selectors&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este sería un ejemplo de código JavaScript junto con el uso del componente de Tapestry en la aplicación que podríamos emplear para añadir al elemento selector este comportamiento de selección de grupos de opciones que básicamente añade de forma dinámica un pequeño trozo de HTML similar al que el componente utiliza para mostrar los botones de todos y ninguno. Cuando se haga clic en un botón de selección con el evento &lt;em&gt;loaded.bs.select&lt;/em&gt; se buscan las opciones que contiene el &lt;em&gt;token&lt;/em&gt; asociado al botón y se seleccionan teniendo en cuenta también las opciones que estén deshabilitadas. Además, cuando todas las opciones de un botón selector están seleccionadas queda como pulsado como indicativo, lógica que se realiza en el evento &lt;em&gt;change&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=multiselect.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=Index.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;Y este sería el aspecto de componente en el navegador.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-europa.png&#34; title=&#34;Multiselect con opciones Europa&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-europa-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-asia.png&#34; title=&#34;Multiselect con opciones Asia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/189/multiselect-asia-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;MultiSelect con opciones Europa, America y Asia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si usásemos el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/&#34;&gt;componente de selección múltiple con Apache Tapetstry y bootstrap-select&lt;/a&gt; sería el propio componente &lt;em&gt;MultiSelect&lt;/em&gt; el que se encargaría de incluir el JavaScript en la página cuando en ella se usase lo que nos evita incluir el JavaScript de forma global en la aplicación y en todas las páginas cuando realmente no se usa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=MultiSelect.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/</id>
        <title>Componente select múltiple en Apache Tapestry</title>        
        <updated>2016-10-25T13:45:00+02:00</updated>
        <published>2016-10-25T13:45:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El &lt;em&gt;framework&lt;/em&gt; basado en componentes Apache Tapestry incorpora una amplia &lt;a href=&#34;http://tapestry.apache.org/component-reference.html&#34;&gt;colección de componentes&lt;/a&gt; que nos bastarán en la mayoría de casos que necesitemos. Para los casos en que deseemos un componente con un comportamiento específico podemos construir uno completamente nuevo basado en otros existentes incluyendo los propios nuestros, de una librería o incluidos en Tapestry.&lt;/p&gt;

&lt;p&gt;En Tapestry hay múltiples componentes con los que construir formularios para que el usuario pueda introducir datos, ser enviados por el navegador y procesados en el servidor. Hay componentes de formulario desde &lt;em&gt;checkboxes&lt;/em&gt;, &lt;em&gt;radios&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;inputs&lt;/em&gt;, &amp;hellip; con soporte para &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; 5.&lt;/p&gt;

&lt;p&gt;Observando en detalle la lista de componentes ofrecidos nos daremos cuenta de que está un componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt; pero que solo se puede utilizar para que el usuario seleccione una única opción, sin embargo, en el estándar de HTML los campos de selección pueden utilizarse para seleccionar múltiples opciones. Como se no ofrece un componente &lt;em&gt;select&lt;/em&gt; para seleccionar múltiples opciones a la vez si lo necesitamos deberemos implementar uno que nos ofrezca esta funcionalidad. Con el codigo fuente de Tapestry la tarea es mucho más sencilla y prácticamente es copiar y pegar, el código completo del componente &lt;em&gt;MultiSelect&lt;/em&gt; será lo que muestre a continuación.&lt;/p&gt;

&lt;p&gt;Todo componente de formulario en este &lt;em&gt;framework&lt;/em&gt; hereda de &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html&#34;&gt;AbstracField&lt;/a&gt; en el que básicamente deberemos proporcionar una implementación del método &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html#processSubmission(java.lang.String)&#34;&gt;processSubmission()&lt;/a&gt; donde procesaremos los datos recibidos en este caso con un método equivalente al tradicional en Java EE &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterValues-java.lang.String-&#34;&gt;ServletRequest.getParameterValues&lt;/a&gt;. La otra parte que deberemos implementar es la generación de etiquetas HTML del componente en el método de ciclo de vida &lt;em&gt;beginRender()&lt;/em&gt; que en gran parte nos servirá lo implementado en el código fuente del componente &lt;em&gt;Select&lt;/em&gt; de Tapestry pero incluyendo el atributo &lt;em&gt;multiple&lt;/em&gt; que requiere HTML para los &lt;em&gt;selects&lt;/em&gt; de múltiples opciones.&lt;/p&gt;

&lt;p&gt;Esta sería una implementación de un componente &lt;em&gt;select&lt;/em&gt; múltiple. La mayor diferencia entre el componente &lt;em&gt;Select&lt;/em&gt; y este &lt;em&gt;MultiSelect&lt;/em&gt; está en la propiedad &lt;em&gt;value&lt;/em&gt; que en el primero es de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&#34;&gt;Object&lt;/a&gt; donde se guardará el dato seleccionado y &lt;em&gt;selected&lt;/em&gt; en el segundo que es un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&#34;&gt;List&lt;/a&gt; de objetos donde se guardarán los datos seleccionados.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=MultiSelect.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Esta implementación del componente no necesita de una plantilla &lt;em&gt;tml&lt;/em&gt; sino que todo el HTML se generará desde el código Java. El componente soporta parámetros informales como indicamos con la anotación &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/annotations/SupportsInformalParameters.html&#34;&gt;@SupportsInformalParameters&lt;/a&gt; que son parámetros que se añadirán a la etiqueta &lt;em&gt;select&lt;/em&gt; incluidos tal cual se indican en su uso que por ejemplo podemos utilizar para variar el número de opciones visibles, personalizar los textos y otras funcionalidades de &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código HTML generado por el componente es el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este sería el aspecto del &lt;em&gt;select&lt;/em&gt; múltiple con sus botones para seleccionar todas las opciones y deseleccionar todas, además de personalizados los textos y una pequeña flecha en el desplegable hacia el componente &lt;em&gt;select&lt;/em&gt;, todo esto configurado principalmente a través de atributos &lt;em&gt;data&lt;/em&gt; y clases &lt;abbr title=&#34;Cascading Stylesheets&#34;&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/multiselect.png&#34; title=&#34;Aspecto del componente select mútiple&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/multiselect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/multiselect-2.png&#34; title=&#34;Vista con opciones seleccionadas enviadas al servidor&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/multiselect-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componente MultiSelect con bootstrap-select&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si queremos seleccionar múltiples opciones usando &lt;em&gt;checkboxes&lt;/em&gt; Tapestry ofrece el componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Checklist.html&#34;&gt;Checklist&lt;/a&gt; y usando &lt;em&gt;selects&lt;/em&gt; otra opción es el componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Palette.html&#34;&gt;Palette&lt;/a&gt; pero seguramente no sea lo que deseamos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/checklist.png&#34; title=&#34;Componente Checklist de Tapestry&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/checklist-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/palette.png&#34; title=&#34;Componente Palette de Tapestry&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/188/palette-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componentes Checklist y Palette&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En un artículo anterior comenté como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/&#34;&gt;adaptar el componente &lt;em&gt;Select&lt;/em&gt; y este &lt;em&gt;MultiSelect&lt;/em&gt; para añadirle funcionalidades de la librería bootstrap-select&lt;/a&gt; como cuadro de búsqueda, búsqueda por palabras clave, divisores, etc que consiste en añadir a las etiquetas HTML &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;optiongrp&lt;/em&gt; y &lt;em&gt;option&lt;/em&gt; ciertos atributos con sus correspondientes valores con una combinación de parámetros informales y personalización de la clase &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html&#34;&gt;SelectModel&lt;/a&gt;. En el siguiente artículo comentaré como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/&#34;&gt;añadir botones selectores de opciones&lt;/a&gt; además de los que incorpora &lt;em&gt;bootstrap-select&lt;/em&gt; de Todos y Ninguno.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;Bootstrap Select&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/</id>
        <title>Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</title>        
        <updated>2016-10-25T12:30:00+02:00</updated>
        <published>2016-10-15T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El selector de opciones implementado en los navegadores es muy simple pudiendo seleccionar un elemento de una lista, mostrar los elementos agrupados por categorías o seleccionar múltiples elementos pero mostrándolos en formato de una lista en vez de como un desplegable. &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; es una librería que utiliza los estilos de &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; y que añade algunas funcionalidades más a los componentes de selección de opciones de los formularios de una página web.&lt;/p&gt;

&lt;p&gt;Algunas de estas funcionalidades adicionales está explicadas más detalladamente en los &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/examples/&#34;&gt;ejemplos&lt;/a&gt;, que son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuadro de búsqueda&lt;/li&gt;
&lt;li&gt;Búsqueda por palabras clave&lt;/li&gt;
&lt;li&gt;Limitar el número de opciones seleccionables&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción no seleccionada&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción seleccionada (distinto al texto de la opción)&lt;/li&gt;
&lt;li&gt;Texto de opciones seleccionadas personalizado&lt;/li&gt;
&lt;li&gt;Estilos personalizados&lt;/li&gt;
&lt;li&gt;Marca en la opción seleccionada&lt;/li&gt;
&lt;li&gt;Flecha hacia el campo del formulario en el desplegable&lt;/li&gt;
&lt;li&gt;Estilos  personalizados en opciones individuales&lt;/li&gt;
&lt;li&gt;Anchuras personalizables&lt;/li&gt;
&lt;li&gt;Iconos en las opciones&lt;/li&gt;
&lt;li&gt;Contenido personalizado en las opciones&lt;/li&gt;
&lt;li&gt;Subtextos&lt;/li&gt;
&lt;li&gt;Tamaño de menú personalizado&lt;/li&gt;
&lt;li&gt;Opciones de selección y deselección&lt;/li&gt;
&lt;li&gt;Divisores&lt;/li&gt;
&lt;li&gt;Cabecera&lt;/li&gt;
&lt;li&gt;Posición desplegable&lt;/li&gt;
&lt;li&gt;Deshabilitar &lt;em&gt;select&lt;/em&gt;, opción o grupo de opciones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todas estas capacidades de personalización se consiguen bien añadiendo atributos a las etiquetas &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; &lt;em&gt;select&lt;/em&gt; o a las etiquetas &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt; con lo que usar el componente &lt;em&gt;bootstrap-select&lt;/em&gt; consiste básicamente generar el marcado HTML adecuado. Con JavaScript se puede construir el componente donde podemos indicar las mismas &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/options/&#34;&gt;opciones adicionales&lt;/a&gt; que con los atributos &lt;em&gt;data-&lt;/em&gt;, también tiene &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;métodos&lt;/a&gt; para manipular su comportamiento de forma programática como por ejemplo recibir eventos cuando cambia la selección.&lt;/p&gt;

&lt;p&gt;Usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; con su concepto de parámetros informales añadiremos las atributos necesarios en la etiqueta &lt;em&gt;select&lt;/em&gt; y con el modelo de datos proporcionado en &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html&#34;&gt;SelectModel&lt;/a&gt;, &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionGroupModel.html&#34;&gt;OptionGroupModel&lt;/a&gt; y &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionModel.html&#34;&gt;OptionModel&lt;/a&gt; podremos proporcionar los atributos adicionales para las etiquetas de los &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt;. El modelo de datos de una etiqueta &lt;em&gt;select&lt;/em&gt; es una lista de opciones y grupos de opciones, cada opción tiene una etiqueta que se le mostrará al usuario, si está habilitada o no, el valor que se enviará al servidor cuando esté seleccionada y un mapa de atributos a añadir en la etiqueta de la opción.&lt;/p&gt;

&lt;p&gt;Este sería el código para crear una instancia de &lt;em&gt;SelectModel&lt;/em&gt; para un componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt; de Tapestry para un ficticio selector de país. En el ejemplo en vez de usar un mapa vacío con &lt;em&gt;Collections.EMPTY_MAP&lt;/em&gt; se podría sustituir por un mapa con atributos que se añadirían a la opción para usar alguna otra funcionalidad de &lt;em&gt;bootstrap-select&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionGroupModel.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionModel.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-1.png&#34; title=&#34;Componente selector con bootstrap-select&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-2.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componente selector con bootstrap-select&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Al ser enviado el formulario que contiene el &lt;em&gt;select&lt;/em&gt; el valor seleccionado los tendremos en la propiedad que hayamos indicado en el parámetro &lt;em&gt;value&lt;/em&gt; del componente &lt;em&gt;Select&lt;/em&gt;, este caso en la propiedad &lt;em&gt;pais&lt;/em&gt; de la clase &lt;em&gt;Index&lt;/em&gt; que representa la página.&lt;/p&gt;

&lt;p&gt;En la clase &lt;em&gt;PlugInStack&lt;/em&gt; hay que especificar los recursos CSS y de JavaScript necesarios para usar &lt;em&gt;bootstrap-select&lt;/em&gt;, además de iniciarlizar los selectores con JavaScript.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=PlugInStack.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=index.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/&#34;&gt;Componente select múltiple en Apache Tapestry&lt;/a&gt; explico como crear un &lt;em&gt;select&lt;/em&gt; múltiple que por defecto no incluye Tapestry pero el estandar HTML soporta y en algún caso nos será necesario y en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/&#34;&gt;añadir botones selectores de opciones&lt;/a&gt; como incluir selectores adicionales además de Todos y Ninguno.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;Bootstrap Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/examples/&#34;&gt;Bootstrap Select Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;Bootstrap Select Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/sobre-el-rapido-avance-de-la-tecnologia/</id>
        <title>Sobre el rápido avance de la tecnología</title>        
        <updated>2016-10-14T22:00:00+02:00</updated>
        <published>2016-10-12T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/sobre-el-rapido-avance-de-la-tecnologia/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La tecnología en un periodo tan corto como un año avanza significativamente, una buena decisión es comprar un producto cuando realmente lo necesitemos o suponga una mejora notable en las posibilidades que nos ofrece respecto a lo que ya poseemos.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;El mundo de la tecnología avanza muy rápido, las mejoras son constantes y en el tiempo de pocos meses o un año los dispositivos son notablemente más capaces generalmente manteniendo o incluso a un pequeño menor precio. Los procesadores, las tarjetas gráficas, la cantidad de memoria RAM, la capacidad de los discos duros, los discos de estado sólido es raro que cada año no tengan nuevas generaciones que prometen más rendimiento en los ordenadores personales. Más recientemente los teléfonos inteligentes con una cantidad de memoria RAM mayor que no hace tanto tenían los ordenadores personales, quizá en no mucho tiempo puedan sustituir en muchas tareas para la mayoría de usuarios a los PC con &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/la-siguiente-disrupcion-tecnologica-la-convergencia/&#34;&gt;la convergencia que baticino será la siguiente disrupción tecnológica&lt;/a&gt;, los televisores con capacidad de obtener contenidos de internet y que próximamente veremos con una resolución 4K y en un futuro con 8K cuando aún algunas cadenas de televisión no emiten aún ni en verdadera resolución 1080p, el ancho de banda de internet que aún no se quien puede necesitar 300 Mbps simétricos en el hogar pero que ya se ofrecen, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Mucha gente cambia de &lt;em&gt;smartphone&lt;/em&gt; pagando un precio considerable entre los 600 y 800 € en la gama alta en el plazo de un año para tener la última edición aún cuando el que tienen les puede servir perfectamente. Muchas empresas dan soporte a sus productos durante muy poco tiempo con lo que impide a sus usuarios instalar las últimas versiones de software como es el caso de &lt;a href=&#34;https://www.android.com/&#34;&gt;Android&lt;/a&gt; y su conocida fragmentación dado que incluso los teléfonos con el sello de &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt; en dos años dejan de tener actualizaciones o en el caso de los controladores en el caso del sistema operativo &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; que no todos funcionan en las nuevas versiones y cierto hardware queda abandonado. Los productos se quedan obsoletos aún cuando siguen siendo perfectamente capaces y aún no siendo lo último siguen siendo útiles. Otro ejemplo se da en los juegos donde muchos de los nuevos títulos tiene unos requisitos que para jugarlos a una calidad gráfica notable requieren de una de las tarjetas gráficas de última generación, penúltima o poco más.&lt;/p&gt;

&lt;p&gt;Lo anterior junto con la enorme cantidad de información o publicidad incitando a comprar hacen que muchas personas gasten su dinero en los nuevos productos. Las empresas de tecnología necesitan que los consumidores compren sus productos, en un exceso de consumismo, que en un periodo de meses o menos de un año quedan superados por nuevos productos más mejores y los predecesores se devalúan al mismo tiempo y así se continua este ciclo vicioso. Al menos en cuanto tecnología considero que hay que comprar algo cuando realmente nos vaya a ser útil ni antes ni mucho más tarde resistiendo el bombardeo de publicidad e información que incita a adquirir la innecesaria cara última novedad, cuando hagamos la compra el producto nos saldrá más barato o será más capaz. Esto tampoco significa que estemos constantemente esperando a un nuevo producto ya que en muchos acaba de salir una novedad y ya se está hablando de su sucesora a un año vista prometiendo mejoras.&lt;/p&gt;

&lt;p&gt;Hoy en día hay personas que siguen divirtiéndose con sus consolas de varias décadas o con &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/jugar-a-videojuegos-clasicos-y-miticos-de-arcade-con-mame-en-gnu-linux/&#34;&gt;emuladores y juegos míticos&lt;/a&gt; que en cuanto a jugabilidad y ratos entretenidos no tienen nada que envidiar a algunos de los títulos y consolas actuales. También hay personas que con equipos antiguos o limitados como una &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; y sus conocimientos son capaces de realizar proyectos interesantes.&lt;/p&gt;

&lt;p&gt;Tener lo último en tecnología es efímero, nada que no sepa alguien con cierta edad, además de innecesario, exprime la mayor utilidad de lo que tengas, compra solo cuando sea necesario o la mejora sea realmente notable y no por capricho.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/</id>
        <title>Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot</title>        
        <updated>2016-10-08T00:30:00+02:00</updated>
        <published>2016-10-07T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;OAuth es un protocolo usado para permitir a una aplicación acceder a los recursos de un usuario sin que este proporcione a la aplicación cliente sus credenciales y manteniendo el control de revocar los permisos concedidos. Es ampliamente usado por los servicios de redes sociales de las empresas más conocidas, también lo podemos usar en nuestras aplicaciones. En el ejemplo usaré Keycloak y una aplicación Java con Spring Boot, Apache Shiro y Apache Tapestry.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El protocolo &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; permite a una aplicación cliente acceder a los recursos de un usuario almacenados en otra aplicación sin que el usuario proporcione a la aplicación cliente sus credenciales, además el usuario tiene la capacidad de revocar en caulquier momento los permisos concedidos a la aplicación cliente. El protocolo OAuth es ampliamente usado por empresas como &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.facebook.com/&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; en sus aplicaciones y servicios. También aplicando una arquitectura de microservicios, al dividir una aplicación en varios módulos o simplemente varias aplicaciones independientes pero que son usadas al mismo tiempo por el mismo usuario para evitar que el usuario se autentique en cada aplicación individualmente y que cada aplicación implemente la funcionalidad de autenticación podemos centralizarla usando OAuth a modo de autenticación única o &lt;a href=&#34;https://es.wikipedia.org/wiki/Single_Sign-On&#34;&gt;&lt;abbr title=&#34;Single Sign-On&#34;&gt;SSO&lt;/abbr&gt;&lt;/a&gt;. Usando &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; como servidor de OAuth podemos integrarlo en una aplicación Java que use &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt; para la autorización, &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; para iniciar la aplicación y &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; como &lt;em&gt;framework&lt;/em&gt; web.&lt;/p&gt;

&lt;p&gt;En el protocolo OAuth se diferencia las aplicaciones cliente que son capaces de mantener seguras sus credenciales como es el caso de una aplicación web ejecutada en el servidor o las aplicaciones que no son capaces de mantener sus credenciales seguras como es el caso de una aplicación cliente ejecutada en el navegador o en algunos casos nativa en el móvil. Independientemente de la aplicación cliente o de los &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#page-8&#34;&gt;varios flujos de autenticación&lt;/a&gt; el acceso a los recursos del usuario se hace mediante la obtención de un &lt;em&gt;token&lt;/em&gt; que es una cadena de caracteres opaca de cierta longitud pero que descifrada contiene información del usuario autenticado también está firmada digitalmente por el servidor de OAuth para evitar alteraciones. El protocolo define varios flujos para obtener un &lt;em&gt;token&lt;/em&gt;, obtenido el &lt;em&gt;token&lt;/em&gt; con cualquiera de ellos el acceso a los recursos es indiferente del flujo que haya sido empleado.&lt;/p&gt;

&lt;p&gt;En una aplicación segura con el &lt;em&gt;grant&lt;/em&gt; de tipo &lt;em&gt;authorization code&lt;/em&gt; los pasos que se siguen son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El servidor redirige al usuario al servidor de OAuth cuando intenta acceder a una URL protegida.&lt;/li&gt;
&lt;li&gt;El usuario introduce sus credenciales en una página de inicio de sesión proporcionada por el servidor OAuth, normalmente un usuario y contraseña.&lt;/li&gt;
&lt;li&gt;El servidor OAuth envía al navegador una redirección hacia la aplicación proporcionado un código de autorización en la URL que puede intercambiarse por un &lt;em&gt;token&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El navegador con la redirección envía el código de autorización al servidor, el servidor obtiene de la URL, obtiene el código de autorización y lo usa para intercambiarlo por un &lt;em&gt;token&lt;/em&gt; del servidor OAuth proporcionado además las credenciales del cliente.&lt;/li&gt;
&lt;li&gt;Obtenido el &lt;em&gt;token&lt;/em&gt; con los permisos adecuados la aplicación ya puede permitir acceso o acceder a los recursos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener el &lt;em&gt;token&lt;/em&gt; el servidor mantiene seguras sus credenciales como cliente OAuth. Nótese también que con el &lt;em&gt;token&lt;/em&gt; el servidor (cliente OAuth) no necesita comunicarse con el servidor OAuth para validar el &lt;em&gt;token&lt;/em&gt; ya que está firmado digitalmente, cifrado y tiene concecido un periodo de validadez.&lt;/p&gt;

&lt;p&gt;Un cliente se considera inseguro si la aplicación cliente no puede mantener seguras sus credenciales, si las credenciales de la aplicación están en el navegador o en una aplicación nativa del móvil se considera que las credenciales podrían obtenerse. En una aplicación web en un servidor las credenciales de la aplicación se mantienen seguras en el servidor.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo muestra como autenticar con Keycloak como proveedor de OAuth una aplicación Java que usa Shiro para la autorización, Spring Boot y el &lt;em&gt;framework&lt;/em&gt; web Apache Tapestry. OAuth y Keycloak también puede usarse para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;securizar con OAuth un servicio REST con JAX-RS&lt;/a&gt; y crear un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente Java para acceder al servicio REST securizado con OAuth&lt;/a&gt; emplenado el flujo &lt;em&gt;client credentials&lt;/em&gt;. Lo mostrado en este artículo solo es una pequeña parte de las opciones y posibilidades que ofrece Keycloak, en las capturas de pantalla mostradas hay muchas pestañas, opciones y campos con funcionalidades adicionales.&lt;/p&gt;

&lt;p&gt;Iniciar el servidor OAuth de Keycloak usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; es muy sencillo con el siguiente comando y archivo de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, en el primer acceso se nos solicitará una clave y contraseña de administración:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para el ejemplo crearé un nuevo &lt;em&gt;realm&lt;/em&gt; que contendrá los usuarios y en el que registraremos la aplicación cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-realm.png&#34; title=&#34;Keycloak realm&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-realm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client.png&#34; title=&#34;Keycloak client&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-roles.png&#34; title=&#34;Keycloak client roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-roles.png&#34; title=&#34;Keycloak roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users.png&#34; title=&#34;Keycloak users&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-role-mappings.png&#34; title=&#34;Keycloak users role mappings&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-role-mappings-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Usando uno de los &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/overview/supported-platforms.html&#34;&gt;adaptadores proporcionados por Keycloak&lt;/a&gt; para la integración en servidores y aplicaciones su uso no es complicado, en este caso usaré el adaptador para Spring Boot. Usándolo básicamente deberemos proporcionar en la configuración las credenciales de la aplicación cliente que hemos registrado previamente en Keycloak. Además indicaremos que URLs de la aplicación requiere autenticación y que roles han de poseer los usuarios autenticados. Al acceder a estas URLs el adaptador de Keycloak redirigirá al servidor para que el usuario se autentique, una vez autenticado se redirigirá a la aplicación de nuevo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=application.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Autenticado el usuario podemos obtener la instancia de &lt;a href=&#34;http://www.keycloak.org/docs/javadocs/org/keycloak/representations/AccessToken.html&#34;&gt;AccessToken&lt;/a&gt; que representa el &lt;em&gt;token&lt;/em&gt; de OAuth, para la autorización podemos usar Apache Shiro y para ellos deberemos implementar un Realm de tipo &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html&#34;&gt;AuthorizingRealm&lt;/a&gt;. Tiene dos métodos que deberemos implementar &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthenticatingRealm.html#doGetAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-&#34;&gt;doGetAuthenticationInfo&lt;/a&gt; y &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html#doGetAuthorizationInfo-org.apache.shiro.subject.PrincipalCollection-&#34;&gt;doGetAuthorizationInfo&lt;/a&gt;, el primero lo usaremos para autenticar al usuario que en este caso teniendo el &lt;em&gt;AccessToken&lt;/em&gt; ya estará autenticado con Keycloak y el segundo método nos permitirá obtener los roles y permisos asociados al usuario que podríamos obtenerlos de una base de datos relacional, en el ejemplo los roles también se obtienen del token. Con un filtro realizaremos el inicio de sesión de forma programática del usuario representado por el &lt;em&gt;AccessToken&lt;/em&gt; cuando esté presente en la petición.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=KeycloakFilter.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=AppRealm.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Apache Tapestry el filtro se registra en el módulo de la aplicación y con Shiro podemos realizar la autorización necesaria en las páginas u acciones de la aplicación usando anotaciones. En este caso una página pública que no requiere estar autenticado, una página accesible por un usuario autenticado y con rol &lt;em&gt;user&lt;/em&gt; y finalmente una página de administración que requiere rol &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como la página de inicio no requiere autenticación es accesible por cualquier usuario. Al navegar a la página de usuario o administrador se iniciará el proceso de autenticación primeramente redirigiéndonos al servidor Keycloak para que introduzcamos las credenciales.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-index.png&#34; title=&#34;Index&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-index-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-keycloak-login.png&#34; title=&#34;Login&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-user.png&#34; title=&#34;User&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-user-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si intentamos acceder a la página de usuario o administrador sin estar autenticados se nos mostrará la página de error 403 y al acceder a la página de administración con un usuario sin rol &lt;em&gt;admin&lt;/em&gt; se nos mostrará la página de error 401.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-error403.png&#34; title=&#34;Error 403&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-error403-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Este artículo solo es introductorio a las posibilidades de OAuth y Keycloak, entre otras posibilidades que ofrece Keycloak creo que está permitir registrarse a los usuarios o personalizar los estilos y páginas de autenticación.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Keycloak&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oauth.net/getting-started/&#34;&gt;OAuth Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oauth.net/documentation/&#34;&gt;OAuth Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z-sUzl9eG6M&#34;&gt;Keycloak Basics Tutorial Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CXDrGJoCVhc&#34;&gt;Keycloak Basics Tutorial Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B-qIkB9lsLs&#34;&gt;Keycloak Demo Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QgWgUg5F_JQ&#34;&gt;Keycloak Demo Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/</id>
        <title>Generación de código en tiempo de ejecución con Byte Buddy</title>        
        <updated>2016-10-07T09:15:00+02:00</updated>
        <published>2016-10-02T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El tipado seguro y el sistema de tipos es sin duda una de las características más importante del lenguaje de programación Java que han contribuido a su éxito. Cuando no conocemos los tipos en tiempo de compilación el sistema de tipos es una limitación donde los lenguajes dinámicos son capaces de resolver el problema sin necesidad de los tipos pero perdiendo la ayuda del compilador. Usando una librería de generación de código en tiempo de compilación o ejecución tenemos la posibilidad en Java de realizar algunas tareas que los lenguajes dinámicos permiten.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/bytebuddy.png&#34; class=&#34;right&#34; alt=&#34;Byte Buddy&#34; title=&#34;Byte Buddy&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java posee un sistema de tipos estricto con el que detectar errores de compilación y hace que el código sea más legible, con un &lt;abbr title=&#34;Integrated Development Environment&#34;&gt;IDE&lt;/abbr&gt; los errores de compilación los detectaremos inmediatamente según escribimos código. Este sistema de tipos estricto es deseable en aplicaciones de negocio y empresariales ya que ayuda a que las aplicaciones tengan menos errores o errores de compilación pasen inadvertidos y ser descubiertos incluso semanas después de haber sido desplegados en producción. Su sistema de tipos es uno de los responsables del éxito de Java. Sin embargo, el sistema de tipos estricto impone restricciones en otro tipo de ámbitos como en una biblioteca de propósito general ya que no se conocerán los tipos en tiempo de compilación y no podrán por tanto ser referenciados o alternativamente hayan ser definidos como interfaces o clases abstractas que posteriormente son implementadas o extendidas.&lt;/p&gt;

&lt;p&gt;Para acceder a propiedades e invocar métodos de tipos desconocidos en tiempo de compilación en Java disponemos de la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&#34;&gt;reflection API&lt;/a&gt; o API de introspección aunque tiene los siguientes inconvenientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es lenta: más que la invocación directa de un método. La API de introspección usa &lt;abbr title=&#34;Java Native Interface&#34;&gt;JNI&lt;/abbr&gt; y requiere hacer un análisis del objeto costosa para invocar el método del objeto.&lt;/li&gt;
&lt;li&gt;Inutiliza el tipado seguro: la API de introspección no es &lt;em&gt;type-safe&lt;/em&gt;. La comprobación de los tipos de los argumentos en la invocación de un método es retrasada hasta el momento de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando la  API de introspección perdemos una de las grandes características de Java, el tipado seguro, adicionalmente el rendimiento será menor. Conocidas estas limitaciones hay varias librerías que las palían generando código en tiempo de ejecución, algunas de las más conocidas son &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&#34;&gt;Java Proxy&lt;/a&gt; que está incluida en el propio JDK, &lt;a href=&#34;https://github.com/cglib/cglib&#34;&gt;cglib&lt;/a&gt;, &lt;a href=&#34;https://jboss-javassist.github.io/javassist/&#34;&gt;Javassists&lt;/a&gt; o &lt;a href=&#34;http://asm.ow2.org/index.html&#34;&gt;ASM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leyendo uno de los artículos de la publicación gratuita &lt;a href=&#34;http://www.oracle.com/technetwork/java/javamagazine/index.html&#34;&gt;Java Magazine&lt;/a&gt; de &lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Nov/Dic 2015&lt;/a&gt; conocí otra alternativa llamada &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt; con la que al contrario de otras posibilidades no estamos limitados a generar clases que implementen interfaces conocidas (como en Java proxies), tiene un mantenimiento activo y soporta las nuevas características de las últimas versiones del lenguaje (al contrario de cglib), no está tan limitada (como Javassists) y no hay que tener conocimientos de &lt;em&gt;byte code&lt;/em&gt; (como con ASM).&lt;/p&gt;

&lt;p&gt;La generación de código se ha vuelto ubicua en muchas de las librerías más populares de Java y se usa profusamente en &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;http://hibernate.org/&#34;&gt;Hibernate&lt;/a&gt; o &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; para aplicar seguridad, gestión de transacciones, mapeo modelo relacional-objeto o pruebas unitarias o de integración (&lt;em&gt;mocking&lt;/em&gt;, &amp;hellip;) y de manera similar a lo ofrecido por los &lt;a href=&#34;http://groovy-lang.org/metaprogramming.html&#34;&gt;&lt;abbr title=&#34;Abstract Syntax Tree&#34;&gt;AST&lt;/abbr&gt;&lt;/a&gt; de &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt;. Permite emular algunas propiedades que solo están accesibles al programar con lenguajes dinámicos sin perder las comprobaciones de tipos. Las clases generadas por Byte Buddy no se distinguen de las clases generadas por el compilador.&lt;/p&gt;

&lt;p&gt;Un ejemplo sencillo de la definición de una nueva clase en tiempo de ejecución con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toString--&#34;&gt;String.toString&lt;/a&gt; que devuelve un valor fijo sería la siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con los métodos &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#saveIn-java.io.File-&#34;&gt;saveIn&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#inject-java.io.File-&#34;&gt;inject&lt;/a&gt; y &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#toJar-java.io.File-&#34;&gt;toJar&lt;/a&gt; de &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.Unloaded.html&#34;&gt;DynamicType.Unloaded&lt;/a&gt; podemos generar las clases en el momento de construcción de la aplicación previo a que sea desplegada y guardarlas en archivos &lt;em&gt;.class&lt;/em&gt; o en librerías &lt;em&gt;.jar&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando los selectores adecuados como &lt;em&gt;method&lt;/em&gt;, &lt;em&gt;field&lt;/em&gt;, &lt;em&gt;constructor&lt;/em&gt;, &lt;em&gt;named&lt;/em&gt; entre muchos otros de la clase &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/matcher/ElementMatchers.html&#34;&gt;ElementMatchers&lt;/a&gt; seremos capaces de interceptar las llamadas a los métodos y establecerles el comportamiento que deseemos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-3.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Foo.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Byte Buddy permite tres tipos de extensiones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;subclass&lt;/em&gt;: crea un nuevo tipo subclase de otro.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;redefine&lt;/em&gt;: redefine el comportamiento de un tipo existente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rebase&lt;/em&gt;: redefine el comportamiento de un tipo existente y renombra los métodos redefinidos de modo que siguen estando disponibles internamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devolver valores fijos en un método seguramente no será lo que deseemos en muchos casos pero podemos delegar el comportamiento de un método en otro y esta es una forma muy sencilla de manipular el comportamiento de un método sin conocer absolutamente nada de &lt;em&gt;bytecode&lt;/em&gt; ya que todo el código que proporcionamos es código Java. En el método en que se delega la llamada de uno interceptado es posible usar varias anotaciones para obtener diversos parámetros adicionales, &lt;em&gt;@Argument(n)&lt;/em&gt;, &lt;em&gt;@AllArguments&lt;/em&gt;, &lt;em&gt;@This&lt;/em&gt;, &lt;em&gt;@Super&lt;/em&gt;, &lt;em&gt;@Origin&lt;/em&gt; (Method, Constructor, Executable, Class, MethodHandle, MethodType, String o int), &lt;em&gt;@SuperCall&lt;/em&gt;, &lt;em&gt;@RuntimeType&lt;/em&gt;, &lt;em&gt;@DefaultCall&lt;/em&gt;, &lt;em&gt;@Default&lt;/em&gt;. El &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/implementation/bind/annotation/package-summary.html&#34;&gt;listado completo de anotaciones&lt;/a&gt; está disponible en la API Javadoc.&lt;/p&gt;

&lt;p&gt;Podemos proporcionar implementaciones de métodos de la siguiente forma, suponiendo que queremos redefinir el método &lt;em&gt;hello&lt;/em&gt; de la clase &lt;em&gt;Source&lt;/em&gt; con el comportamiento implementado en la clase &lt;em&gt;Target&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-4.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Source.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Target.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dicho esto, la generación de código en tiempo de ejecución o compilación nos permite nuevas posibilidades que solo ofrecían lenguajes dinámicos o de resolver problemas con &lt;a href=&#34;https://en.wikipedia.org/wiki/Aspect-oriented_programming&#34;&gt;programación orientada a aspectos&lt;/a&gt;. Aún así hay que tener en cuenta que las clases Java son elementos especiales para la la máquina virtual y nunca son recolectadas por el recolector de basura mientras su &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html&#34;&gt;ClassLoader&lt;/a&gt; este en uso por alguna de las clases que hay cargadas en la aplicación.&lt;/p&gt;

&lt;p&gt;Ejecutando esta pequeña aplicación obtenemos el siguiente resultado en la terminal.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el &lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;tutorial de Byte Buddy&lt;/a&gt; encontraremos más información y más detallada de las posibilidades que nos ofrece esta interesante librería en la plataforma &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; para manipular &lt;em&gt;bytecode&lt;/em&gt; y tipos con el lenguaje Java en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoByteBuddy&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;Tutorial de Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Java Magazine Nov/Dic 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/</id>
        <title>Cliente de un servicio REST autenticado con OAuth en Java</title>        
        <updated>2016-10-01T11:00:00+02:00</updated>
        <published>2016-10-01T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Teniendo un servicio REST securizado con OAuth2 al invocarlo deberemos realizar el flujo necesario para obtener un &lt;em&gt;access token&lt;/em&gt; y posteriormente enviarlo al servicio REST como forma de autenticación y autorización. Usando un cliente programado en el lenguaje Java y usando la librería HttpClient podemos hacer las peticiones HTTP necesarias para la invocación del servicio.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Explicaba como llamar a un servicio REST autenticado con OAuth2 en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;. Para ello usaba la utilidad &lt;em&gt;curl&lt;/em&gt; para hacer las peticiones HTTP &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; necesarias tanto para obtener el &lt;em&gt;access token&lt;/em&gt; usando el flujo &lt;em&gt;client_credentials&lt;/em&gt; como para una vez obtenido el &lt;em&gt;access token&lt;/em&gt; llamar al servicio REST. En una aplicación usaremos un lenguaje de programación para llmar al servicio, en este ejemplo mostraré como llamarlo usando un cliente programado en lenguaje Java que hará las mismas peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; pero usando la librería &lt;a href=&#34;https://hc.apache.org/&#34;&gt;HttComponents&lt;/a&gt; en vez de &lt;em&gt;curl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primero añadiremos como dependencia del proyecto la librería HttComponents. Como en las diferentes llamadas el intercambio de datos se realiza mediante el &lt;a href=&#34;http://json.org/&#34;&gt;formato JSON&lt;/a&gt; añadiremos otro par dependencias para procesar los datos en este formato, en este caso usando la API de &lt;a href=&#34;https://jsonp.java.net/&#34;&gt;JSON-P&lt;/a&gt; y una implementación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este sencillo cliente realiza varias peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt;. Una para obtener la configuración de los &lt;em&gt;endpoints&lt;/em&gt;, el que nos interesa es el de obtener un &lt;em&gt;access token&lt;/em&gt;, otra petición para obtener el &lt;em&gt;access token&lt;/em&gt; y finalmente con el &lt;em&gt;access token&lt;/em&gt; invocar al servicio mediante otra petición.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=ClientMain.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciado &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, configurado el &lt;em&gt;realm&lt;/em&gt; y creado un cliente junto con un rol e iniciado el servicio REST podemos ejecutar el cliente que invoque al servicio. El resultado de las trazas que obtendremos en la terminal será el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En las trazas vemos el &lt;em&gt;endpoint&lt;/em&gt; para obtener &lt;em&gt;access token&lt;/em&gt;, el &lt;em&gt;access token&lt;/em&gt; obtenido, &lt;em&gt;refresh token&lt;/em&gt; y tiempos de expiración de los mismos, finalmente los datos devueltos por el servicio. Como se observa los &lt;em&gt;access token&lt;/em&gt; son una cadena opaca bastante larga de caracteres, y es que está cifrada, firmada digitalmente y contiene información como el rol y tiempos de expiración. Enviado el &lt;em&gt;access token&lt;/em&gt; al servicio REST el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/oidc/java/java-adapters.html&#34;&gt;adaptador de Keycloak para Spring Boot&lt;/a&gt; validará la firma digital del &lt;em&gt;token&lt;/em&gt;, descifrará la información, validará su tiempo de expiración y se comprobará si tiene el rol necesario para acceder al &lt;em&gt;endpoint&lt;/em&gt; del servicio REST. Notar que con la información incluida en el token y el hecho de que está firmado digitalmente no es necesario que el servicio REST se comunique con el proveedor de OAuth para hacer la validación.&lt;/p&gt;

&lt;p&gt;El cliente no tiene más salvo que usando la clase &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; y haciendo una petición HTTPS con un certificado autofirmado en el servidor deberemos ignorar las comprobaciones de seguridad. Para ello se usan un &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html&#34;&gt;SSLConnectionSocketFactory&lt;/a&gt; que las ignore.&lt;/p&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/</id>
        <title>Gestionar los enlaces de una bitácora con Hugo</title>        
        <updated>2016-09-30T23:00:00+02:00</updated>
        <published>2016-09-30T23:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Incluir enlaces a otras web u otras páginas o artículos dentro del mismo sitio es el fundamento de internet y como tal es muy común. En el momento que queramos cambiar la URL de un enlace que haya sido incluido múltiples veces en un sitio puede que no nos sea una tarea sencilla, ni para buscarlos o por hacerlo uno a uno. Usando Hugo sigo la forma que explico a continuación para simplificar el sustituir una URL que cambia y para simplificar el hacer referencia e insertar los enlaces.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/hugo.png&#34; class=&#34;right&#34; alt=&#34;Hugo&#34; title=&#34;Hugo&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las tareas más comunes en una página web o en una bitácora es incluir enlaces a otras páginas, el enlace es uno de los elementos básicos que forman la web. Es probable que en muchas páginas o artículos incluyamos repetidamente los mismos enlaces y como resultado tendremos en muchas páginas y artículos los mismos enlaces. El día que unos de esos enlaces cambie de alguna forma su dirección URL deberíamos actualizar todas las páginas o artículos para referenciar la nueva URL y no tener enlaces rotos. Puede no ser una tarea sencilla, más si usamos &lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;, &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; o una herramienta similar. Voy a comentar como he resuelto este posible problema en mi bitácora en la que uso &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hace un par de años cambié &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;de usar Blogger a usar Octopress&lt;/a&gt; y después de un tiempo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;de usar Octopress a usar Hugo&lt;/a&gt;. &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; o &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jeckyll&lt;/a&gt; y Hugo son herramientas muy similares, básicamente los dos son generadores estáticos de páginas web o bitácoras que después de alojan en cualquier servidor web o en servicios como &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para no incluir en las páginas o artículos las mismas URLs una y otra vez tengo un archivo de referencias a enlaces en el que en formato &lt;a href=&#34;http://es.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt; a cada URL le doy un identificativo. Posteriormente hago uso de una facilidad que proporciona Hugo que son los &lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; similares a pequeños contenidos que pueden ser incluídos en los archivos de contenido u otras plantillas, este sería un trozo de un archivo de enlaces:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/133181ba1d0df5c82369026ad1f9e350.js?file=links.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;El día que un enlace cambie basta con que lo modifique en el archivo enlaces sin tener que revisar, buscar, reemplazar y editar los archivos de contenido.&lt;/p&gt;

&lt;p&gt;Esto para los enlaces externos hacia otras páginas pero de forma similar lo aplico a los enlaces internos hacia otras páginas de la bitácora. A cada artículo le asigno un número secuencial según los voy escribiendo y publicando, con esa secuencia creo un identificativo para el artículo y le asocio su URL.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/133181ba1d0df5c82369026ad1f9e350.js?file=postlinks.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con estos archivos usando la &lt;a href=&#34;https://daringfireball.net/projects/markdown/syntax#link&#34;&gt;sintaxis de markdown&lt;/a&gt; con &lt;code&gt;[texto enlace][identificativo-enlace]&lt;/code&gt;, por ejemplo &lt;code&gt;[¡Hola nuevo mundo!][blogbitix-0]&lt;/code&gt;, puedo hacer referencia a los enlaces con su identificativo y al generar el contenido estas referencias será sustituidas por los enlaces referenciados.&lt;/p&gt;

&lt;p&gt;Rastreando la página web o bitácora podremos encontrar y posteriormente corregir los enlaces rotos que encontremos. En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/como-buscar-los-enlaces-rotos-de-un-sitio-web/&#34;&gt;cómo buscar los enlaces rotos de un sitio web&lt;/a&gt; comento varias formas de descubrir estos enlaces que en su momento lo fueron pero han dejado de ser válidos y que proporcionan una mala experiencia al usuario.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;¡Hola nuevo mundo!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/&#34;&gt;Mi experiencia y consejos para un blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;Nuevo diseño en Blog Bitix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/como-buscar-los-enlaces-rotos-de-un-sitio-web/&#34;&gt;Cómo buscar los enlaces rotos de un sitio web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/</id>
        <title>Cómo instalar y probar macOS con VirtualBox en Windows o GNU/Linux</title>        
        <updated>2016-09-25T23:00:00+02:00</updated>
        <published>2016-09-25T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;¿Queres comprar un Mac, tienes dudas o deseas probar su sistema operativo antes? Aunque el rendimiento será menor que una máquina real y la experiencia de usuario será peor, usando un &lt;em&gt;hackintosh&lt;/em&gt; mediante VirtuaBox ya sea con Windows o GNU/Linux podremos probarlo en detalle y hacernos una idea de su funcionamiento.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apple.png&#34; class=&#34;right&#34; alt=&#34;Apple&#34; title=&#34;Apple&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/macos.png&#34; class=&#34;right&#34; alt=&#34;macOS&#34; title=&#34;macOS&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Estaría leyendo alguna noticia, ahora no me acuerdo que me despertaría la curiosidad pero me pregunté si es posible usar de forma virtualizada &lt;a href=&#34;http://www.apple.com/macos/&#34;&gt;macOS&lt;/a&gt; con &lt;a href=&#34;http://virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; tanto en &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; como en &lt;a href=&#34;http://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. Usar lo que se conoce como &lt;em&gt;hackintosh&lt;/em&gt;, esto es &lt;em&gt;hackear&lt;/em&gt; el sistema operativo Macinstosh de los equipos de &lt;a href=&#34;http://www.apple.com/&#34;&gt;Apple&lt;/a&gt; para que se ejecute en cualquier un dispositivo no soportado. En la página web &lt;a href=&#34;http://www.hackintosh.com/&#34;&gt;hackintosh&lt;/a&gt; puede encontrarse información diversa sobre el tema como instrucciones, vídeos, comunidades, &amp;hellip;.&lt;/p&gt;

&lt;p&gt;Es política de Apple que su sistema operativo solo pueda ser ejecutado en sus equipos que los vende de forma conjunta a un notable precio, no se si alguien usa macOS en un sistema no Mac con garantías de que en alguna actualización el sistema deje de funcionar teniendo en cuenta la política de Apple para con sus productos.&lt;/p&gt;

&lt;p&gt;Los pasos para instalar macOS en una máquina virtual con VirtualBox son los siguientes, hay que descargar un &lt;a href=&#34;https://drive.google.com/drive/folders/0B1zbCptv-EMWc0ZfeUFLaldvUm8&#34;&gt;archivo con la imagen del disco duro de macOS&lt;/a&gt; y una vez creada la máquina virtual en VirtualBox ejecutar unos comandos para cambiar algunos parámetros del sistema de arranque EFI. Deberemos descomprimir la imagen del disco duro para obtener el archivo de extensión &lt;em&gt;vmdk&lt;/em&gt; y proceder a crear la máquina virtual. Elegimos crear una máquina virtual de tipo macOS, cambiaremos algunas opciones, asignando unos 2 o 3 GiB de memoria, seleccionaremos el disco duro con la imagen &lt;em&gt;vmdk&lt;/em&gt; descomprimida y cambiaremos la memoria asignada a la pantalla.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-vm.png&#34; title=&#34;Configuración máquina virtual macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-vm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-pantalla.png&#34; title=&#34;Configuración pantalla VirtualBox&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-pantalla-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Configuración de la máquina virtual&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si usamos Windows deberemos ejecutar los siguientes comandos en modo administrador, sustituyendo &lt;em&gt;macOS Sierra 10.12&lt;/em&gt; por el nombre que le hayamos dado a la máquina virtual al crearla:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/588b2cd99be69d340c79cafb55f9b334.js?file=windows.cmd&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el caso de Linux el archivo de comandos es similar e igualmente sustituiremos &lt;em&gt;macOS Sierra 10.12&lt;/em&gt; por el nombre que le hayamos dado a la máquina virtual al crearla:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/588b2cd99be69d340c79cafb55f9b334.js?file=linux.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Hecho estos dos pasos podemos proceder a iniciar la máquina virtual, veremos que empiezan a salir unos cuantos mensajes hasta que se inicia el sistema gráfico con la instalación y su asistente que constará de varios pasos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/1-instalacion-inicio.png&#34; title=&#34;Inicio instalación macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/1-instalacion-inicio-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/2-instalacion-welcome.png&#34; title=&#34;Asistente instalación macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/2-instalacion-welcome-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/3-instalacion-keyboard.png&#34; title=&#34;Teclado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/3-instalacion-keyboard-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/4-instalacion-location.png&#34; title=&#34;Localización&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/4-instalacion-location-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/5-instalacion-transfer.png&#34; title=&#34;Transferencia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/5-instalacion-transfer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/6-instalacion-apple-id.png&#34; title=&#34;Apple ID&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/6-instalacion-apple-id-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/7-instalacion-terms-conditions.png&#34; title=&#34;Términos y condiciones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/7-instalacion-terms-conditions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/8-instalacion-account.png&#34; title=&#34;Cuenta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/8-instalacion-account-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/9-instacion-timezone.png&#34; title=&#34;Zona horaria&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/9-instacion-timezone-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/10-instalacion-diagnostics.png&#34; title=&#34;Diagnósticos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/10-instalacion-diagnostics-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/11-instalacion-siri.png&#34; title=&#34;Siri&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/11-instalacion-siri-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/12-instalacion-setting-up.png&#34; title=&#34;Configurando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/12-instalacion-setting-up-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Terminada la instalación entramos en el escritorio con el aspecto clásico y fondo de pantalla de macOS y las aplicaciones incorporadas en el propio sistema por defecto.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/13-macos-start.png&#34; title=&#34;Inicio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/13-macos-start-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/14-macos-help.png&#34; title=&#34;Ayuda&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/14-macos-help-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/15-macos-overview.png&#34; title=&#34;Resumen&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/15-macos-overview-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/16-macos-finder.png&#34; title=&#34;Finder&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/16-macos-finder-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/17-macos-photos.png&#34; title=&#34;Fotos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/17-macos-photos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/18-macos-preferences.png&#34; title=&#34;Preferencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/18-macos-preferences-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Como partidario del software libre y la privacidad además de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/&#34;&gt;los ínfimos impuestos que paga Apple&lt;/a&gt; usando reprobable ingeniería fiscal y su software privativo no recomiendo usar un Mac pero si alguien quiere probar este sistema operativo antes de decidirse a hacer una compra usarlo de forma virtualizado es una buena ayuda para tomar una decisión y ver si nos gusta su sistema operativo aparte del propio equipo junto con su precio que podemos ver en las tiendas. Si no nos convence ni su software ni su abultado precio podemos optar por un portátil de &lt;a href=&#34;https://slimbook.es/&#34;&gt;Slimbook&lt;/a&gt; mucho más económico y con características notables con los que no tendremos que pagar tampoco el &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/05/impuesto-windows.html&#34;&gt;impuesto Windows&lt;/a&gt; ya que podemos elegir entre varias la distribución GNU/Linux preinstalada que deseamos.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OQ2I4GK&amp;linkId=cb28136e0fe9b53cc2f70659a332a802&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01ET2K6SU&amp;linkId=0e5bd11129416c356bc34a6aefbcfff7&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01EWWHFOU&amp;linkId=a06a014a2d694cd3a57c629904fbba42&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00ULPMPF2&amp;linkId=90349519a4fe5c650bd8ca6d64f05302&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Deberemos tener en cuenta al probar macOS con VirtualBox que el rendimiento de la máquina virtual no será exactamente el mismo que en un equipo real por la sobrecarga impuesta por la virtualización realizada. La experiencia de usuario puede cambiar significativamente junto con el hecho de que los portátiles Mac tiene una pantalla bastante mejor y con más resolución que la mayoría de portátiles diseñados para Windows o GNU/Linux y un SSD de gran rendimiento además de la falta de su &lt;em&gt;touchpad&lt;/em&gt;, todo esto puede marcar alguna diferencia.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wikigain.com/install-macos-sierra-10-12-virtualbox/&#34;&gt;How to Install macOS Sierra 10.12 on VirtualBox?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="apple"/>
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/</id>
        <title>Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</title>        
        <updated>2016-10-07T09:00:00+02:00</updated>
        <published>2016-09-24T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Keycloak es un proveedor de OAuth que podemos usar en nuestras aplicaciones y servicios para proporcionar autenticación, autorización, SSO y también añadir seguridad a los servicios REST que desarrollemos como muestro en este artículo. OAuth tiene varias ventajas sobre usar autenticación &lt;em&gt;Basic&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una forma de autenticar a los clientes de un servicio REST es usar &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;autenticación Basic&lt;/a&gt; que se basa en añadir una cabecera en la petición en la que se incluye un usuario y contraseña. La autenticación Basic es sencilla pero para que sea segura ha de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;usar el protocolo seguro HTTPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, presenta otros inconvenientes y es que si al servicio van a acceder varios clientes y a uno queremos impedirle el acceso no podremos hacerlo sin cambiar el usuario y contraseña lo que obligará al resto de clientes actualizarse para usar las nuevas credenciales si las comparten, que no siempre es posible sobre todo si esos clientes están fuera de nuestro control. Para solventar el segundo problema tenemos la posibilidad de segurizar el servicio REST con el &lt;a href=&#34;https://oauth.net/&#34;&gt;protocolo OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Teniendo un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt; añadirle seguridad con OAuth mediante el proveedor &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; es lo que muestro en este artículo. En el servicio REST bastará que usemos el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/latest/topics/oidc/java/java-adapters.html&#34;&gt;adaptador para Spring Boot de Keycloak&lt;/a&gt; y añadamos en Keycloak cierta configuración que consistirá en un &lt;em&gt;realm&lt;/em&gt; y el registro de un cliente. Para acceder al servicio REST usaremos el flujo &lt;em&gt;client_credentials&lt;/em&gt; que nos permitirá obtener un &lt;em&gt;token&lt;/em&gt; usando las credenciales del cliente.&lt;/p&gt;

&lt;p&gt;Iniciado Keycloak con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; accedemos al panel de administración con el navegador, en mi caso en &lt;em&gt;&lt;a href=&#34;http://localhost:9080&#34;&gt;http://localhost:9080&lt;/a&gt;&lt;/em&gt; con el usuario &lt;em&gt;admin&lt;/em&gt; y contraseña &lt;em&gt;admin&lt;/em&gt; según lo indicado en el archivo &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose-up.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login.png&#34; title=&#34;Inicio de sesión de Keycloak&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Creamos un &lt;em&gt;realm&lt;/em&gt;, en el ejemplo llamado &lt;em&gt;springbootjaxrs&lt;/em&gt; y un cliente con id &lt;em&gt;client&lt;/em&gt;, además crearemos un rol &lt;em&gt;api&lt;/em&gt; y se lo asignaremos al cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client.png&#34; title=&#34;Registro del cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role.png&#34; title=&#34;Creación de rol&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles.png&#34; title=&#34;Asignación de roles al cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Una vez realizada la configuración en el servidor de OAuth/Keycloak obtendremos la configuración para el adaptador de Keycloak para el servicio REST desde la pestaña &lt;em&gt;Installation&lt;/em&gt; que añadiremos en el fichero de configuración de Spring Boot &lt;em&gt;application.yml&lt;/em&gt;. Además, indicaremos que el cliente solo aceptará &lt;em&gt;access tokens&lt;/em&gt; mediante la opción &lt;em&gt;bearer-only&lt;/em&gt; de modo que no hará redirecciones para autenticar.&lt;/p&gt;

&lt;p&gt;Indicaremos también el rol que deberá poseer el cliente para acceder al servicio REST junto que URLs del servicio estarán autenticadas por OAuth. Añadida la configuración al archivo &lt;em&gt;application.yml&lt;/em&gt; el servicio REST es totalmente inconsciente de la autenticación que se realizará con OAuth y Keycloak.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=application.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciado Keycloak y el servicio REST con el comando &lt;code&gt;./gradlew run&lt;/code&gt; podemos iniciar el proceso de obtención de un &lt;em&gt;access token&lt;/em&gt; y llamar al servicio proporcionando el &lt;em&gt;access token&lt;/em&gt; obtenido y ver que pasa si no proporcionamos &lt;em&gt;token&lt;/em&gt; o uno modificado o inválido. Para obtener el &lt;em&gt;access token&lt;/em&gt; podemos emplear &lt;em&gt;curl&lt;/em&gt; accediendo al &lt;em&gt;endpoint&lt;/em&gt; de Keycloak para obtenerlos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-token.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token.png&#34; title=&#34;Obtención de un token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Obtenido el _access token_ si no lo proporcionamos en la llamada al servicio REST observaremos que la respuesta que obtenemos es un [código de estado HTTP 401][wikipedia-http-status-codes] indicando que se necesitan proporcionar las credenciales que con OAuth es un _token_.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-401.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token.png&#34; title=&#34;Llamada al servicio REST sin token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Proporcionando el token mediante una cabecera de la petición el servicio nos devolverá los datos que proporciona. Si el _token_ no es válido obtendremos un error HTTP 401.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath.png&#34; title=&#34;Llamada al servicio REST con token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered.png&#34; title=&#34;Llamada al servicio REST con token inválido&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Para usar Keycloak en una aplicación Java con Spring Boot deberemos añadir algunas dependencias al proyecto que usando [Gradle][gradle] como herramienta de construcción serían las siguientes.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En el siguiente artículo mostraré un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente del servicio REST autenticado con OAuth en Java&lt;/a&gt; que haga las mismas llamadas que con &lt;em&gt;curl&lt;/em&gt; pero usando código Java mediante la librería &lt;a href=&#34;http://hc.apache.org/&#34;&gt;HttpComponents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pivotal.io/pivotal-cloud-foundry/products/securing-restful-web-services-with-oauth2&#34;&gt;Securing RESTful Web Services with OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.apigee.com/api-services/content/oauth-20-client-credentials-grant-type&#34;&gt;Implementing the client credentials grant type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/28658735/what-are-keycloaks-oauth2-openid-connect-endpoints&#34;&gt;What are Keycloak&amp;rsquo;s OAuth2 / OpenID Connect endpoints?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/</id>
        <title>Monitorizar con eventos de Google Analytics una página web</title>        
        <updated>2016-09-19T23:00:00+02:00</updated>
        <published>2016-09-18T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Conociendo cómo usar los eventos de Analytics podemos conocer información interesante acerca de qué forma los usuarios interactúan con nuestra propia página web. Cualquier cosa que podamos realizar con JavaScript o ante cualquier evento que podamos reaccionar podemos medirla con Analytics.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/google-analytics.png&#34; class=&#34;right&#34; alt=&#34;Google Analytics&#34; title=&#34;Google Analytics&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;No se mucho de &lt;a href=&#34;https://www.google.es/intl/es/analytics/&#34;&gt;Google Analytics&lt;/a&gt; únicamente lo que he aprendido aplicándolo en mi propia bitácora. Cuando &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;cambié de herramienta para generar de forma estática la bitácora&lt;/a&gt; pude personalizar en mucha mayor medida que lo que podía primeramente con &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; y después tenía con &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Google Analytics además de proporcionarnos diversa información interesante sobre las visitas que recibimos en una página web puede servirnos para analizar el comportamiento de los usuarios, como interaccionan con la página, qué acciones realizan o que funcionalidades son usadas. La forma con la que podemos agregar información propia de la aplicación o página web es mediante los eventos de Analytics. Después de &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/analyticsjs/&#34;&gt;instalar el &lt;em&gt;script&lt;/em&gt; de Analytics&lt;/a&gt; podemos enviar eventos simplemente con la siguiente linea de código JavaScript.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c66532a6eaab846b579ff55b902e874f.js?file=ad-enter.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;La información del evento de compone de categoría (&lt;em&gt;category&lt;/em&gt;), acción (&lt;em&gt;action&lt;/em&gt;), etiqueta (&lt;em&gt;opt_label&lt;/em&gt;), valor  (&lt;em&gt;opt_value&lt;/em&gt;) y si no supone interacción (&lt;em&gt;opt_noninteraction&lt;/em&gt;). Deberemos proporcionar valores según queramos estructurar los eventos obligatoriamente para categoría y acción siendo el resto opcionales. En mi bitácora uso Analytics para además de visualizar la información que proporciona sobre visitas, ubicación de los usuarios, idioma, plataforma y navegador que usan, páginas más visitadas, origen de las visitas para lanzar unos cuantos eventos que me proporcionen información sobre las pulsaciones que se realizan en el menú de categorías y en los enlaces de redes sociales, en la lista de artículos recientes, artículos destacados y en el &lt;em&gt;widget&lt;/em&gt; de ShareThis y si se hace en el del inicio del artículo o en el del final. En la sección &lt;em&gt;Comportamiento &amp;gt; Eventos&lt;/em&gt; se agrega toda la información de los eventos, además podremos monitorizar en tiempo real los eventos que se estén produciendo en la sección &lt;em&gt;Tiempo real &amp;gt; Eventos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El parámetro _opt&lt;em&gt;noninteraction&lt;/em&gt; afecta al porcentaje de rebote, un evento interactivo se considerará como una acción que ha realizado el usuario después de visitar la página, si ese evento lo consideramos como un objetivo podemos hacer que esa interacción no se considere en el porcentaje de rebote. Por ejemplo, si el usuario permanece en la página 30 segundos podemos lanzar un evento que indique tal circunstancia con un &lt;em&gt;timeout&lt;/em&gt; y esa visita no se considere en el porcentaje de rebote.&lt;/p&gt;

&lt;p&gt;Podemos medir cualquier cosa que deseemos incluso podemos conocer cuantos usuarios usan un bloqueador de anuncios como &lt;a href=&#34;https://adblockplus.org/es/&#34;&gt;AdBlock&lt;/a&gt;. Este es el código JavaScript que uso para conocer cuantos usuarios lo tiene activado o no.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c66532a6eaab846b579ff55b902e874f.js?file=ad-block.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;En la sección &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/analyticsjs/events&#34;&gt;Seguimiento de eventos&lt;/a&gt; de la documetación de Google Analytics y en el resto de secciónes hay más detalles sobre esta herramienta. Para cualquier cosa que podamos reaccionar mediente un evento con JavaScript podemos medirla con Analytics, sirviéndonos para extraer información valiosa sobre los usuarios que nos permitan medir, entender y luego mejorar la experiencia de usuario de nuestra propia página web.&lt;/p&gt;

&lt;p&gt;Como para cualquier otra cosa en la que queramos profundizar una buena forma es con algunos libros específicos dedicados al tema. Los siguientes son dos libros de los &lt;a href=&#34;http://amzn.to/2cH8SXR&#34;&gt;muchos libros sobre Google Analytics&lt;/a&gt; disponibles en &lt;a href=&#34;http://www.amazon.es/&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596158009&amp;linkId=4babfb60d80236251c0ef398bc3ab757&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=148420266X&amp;linkId=c179f357fbd31e18d25e93fd13c9729e&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/</id>
        <title>Ejemplo de API REST en Java con JAX-RS y Spring Boot</title>        
        <updated>2016-09-17T12:00:00+02:00</updated>
        <published>2016-09-17T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/spring.png&#34; class=&#34;right&#34; alt=&#34;Spring Framework&#34; title=&#34;Spring Framework&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En Java a través de JAX-RS, una de entre las varias &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;especificaciones de JavaEE&lt;/a&gt;, podemos desarrollar servicios web basados en &lt;a href=&#34;http://es.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;&lt;abbr title=&#34;Representational State Transfer&#34;&gt;REST&lt;/abbr&gt;&lt;/a&gt; y &lt;a href=&#34;http://json.org/&#34;&gt;&lt;abbr title=&#34;JavaScript Object Notation&#34;&gt;JSON&lt;/abbr&gt;&lt;/a&gt;. Estos servicios web al usar la infraestructura de la web y el protocolo HTTP podemos hacer uso de facilidades que proporciona como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;cacheo&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;protocolo seguro&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;HTTP/2&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/&#34;&gt;compresión&lt;/a&gt; o autenticación. Usando &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; podemos desarrollar servicios web autocontenidos al igual que podemos hacer con las aplicaciones web tradicionales.&lt;/p&gt;

&lt;p&gt;Para facilitar el inicio de los proyectos podemos usar &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; seleccionando los módulos web y JAX-RS con la implementación de referencia &lt;a href=&#34;https://jersey.java.net/&#34;&gt;Jersey&lt;/a&gt;. Al proyecto creado deberemos añadir los servicios que queramos proporcionar. En el ejemplo añadiré uno muy sencillo que devuelva un nuevo mensaje creado en un servicio inyectado en la clase del recurso del servicio REST.&lt;/p&gt;

&lt;p&gt;Esta es la definición del &lt;em&gt;bean&lt;/em&gt; del servicio que creará el mensaje para el contenedor de inversión de control, también definimos el recurso del servicio REST para Jersey.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=JerseyConfig.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El servicio lo definimos en una interfaz y una clase que la implementa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageService.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=DefaultMessageService.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Message.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Es habitual que los servicios REST produzca como resultado un JSON como formato para devolver los datos. No necesitaremos hacer nada especial para convertir el &lt;em&gt;Java Bean&lt;/em&gt; de la clase &lt;em&gt;Message&lt;/em&gt; a JSON, de ello se encargará automáticamente JAX-RS. Con anotaciones como &lt;a href=&#34;http://docs.oracle.com/javaee/7/api/javax/ws/rs/QueryParam.html&#34;&gt;@QueryParam&lt;/a&gt; podemos obtener los parámetros del &lt;em&gt;query string&lt;/em&gt;, de la URL o cabeceras enviadas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciada la aplicación con &lt;code&gt;./gradlew run&lt;/code&gt; y con la siguiente comando de &lt;code&gt;curl&lt;/code&gt; y URL obtendremos el mensaje en formato JSON en la salida.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=curl.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=out.txt&#34;&gt;&lt;/script&gt;

&lt;p&gt;Al diseñar APIs REST más complejas que este sencillo ejemplo conviene conocer el término &lt;a href=&#34;https://en.wikipedia.org/wiki/HATEOAS&#34;&gt;HATEOAS&lt;/a&gt;. Deberemos definir como organizar la información devuelta por los diferentes que los libros &lt;a href=&#34;http://amzn.to/2cxWMRo&#34;&gt;RESTful Web APIs&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2cEzQz5&#34;&gt;REST in Practice&lt;/a&gt; además de &lt;a href=&#34;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;artículos con consejos sobre como diseñar APIs RESTful&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1449358063&amp;linkId=e0cd589f357dfc1c77cfb004e6668fa5&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596805829&amp;linkId=3b1ee2b6ff595b6b3c2fd7c70eb35cc7&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Una vez que disponemos del servicio REST podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;añadir autenticación y autorización con Keycloak como proveedor de OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrs&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;Introducción y nuevas características de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/&#34;&gt;Aplicación de ejemplo usando varias especificaciones de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/buenas-practicas-para-el-diseno-de-una-api-restful-pragmatica/&#34;&gt;Buenas prácticas para el diseño de una API RESTful pragmática&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>