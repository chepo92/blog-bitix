<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-05-13T09:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/</id>
        <title>Descargar e instalar la distribución Ubuntu de GNU/Linux paso a paso desde cero</title>        
        <updated>2017-05-13T09:00:00+02:00</updated>
        <published>2017-05-13T09:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Pasar de usar Windows a usar una distribución GNU/Linux es un paso difícil para muchos usuarios, algunos usuarios desconocen incluso que tienen la posibilidad de usar un sistema operativo alternativo a Windows. O si lo conocen pueden creer erróneamente que instalar una distribución GNU/Linux es muy complicado&amp;hellip; sabiendo algunas casas por lo demás es tan sencillo instalar como el sistema operativo Windows ya que muchas distribuciones incluyen una interfaz gráfica en su instalador y el proceso consiste en responder unas pocas preguntas, introducir algunos datos y pulsar varios botones siguiente.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/ubuntu.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Ubuntu&#34; title=&#34;Ubuntu&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GNU&#34; title=&#34;GNU&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Quizá hayas oído hablar de Linux o &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt; como alternativa al sistema operativo de Microsoft &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; y sientes curiosidad por probarlo y adentrarte con ello en el mundo del software libre. Si estás leyendo esta guía y te es necesaria para instalar una de las muchas distribuciones de GNU/Linux entiendo que necesitas ayuda para saber como instalarlo desde cero, paso a paso y empezando desde lo más básico.&lt;/p&gt;

&lt;p&gt;En GNU/Linux para cada tarea que un usuario quiera realizar hay múltiples opciones entre las que elegir, desde tareas ofimáticas como &lt;a href=&#34;http://www.libreoffice.org/&#34;&gt;LibreOffice&lt;/a&gt;, navegadores web como &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; o &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt;, mensajería instantánea como &lt;a href=&#34;https://wiki.gnome.org/action/show/Apps/Empathy&#34;&gt;Empathy&lt;/a&gt;, correo electrónico como &lt;a href=&#34;https://wiki.gnome.org/Apps/Evolution/&#34;&gt;Evolution&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/es-ES/thunderbird/&#34;&gt;Thunderbird&lt;/a&gt; o &lt;a href=&#34;https://wiki.gnome.org/Apps/Geary&#34;&gt;Geary&lt;/a&gt;, reproductores de música o vídeo como &lt;a href=&#34;https://www.videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;, visor de imágenes y archivos PDF, edición fotográfica como &lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt;, edición de vídeo como &lt;a href=&#34;http://www.openshot.org/&#34;&gt;OpenShot&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/&#34;&gt;algunos juegos destacables&lt;/a&gt;, &amp;hellip; en todos los casos hay un programa de software libre por el que no hay que pagar una licencia ni buscar &lt;em&gt;cracks&lt;/em&gt; para activar el software que son fuente de virus y problemas de seguridad. Y ya desde hace mucho tiempo en GNU/Linux el hardware es reconocido y usable en su mayor parte desde el primer momento incluyendo la tarjeta gráfica, sonido, red, bluetooth, wifi, HDMI, USB, &amp;hellip; aunque alguno puede necesitar instalar sus controladores de dispositivo.&lt;/p&gt;

&lt;p&gt;Debes saber es en GNU/Linux hay muchas versiones o distribuciones, muchas desarrolladas por personas sin ánimo de lucro que se agrupan formando comunidades y otras que tienen el soporte de una empresa pero que a los usuarios les ofrece la distribución sin ningún coste ni necesidad de adquirir licencias. Una distribución está formada por el conjunto de programas de software o paquetes, repositorios de paquetes y gestor de paquetes. Hay muchas distribuciones, y muchas son cientos, pero no más de 10 con una cuota de uso dentro de las distros significativa.&lt;/p&gt;

&lt;p&gt;El paso de Windows a GNU/Linux significa usar un nuevo entorno y es algo que muchos de los usuarios que hoy somos de GNU/Linux hemos dado en algún momento, yo empecé por pasar &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2010/03/de-windows-arch-linux.html&#34;&gt;De Windows a Arch Linux&lt;/a&gt; y aún me mantengo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/08/de-arch-linux-a-arch-linux/&#34;&gt;De Arch Linux a Arch Linux&lt;/a&gt;. GNU/Linux tiene sus puntos fuertes y algunos para los usuarios de escritorio menos fuertes, principalmente debido a no ser el sistema mayoritario los fabricantes tienen más en cuenta a Windows cuando lanzan un nuevo producto, en el caso de los juegos triple AAA o la excesiva fragmentación por la cantidad de opciones. En cualquier caso muchas distribuciones GNU/Linux son tan fáciles de usar como Windows o &lt;a href=&#34;http://www.apple.com/macos/&#34;&gt;macOS&lt;/a&gt; y tan o más capaces que estos.&lt;/p&gt;

&lt;p&gt;Lo primero que debes hacer es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/&#34;&gt;decidir la distribución que quieres instalar&lt;/a&gt;, según tus preferencias y necesidades. Para los usuarios que van a tener su primer contacto con GNU/Linux algunas de las recomendadas son &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; o &lt;a href=&#34;https://elementary.io/es/&#34;&gt;elementaryOS&lt;/a&gt;. En este artículo explicaré como instalar Ubuntu en su versión 16.04 &lt;abbr title=&#34;Long Term Support&#34;&gt;LTS&lt;/abbr&gt;, los pasos son similares para elementaryOS ya que es una distribución que se basa en Ubuntu.&lt;/p&gt;

&lt;p&gt;Las versiones LTS de Ubuntu tienen un soporte de largo plazo de 5 años para corrección de errores y fallos de seguridad y se publican cada dos años siendo la siguiente LTS la 18.04 que se publicará en marzo del año 2018. Salvo que estés afectado por &lt;em&gt;versionitis&lt;/em&gt; y quieras tener las últimas versiones de los programas la versión LTS es más recomendable.&lt;/p&gt;

&lt;h3 id=&#34;requisitos-mínimos&#34;&gt;Requisitos mínimos&lt;/h3&gt;

&lt;p&gt;Los &lt;a href=&#34;https://help.ubuntu.com/community/Installation/SystemRequirements&#34;&gt;requisitos mínimos de Ubuntu&lt;/a&gt; son bastante bajos para cualquier sistema de unos pocos años. Aunque en la memoria es recomendable tener al menos 2 GiB o incluso 4 GiB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procesador de 700 MHz (Intel Celeron o mejor)&lt;/li&gt;
&lt;li&gt;Memoria del sistema 512 MiB RAM&lt;/li&gt;
&lt;li&gt;5 GB de espacio de almacenamiento (o memoria USB, tarjeta de memoria o unidad externa)&lt;/li&gt;
&lt;li&gt;Gráficos con resolución de al menos 1024x768&lt;/li&gt;
&lt;li&gt;Unidad CD/DVD o puerto USB&lt;/li&gt;
&lt;li&gt;Acceso a internet es recomendable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;copia-de-seguridad&#34;&gt;Copia de seguridad&lt;/h3&gt;

&lt;p&gt;Al instalar Ubuntu todos los datos que tuviese el equipo se perderán por lo que si quieres conservarlos debes copiarlos previamente a un disco duro externo o memoria USB de la capacidad que necesiten tus archivos, una vez finalizada la instalación de Ubuntu puedes recuperarlos y copiarlos al equipo de nuevo.&lt;/p&gt;

&lt;h3 id=&#34;descarga-de-ubuntu&#34;&gt;Descarga de Ubuntu&lt;/h3&gt;

&lt;p&gt;Antes de iniciar la instalación hay que descargar la imágen ISO de la versión de Ubuntu que queramos instalar. En la &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;página oficial de Ubuntu&lt;/a&gt; se puede descargar de forma directa con el navegador o vía P2P en la red de compartición de archivos torrent. Ubuntu a su vez proporciona varias versiones de su distribución donde varía el entorno de escritorio que también debes elegir según tus preferencias, hay varias posibilidades &lt;a href=&#34;http://unity.ubuntu.com/&#34;&gt;Unitiy&lt;/a&gt; (que en la versión 18.04 será sustituida por GNOME), &lt;a href=&#34;https://www.gnome.org/&#34;&gt;GNOME&lt;/a&gt; y &lt;a href=&#34;https://www.kde.org/&#34;&gt;KDE&lt;/a&gt; aunque recomiendo una de las dos últimas. Cualquiera de ellas con un aspecto gráfico muy cuidado, intuitivas y fáciles de usar. La opción más similar al entorno de escritorio de Windows es KDE con la que te encontrarás bastante cómodo al usarla si provienes de Windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unity.ubuntu.com/&#34;&gt;Ubuntu Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ubuntugnome.org/&#34;&gt;Ubuntu GNOME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kubuntu.org/&#34;&gt;Ubuntu KDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntu.com/download/ubuntu-flavours&#34;&gt;Más sabores de Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;creación-del-medio-de-instalación&#34;&gt;Creación del medio de instalación&lt;/h3&gt;

&lt;p&gt;Para una mayor velocidad de instalación es mejor usar una memoria USB de al menos 8 GiB de capacidad en vez un CD o DVD que son más lentos y algunos equipos nuevos ya ni siquiera incorporan porque están en desuso con la aparición de las memorias USB. La memoria debe estar vacía ya que se perderán todos sus datos. Con el &lt;a href=&#34;https://rufus.akeo.ie/&#34;&gt;programa Rufus para Windows&lt;/a&gt; seleccionado el archivo de la imagen ISO descargada y la unidad USB se crea el medio de instalación, en la siguiente página está explicado como &lt;a href=&#34;https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows&#34;&gt;crear una memoria USB arrancable en Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hay que conectar una memoria USB, seleccionarla, seleccionar el archivo de la imagen ISO de Ubuntu y pulsar el botón &lt;em&gt;Empezar&lt;/em&gt;, al cabo de unos minutos la memoria estará lista para empezar a instalar Ubuntu.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/rufus.png&#34; title=&#34;Creación de medio de instalación en memoria USB desde Windows&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/rufus-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Creación de medio de instalación en memoria USB dese Windows&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;iniciar-el-sistema-con-el-medio-de-instalación&#34;&gt;Iniciar el sistema con el medio de instalación&lt;/h3&gt;

&lt;p&gt;Con el equipo apagado y la memoria USB contactada hay que iniciar el equipo para que se inicie desde la memoria USB. La forma de hacer que el equipo se inicie desde la memoria USB depende de cual sea el fabricante. Pulsando una tecla dependiendo de caso como F2, F8, F10, F12, ESC u otra se puede entrar en la BIOS o seleccionar el medio de instalación. La BIOS es una zona de configuración donde se modifican algunos parámetros del equipo muy importantes con lo que hay que tener cuidado de que se modifica para evitar comportamientos anómalos, a pesar de todo suele ser bastante intuitiva y si es un equipo reciente incluso con interfaz gráfica.&lt;/p&gt;

&lt;p&gt;Según el fabricante e incluso modelos de la misma fabricante la tecla de acceso para iniciar desde el medio de instalación varía:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acer: F2 o Delete&lt;/li&gt;
&lt;li&gt;Asus: F2 o F10&lt;/li&gt;
&lt;li&gt;Dell: F2, F1, Delete, F12 o F3&lt;/li&gt;
&lt;li&gt;HP: F10 o Esc&lt;/li&gt;
&lt;li&gt;Lenovo: F1 o F2&lt;/li&gt;
&lt;li&gt;Sony: F2, F3, F1 o tecla assist&lt;/li&gt;
&lt;li&gt;Toshiba: F2, F1, Esc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En las siguientes páginas puedes encontrar varias posibles teclas para entrar en la BIOS y cambiar la unidad de inicio del sistema según la marca, &lt;a href=&#34;http://www.makeuseof.com/tag/enter-bios-computer/&#34;&gt;I&lt;/a&gt;, &lt;a href=&#34;https://www.lifewire.com/bios-setup-utility-access-keys-for-major-bios-manufacturers-2624461&#34;&gt;II&lt;/a&gt; y &lt;a href=&#34;https://www.lifewire.com/bios-setup-utility-access-keys-for-popular-computer-systems-2624463&#34;&gt;III&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Puede ser el caso de que cuando se inicia el equipo muestre un mensaje con la tecla que hay que pulsar si hay que probar hasta dar con ella. Después de pulsar la tecla de encendido poco después o según se muestra un logotipo es cuando hay que pulsar la tecla.&lt;/p&gt;

&lt;p&gt;Si tu sistema tiene una BIOS de tipo UEFI, cualquier equipo del último lustro su BIOS será de este tipo, se debe &lt;a href=&#34;https://help.ubuntu.com/community/UEFI&#34;&gt;desactivar la opción llamada &lt;em&gt;Secure Boot&lt;/em&gt;&lt;/a&gt; que utiliza Windows como medida de seguridad pero que no está soportada aún en GNU/Linux.&lt;/p&gt;

&lt;h3 id=&#34;instalación-de-ubuntu&#34;&gt;Instalación de Ubuntu&lt;/h3&gt;

&lt;p&gt;Una vez iniciado el programa que guía en la instalación de Ubuntu hay que responder a algunas preguntas e introducir algunos pocos datos y en cuestión de menos de una hora el equipo ya está listo para empezar a usarse. En el artículo he utilizado la versión 16.04 LTS.&lt;/p&gt;

&lt;p&gt;El asistente de instalación pregunta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El idioma.&lt;/li&gt;
&lt;li&gt;Si se quieren descargar las actualizaciones (recomendable) y software para reproducir mp3, flash así como controladores para la tarjeta gráfica y wifi.&lt;/li&gt;
&lt;li&gt;Borrar el contenido del disco duro y si se quieren cifrar los datos del dispositivo de almacenamiento.&lt;/li&gt;
&lt;li&gt;La clave para cifrar los datos del dispositivo de almacenamiento.&lt;/li&gt;
&lt;li&gt;Una confirmación para proceder a borrar el disco duro e iniciar la instalación.&lt;/li&gt;
&lt;li&gt;La zona horaria del usuario y la disposición del teclado.&lt;/li&gt;
&lt;li&gt;El nombre del equipo, del usuario y la contraseña para iniciar sesión.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los asistentes de instalación utilizan el entorno de escritorio del sabor que se está instalando pero los pasos son similares y piden la misma información.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-01.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-01-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-02.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-02-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-03.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-03-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-04.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-04-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-05.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-05-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-06.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-06-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-07.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-07-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-08.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-08-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-09.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-09-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-10.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-10-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-11.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-11-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-12.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-12-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-13.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-13-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-14.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-14-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-15.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-15-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-16.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-16-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-17.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-17-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-18.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-18-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-19.png&#34; title=&#34;Instalación de Ubuntu&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-19-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-20.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/instalacion-ubuntu-20-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Instalación de Ubuntu&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;usando-ubuntu&#34;&gt;Usando Ubuntu&lt;/h3&gt;

&lt;p&gt;Si se ha elegido cifrar el contenido del dispositivo de almacenamiento al realizar la instalación en el inicio del sistema Ubuntu pregunta por la contraseña para descifrar su contenido.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-01.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio Unity&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-01-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-02.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-02-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-03.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-03-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Ubuntu 16.04 con entorno de escritorio Unity&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-04.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-04-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-05.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-05-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-06.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-06-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Ubuntu 16.04 con entorno de escritorio GNOME&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-07.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio KDE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-07-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-08.png&#34; title=&#34;Ubuntu 16.04 con entorno de escritorio KDE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-08-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Ubuntu 16.04 con entorno de escritorio KDE&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;centro-de-software-y-actualizaciones&#34;&gt;Centro de software y actualizaciones&lt;/h3&gt;

&lt;p&gt;Ubuntu por defecto ya incorpora una buena cantidad de software preinstalado. En cualquier caso con la aplicación &lt;em&gt;Software de Ubuntu&lt;/em&gt; se puede instalar más.&lt;/p&gt;

&lt;p&gt;Al cabo de un tiempo de haber instalado Ubuntu se publicarán actualizaciones del software que tengas instalado con mejoras y correcciones de seguridad que son recomendables instalarlas usando la aplicación &lt;em&gt;Actualizciones de software&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-software.png&#34; title=&#34;Instalar y desinstalar software&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-software-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-actualizaciones.png&#34; title=&#34;Instalar actualizaciones de seguridad y software&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/232/ubuntu-actualizaciones-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Instalar actualizaciones de seguridad y software&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;ayuda&#34;&gt;Ayuda&lt;/h3&gt;

&lt;p&gt;En internet hay cantidad de artículos en blogs o foros con ayuda que puedes encontrar con un buscador web como &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt; o &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;. En ellos seguramente encontrarás una respuesta que te resuelva o ayude en cualquier problema que se te presente o duda que te surja. Y si después de haber buscado no encuentras la solución deja un comentario en este blog e intentaré ayudarte.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/</id>
        <title>Descargar e instalar Windows 10 paso a paso desde cero</title>        
        <updated>2017-05-13T11:35:00+02:00</updated>
        <published>2017-05-09T22:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Un virus, el &lt;em&gt;bloatware&lt;/em&gt; preinstalado en muchos portátiles o tras instalar y desinstalar programas en Windows puede ocasionar que el equipo sea lento, se muestren mensajes de error o un virus cifre los archivos personales. En estos casos una solución habitual sencilla, rápida y fiable de volver a usar con normalidad el equipo es reinstalar Windows 10 desde cero. No es complicado pero para un usuario con pocos conocimientos de informática no es una tarea sencilla. En este artículo explicaré como instalar paso a paso y desde cero el sistema operativo Windows 10.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/microsoft.svg&#34; class=&#34;right&#34; width=&#34;300&#34; alt=&#34;Microsoft&#34; title=&#34;Microsoft&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/windows-10.svg&#34; class=&#34;right&#34; width=&#34;300&#34; alt=&#34;Windows 10&#34; title=&#34;Windows 10&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Prácticamente la totalidad de portátiles que se venden en las grandes superficies comerciales más conocidas están con el sistema operativo Windows preinstalado. Pero los fabricantes con la intención dotar de más capacidades y funcionalidades que las que incorpora &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; instalan numerosos programas que conforman el conocido &lt;em&gt;bloatware&lt;/em&gt; que en muchas ocasiones hacen que un equipo completamente nuevo sea más lento de lo normal al iniciar el sistema, al arrancar programas o trabajar con ellos. Entre los programas que suelen preinstalar los fabricantes están los antivirus que al cabo de un tiempo se desactivan ya que suelen ser versiones de evaluación pudiendo dejar al equipo desprotegido ante virus y software malicioso, Windows 10 ya incorpora uno, Windows Defender, y para la mayoría de usuarios es suficiente por su efectividad aceptable. Otros programas que los fabricantes suelen instalar son reproductores de vídeo o software multimedia en la mayoría de casos innecesario ya que Windows  de por si ya incorpora las capacidades de trabajar con archivos multimedia como fotografías o vídeos. También puede darse el caso que tras una actualización o la instalación de un programa el equipo empiece a presentar fallos.&lt;/p&gt;

&lt;p&gt;En los casos anteriores realizar una reinstalación de Windows desde cero es necesaria. Muchos usuarios no tienen conocimientos avanzados de tecnología o informática y no conocen los pasos para realizar una reinstalación. En este artículo explicaré detalladamente, paso a paso y desde cero cuales son los pasos que hay que realizar para instalar Windows 10.&lt;/p&gt;

&lt;h3 id=&#34;requisitos-mínimos&#34;&gt;Requisitos mínimos&lt;/h3&gt;

&lt;p&gt;Lo primero es conocer que Windows 10 para funcionar correctamente posee unos requisitos mínimos para el equipo en el que vaya a ser instalado, fue comercializado en julio del 2015 y cualquier equipo posterior a esa fecha ya cumplirá con los requisitos mínimos y también los equipos que cumpliesen con los de Windows 7 o viniesen preinstalados con esta versión anterior. En la página de &lt;a href=&#34;https://www.microsoft.com/es-es/windows/windows-10-specifications&#34;&gt;Especificaciones y requisitos del sistema para Windows&lt;/a&gt; están detalladas una buena cantidad de notas informativas y los requerimientos que son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procesador: Un procesador a 1 GHz o más rápido o SoC&lt;/li&gt;
&lt;li&gt;RAM: 1 gigabyte (GiB) para 32 bits o 2 GB para 64 bits&lt;/li&gt;
&lt;li&gt;Espacio en disco duro: 16 GB para un SO de 32 bits o 20 GB para un SO de 64 bits&lt;/li&gt;
&lt;li&gt;Tarjeta gráfica: DirectX 9 o posterior con un controlador WDDM 1.0&lt;/li&gt;
&lt;li&gt;Pantalla: 800 x 600&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estos son los requisitos básicos, los recomendables para una buena experiencia de uso son disponer de 4 GiB de memoria y con esta memoria el siguiente aspecto con el que más se nota una mejora es disponer de un disco duro de estado sólido o SSD en vez de mecánico ya que son varias magnitudes más rápidos tanto en la lectura como en la escritura.&lt;/p&gt;

&lt;p&gt;Cualquier equipo nuevo cumple con estos requisitos pero quizá algunos no posean disco duro SSD, estos discos son más caros y ofrecen menos capacidad aunque ya se han abaratado y son bastante asequibles y su capacidad a partir de los 128 GiB o 256 GiB son suficientes para muchos usuarios. Pagar algo más por un equipo con un disco SSD es una buena decisión, un equipo con disco mecánico puede tardar 1 o 2 minutos en iniciarse, uno con un SSD menos de 10 segundos lo que es solo un ejemplo entre la diferencia entre unos y otros.&lt;/p&gt;

&lt;h3 id=&#34;copia-de-seguridad&#34;&gt;Copia de seguridad&lt;/h3&gt;

&lt;p&gt;Una vez que sabes que el equipo cumple con los requisitos mínimos hay que hacer una copia de seguridad de los documentos, fotos y demás archivos personales que posea el equipo y quieras conservar en un disco duro o memoria USB externo, si son muchos los datos en vez de copiar y pegar con el explorador de archivos puedes hacer la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/como-realizar-copias-de-seguridad-en-windows-con-freefilesync/&#34;&gt;copia de seguridad con el programa FreeFileSync&lt;/a&gt; y restaurar los datos también con el mismo programa una vez reinstalado Windows.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/freefilesync.png&#34; title=&#34;FreeFileSync&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/freefilesync-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Realizar copia de seguridad con FreeFileSync&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;creación-del-medio-de-instalación&#34;&gt;Creación del medio de instalación&lt;/h3&gt;

&lt;p&gt;En versiones anteriores de Windows este debía buscarse en las redes de compartición de archivos o P2P como torrent. Con Windows 10 Microsoft sabiamente para evitar problemas de seguridad proporciona la imagen ISO o una herramienta de creación del medio USB desde su propia página. Para &lt;a href=&#34;https://www.microsoft.com/es-es/software-download/windows10&#34;&gt;descargar la imagen ISO de Windows&lt;/a&gt; hay que seleccionar la edición a descargar (en el momento de escribir este artículo la última es la &lt;em&gt;Creators Update&lt;/em&gt;) y el idioma.&lt;/p&gt;

&lt;p&gt;Según la actualización de Windows descargada las capturas de pantalla o pasos variarán pero serán similares en gran parte. En este artículo he utilizado la actualización &lt;em&gt;Creators Update&lt;/em&gt;, la anterior era &lt;em&gt;Anniversary Update&lt;/em&gt; y la anterior la versión original de Windows 10. Cualquier equipo de la última década ya incorpora un procesador de 64 bits, que el procesador sea de 64 bits le permite usar tamaños de memoria superiores a 4 GiB.&lt;/p&gt;

&lt;p&gt;Accediendo a la página de descarga de Windows 10 desde un sistema con Windows 7, Windows 8.1 o Windows 10 se mostrará la opción de descargar la herramienta de creación de medios o &lt;em&gt;Media Creation Tool&lt;/em&gt;. Descargada y ejecutada la herramienta realiza la descarga de Windows 10 y la creación de medio ya sea un DVD o memoria USB. En el caso de la memoria USB esta deberá tener una capacidad de al menos 8 GiB y todos los datos que posea se perderán con lo que su datos en su caso deberán ser salvaguardados en otra unidad externa.&lt;/p&gt;

&lt;p&gt;Para realizar la instalación de Windows 10 es más recomendable usar una memoria USB con el programa &lt;em&gt;Media Creation Tool&lt;/em&gt; ya que es más rápida que utilizar un disco DVD ya en desuso para los que algunos sistemas ya ni siquiera incorporan su lector.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-01.png&#34; title=&#34;Media Creation Tool&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-01-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-02.png&#34; title=&#34;Media Creation Tool&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-02-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-03.png&#34; title=&#34;Media Creation Tool&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-03-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-04.png&#34; title=&#34;Media Creation Tool&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-04-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-05.png&#34; title=&#34;Media Creation Tool&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-media-creation-tool-05-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Creación del medio de instalación&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;inicio-instalación-de-window-10&#34;&gt;Inicio instalación de Window 10&lt;/h3&gt;

&lt;p&gt;Una vez está listo el medio de instalación de Windows 10 en forma de memoria USB o DVD con el equipo apagado y el medio de instalación conectado a un puerto USB o insertado en el lector de DVD hay que iniciarlo para que arranque desde el medio de instalación. Según el fabricante iniciar el equipo desde el medio de instalación varía ligeramente pero suele emplearse la pulsación de una tecla cuando el equipo se inicia que suele ser la tecla F2, F8, F10, F12 o la tecla Escape que permite seleccionar la unidad desde la que se inicia el equipo donde hay que elegir la memoria USB o DVD. Puede ser que la tecla de acceso a la BIOS UEFI donde también se podrá seleccionar el orden de arranque de las unidades que también varía según el fabricante, la BIOS UEFI contiene parámetros importante de configuración del equipo con lo que hay que tener precaución en las cosas que se modifican en ellas por lo que si no estás seguro de los cambios que estás realizando no los guardes, por suerte las últimas versiones de las BIOS UEFI son más intuitivas y con interfaces gráficas más fáciles de usar.&lt;/p&gt;

&lt;p&gt;Según el fabricante e incluso modelos de la misma fabricante la tecla de acceso para iniciar desde el medio de instalación varía:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acer: F2 o Delete&lt;/li&gt;
&lt;li&gt;Asus: F2 o F10&lt;/li&gt;
&lt;li&gt;Dell: F2, F1, Delete, F12 o F3&lt;/li&gt;
&lt;li&gt;HP: F10 o Esc&lt;/li&gt;
&lt;li&gt;Lenovo: F1 o F2&lt;/li&gt;
&lt;li&gt;Sony: F2, F3, F1 o tecla assist&lt;/li&gt;
&lt;li&gt;Toshiba: F2, F1, Esc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En las siguientes páginas puedes encontrar varias posibles teclas para entrar en la BIOS y cambiar la unidad de inicio del sistema según la marca, &lt;a href=&#34;http://www.makeuseof.com/tag/enter-bios-computer/&#34;&gt;I&lt;/a&gt;, &lt;a href=&#34;https://www.lifewire.com/bios-setup-utility-access-keys-for-major-bios-manufacturers-2624461&#34;&gt;II&lt;/a&gt; y &lt;a href=&#34;https://www.lifewire.com/bios-setup-utility-access-keys-for-popular-computer-systems-2624463&#34;&gt;III&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Puede ser el caso de que cuando se inicia el equipo muestre un mensaje con la tecla que hay que pulsar si hay que probar hasta dar con ella. Después de pulsar la tecla de encendido poco después o según se muestra un logotipo es cuando hay que pulsar la tecla.&lt;/p&gt;

&lt;h3 id=&#34;asistente-de-instalación-de-windows-10&#34;&gt;Asistente de instalación de Windows 10&lt;/h3&gt;

&lt;p&gt;Uno de los éxitos de Windows 10 es que la instalación ofrece un asistente con el que después de completar varios pasos y pulsaciones en botones &lt;em&gt;Siguiente&lt;/em&gt; el sistema queda instalado y listo para usarse. La instalación se completa en menos de una hora.&lt;/p&gt;

&lt;p&gt;Entre los pasos están la selección del idioma, la versión del sistema &lt;em&gt;Home&lt;/em&gt; o &lt;em&gt;Pro&lt;/em&gt; (la primera es suficiente), la lectura de de los términos de la licencia de uso que poca gente se lee completamente por su extensión y su jerga legal poco comprensible. Si el equipo tiene una licencia se ofrecerá la posibilidad de introducir la clave del producto para activar Windows, si no la tiene es posible omitir este paso pulsando la opción &lt;em&gt;No tengo clave de producto&lt;/em&gt; y usar Windows sin limitaciones durante un tiempo, pasado un tiempo en cualquier caso las limitaciones son muy leves y Windows 10 es usable con normalidad.&lt;/p&gt;

&lt;p&gt;Es recomendable la instalación &lt;em&gt;Personalizada: instalar solo Windows&lt;/em&gt; y no conservar archivos y configuraciones anteriores para evitar problemas o heredarlos del sistema anterior. También es recomendable eliminar todas las particiones del disco y dejar que Windows cree las necesarias.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-01.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-01-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-02.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-02-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-03.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-03-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-04.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-04-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-05.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-05-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-06.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-06-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-07.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-07-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-08.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-08-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-09.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-09-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-10.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-10-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-11.png&#34; title=&#34;Instalación de Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-11-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Instalación de Windows 10&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Tras unos pasos donde se mostrará el progreso de instalación y algún reinicio automático el sistema se inicia con un asistente de configuración para personalizar el sistema.&lt;/p&gt;

&lt;h3 id=&#34;configuración-básica&#34;&gt;Configuración básica&lt;/h3&gt;

&lt;p&gt;Después de instalar Windows este ofrece un nuevo asistente donde se personalizan algunas cosas adicionales del sistema. Algunas opciones a seleccionar en estos pasos antes de empezar a usar Windows 10 son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La región o país del usuario.&lt;/li&gt;
&lt;li&gt;La distribución o disposición de las teclas del teclado.&lt;/li&gt;
&lt;li&gt;El usuario de inicio de sesión ya sea con una cuenta de Microsoft o con una cuenta sin conexión y la contraseña.&lt;/li&gt;
&lt;li&gt;Si se desea usar Cortana como asistente personal.&lt;/li&gt;
&lt;li&gt;Algunas opciones de privacidad que son recomendables desactivar para que Windows no recopile información de nuestro dispositivo aunque sean datos anónimos.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-12.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-12-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-13.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-13-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-14.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-14-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-15.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-15-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-16.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-16-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-17.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-17-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-18.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-18-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-19.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-19-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-20.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-20-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-21.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-21-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-22.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-22-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-23.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-23-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-24.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-24-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-25.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-25-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-26.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-26-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-27.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-27-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-28.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-28-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-29.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-29-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-30.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-30-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-31.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-31-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-32.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-32-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-33.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-33-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-34.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-34-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-35.png&#34; title=&#34;Configuración Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/instalacion-windows-10-35-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Configuración inicial de Windows 10&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;usando-windows&#34;&gt;Usando Windows&lt;/h3&gt;

&lt;p&gt;Si el equipo ya tenía licencia de de Windows y estaba activado seguramente Windows 10 ya lo reconozca como activado. También es muy probable que Windows 10 sea capaz de reconocer automáticamente todo el hardware que posea en el equipo incluyendo la tarjeta gráfica pasa usar la máxima resolución que ofrezca la pantalla.&lt;/p&gt;

&lt;p&gt;Llegado a este punto Windows 10 ya se puede empezar a usar y quizá instalar el software básico que vayas a utilizar como un paquete ofimático ya sea &lt;a href=&#34;https://products.office.com/es-es/home&#34;&gt;Microsoft Office&lt;/a&gt; o alguna de las mejores &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/3-opciones-ofimaticas-alternativas-a-microsoft-office/&#34;&gt;3 alternativas a Microsoft Office&lt;/a&gt;, un navegador web como &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; o &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt; con el complemento para bloquear publicidad &lt;a href=&#34;https://adblockplus.org/es/&#34;&gt;AdBlockPlus&lt;/a&gt; en vez de usar &lt;a href=&#34;https://www.microsoft.com/es-es/windows/microsoft-edge/&#34;&gt;Microsoft Edge&lt;/a&gt; que está incorporado por defecto.&lt;/p&gt;

&lt;p&gt;Aún sin licencia y sin activar Windows 10 es perfectamente usable, quizá al cabo de un tiempo no puedas cambiar algunas opciones de personalización como el fondo del escritorio o temas de las ventanas pero nada importante que impida usarlo. Y en cualquier caso &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/&#34;&gt;Windows 10 y Office 2016 siguen siendo tan fáciles de usar sin licencia como siempre&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-01.jpg&#34; title=&#34;Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-01-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-02.png&#34; title=&#34;Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-02-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-03.png&#34; title=&#34;Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-03-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-04.jpg&#34; title=&#34;Windows 10&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/windows-10-04-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Windows 10&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;alternativa-a-windows-con-distribuciones-gnu-linux&#34;&gt;Alternativa a Windows con distribuciones GNU/Linux&lt;/h3&gt;

&lt;p&gt;Debes conocer que Windows no es la única opción de sistema operativo que puedes instalar, si quieres puedes probar alguna de las distribuciones &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt; como alternativa a Windows y descubrir el mundo del software libre que respeta tus derechos y no te los quita como el software privativo, puedes leer el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/&#34;&gt;Elegir una distribución GNU/Linux según el usuario o equipo&lt;/a&gt; e &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/&#34;&gt;instalar Ubuntu paso a paso desde cero&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las siguientes son unas capturas de pantalla de varias de las distribuciones GNU/Linux más famosas.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/ubuntu.png&#34; title=&#34;Ubuntu con entorno de escritorio Unity&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/ubuntu-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/elementary-os.png&#34; title=&#34;elementaryOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/elementary-os-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Ubuntu y elementaryOS&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/fedora.png&#34; title=&#34;Fedora con entorno de escritorio GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/fedora-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/opensuse.png&#34; title=&#34;openSUSE con entorno de escritorio KDE&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/231/opensuse-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Fedora y openSUSE&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="microsoft"/>
            
                <category term="planeta-codigo"/>
            
                <category term="software"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un servomotor con la Raspberry Pi y Java</title>        
        <updated>2017-05-13T11:40:00+02:00</updated>
        <published>2017-05-07T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otro de los elementos que incluye el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la Raspberry Pi&lt;/a&gt; es un &lt;a href=&#34;https://es.wikipedia.org/wiki/Servomotor&#34;&gt;servomotor&lt;/a&gt;, en concreto uno del modelo SG90. En la &lt;a href=&#34;http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf&#34;&gt;especificación del servomotor SG90&lt;/a&gt; está detallado cual es el código de colores de los cables. Rojo para la corriente de 5V, marrón para tierra y naranja para el &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;Pulse Width Modulated&#34;&gt;PWM&lt;/abbr&gt; con el que se controlará el servo motor, el diodo led es simplemente para saber que cuando se enciende el programa Java se ha iniciado. La Raspberry Pi tiene algunos pines con soporte hardware para realizar PWM.&lt;/p&gt;

&lt;p&gt;Un servomotor es un elemento distinto de un motor, un motor usa dos cables uno para mover el motor hacia adelante y otro cable para mover el motor hacia atrás. Los servomotores además de utilizar un único cable para controlarlo su funcionalidad es distinta usándose para posicionar el motor en un determinado ángulo que en el caso del SG90 tiene un ángulo de funcionamiento de 180º. Además el servomotor es más complejo, como se explica en el siguiente artículo de título &lt;a href=&#34;http://handyboard.com/hb/faq/hardware-faqs/dc-vs-servo/&#34;&gt;¿Cual es la diferencia entre un motor DC y servo motor?&lt;/a&gt; el servomotor se compone de varios elementos empaquetados como una pieza. Se compone de un motor DC normal, una unidad de reducción, un sensor de posicionamiento y un circuito de control.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/230/servomotor.jpg&#34; title=&#34;Servomotor&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/230/servomotor-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/230/cableado.jpg&#34; title=&#34;Cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/230/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Servomotor y cableado&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La función del servomotor es recibir la señal de control y aplicar corriente al motor hasta que que esté en la posición indicada por la señal. Un servomotor no rota libremente sino que como he comentado en el caso del SG90 tiene un ángulo de funcionamiento de entre 0º y 180º. La señal de control es un pulso de anchura modulada o PWM.&lt;/p&gt;

&lt;p&gt;Usando la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;Diozero&lt;/a&gt; es sencillo controlar un servomotor a través de la clase &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html&#34;&gt;Servo&lt;/a&gt;. El constructor recibe tres datos el &lt;em&gt;pin&lt;/em&gt; de la Raspberry Pi que controlará el servomotor, según la nomenclatura Broadcom que usa la librería Diozero, la frecuencia del pulso PWD que sirve para controlar la velocidad de rotación y finalmente la posición inicial a establecer. Con el método &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html#getPulseWidthMs--&#34;&gt;pulseWidthMs&lt;/a&gt; y un rango de un valor &lt;em&gt;float&lt;/em&gt; entre 0.6 y 2.4 controlaremos la posición o ángulo del servomotor.&lt;/p&gt;

&lt;p&gt;El siguiente programa Java cambia en un bucle la posición del servo desde la posición mínima a la máxima. En él he utilizado el &lt;em&gt;pin&lt;/em&gt; 18 que en la Raspberry Pi 1 soporta PWD, en las versiones 2 y 3 podríamos haber usado los &lt;em&gt;pines&lt;/em&gt; 18 o 19.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/92cd41d20e45e50a7657e219789c0e81.js?file=Servomotor.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;video-post&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/g8RsvZ26Cqg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aunque he conseguido hacer funcionar el servomotor con este programa no ha sido exento de problemas. Y es que cuando el programa finaliza la Raspberry Pi se me bloquea o se pierde la conectividad de red. No se si por algún &lt;em&gt;bug&lt;/em&gt; en la librería Diozero o alguna incompatibilidad con la Raspberry Pi 1 B, quizá en otro modelo de la Raspberry Pi no dé los problemas que a mi me da.&lt;/p&gt;

&lt;p&gt;En otros artículos de la serie puedes consultar cómo usar otros &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;elementos de kit con Java y la Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeServomotor&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf&#34;&gt;Especificación SG90 servomotor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Servomotor&#34;&gt;Servomotor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/</id>
        <title>Artículo #4 de Yo apoyo al software libre</title>        
        <updated>2017-05-06T11:00:00+02:00</updated>
        <published>2017-05-06T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;En los últimos meses las visitas que estoy recibiendo en Blog Bitix están creciendo cada mes entre un 5% y 10%, junto con el número de visitas los ingresos por la publicidad AdSense también estoy notando que está aumentando en proporción similar o incluso más aún. Cuando hace no tanto un buen mes generaba unos 12€ y uno malo 6€ ahora el &lt;em&gt;blog&lt;/em&gt; me está reportando entre 18€ y 40€ al mes. Además, en este último periodo he escrito un artículo patrocinado sobre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/&#34;&gt;Servidores Cloud VPS en la nube&lt;/a&gt; para &lt;a href=&#34;https://clouding.io/&#34;&gt;Clouding.io&lt;/a&gt; que también ha sido otra forma de ingreso. El punto negativo de todo esto es que solo son unos pocos artículos los que se llevan la mayor parte del tráfico de mi &lt;em&gt;blog&lt;/em&gt;, aún así el resto de artículos contribuyen a que las visitas e ingresos aumenten constantemente.&lt;/p&gt;

&lt;p&gt;Como cada vez que desde hace un tiempo recibo una transferencia en mi cuenta por la publicidad &lt;a href=&#34;https://www.google.com/adsense/&#34;&gt;AdSense&lt;/a&gt; o a través del programa de &lt;a href=&#34;https://afiliados.amazon.es&#34;&gt;afiliados de Amazon&lt;/a&gt; me he planteado realizar unas pocas donaciones económicas a algunos de los proyectos de software libre que uso habitualmente o creo que son merecedores de una donación. En anteriores ocasiones han sido a la &lt;a href=&#34;https://fsfe.org/index.en.html&#34;&gt;FSFE&lt;/a&gt;, &lt;a href=&#34;https://es.wikipedia.org/wiki/Wikipedia:Portada&#34;&gt;Wikipedia&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://elementary.io/es/&#34;&gt;Elementary OS&lt;/a&gt;, &lt;a href=&#34;http://archlinuxarm.org/&#34;&gt;Arch Linux ARM&lt;/a&gt; y &lt;a href=&#34;http://www.libreoffice.org/&#34;&gt;Libre Office&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;gnome&#34;&gt;GNOME&lt;/h3&gt;

&lt;p&gt;Uno de los proyectos a los que he donado esta vez ha sido al entorno de escritorio &lt;a href=&#34;https://www.gnome.org/&#34;&gt;GNOME&lt;/a&gt; que uso en mi equipo con &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt; ya desde la época de la versión 2.30 allá por el 2010 y continué utilizándolo desde los inicios turbulentos de la versión 3.0 en la que todavía era un nuevo concepto del escritorio inmaduro pero que desde entonces ha mejorado notablemente en cada nueva versión publicada con una cadencia puntual cada seis meses. A partir de la versión 3.16 o 3.18 el escritorio de GNOME empezó a completar la visión de sus desarrolladores y satisfacer con las expectativas de muchos más usuarios en cuanto a funcionalidades y detalles gráficos. En las últimas versiones los cambios ya no son tan notables pero sigue mejorando.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnome.svg&#34; alt=&#34;GNOME&#34; title=&#34;GNOME&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;

&lt;h3 id=&#34;videolan-vlc&#34;&gt;VideoLAN (VLC)&lt;/h3&gt;

&lt;p&gt;Otro proyecto al que he donado ha sido el &lt;a href=&#34;https://www.videolan.org/vlc/&#34;&gt;reproductor de multimedia VLC&lt;/a&gt; del que no me gusta mucho su interfaz gráfica pero que funciona muy bien y es capaz de reproducir cualquier formato de archivo multimedia ya sea de audio o vídeo. Además de este proyecto me encargo de la traducción al español.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/vlc.svg&#34; alt=&#34;VLC&#34; title=&#34;VLC&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;

&lt;h3 id=&#34;arch-linux&#34;&gt;Arch Linux&lt;/h3&gt;

&lt;p&gt;Finalmente, he donado a &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; que es la distribución de GNU/Linux que ya uso de manera constante desde hace unos años después de usar en unos pequeños periodos &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; y &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt;. Al ser una distribución &lt;em&gt;rolling release&lt;/em&gt; o en constante actualización no es necesario reinstalar cada nueva versión basta con actualizar el equipo cada unas semanas para tener las últimas versiones de cada paquete de software que se encuentre en sus repositorios de paquetes. La última reinstalación de Arch Linux que hice en mi equipo es de principios del 2014, no por actualizar el equipo cada unas semanas he tenido problemas con las nuevas versiones o los he resuelto fácilmente leyendo la excelente &lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;wiki&lt;/a&gt;, los &lt;a href=&#34;https://bbs.archlinux.org/&#34;&gt;foros&lt;/a&gt; o la página principal con las noticias de la distribución.&lt;/p&gt;

&lt;p&gt;Por un problema con el medio de pago que usa Arch Linux, &lt;a href=&#34;http://spi-inc.org/&#34;&gt;Software in the Public Interest (SPI)&lt;/a&gt;, para hacer donaciones directas no he podido pagar con mi tarjeta de crédito, finalmente he optado por comprar unas pegatinas para poner en el portátil, unas de Arch Linux, otras de Linux y otras de GNOME en &lt;a href=&#34;http://www.unixstickers.com/&#34;&gt;unixstickers&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/archlinux.svg&#34; alt=&#34;Arch Linux&#34; title=&#34;Arch Linux&#34; width=&#34;200&#34;/&gt;
&lt;/div&gt;

&lt;h3 id=&#34;comprobantes-de-las-donaciones&#34;&gt;Comprobantes de las donaciones&lt;/h3&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-gnome.png&#34; title=&#34;Donación GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-gnome-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Donación GNOME&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-videolan.png&#34; title=&#34;Donación VideoLAN (VLC)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-videolan-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Donación VideoLAN (VLC)&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-archlinux-1.png&#34; title=&#34;Donación Arch Linux&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-archlinux-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-archlinux-2.png&#34; title=&#34;Donación Arch Linux&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/229/donacion-archlinux-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Donación Arch Linux&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Las donaciones no son muy cuantiosas pero son una forma de entre las muchas que hay de colaborar con estos proyectos. Otras formas de colaborar son reportando de errores o que no requieren conocimiento técnico como traduciendo las aplicaciones al lenguaje español o simplemente compartiendo las imágenes torrent de las distribuciones GNU/Linux.&lt;/p&gt;

&lt;p&gt;Si los ingresos que tengo siguen al mismo ritmo que los últimos meses, y parece que sí, en poco tiempo escribiré un nuevo artículo con los proyectos a los que he donado.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/&#34;&gt;Yo apoyo al software libre&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Estas son las donaciones que he realizado hasta el momento:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;2015/12: &lt;b&gt;FSFE&lt;/b&gt; 40€&lt;/li&gt;
    &lt;li&gt;2016/09: &lt;b&gt;Wikipedia&lt;/b&gt; 10€, &lt;b&gt;Firefox&lt;/b&gt; 10€&lt;/li&gt;
    &lt;li&gt;2017/01: &lt;b&gt;Elementary OS&lt;/b&gt; 10€, &lt;b&gt;Libre Office&lt;/b&gt; 10€, &lt;b&gt;Arch Linux ARM&lt;/b&gt; 10€&lt;/li&gt;
    &lt;li&gt;2017/05: &lt;b&gt;GNOME&lt;/b&gt; 15,31€, &lt;b&gt;VideoLAN (VLC)&lt;/b&gt; 10€, &lt;b&gt;Arch Linux&lt;/b&gt; 0,31€&lt;/li&gt;
&lt;/ul&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/</id>
        <title>Imágenes de Docker con Alpine Linux</title>        
        <updated>2017-04-28T23:00:00+02:00</updated>
        <published>2017-04-28T23:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/alpinelinux.svg&#34; class=&#34;right&#34; width=&#34;350&#34; alt=&#34;Alpine Linux&#34; title=&#34;Alpine Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En el repositorio de imágenes &lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt; de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; hay múltiples versiones de cada software &lt;em&gt;contenirizado&lt;/em&gt;, alguna de las versiones están etiquetadas con la palabra &lt;em&gt;alpine&lt;/em&gt;. Las imágenes de Docker etiquetadas con &lt;em&gt;alpine&lt;/em&gt; hacen referencia a que usan como base la distribución &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; y la razón de usar Alpine Linux es que al ser una distribución minimalista basada en &lt;a href=&#34;https://www.busybox.net/&#34;&gt;busybox&lt;/a&gt; y &lt;a href=&#34;https://www.musl-libc.org/&#34;&gt;musl-libc&lt;/a&gt; hace que las imágenes ocupen bastante menos que una imagen equivalente por ejemplo basada en &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; o &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt;, seguramente porque no contienen una buena cantidad de cosas innecesarias.&lt;/p&gt;

&lt;p&gt;Por ejemplo, la &lt;a href=&#34;https://hub.docker.com/_/openjdk/&#34;&gt;imagen de Docker que contiene en JDK&lt;/a&gt; de Java basada en Debian ocupa 643 MiB y la imagen de Java basada en Alpine Linux ocupa 101 MiB, una diferencia significativa de casi 500 MiB. Con la capacidad de los discos duros actuales no es tanto por lo que ocupan en disco sino por el tiempo que las imágenes tardan en descargarse desde el repositorio e iniciarse los contenedores como es el caso en un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;cluster de contenedores Docker&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/228/imagenes-docker.png&#34; title=&#34;Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine. Linux&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/228/imagenes-docker-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Imágenes de Docker con su tamaño. Ver imágenes openjdk, Ubuntu y Alpine Linux.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El tiempo de descarga solo se emplea la primera vez que se hace uso de una imagen pero como las imágenes se van actualizando hay que tener en cuenta que en cada nueva versión que se use hay que descargar una nueva imagen, cuanto más pequeñas sean las imágenes menos tiempo se emplea en descargarlas y más rápidamente se iniciarán los contenedores.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34;&gt;imagen base de Ubuntu&lt;/a&gt; con la que crear nuevas ocupa 117 MiB y la &lt;a href=&#34;https://hub.docker.com/_/alpine/&#34;&gt;imagen base de Alpine Linux&lt;/a&gt; únicamente 3.98 MiB. Si creamos imágenes propias basadas en Alpine Linux deberemos saber que esta distribución usa su propio gestor de paquetes &lt;em&gt;apk&lt;/em&gt; y su propio &lt;a href=&#34;https://pkgs.alpinelinux.org/packages&#34;&gt;repositorio de paquetes&lt;/a&gt;. Para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/11/como-crear-una-imagen-para-docker-usando-un-dockerfile/&#34;&gt;crear una imagen de Docker&lt;/a&gt; hay que usar los archivos &lt;em&gt;Dockerfile&lt;/em&gt; que contienen las instrucciones para construir la imagen del contenedor.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/</id>
        <title>Información sensible en los contenedores con Docker Secrets</title>        
        <updated>2017-04-22T12:00:00+02:00</updated>
        <published>2017-04-22T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-los-contenedores-con-docker-secrets/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Parte de la información que usan los contenedores de Docker se debe proteger de accesos no deseados. Anteriormente en algunos casos se usaban variables de entorno para lanzar los contenedores lo que no es seguro si se listan los procesos del sistema con sus parámetros, incluir archivos en las imágenes de los contenedores tampoco es recomendable. Docker Secrets permite proporcionar y mantener segura la información sensible que usen los contenedores.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los contenedores de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; necesitan acceder a algunos datos sensibles desde el punto de vista de la seguridad como usuarios y contraseñas, certificados SSL, claves privadas SSH o cualquier otra información de acceso restringido. Algunos de estos datos en Docker se proporcionan mediante variables de entorno al lanzar los contenedores, esto es inseguro ya que al hacer un listado de los procesos con sus parámetros de invocación los relativos a Docker mostrarán esta información, lo que es un posible problema de seguridad.&lt;/p&gt;

&lt;p&gt;Con &lt;a href=&#34;https://docs.docker.com/engine/swarm/secrets/&#34;&gt;Docker Secrets&lt;/a&gt; se puede gestionar esta información que se necesita en tiempo de ejecución pero que no se quiere almacenar en la imagen de Docker o en el repositorio de código fuente. Algunos ejemplos de información sensible son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nombres de usuario y contraseñas.&lt;/li&gt;
&lt;li&gt;Certificados TLS y claves.&lt;/li&gt;
&lt;li&gt;Claves SSH.&lt;/li&gt;
&lt;li&gt;Otra información sensible como el nombre de una base de datos o el nombre de un servidor interno.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los secretos de Docker se proporcionan a los contenedores que los necesitan y se transmiten de forma cifrada al nodo en el que se ejecuten. Los secretos se montan en el sistema de archivos en la ruta &lt;em&gt;/run/secrets/&amp;lt;secret_name&amp;gt;&lt;/em&gt; de forma descifrada al que el servicio del contenedor puede acceder.&lt;/p&gt;

&lt;p&gt;Algunos comandos para manejar los secretos son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;docker secret create secreto&lt;/em&gt;: crea un secreto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;docker secret inspect secreto&lt;/em&gt;: muestra los detalles de un secreto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;docker secret ls&lt;/em&gt;: lista los secretos creados.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;docker secret rm secreto&lt;/em&gt;: elimina un secreto.&lt;/li&gt;
&lt;li&gt;Se usa el parámetro &lt;em&gt;&amp;ndash;secret&lt;/em&gt; para &lt;em&gt;docker service create&lt;/em&gt; y &lt;em&gt;&amp;ndash;secret-add&lt;/em&gt; y &lt;em&gt;&amp;ndash;secret-rm flags&lt;/em&gt; para &lt;em&gt;docker service update&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando un &lt;em&gt;stack&lt;/em&gt; de servicios con un archivo de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; en la sección &lt;em&gt;secrets&lt;/em&gt; de los servicios se indica cuales usa, en la sección &lt;em&gt;secrets&lt;/em&gt; se definen los secretos de los servicios con sus nombres y su contenido referenciando archivos que pueden ser binarios o de text no superior a 500 KiB.&lt;/p&gt;

&lt;p&gt;Al servicio de &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; la clave privada y certificado para configurar el acceso mediante el protocolo seguro HTTPS se le proporciona a través de secretos que son referenciados en el archivo de configuración del servidor web &lt;em&gt;nginx.conf&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b291cbf1f5a0739c35c70f547fb76d77.js?file=docker-compose-stack-app.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b291cbf1f5a0739c35c70f547fb76d77.js?file=nginx.conf&#34;&gt;&lt;/script&gt;

&lt;p&gt;Por otra parte la aplicación Java con &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; lista el contenido de los secretos incorporados en el contenedor cuando se solicita en la URL &lt;em&gt;https://192.168.99.100/system/info/&lt;/em&gt;, esto no se debe hacer porque se pierde la seguridad que proporcionan los secretos pero sirve a modo de muestra en el ejemplo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b291cbf1f5a0739c35c70f547fb76d77.js?file=HostInfoContributor.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b291cbf1f5a0739c35c70f547fb76d77.js?file=info.json&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/227/message.png&#34; title=&#34;Contenido del archivo message.txt&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/227/message-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Contenido del archivo message.txt&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para probar el ejemplo hay que ejecutar varios comandos, la secuencia completa es la siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b291cbf1f5a0739c35c70f547fb76d77.js?file=run.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/</id>
        <title>Contenedores en Docker Swarm con volúmenes de datos persistentes usando REX-Ray y VirtualBox</title>        
        <updated>2017-04-16T23:00:00+02:00</updated>
        <published>2017-04-16T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Salvo que un servicio sea sin estado o &lt;em&gt;stateless&lt;/em&gt; los contenedores de Docker necesitan persistir datos y que estos sobrevivan a su terminación, como es el caso de un contenedor de una base de datos. Además en un &lt;em&gt;cluster&lt;/em&gt; de nodos Docker hay que tener en cuenta que los datos deben estar accesibles para todos los nodos ya que un contenedor que usase los datos podría ser lanzado en cualquiera de ellos. REX-Ray es un sistema de almacenamiento en red que cubre estas necesidades, es simple de instalar, configurar y de iniciar. En el artículo muestro un ejemplo usando REX-Ray junto con Docker Swarm y VirtualBox.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los contenedores de datos son efímeros, se crean y se destruyen y con ellos los datos que tuviesen en su sistema de archivos de modo que cualquier dato que queramos que sobreviva a la vida del contenedor ha de almacenarse de forma externa, este es el caso de los datos de una base de datos como &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; o &lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;. Además usando &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; se plantea el problema de que hay varios nodos formando un &lt;em&gt;cluster&lt;/em&gt; por lo que los datos han de estar accesibles independientemente del nodo en el que sea iniciado el contenedor que los utilice y significa que los datos no pueden estar almacenados en el nodo ya que un contenedor podría ser iniciado en cualquiera de ellos.&lt;/p&gt;

&lt;p&gt;Así que los contenedores iniciados en un &lt;em&gt;cluster&lt;/em&gt; de Docker Swarm que usen datos persistentes necesitan un sistema de almacenamiento en red externo a los contenedores y nodos. Una de las opciones disponibles es &lt;a href=&#34;https://rexray.codedellemc.com/&#34;&gt;REX-Ray&lt;/a&gt; que ofrece una configuración sencilla y múltiples proveedores de computación entre las que están las más populares como &lt;a href=&#34;http://aws.amazon.com/es/ec2/&#34;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Google Compute Engine&lt;/a&gt;, &lt;a href=&#34;http://azure.microsoft.com/es-es/&#34;&gt;Azure&lt;/a&gt; e incluso &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo uso un &lt;em&gt;cluster&lt;/em&gt; de nodos Docker, VirtualBox y REX-Ray para proporcionar volúmenes de datos persistentes para un contenedor que tiene una base de datos postgres basándome en el artículo previo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;Crear un &lt;em&gt;cluster&lt;/em&gt; de contenedores Docker&lt;/a&gt; donde explicaba como crear un &lt;em&gt;cluster&lt;/em&gt; de nodos con Docker Swarm.&lt;/p&gt;

&lt;p&gt;Para la integración entre VirtualBox y REX-Ray hay que iniciar primero un servidor en el &lt;em&gt;host&lt;/em&gt; que permite a REX-Ray hacer llamadas remotas a VirtualBox para que gestione los volúmenes de datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=02-vboxwebsrv.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si hay un &lt;em&gt;firewall&lt;/em&gt; hay que permitir el tráfico para el puerto &lt;em&gt;18083&lt;/em&gt;, en mi caso que uso &lt;em&gt;ufw&lt;/em&gt; creando la siguiente regla.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=ufw.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con el &lt;em&gt;cluster&lt;/em&gt; creado debemos instalar y configurar REX-Ray en cada uno de los nodos ejecutando varios comandos, un comando instala REX-Ray, otro crea el archivo de configuración en &lt;em&gt;/etc/rexray/config.yml&lt;/em&gt; y finalmente otro inicia el servicio de REX-Ray. Algunas opciones que se indican en el archivo de configuración de REX-Ray es la ubicación en el &lt;em&gt;host&lt;/em&gt; donde se guardan los volúmenes con el parámetro &lt;em&gt;volumePath&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=03-rex-ray-install.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/instalacion-rex-ray.png&#34; title=&#34;Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/instalacion-rex-ray-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Instalación de REX-Ray en nodos de Docker Swarm con VirtualBox&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para probar la persistencia de datos usaré un &lt;em&gt;stack&lt;/em&gt; iniciado de la misma forma que en artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/&#34;&gt;Iniciar un stack de servicios en un cluster de Docker Swarm&lt;/a&gt; pero con un contenedor de postgres que guarda los datos en un volumen de REX-Ray en &lt;em&gt;/var/lib/postgresql/data&lt;/em&gt;. Para iniciar el &lt;em&gt;stack&lt;/em&gt; el &lt;em&gt;custer&lt;/em&gt; de Docker Swarm uso un archivo de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; con la definición del &lt;em&gt;stack&lt;/em&gt; en formato YAML.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=docker-compose-stack-postgres.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=06-docker-compose-stack-deploy-postgres.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;En la siguiente captura de pantalla se observa en que nodo ha sido iniciado el contenedor de postgres y que identificativo se le ha asignado.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/stack-deploy-postgres.png&#34; title=&#34;Deploy del stack de postgres&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/stack-deploy-postgres-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Deploy del stack de postgres&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En el &lt;em&gt;stack&lt;/em&gt; el volumen de datos postgres está declarado y creado de forma externa. Usando VirtualBox con REX-Ray en el &lt;em&gt;host&lt;/em&gt; o anfitrión se crea un archivo que contiene los datos del volumen. Al listar los volúmenes de datos además de los creados &lt;em&gt;postgres&lt;/em&gt; y &lt;em&gt;app&lt;/em&gt; están los de los discos duros de cada uno de los nodos identificados como &lt;em&gt;disk.vmdk&lt;/em&gt;. El parámetro &lt;em&gt;opt=size=5&lt;/em&gt; indica que el volumen de datos es de una tamaño de 5GiB.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=06-create-volumes.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/volumes.png&#34; title=&#34;Volúmenes de datos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/volumes-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/volumes-nautilus.png&#34; title=&#34;Archivos de volúmenes en el sistema de archivos del host&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/226/volumes-nautilus-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Volúmenes de datos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para crear algunos datos en la base de datos hay que conectarse al contenedor y lanzar algunas sentencias SQL. Hay que obtener el identificativo del contenedor de postgres, iniciar un proceso &lt;em&gt;bash&lt;/em&gt;, realizar la conexión a la base de datos con el cliente &lt;em&gt;psql&lt;/em&gt; y lanzar las sentencias SQL.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=postgres.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Destruyendo el &lt;em&gt;stack&lt;/em&gt; y volviéndolo a arrancar posiblemente Docker Swarm iniciará el contenedor en otro nodo del &lt;em&gt;cluster&lt;/em&gt; pero los datos seguirán estando presentes en la base de datos postgres, se puede comprobar iniciando una nueva sesión bash en el nuevo contenedor, iniciando el cliente de psql y lanzando la consulta &lt;em&gt;select&lt;/em&gt; de SQL o con el comando &lt;em&gt;\dt&lt;/em&gt; para obtener las tablas de la base de datos, &lt;em&gt;\d+ company&lt;/em&gt; para obtener una descripción de la tabla y la consulta SQL &lt;em&gt;SELECT * FROM company;&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/07ede1de4295c24af75a1189085d9d77.js?file=docker-compose-stack-remove-postgres.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rexray.readthedocs.io/en/v0.3.3/user-guide/installation/&#34;&gt;REX-Ray Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rexray.readthedocs.io/en/v0.3.3/user-guide/installation/#docker-machine-virtualbox&#34;&gt;REX-Ray Installation - Docker Machine (VirtualBox)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rexray.readthedocs.io/en/v0.3.3/user-guide/storage-providers/#virtualbox&#34;&gt;REX-Ray Storage Providers - VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rexray.readthedocs.io/en/stable/user-guide/applications/&#34;&gt;REX-Ray - Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/</id>
        <title>Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java</title>        
        <updated>2017-04-13T11:00:00+02:00</updated>
        <published>2017-04-13T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otro par de sensores que incluye el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de introducción a la electrónica para la Raspberry Pi&lt;/a&gt; son un sensor de golpes o &lt;em&gt;tilt&lt;/em&gt; y un detector de movimiento. El funcionamiento de ambos es muy similar, utilizando un &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; como entrada se recibe si el sensor de golpes está activo o si el detector de movimiento ha detectado movimiento. El sensor de golpes es una bolita de mercurio encerrada en una ampolla de cristal. Como el mercurio a temperatura ambiente su estado es líquido puede moverse y como es un metal puede conducir la electricidad cuando está en una determinada posición entre dos filamentos.&lt;/p&gt;

&lt;p&gt;El sensor de golpes necesita de tres cables uno para la corriente de 3.3V, otro para tierra y finalmente otro que se conecta como entrada a un &lt;em&gt;pin&lt;/em&gt; GPIO. Usando varios cables hembra-hembra y macho-macho hacemos las conexiones entre el sensor y la placa de pruebas sin soldadura o &lt;em&gt;breadboard&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/sensores-1.jpg&#34; title=&#34;Sensor de golpes y detector de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/sensores-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/sensores-2.jpg&#34; title=&#34;Sensor de golpes y detector de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/sensores-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Sensor de golpes y detector de movimiento&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Usando la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; para controlar los &lt;em&gt;pines&lt;/em&gt; GPIO desde un programa implementado con Java detectamos si el sensor está activo o no según la posición de la bolita de mercurio. El ejemplo consiste en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;encender un diodo LED&lt;/a&gt; que ya mostré en un artículo anterior de esta &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/electronica/&#34;&gt;serie sobre electrónica&lt;/a&gt; cuando el sensor &lt;em&gt;tilt&lt;/em&gt; esté activo. Usaré el &lt;em&gt;pin&lt;/em&gt; 18 para el diodo LED y el &lt;em&gt;pin&lt;/em&gt; 21 para el sensor según la nomenclatura de Broadcom. Los &lt;em&gt;pines&lt;/em&gt; serían el 12 según la nomenclatura del &lt;em&gt;header&lt;/em&gt; y 1 según la nomenclatura de wiringPi para el diodo LED y 13 y 2 para el sensor &lt;em&gt;tilt&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/cableado-tilt.jpg&#34; title=&#34;Cableado sensor de golpes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/cableado-tilt-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor de golpes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=Tilt.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el siguiente vídeo se aprecia como cuando al cambiar de posición del sensor de movimiento se mueve la bolita de mercurio y el diodo LED de ejemplo se enciende y apaga.&lt;/p&gt;

&lt;div class=&#34;video-post&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/7Rkou-pJWFY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El detector de movimiento en teoría es similar en funcionamiento al &lt;em&gt;tilt&lt;/em&gt; y la librería diozero proporciona la clase &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/MotionSensor.html&#34;&gt;MotionSensor&lt;/a&gt; para hacer más sencillo su uso. Digo en teoría porque no he conseguido hacerlo funcionar y he revisado varias veces las conexiones mostradas en otros ejemplos incluido el &lt;a href=&#34;http://osoyoo.com/2016/07/14/motionsensor-pi/&#34;&gt;ejemplo de osoyoo&lt;/a&gt;, no se si es porque me falta algo más que debo tener en cuenta y que no conozco o el sensor no funciona viniendome estropeado. Cuando el sensor detecta movimiento cambia el voltaje de su &lt;em&gt;pin&lt;/em&gt; GPIO de datos. Los otros dos &lt;em&gt;pines&lt;/em&gt; que utiliza son uno para el voltaje de 5V y el de tierra.&lt;/p&gt;

&lt;p&gt;El programa Java para el sensor de movimiento es similar al sensor &lt;em&gt;tilt&lt;/em&gt; e igualmente encendería o apagaría un diodo LED cuando detecta movimiento.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/cableado-motion.jpg&#34; title=&#34;Cableado sensor de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/224/cableado-motion-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor de movimiento&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=Motion.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Ambos ejemplos pueden usarse con los siguientes comandos cambiando la dirección IP de la Raspberry Pi y el directorio de la misma a donde se suben los ejemplos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El siguiente artículo de la sería será sobre cómo usar un &lt;em&gt;servo motor&lt;/em&gt; que es diferente de un motor que gira constantemente.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pimylifeup.com/raspberry-pi-motion-sensor/&#34;&gt;Raspberry Pi Motion Sensor using a PIR Sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.meccanismocomplesso.org/en/pir-motion-detector/&#34;&gt;PIR motion detector – a sensor for Arduino and Raspberry Pi (1st part)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/</id>
        <title>Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java</title>        
        <updated>2017-04-09T12:00:00+02:00</updated>
        <published>2017-04-09T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El &lt;em&gt;kit&lt;/em&gt; de electrónica para la Raspberry Pi incluye varios dispositivos controlables con lo &lt;em&gt;pines&lt;/em&gt; GPIO. En el caso de este ejemplo usaré un diodo LED, un zumbador y un pulsador para crear un ejemplo en el que el diodo LED se enciendan y el zumbador emita un sonido cuando el pulsador se active.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En artículos anteriores ya he comentado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;como hacer parpadear un diodo LED&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;como usar un display LCD de 16 columnas y 2 filas&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/&#34;&gt;como obtener la temperatura y humedad de un sensor DHT11&lt;/a&gt;, todo estos ejemplo usando varios elementos de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi 3&lt;/a&gt;. En este artículo en el que mostraré cómo usar un LED, un pulsador y un zumbador es mucho más sencillo que los casos del &lt;em&gt;display&lt;/em&gt; LCD de 16 filas y 2 columnas y del sensor DHT11. Vistos los ejemplos de artículos anteriores lo más difícil de este es hacer el conexionado con los cables. Para controlar los pines usaré la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; que proporciona clases de alto nivel para cada uno de estos elementos para que desde código Java sea bastante sencillo controlarlos.&lt;/p&gt;

&lt;p&gt;El ejemplo consistirá en que cuando se presione el pulsador se encienda el diodo LED y el zumbador se active emitiendo un zumbido audible. Cada uno de estos elementos requiere usar un &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; de los 17 que hay disponibles en la Raspberry Pi 1 que es el modelo que tengo yo o de los 26 &lt;em&gt;pines&lt;/em&gt; que poseen versiones posteriores de la Raspberry Pi como la B+, 2 y 3.&lt;/p&gt;

&lt;p&gt;Este sería el esquema de conexionado de los elementos. El diodo LED tiene una polaridad de modo que la patita larga que es la parte positiva se conectará al &lt;em&gt;pin&lt;/em&gt; GPIO 1 según la nomenclatura de wiringPi o el 18 según la de Broadcom con una resistencia de 200 ohmios entre el &lt;em&gt;pin&lt;/em&gt; GIPO y la patita de diodo para que la intensidad que atraviesa el diodo sea menor y no se desgaste. El zumbador también tiene una polaridad que en el caso del &lt;em&gt;kit&lt;/em&gt; que he usado viene serigrafiado y con una etiqueta, la parte positiva se conectará a otro &lt;em&gt;pin&lt;/em&gt; GPIO y usaré el &lt;em&gt;pin&lt;/em&gt; GPIO 2. Para que el pulsador haga contacto bien en la placa de conexiones para hacer pruebas sin soldadura hay que presionar sin forzar pero hasta que quede bien encadado y sin fijo, usaré el &lt;em&gt;pin&lt;/em&gt; GPIO 3.&lt;/p&gt;

&lt;p&gt;Para el pulsador usaré el método &lt;em&gt;PULL UP&lt;/em&gt; (el otro es &lt;em&gt;PULL DOWN&lt;/em&gt;) donde conectaré una patita del pulsador a tierra y la adyacente al &lt;em&gt;pin&lt;/em&gt; GPIO, en &lt;a href=&#34;https://grantwinney.com/using-pullup-and-pulldown-resistors-on-the-raspberry-pi/&#34;&gt;algunas páginas&lt;/a&gt; se explica haciendo uso de resistencias, sin embargo, el uso de resistencias en la Raspberry Pi no es necesario ya que los &lt;em&gt;pines&lt;/em&gt; ya &lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/special-pin-functions/&#34;&gt;las tienen incorporadas internamente&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/cableado.jpg&#34; title=&#34;cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/esquema-cableado.png&#34; title=&#34;Esquema del cableado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/esquema-cableado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Esquema del cableado&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La librería diozeo para identificar los pines usa la nomenclatura de Broadcom, otras son las nomenclaturas del &lt;em&gt;header&lt;/em&gt; o de wiringPi. Hay que tener en cuenta la nomenclatura que se use ya que el número del &lt;em&gt;pin&lt;/em&gt; variará en cada una de ellas, también hay que tener en cuenta la versión de la Raspberry Pi ya que hay pequeñas variaciones según la versión. Por ejemplo, según la tabla de referencia siguiente, para la Raspberry Pi 1 y según la nomenclatura de Brodacom el &lt;em&gt;pin&lt;/em&gt; GPIO 18 corresponde al número 12 de &lt;em&gt;header&lt;/em&gt;, el GPIO 21 al número 13 y el GPIO 22 al número 15. Según la nomenclatura de wiringPi el GPIO 1 corresponde al número 1, el GPIO 2 al número 2 y el GPIO 3 al número 3.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi1b-header-rev1.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi1b-header-rev1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi3b-header.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi3b-header-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Header de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi1b-header-rev1-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi1b-header-rev1-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi3b-header-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/221/raspberrypi3b-header-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Headers de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Usando la librería diozero el código Java para realizar el ejemplo no necesita excesiva explicación. Es posible hacer uso de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;funciones lambdas que incorporó el lenguaje Java en la versión de Java 8&lt;/a&gt; y con la sentencia &lt;em&gt;try-with-resources&lt;/em&gt; del lenguaje los elementos se finalizará correctamente en caso de producirse alguna excepción, por ejemplo apagando el diodo en caso de que estuviese encendido o apagando el zumbador en su caso.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0d5bb399bc7a20b903ee54ec41dee8e1.js?file=LedButtonBuzzer.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este es un pequeño vídeo en el que muestro su funcionamiento.&lt;/p&gt;

&lt;div class=&#34;video-post&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/jaqMi53pjf0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeLedButtonBuzzer&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/</id>
        <title>Escalar y actualizar un servicio de un cluster de Docker Swarm</title>        
        <updated>2017-04-16T13:00:00+02:00</updated>
        <published>2017-04-09T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Ya tenemos un &lt;em&gt;cluster&lt;/em&gt; formado por varios nodos con algún servicio ejecutándose en el &lt;em&gt;cluster&lt;/em&gt; de Docker Swarm. Si surge la necesidad los servicios del &lt;em&gt;cluster&lt;/em&gt; se pueden escalar cambiando el número de instancias de contenedores que forma el servicio para atender las necesidades computacionales o para ofrecer el servicio a más usuarios. Por otro lado, pasado un tiempo muy posiblemente se publicará una nueva imagen de los contenedores, el servicio se puede actualizar para que los contenedores utilicen esa nueva imagen.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una vez que ya hemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;creado un &lt;em&gt;cluster&lt;/em&gt; de nodos con Docker Swarm&lt;/a&gt; y hemos desplegado algunos servicios ya sea directamente mediante comandos para crear servicios o mediante un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/&#34;&gt;&lt;em&gt;stack&lt;/em&gt; con un archivo similar a un Docker Compose&lt;/a&gt; al cabo de un tiempo necesitaremos hacer otras operaciones. Dos de esas operaciónes básicas son escalar hacia arriba o hacia abajo un servicio cambiando el número de instancias de contenedores desplegadas o actualizar la imagen que utilizan los servicios por otra diferente posiblemente más nueva.&lt;/p&gt;

&lt;p&gt;En la documentación de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; están detallados y comentados los &lt;a href=&#34;https://docs.docker.com/engine/swarm/swarm-tutorial/scale-service/&#34;&gt;comandos para escalar un servicio&lt;/a&gt;. Por ejemplo, en el &lt;em&gt;cluster&lt;/em&gt; de ejemplo formado por tres nodos, uno con el rol de &lt;em&gt;manager&lt;/em&gt; y otros dos como &lt;em&gt;worker&lt;/em&gt;, ejecutándose en &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; y desplegando un servicio para el servidor &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; con inicialmente una réplica o instancia podemos escalar el servicio para que se cree alguna instancia o contenedor más del servicio con el siguiente comando &lt;em&gt;docker service scale&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a9862e63c242949ee04cd313e82f3ec.js?file=06-nginx-scale.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Al igual que cuando se crea un contenedor para un servicio en el &lt;em&gt;cluster&lt;/em&gt; &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; si no se indica alguna restricción decidirá en qué nodos se crean las nuevas instancias o contenedores del servicio.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-1.png&#34; title=&#34;Servicio de nginx con una réplica&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-4.png&#34; title=&#34;Servicio de nginx escalado a cuatro réplicas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-4-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Servicio de nginx antes y después de escalarlo&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-scale.png&#34; title=&#34;Escalado del servicio de nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-scale-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Escalado del servicio de nginx&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Por otro lado, una vez desplegados en un &lt;em&gt;cluster&lt;/em&gt; algunos servicios llegará el momento en que queramos actualizar algún parámetro del servicio, uno de ellos será probablemente la imagen del servicio cuando se publique una nueva. En la página de documentación &lt;a href=&#34;https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/&#34;&gt;Aplicando actualizaciones a un servicio&lt;/a&gt; está explicada esta funcionalidad y los comandos junto con sus opciones que hay que utilizar.&lt;/p&gt;

&lt;p&gt;En el ejemplo al crear el &lt;em&gt;cluster&lt;/em&gt; se usa la última imagen de docker para nginx, en un entorno de producción es más recomendable establecer una versión en concreto para evitar que la imagen que se usa no varía desde que se prueba hasta que se despliega. El siguiente &lt;em&gt;script&lt;/em&gt; actualiza la imagen a la versión &lt;em&gt;nginx:1.10-alpine&lt;/em&gt; en todas las réplicas del servicio de nginx en el &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a9862e63c242949ee04cd313e82f3ec.js?file=06-nginx-update.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-update.png&#34; title=&#34;Actualización de la imagen del servicio de nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/223/nginx-service-update-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Actualización de la imagen del servicio de nginx&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Docker Swarm realiza el proceso de actualización siguiendo los siguientes pasos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detiene el primer contenedor o tarea a actualizar.&lt;/li&gt;
&lt;li&gt;Programa la actualización del contenedor o tarea detenida.&lt;/li&gt;
&lt;li&gt;Inicia una nueva tarea actualizado.&lt;/li&gt;
&lt;li&gt;Si la tarea actualizada retorna su estado como &lt;em&gt;RUNNING&lt;/em&gt; se espera un tiempo determinado y se inicia el proceso de actualización de una nueva tarea.&lt;/li&gt;
&lt;li&gt;Si, en cualquier momento durante la actualización, una tarea retorna su estado como &lt;em&gt;FAILED&lt;/em&gt;, se detiene la actualización.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por defecto, el planificador actualiza las tareas o contenedores del servicio de uno en uno. Con la opción &lt;em&gt;&amp;ndash;update-parallelism&lt;/em&gt; se especifica el número de tareas del servicio que se actualizan simultáneamente. La opción &lt;em&gt;&amp;ndash;update-delay&lt;/em&gt; especifica el tiempo de espera desde que se actualiza la tarea de un servicio y la siguiente. Se puede describir como una combinación de segundos, minutos o horas, de modo que 1m30s indica una espera de 1 minuto y 30 segundos.&lt;/p&gt;

&lt;p&gt;En los &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;archivos en formato YAML de los &lt;em&gt;stacks&lt;/em&gt; de Docker Compose&lt;/a&gt; hay una sección en cada servicio en el que se indica el número de contenedores que se desea que esté formado el servicio así como las opciones de paralelismo y tiempo de espera entre actualización. Para actualizar el &lt;em&gt;stack&lt;/em&gt; basta con hacer de nuevo el &lt;em&gt;deploy&lt;/em&gt;, ya sea la imagen usada, el número de réplicas u otros parámetros.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a9862e63c242949ee04cd313e82f3ec.js?file=docker-compose-stack-app.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/</id>
        <title>Iniciar un stack de servicios en un cluster de Docker Swarm</title>        
        <updated>2017-04-02T12:00:00+02:00</updated>
        <published>2017-04-02T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Los &lt;em&gt;stacks&lt;/em&gt; en Docker Swarm son definiciones en un archivo de texto en formato YAML de múltiples servicios además de volúmenes, redes de software y secretos. Esta definición de un &lt;em&gt;stack&lt;/em&gt; ejecutado en un &lt;em&gt;cluster&lt;/em&gt; de nodos Docker Swarm permite iniciar múltiples contenedores además de los otros elementos que necesiten para su funcionamiento. Los &lt;em&gt;stacks&lt;/em&gt; son el equivalente para Docker Swarm de los archivos multicontenedor de Docker Compose, y el formato de ambos muy similar.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Con &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; se pueden &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/07/aplicaciones-multicontenedor-con-docker-compose/&#34;&gt;definir en un único archivo un conjunto de contenedores&lt;/a&gt; que forma un servicio o aplicación y que se lanzan como una unidad. En vez de ejecutar los comandos individuales que inician cada contenedor el archivo en formato &lt;a href=&#34;http://www.yaml.org/&#34;&gt;yaml&lt;/a&gt; de Docker Compose define varios contenedores y al ser un archivo de texto es añadible a un sistema de control de versiones para registrar los cambios. La información del archivo de Docker Compose es la misma que se indicaría en el comando para iniciar un contenedor individual.&lt;/p&gt;

&lt;p&gt;En versiones más recientes se ha modificado ligeramente el formato del archivo de Docker Compose para añadirle las características necesarias que necesita &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt;, la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;herramienta integrada en Docker que permite crear &lt;em&gt;clusters&lt;/em&gt; de nodos&lt;/a&gt; que ejecuten contenedores &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. A estos archivos ahora se les denomina como &lt;em&gt;stacks&lt;/em&gt;. Así hay nuevas secciones como &lt;em&gt;services&lt;/em&gt;, &lt;em&gt;networks&lt;/em&gt;, &lt;em&gt;volumes&lt;/em&gt; y &lt;em&gt;secrets&lt;/em&gt; entre otras para soportar algunas funcionalidades adicionales. La sección &lt;em&gt;services&lt;/em&gt; es similar a la que usábamos en Docker Compose y define los contenedores. Por ejemplo, para definir que el servicio se componga de un contenedor con un servidor web &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; usaríamos el siguiente archivo. El parámetro &lt;em&gt;version&lt;/em&gt; es muy importante ya que indica las opciones soportadas en el archivo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7fccfe93a0e297cd8cb3df83a3b9d967.js?file=docker-compose-stack-nginx.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;A destacar las opciones &lt;em&gt;deploy&lt;/em&gt; y &lt;em&gt;replicas&lt;/em&gt; ya que indican cuantas instancias o contenedores de ese servicio habrá en el &lt;em&gt;cluster&lt;/em&gt;. Al igual que con los comandos de Docker Swarm era posible crear redes por software a las cuales conectar los contenedores para que se puedan comunicar entre sí en la sección &lt;em&gt;networks&lt;/em&gt; de cada servicio se indica las redes a las que conectarlo y en la sección a nivel raíz del archivo las redes a crear.&lt;/p&gt;

&lt;p&gt;También hay una sección propia para definir los volúmenes que dependiendo del &lt;em&gt;driver&lt;/em&gt; se integra con diferentes plataformas de computación como &lt;a href=&#34;http://aws.amazon.com/es/ec2/&#34;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;, &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; con &lt;a href=&#34;https://rexray.readthedocs.io/en/v0.3.3/&#34;&gt;REX-Ray&lt;/a&gt;, &amp;hellip;. Los volúmenes proporcionan persistencia a los efímeros contenedores, por un lado almacenar datos que deban sobrevivir a la vida de un contenedor en su sistema de archivos es inadecuado ya que sus datos no son compartidos si se inicia otra instancia del contenedor y son eliminados cuando el contenedor desaparece, por otro lado en un &lt;em&gt;cluster&lt;/em&gt; de contenedores Docker si un contenedor de un servicio finaliza inexperadamente Docker Swarm puede decidir reiniciarlo en cualquier otro nodo del &lt;em&gt;cluster&lt;/em&gt; para mantener el estado del servicio por lo que los archivos compartidos no pueden estar tampoco en el &lt;em&gt;host&lt;/em&gt; que hospeda los contenedores. Por estos motivos Docker Swarm necesita de un sistema de persistencia, que en este caso son los volúmenes definidos en la sección del mismo nombre &lt;em&gt;volumes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para mayor seguridad se ha incorporado la sección &lt;em&gt;secrets&lt;/em&gt; en la que se especifican elementos de datos como archivos que en el contenedor se montan en el directorio &lt;em&gt;/run/secrets/&lt;/em&gt;. Algunos elementos sensibles como usuarios y contraseñas al proporcionarse como parámetros o variables de entorno aparecen haciendo un listado de procesos del sistema con sus respectivos comandos de lanzamiento y parámetros, lo que es un problema de seguridad. Hay otros elementos sensibles como claves SSH, claves privadas o certificados que ahora con los &lt;em&gt;secrets&lt;/em&gt; no es necesario incluirlos en la propia imagen del contenedor.&lt;/p&gt;

&lt;p&gt;La forma de iniciar y eliminar un &lt;em&gt;stack&lt;/em&gt; en un &lt;em&gt;cluster&lt;/em&gt; de nodos Docker Swarm es el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7fccfe93a0e297cd8cb3df83a3b9d967.js?file=06-docker-compose-stack-deploy-nginx.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/7fccfe93a0e297cd8cb3df83a3b9d967.js?file=docker-compose-stack-remove-nginx.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/220/nginx-service.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/220/nginx-service-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cluster de nodos de Docker Swarm con servicio de nginx replicado con 2 instancias&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En la captura de la terminal se aprecia como estando el &lt;em&gt;cluster&lt;/em&gt; formado por tres nodos y el servicio estando replicado con dos instancias Docker Swarm ha decidido iniciar una instancia de contenedor nginx en el &lt;em&gt;nodo-01&lt;/em&gt; y otra en el &lt;em&gt;nodo-03&lt;/em&gt; pero perfectamente podría haber iniciado una de ellas en el &lt;em&gt;nodo-02&lt;/em&gt;. Gracias a las capacidades de &lt;em&gt;networking&lt;/em&gt; de Docker Swarm con &lt;a href=&#34;https://docs.docker.com/engine/swarm/ingress/&#34;&gt;Routing Mesh&lt;/a&gt; al cualquier nodo que se le haga una petición al puerto 80 del servicio de nginx devolverá una respuesta, incluso si se hace en el ejemplo la petición al &lt;em&gt;nodo-02&lt;/em&gt; la respuesta será devuelta aunque en ese nodo no tenga una instancia de contenedor ejecutándose, realmente redirigirá la petición de forma transparente para el cliente la petición a un nodo que si tenga una instancia de nginx. También, al estar el servicio replicado con dos instancias Docker Swarm realizará automáticamente un &lt;a href=&#34;https://docs.docker.com/docker-cloud/getting-started/deploy-app/9_load-balance_the_service/&#34;&gt;balanceo de carga&lt;/a&gt; &lt;em&gt;round-robin&lt;/em&gt; repartiendo las peticiones entre cada una de las instancias de nginx.&lt;/p&gt;

&lt;p&gt;De los &lt;em&gt;volumes&lt;/em&gt; y &lt;em&gt;secrets&lt;/em&gt; en posteriores entregas de esta &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;serie de artículos sobre Docker&lt;/a&gt; las comentaré de forma específica. El &lt;em&gt;stack&lt;/em&gt; de servicios mostrado en este ejemplo es muy sencillo. Aunque también sencillo en el mismo código fuente del ejemplo incluyo otro &lt;em&gt;stack&lt;/em&gt; formado por un servicio de nginx y una aplicación Java con &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; que hace uso de &lt;em&gt;secrets&lt;/em&gt; y &lt;em&gt;volumes&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7fccfe93a0e297cd8cb3df83a3b9d967.js?file=docker-compose-stack-app.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es &lt;a href=&#34;http://amzn.to/2mIirti&#34;&gt;The Devops 2.1 Toolkit&lt;/a&gt; que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es &lt;a href=&#34;http://amzn.to/2mF3Xtj&#34;&gt;Docker in Action&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=a6c4acab72c208d29232f2e0a8edb8ee&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/swarm/stack-deploy/&#34;&gt;Deploy a stack to a swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;Compose file reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/</id>
        <title>Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java</title>        
        <updated>2017-04-02T10:15:00+02:00</updated>
        <published>2017-03-31T19:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El &lt;em&gt;kit&lt;/em&gt; de iniciación a la electrónica para la Raspberry Pi tiene un sensor para la temperatura y humedad, el modelo DHT11. Obtener la información requiere restricciones de tiempo, este es un caso de uso justificado para usar lenguaje C y JNI para integrarlo con Java. En el ejemplo el código C llama a un método de una clase Java con dos valores enteros o lanza una excepción en caso de que al realizar la lectura haya habido algún error en la transmisión de los bits.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Entre los varios sensores incluídos en el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación para la Raspberry Pi&lt;/a&gt; está el sensor de temperatura y humedad con el modelo DHT11. El DHT11 es un sensor muy básico pero suficiente y válido si el objetivo es trastear un poco con hardware.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;http://www.micropik.com/PDF/dht11.pdf&#34;&gt;especificación del sensor DHT11&lt;/a&gt; está descrita su funcionamiento y forma de comunicación. Utiliza 3 cables, uno para la corriente de 3.3V, otro para tierra y finalmente uno de datos que se conecta a cualquier &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; de la Raspberry Pi. Según la especificación el sensor proporciona sus datos en unos 4 ms cuando se le emite un pulso bajo durante unos pocos microsegundos y a continuación uno alto durante otros pocos microsegundos, momento a partir del cual el sensor emite 40 bits de información empezando por un pulso bajo de inicio y a continuación el propio bit con un pulso alto, según sea la duración del pulso alto el bit se considera un 0 si es menor de unos 27μs y un 1 si dura más de ese tiempo hasta unos 80μs momento en el que se emite el siguiente bit de información. Los primeros 8 bits corresponden a la parte entera de la humedad, los siguientes 8 bits a la parte decimal de la humedad, el tercer grupo de 8 bits a la parte entera de la temperatura y 8 bits más para la parte decimal. El último grupo de 8 bits hasta completar los 40 bits son de &lt;em&gt;checksum&lt;/em&gt; para detectar errores en la transmisión. El porcentaje de errores en la transmisión significativo en este sensor y quizá haya que realizar varias lecturas del sensor para obtener una correcta.&lt;/p&gt;

&lt;p&gt;Dada las restricciones de tiempo que utiliza el sensor en el ejemplo usaré el lenguaje C para obtener los valores de temperatura y humedad y &lt;abbr title=&#34;Java Native Interface&#34;&gt;JNI&lt;/abbr&gt; para acceder a ellos desde Java. Aún usando C se producen errores en la obtención de los valores ya que el método usado por el sensor y transmitir los datos basados en tiempo de microsegundos no es muy fiable. Usando Java la situación sería peor por las restricciones que impone la máquina virtual con sus paradas para la recolección de basura por ejemplo. Así que el ejemplo consistirá en una combinación de C y Java con JNI un poco más avanzado que el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/&#34;&gt;Ejemplo de JNI, usar código en C desde Java&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/dht11-1.jpg&#34; title=&#34;Sensor DHT11&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/dht11-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/dht11-2.jpg&#34; title=&#34;Sensor DHT11&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/dht11-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Sensor DHT11&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Lo primero que deberemos hacer para acceder a la información del sensor desde Java es crear una clase que contenga un método nativo que realizará la lectura de la información en C. Con la utilidad &lt;em&gt;javah&lt;/em&gt; obtendremos el archivo de cabecera que implementará el programa en C. Finalmente, siguiendo la especificación se escribe el código C que realice la lectura que en este caso usará la librería &lt;a href=&#34;http://wiringpi.com/&#34;&gt;wiringPi&lt;/a&gt; para la interacción con los pines GPIO de la Raspberry Pi.&lt;/p&gt;

&lt;p&gt;El código en C invocará el método &lt;em&gt;setTemperatureHumidity&lt;/em&gt; pasando como parámetros los datos de temperatura y humedad leídos del sensor, el método nativo &lt;em&gt;read&lt;/em&gt; es utilizado por el código Java que controla el sensor para realizar la lectura en el código C.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.h&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.c&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código en C del sensor hay que compilarlo en la Raspberry Pi con el compilador &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; obteniendo una librería con código nativo que Java y JNI cargará y enlazará de forma dinámica en el programa Java. Ya que el código C usa la librería wiringPi ha de instalarse previamente junto con el compilador gcc. Obtenida la librería la copiamos mediante FTP o SSH de la Raspberry Pi a nuestro equipo de desarrollo. El código C realiza la lectura usando la librería wiringPi siguiendo la especificación de como se transmiten los datos por el sensor, realizada una lectura correcta usa varias de las funciones de la estructura &lt;a href=&#34;http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html&#34;&gt;JNIEnv&lt;/a&gt; para obtener la referencia a un método de la clase DHT11 e invocarlo con los valores obtenidos del sensor o lanza una excepción si la lectura ha sido errónea.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=install-packages.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El comando para compilar la librería de código nativo a partir del código en C y el archivo de cabecera generado con &lt;em&gt;javah&lt;/em&gt; es el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=compile.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para facilitar la ejecución la librería la proporcionó ya compilada y ubicada en el directorio &lt;em&gt;src/main/resources&lt;/em&gt; de modo que será incluida en el archivo &lt;em&gt;jar&lt;/em&gt; generado por &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; en el ejemplo y que la clase DHT11 extraerá al directorio temporal del sistema y cargará para su uso.&lt;/p&gt;

&lt;p&gt;La clase Java del ejemplo que hace uso del sensor realiza una lectura cada 3 segundos e imprime en la terminal y en el &lt;em&gt;display&lt;/em&gt; 1602 el último valor obtenido correctamente de la temperatura y humedad.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=TemperatureHumidity.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este es el esquema de conexiones que he utilizado para el ejemplo y una foto del cableado real, he usado del &lt;em&gt;pin&lt;/em&gt; GPIO número 2 según la nomenclatura de wiringPi para el cable de datos del sensor DHT11 que se corresponde con pin número 13 según la nomenclatura del &lt;em&gt;header&lt;/em&gt; de la Raspberry Pi. Para ver el cableado del &lt;em&gt;display&lt;/em&gt; 1602 más detalladamente y la activación del bus de comunicación I2C que necesita consulta el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/cableado.jpg&#34; title=&#34;Cableado sensor DHT11 y display 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor DHT11 y display 1602&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Ejecutando el programa del ejemplo y usando el display 1602 (16 columnas y 2 filas) se muestra la temperatura y humedad obtenida del sensor.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/temperature-humidity.jpg&#34; title=&#34;Cableado ejemplo y funcionando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/temperature-humidity-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/display.jpg&#34; title=&#34;Cableado ejemplo y funcionando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/219/display-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Cableado ejemplo y funcionando&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En el kernel de Linux hay un módulo que proporciona también los valores del sensor, sin embargo, no he conseguido obtener la temperatura y humedad usándolo. Lo he probado con el kernel 4.4 de Arch Linux ARM y en la versión 4.9 veo que hay cambios en este módulo que quizá lo hagan funcionar. Para usar el módulo del kernel hay que añadir un poco de configuración para el inicio de la Raspberry Pi. En los archivos &lt;em&gt;/sys/devices/platform/dht11@0/iio:device0/in_temp_input&lt;/em&gt; y &lt;em&gt;/sys/devices/platform/dht11@0/iio:device0/in_temp_input&lt;/em&gt; estarán la temperatura y humedad respectivamente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=kernel-module-config.txt&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=cat.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para ejecutar el ejemplo con ya todo instalado uso uno de los siguientes dos comandos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeTemperatureHumidity&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html&#34;&gt;Java programming with JNI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hirt.se/blog/?p=493&#34;&gt;Accessing 1-wire Protocol Devices from Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/&#34;&gt;How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.prometec.net/sensores-dht11/&#34;&gt;Sensores de temperatura DHT11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Hexalyse/RPi-weather-log/blob/master/dht11.c&#34;&gt;dht11.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.uugear.com/portfolio/read-dht1122-temperature-humidity-sensor-from-raspberry-pi/&#34;&gt;Read DHT11/22 Temperature &amp;amp; Humidity Sensor from Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor&#34;&gt;Digital output temperature and humidity sensor DHT11 - DHT22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://playground.arduino.cc/Main/DHT11Lib&#34;&gt;A DHT11 Class for Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/drivers/iio/humidity/dht11.c&#34;&gt;torvalds/linux/blob/master/drivers/iio/humidity/dht11.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortosaforum.com/raspberrypi/dht11driver.htm&#34;&gt;RaspberryPi DHT11 temperature and humidity sensor driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/</id>
        <title>Ejemplo de JNI, usar código en C desde Java</title>        
        <updated>2017-03-25T10:05:00+01:00</updated>
        <published>2017-03-25T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Para tareas muy específicas que requieran alto rendimiento, baja latencia, tiempo real o haya restricciones de tiempo el lenguaje Java y la JVM pueden mostrar algunas limitaciones obligando a escribir alguna sección crítica de un programa en un lenguaje nativo como C o C++. Para hacer posible la integración entre Java y C existe en Java la API JNI. En este artículo mostraré como realizar un programa Java que emite el mensaje Hola Mundo desde una biblioteca compartida en C y usando JNI.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;SVG&#34; title=&#34;SVG&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.png&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Nunca hasta ahora había tenido necesidad de crear un programa que no estuviese completamente escrito en el lenguaje Java. La &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/overview-summary.html&#34;&gt;API de Java&lt;/a&gt; ofrece multitud de clases para cualquier funcionalidad que necesitemos desde estructuras de datos hasta algoritmos de búsqueda o criptografía. También porque el rendimiento de un programa en Java es suficiente y similar a un programa equivalente escrito en C o C++ gracias a las optimizaciones que implementa la máquina virtual de Java o &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; aún siendo los programas Java compilados a una representación intermedia de &lt;em&gt;bytecode&lt;/em&gt; independiente de la arquitectura de procesador y sistema operativo en archivos de extensión &lt;em&gt;class&lt;/em&gt; y posteriormente interpretados y traducidos a la arquitectura de ejecución, lo que le proporciona a Java la conocida frase &lt;em&gt;&amp;ldquo;Write once, run anywhere&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, en casos que se necesita un alto rendimiento para tareas muy específicas o evitar las imposiciones de la máquina virtual como las paradas que realiza para el recolector de basura una solución es escribir esa funcionalidad crítica en lenguaje C, C++ e incluso en &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. El caso de necesidad que me he encontrado es acceder a un sensor de temperatura DHT11 del &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt; para leer de él la temperatura y humedad. La forma que tiene el sensor DHT11 de proporcionar los datos tiene restricciones de tiempo, cuando se le requieren los valores envía 80 bits de datos donde un pulso de 27μs significa un 0 y un pulso de más de ese tiempo hasta 70μs significa un 1. Estas restricciones de tiempo del sensor y el hecho de que es en una modesta en potencia &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; 1 donde lo usaré hace que Java no sea capaz de leer correctamente los valores del sensor.&lt;/p&gt;

&lt;p&gt;Acceder desde Java a código nativo en C requiere usar &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html&#34;&gt;Java Native Interface o por sus siglas JNI&lt;/a&gt;. Lo primero que hay que realizar es crear una clase que declare los métodos que serán implementados de forma nativa declarando estos métodos usando la palabra reservada &lt;em&gt;native&lt;/em&gt; y que serán enlazados por la JVM cargando una librería compartida con &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#loadLibrary-java.lang.String-&#34;&gt;System.loadLibrary()&lt;/a&gt;. Creada la clase Java se ha de generar el archivo de cabecera &lt;em&gt;.h&lt;/em&gt; propia del lenguaje C con el programa de utilidad del JDK &lt;em&gt;javah&lt;/em&gt;. Con el archivo de cabecera se implementa la función y se crea una librería compartida en &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt; usando el &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;compilador gcc&lt;/a&gt;. Con la librería compartida se puede iniciar el programa Java. Si la biblioteca compartida no se encuentra se lanzará una excepción del tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/UnsatisfiedLinkError.html&#34;&gt;UnsatisfiedLinkError&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/UnsatisfiedLinkError.png&#34; title=&#34;Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/UnsatisfiedLinkError-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Algunas otras necesidades para hacer uso de JNI son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acceder a características dependientes de la plataforma necesitadas por la aplicación que no están soportadas en la librería estándar de Java.&lt;/li&gt;
&lt;li&gt;Ya hay una librería escrita en otro lenguaje y se quiere hacer accesible a código Java a través de JNI.&lt;/li&gt;
&lt;li&gt;Se quiere implementar una pequeña parte de código crítico en un lenguaje de bajo nivel como ensamblador.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde los métodos de código nativo se puede:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crear, inspeccionar y actualizar objetos Java (incluyendo arrays y strings).&lt;/li&gt;
&lt;li&gt;Llamar a métodos Java.&lt;/li&gt;
&lt;li&gt;Capturar y lanzar excepciones.&lt;/li&gt;
&lt;li&gt;Cargar y obtener información de clases.&lt;/li&gt;
&lt;li&gt;Realizar validación de tipos en tiempo de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los comandos para generar el archivo de cabecera de C y compilarlo con el código nativo en una librería compartida con gcc son:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=build.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;La cabecera usa varias definiciones de tipos definidas en los archivos &lt;em&gt;jni.h&lt;/em&gt; y el archivo que variará según el sistema operativo &lt;em&gt;jni_md.h&lt;/em&gt;. En la &lt;a href=&#34;http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html&#34;&gt;estructura JNIEnv&lt;/a&gt; con múltiples funciones de integración en C y Java, también varias definiciones de los tipos Java para usarlos en C como &lt;em&gt;jobject&lt;/em&gt;, &lt;em&gt;jstring&lt;/em&gt;, &lt;em&gt;jint&lt;/em&gt;, &lt;em&gt;jboolean&lt;/em&gt;, &lt;em&gt;jlong&lt;/em&gt;, &lt;em&gt;jdouble&lt;/em&gt;, &lt;em&gt;jchar&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;El programa que emite el mensaje &lt;em&gt;Hello World!&lt;/em&gt; desde código nativo en C debe cargar y enlazar la librería de código nativo con el código de la clase Java. Esto se muestra en el bloque de inicialización &lt;em&gt;static&lt;/em&gt; de la clase, en este caso usándo el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#load-java.lang.String-&#34;&gt;System.load()&lt;/a&gt;, la librería de código nativo de extensión &lt;em&gt;.so&lt;/em&gt; en GNU/Linux como en este caso al construirse el proyecto se incluye en el archivo &lt;em&gt;.jar&lt;/em&gt; del artefacto resultante se extráe al directorio temporal y se carga desde esa ubicación temporal. En el programa se llama al método &lt;em&gt;print&lt;/em&gt; implementado en código nativo y en el código C se usa la función &lt;em&gt;printf&lt;/em&gt; de la librería &lt;em&gt;stdio&lt;/em&gt; para emitir el mensaje:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.c&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.h&#34;&gt;&lt;/script&gt;

&lt;p&gt;La librería compartida para un sistema &lt;em&gt;amd64&lt;/em&gt; la he compilado en mi equipo de escritorio y para la versión &lt;em&gt;arm&lt;/em&gt; en la Raspberry Pi e incluido en el directorio &lt;em&gt;src/main/resources&lt;/em&gt; de código fuente del ejemplo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/JniHelloWorld-amd64.png&#34; title=&#34;Mensaje en la terminal emitido desde código nativo (amd64)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/JniHelloWorld-amd64-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/JniHelloWorld-arm.png&#34; title=&#34;Mensaje en la terminal emitido desde código nativo (ARM)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/217/JniHelloWorld-arm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Mensaje en la terminal emitido desde código nativo en un sistema amd64 y ARM&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Ente ejemplo usa Java 8 y requiere instalar el compilador gcc para compilar la librería con código nativo. &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; ofrece soporte para &lt;a href=&#34;https://docs.gradle.org/3.4.1/userguide/native_software.html&#34;&gt;compilar código nativo con su plugin&lt;/a&gt;, sin embargo, he preferido usar y conocer los comandos javah y gcc sin usar Gradle. En el siguiente artículo mostraré el ejemplo del sensor DHT11 usando JNI y código nativo en C llamando a métodos de un objeto Java desde código C.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeJniHelloWorldLocal&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dogan.io/2015/08/15/java-jni-jnr-go/&#34;&gt;GO: Call me maybe, Java!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html&#34;&gt;Java Native Interface Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html&#34;&gt;Java Programming Tutorial, Java Native Interface (JNI)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/</id>
        <title>Introducción y ejemplo de cluster de contenedores con Docker Swarm</title>        
        <updated>2017-03-19T12:00:00+01:00</updated>
        <published>2017-03-19T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Las funcionalidades de Docker Swarm están incorporadas en Docker para gestionar &lt;em&gt;clusters&lt;/em&gt; de nodos con contenedores de los servicios que deseemos. En artículo comentaré algunas de las propiedades de &lt;em&gt;networkning&lt;/em&gt; distribuido incorporado en Docker, como crear un &lt;em&gt;cluster&lt;/em&gt; de nodos Docker usando VirtualBox con máquinas virtuales para simular múltiples máquinas junto con como lanzar un servicio en el &lt;em&gt;cluster&lt;/em&gt; que en este caso consistirá en un servidor web nginx.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/docker.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;artículos anteriores de la serie sobre Docker&lt;/a&gt; comentaba varias de las herramientas de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; como &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, Dockerfile o &lt;a href=&#34;https://docs.docker.com/machine/&#34;&gt;Docker Machine&lt;/a&gt; con ejemplos de como usarlo en local. Una de las herramientas que me quedaba por investigar era &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; para crear &lt;em&gt;clusters&lt;/em&gt; de nodos para contenedores Docker en un entorno de producción. A partir de la versión 1.12 de Docker se han incorporado varias características a Docker para usaar contenedores de forma distribuida y que a pesar de la complejidad subjacente que debe haber es realmente simple usarlo.&lt;/p&gt;

&lt;p&gt;Una de las características es el &lt;em&gt;networking&lt;/em&gt; que hace trasnparente la comunicación en red distribuida que se hace entre los nodos y los contenedores de esos nodos. Además permite crear redes por software para que los contenedores conectados a esas redes se comuniquen de forma privada. Otra característica interesante de Docker Swarm es que se encarga de monitorizar el estado de los servicios recreando contendores si alguno deja de funcionar. También a través del denominado &lt;em&gt;routing mesh&lt;/em&gt; da igual al nodo del &lt;em&gt;cluster&lt;/em&gt; por el que se acceda y da igual en que nodo esté el contenedor que Docker Swarm con esta propiedad se encargará de hacer llegar la petición al contenedor. Además, a lo que en Docker Swarm se denomina servicio se realiza balanceo de carga entre la instancias del mismo que haya en el &lt;em&gt;cluster&lt;/em&gt; y al servicio se le asigna un DNS y dirección IP por el que puede ser accedido por otros servicios.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo para crear el &lt;em&gt;cluster&lt;/em&gt; de nodos Docker usaré Docker Machine para crear las máquinas de los nodos en máquinas virtuales de &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; aunque su funcionamiento es similar si usásemos la nube de &lt;a href=&#34;http://aws.amazon.com/es/ec2/&#34;&gt;Amazon EC2&lt;/a&gt;, &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; u otros.&lt;/p&gt;

&lt;p&gt;El siguiente &lt;em&gt;script&lt;/em&gt; crea primeramente varios nodos cada uno en una máquina virtual, luego establece el nodo 01 como &lt;em&gt;manager&lt;/em&gt; y los nodos 02 y 03 como &lt;em&gt;workers&lt;/em&gt; usando un &lt;em&gt;token&lt;/em&gt; para unirlos al &lt;em&gt;cluster&lt;/em&gt; según su rol. Los nodos &lt;em&gt;manager&lt;/em&gt; se encargan de mantener el estado del &lt;em&gt;cluster&lt;/em&gt; y los que a través de ellos los comandos de los servicios deben ser lanzados, en un entorno de producción posiblemente tendríamos 3 nodos &lt;em&gt;manager&lt;/em&gt; para soportar tolerancia a fallos. Finalmente, se obtiene lista los nodos del &lt;em&gt;cluster&lt;/em&gt;. El comando &lt;em&gt;docker-machine env node-01&lt;/em&gt; permite establecer el entorno contra el que el comando &lt;em&gt;docker&lt;/em&gt; lanzará las operaciones como si de la máquina local se tratase.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=01-cluster-create.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez creado los nodos es cuando podemos empezar a crear servicios en el &lt;em&gt;cluster&lt;/em&gt;. Los servicios son una definición de los contenedores de Docker que queremos que el &lt;em&gt;cluster&lt;/em&gt; ejecute. En el ejemplo definiré el servicio de un servidor web &lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt;, primeramente crearé una red por software en el &lt;em&gt;cluster&lt;/em&gt; a la que los servicios pueden conectarse que en el ejemplo (aunque para este no es necesario) utilizaré para hacer una consulta DNS con la herramienta &lt;a href=&#34;https://linux.die.net/man/1/drill&#34;&gt;drill&lt;/a&gt; para ver el nombre de dominio y dirección IP que asigna Docker Swarm al servicio del servidor web. Con &lt;em&gt;docker service create&lt;/em&gt; se crean los servicios, algunos de los parámetros del comando son el nombre del servicio que queremos asignarle, los puertos que expone en este caso el 80 y 443 en el &lt;em&gt;host&lt;/em&gt; para que sea accesible desde fuera del &lt;em&gt;cluster&lt;/em&gt;, la redes a las que está conectado y finalmente la imagen del contenedor del servicio que en este caso será la versión de &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;nginx con Alpine para Docker&lt;/a&gt;. Se pueden listar los servicios que contiene el &lt;em&gt;cluster&lt;/em&gt; con &lt;em&gt;docker service ls&lt;/em&gt; y los procesos de cada nodo donde podemos ver en que nodos se está ejecutando los contenedores con &lt;em&gt;docker ps&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=06-nginx-create.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una de las propiedades interesantes del &lt;em&gt;networking&lt;/em&gt; de Docker Swarm es que ofrece incorporado balanceo de carga, esto es, si el servicio de nginx del ejemplo estuviese formado por dos instancias las peticiones se distribuirían entre las instancias usando el método &lt;em&gt;round-robin&lt;/em&gt;. Otra característica interesante si se observa el ejemplo con detalle es que da igual el nodo al que hagamos la petición que la respuesta se obtendrá igualmente, esto es, aunque la petición se haga al nodo 01 y realmente el contenedor del servidor nginx se esté ejecutando en el nodo 02 la petición se realizará correctamente gracias al &lt;em&gt;routing mesh&lt;/em&gt; del &lt;em&gt;neworking&lt;/em&gt; de Docker Swarm, esto es gracias a que cada servicio tiene asignada una dirección IP, como se ha visto anteriormente en la salida del comando &lt;em&gt;drill&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En este vídeo de &lt;a href=&#34;https://asciinema.org/&#34;&gt;asciinema&lt;/a&gt; se ve en funcionamiento todos los anteriores comandos. Y en la aplicación de VirtualBox estarán las máquinas virtuales de cada uno de los nodos que crea el ejemplo. En el vídeo se aprecia que el servicio de nginx se está ejecutando en el nodo 02 cuando se listan los procesos de Docker de cada nodo con &lt;em&gt;docker ps&lt;/em&gt;, nótese sin embargo que al hacer un petición HTTP a cualquiera de los nodos se devuelve la página de inicio de nginx ya que gracias al &lt;em&gt;routing mesh&lt;/em&gt; de Docker Swarm la petición se redirige de forma transparente para el cliente y el servicio al nodo donde realmente se está ejecutando el contenedor de nginx.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/107868.js&#34; id=&#34;asciicast-107868&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/107868&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/107868.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Introducción y ejemplo de cluster de contenedores con Docker Swarm&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/216/maquinas-virtuales-cluster.png&#34; title=&#34;Máquinas virtuales de los nodos del _cluster_ de Docker Swarm&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/216/maquinas-virtuales-cluster-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Máquinas virtuales de los nodos del cluster de Docker Swarm&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Los comandos para eliminar un servicio del &lt;em&gt;cluster&lt;/em&gt; y eliminar completamente el &lt;em&gt;cluster&lt;/em&gt; son los siguientes.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=nginx-remove.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=cluster-remove.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un libro que me ha gustado mucho y que recomiendo leer sobre Docker Swarm es &lt;a href=&#34;http://amzn.to/2mIirti&#34;&gt;The Devops 2.1 Toolkit&lt;/a&gt; que lo explica detalladamente y todo el libro está orientado a como usarlo en un entorno de producción. Un libro más introductorio que también he leído y que está bastante bien es &lt;a href=&#34;http://amzn.to/2mF3Xtj&#34;&gt;Docker in Action&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=a6c4acab72c208d29232f2e0a8edb8ee&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=2101ae950cfcfe9e69b6cc1210e4bf2c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Finalmente, quizás si estás usando GNU/Linux y VirtualBox como yo al crear los nodos con el comando &lt;em&gt;docker-machine&lt;/em&gt; te produzca el siguiente error (quizá se corrija en futuras versiones de Docker o VirtualBox).&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=vboxnet0-error.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;La solución que he encontrado para que funcione es asignar una dirección IP al adaptador puente solo-anfitrión y levantar la interfaz que usa Docker para comunicarse con las máquinas virtuales previamente a crear el nodo. En &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; con los siguientes comandos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9b48124e3bf0cde0cd88a198bda90e8.js?file=01-vboxnet0-configure.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Se puede definir un conjunto de servicios como una unidad en un archivo en &lt;em&gt;stacks&lt;/em&gt; de forma similar a como es posible hacer con Docker Compose cosa que mostraré en otro artículo.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DockerSwarm&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</title>        
        <updated>2017-03-19T02:00:00+01:00</updated>
        <published>2017-03-18T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Uno de los motivos por los que compré el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt;, además de cacharrear un poco, era en concreto controlar el &lt;em&gt;display&lt;/em&gt; LCD de 16 columnas y 2 filas. En el &lt;em&gt;kit&lt;/em&gt; el &lt;em&gt;display&lt;/em&gt; viene con un adaptador con el bus de comunicación I2C. El &lt;em&gt;display&lt;/em&gt; se puede usar sin este bus pero requiere utilizar muchos más pines GPIO de datos de los limitados 17 que ofrece la Raspberry Pi 1 y los 26 de las Raspberry Pi B+, 2  y 3. Controlar el &lt;em&gt;display&lt;/em&gt; con I2C requiere únicamente 2 pines, por contra sin usar I2C requiere un número significativamente mayor 4 u 8 pines.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;display&lt;/em&gt; 1602 con su adaptador para el bus I2C que viene con el &lt;em&gt;kit&lt;/em&gt; ya incorporado en la parte trasera es el siguiente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/display-lcd-1602.jpg&#34; title=&#34;Display LCD 16 columnas y 2 filas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/display-lcd-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/adaptador-bus-i2c-1602.jpg&#34; title=&#34;Adaptador bus I2C para display 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/adaptador-bus-i2c-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Display LCD 1602 y adaptador bus I2C&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El esquema de conexionado para controlar el &lt;em&gt;display&lt;/em&gt; requiere usar los pines de la Raspberry Pi &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; además de un &lt;em&gt;pin&lt;/em&gt; para proporcionar un voltaje de 5V y otro &lt;em&gt;pin&lt;/em&gt; para la tierra. El &lt;em&gt;pin&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; es el número 2 según la numeración de pines de la Raspberry Pi y el &lt;em&gt;SDL&lt;/em&gt; es el 5. El &lt;em&gt;pin&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; es utilizado en el bus I2C para transmitir los datos y el &lt;em&gt;SDL&lt;/em&gt; para la señal de reloj o sincronización. Utilizando la placa de extensión wiringPi de 26 &lt;em&gt;pines&lt;/em&gt; los &lt;em&gt;pines&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; se encuentran identificados por su nombre y el de la placa de extensión de 40 &lt;em&gt;pines&lt;/em&gt; que viene con el &lt;em&gt;kit&lt;/em&gt; de iniciación también, deberemos identificar estos pines y realizar las conexiones adecuadamente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/breadboard-cableado.jpg&#34; title=&#34;Cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/breadboard-cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/esquema-cableado.png&#34; title=&#34;Esquema del cableado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/esquema-cableado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Cableado en la breadboard&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Hay que emplear varios cables macho-macho y hembra-hembra para conectar a los pines del adaptador I2C del &lt;em&gt;display&lt;/em&gt;  a los &lt;em&gt;pines&lt;/em&gt; del voltaje de 5V, tierra, &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; de la placa de pruebas sin soldadura.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/cables-macho-macho-hembra-hembra.jpg&#34; title=&#34;Unión cables macho-macho y hembra-hembra&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/cables-macho-macho-hembra-hembra-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Unión cables macho-hembra&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El siguiente paso será activar el bus I2C en la Raspberry Pi que por defecto está desactivado. Esto requiere añadir unos parámetros en la configuración de arranque y cargar unos módulos del kernel que finalmente crearán un dispositivo tal que en &lt;em&gt;/dev/i2c-0&lt;/em&gt; o &lt;em&gt;/dev/i2c-0&lt;/em&gt;. Si instalamos el paquete &lt;em&gt;i2c-tools&lt;/em&gt; podremos detectar el &lt;em&gt;display&lt;/em&gt; en el bus I2C, en la captura de pantalla en la dirección 27 que hay que usar al construir la instancia del controlador del &lt;em&gt;display&lt;/em&gt;. Estos cambios en la configuración de inicio requieren reiniciar la Raspberry Pi. En un sistema con la distribución &lt;a href=&#34;http://archlinuxarm.org/&#34;&gt;Arch Linux ARM&lt;/a&gt; los cambios son los siguientes.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=configuration.txt&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/i2cdetect.png&#34; title=&#34;Detectción del display 1602 en el bus I2C&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/215/i2cdetect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Detectción del display 1602 en el bus I2C&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Según la &lt;a href=&#34;https://www.sparkfun.com/datasheets/LCD/HD44780.pdf&#34;&gt;especificación del &lt;em&gt;display&lt;/em&gt; 1602&lt;/a&gt; este componente soporta varios comandos para controlarlo, algunos son para limpiar el texto, cambiar la dirección de escritura, añadir caracteres personalizados y emitir texto en la línea o posición del &lt;em&gt;display&lt;/em&gt; que queramos. No es simple el controlar el &lt;em&gt;display&lt;/em&gt; a bajo nivel ya que hay que trabajar en momentos con binario y usar bytes, por ello para el ejemplo usaré la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; que ya trae una implementación de controlador con funciones de alto nivel &lt;em&gt;I2CLcd&lt;/em&gt; que en versiones más recientes de la librería ha sido renombrada a &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html&#34;&gt;HD44780Lcd&lt;/a&gt; mucho más cómoda que enviar &lt;em&gt;bytes&lt;/em&gt; a bajo nivel al bus I2C, el &lt;a href=&#34;https://github.com/mattjlewis/diozero/blob/master/diozero-core/src/main/java/com/diozero/HD44780Lcd.java&#34;&gt;código fuente de la clase HD44780Lcd&lt;/a&gt; está disponible y podemos verlo si hay curiosidad.&lt;/p&gt;

&lt;p&gt;En mi caso con la Raspberry Pi 1 he tenido que utilizar la versión 0.9 de la librería diozero porque la 0.8 me generaba un &lt;em&gt;stacktrace&lt;/em&gt; de una excepción &lt;em&gt;java.lang.UnsupportedOperationException&lt;/em&gt;. Obtener esta versión de la librería como aún era de desarrollo y no estaba publicada en &lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt; la he descargado de un &lt;a href=&#34;https://drive.google.com/drive/u/0/folders/0B2Kd_bs3CEYaZ3NiRkd4OXhYd3c&#34;&gt;google drive que ha creado el autor&lt;/a&gt; y usado en &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; como una dependencia del sistema de ficheros. Como librería subyacente de diozero para controlar los pines GPIO he usado &lt;a href=&#34;http://abyz.co.uk/rpi/pigpio/&#34;&gt;pigpio&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=java.lang.UnsupportedOperationException&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el ejemplo mostraré un texto en cada una de las lineas del &lt;em&gt;display&lt;/em&gt; y usaré una de las funciones del para mostrar caracteres personalizados con los que es posible crear &lt;em&gt;emojis&lt;/em&gt; o caracteres nuevos. El controlador de diozero ya contiene una buena colección de caracteres personalizados que definen el patrón de 5x8 puntos que siguen, los nombres de estos caracteres personalizados están en la clase interna &lt;em&gt;Characters&lt;/em&gt; de &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html&#34;&gt;HD44780Lcd&lt;/a&gt; aunque también podemos definir nuevos. El ejemplo es el siguiente donde se muestra el uso de los métodos &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setText-int-java.lang.String-&#34;&gt;setText&lt;/a&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-&#34;&gt;setCharacter&lt;/a&gt;, también el constructor donde hay que indicar la dirección asignada al dispositivo en el bus I2C que siendo la 27 corresponde con el valor definido en una constante. Pero también hay otros métodos como &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#clear--&#34;&gt;clear&lt;/a&gt;, &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOff--&#34;&gt;cursorOff&lt;/a&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOn--&#34;&gt;cursorOn&lt;/a&gt; para apagar y encender el cursor, &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOff--&#34;&gt;displayOff&lt;/a&gt;
&lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOn--&#34;&gt;displayOn&lt;/a&gt; para apgar y encender el &lt;em&gt;display&lt;/em&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#createChar-int-byte:A-&#34;&gt;createChar&lt;/a&gt; para crear nuevos caracteres definidos como una &lt;em&gt;array&lt;/em&gt; de 8 posiciones donde cada &lt;em&gt;byte&lt;/em&gt; indica los pixeles encendidos de cada fila del caracter de 5x8 y con &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-&#34;&gt;setCharacter&lt;/a&gt; para emitir uno de los 8 posibles que se pueden usar al mismo tiempo. Además de estos también hay otros pocos métodos más relacionados con el cursor.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=Lcd.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=build.gradle&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=executeSSH.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=executeGradle.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/214/mensaje-lcd-1602.jpg&#34; title=&#34;Mensaje en LCD 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/214/mensaje-lcd-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Mensaje en LCD 1602&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&#34;video-post&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/V6msjQNDPuU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Pudiendo mostrar mensajes en &lt;em&gt;display&lt;/em&gt; es posible mostrar cualquier información que un programa sea capaz de capturar como temperatura y humedad del correspondiente sensor en el mismo &lt;em&gt;kit&lt;/em&gt;, estado de un pulsador, espacio disponible en el disco del sistema, y memoria libre, &lt;em&gt;uptime&lt;/em&gt; del sistema, fecha y hora, &amp;hellip; cualquier cosa que se nos ocurra.&lt;/p&gt;

&lt;p&gt;El ejemplo parece simple, y el programa Java lo es, pero requiere conocer varias cosas que en internet está dispersas como activar el bus I2C o conocer la librería diozero para controlar el &lt;em&gt;display&lt;/em&gt; que simplifica enormemente el código y nos evita comunicarnos a más bajo nivel con el &lt;em&gt;display&lt;/em&gt;, realizar las conexiones eléctricas también requiere algo de conocimiento. Averiguar todo esto me costó una buena cantidad de tiempo.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeLcd&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>