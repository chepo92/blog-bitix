<?xml version="1.0" encoding="utf-8"?><feed version="2.0" xmlns="http://www.w3.org/2005/Atom"><id>https://picodotdev.github.io/blog-bitix/tags/javascript/</id><title type="text">Blog Bitix</title><subtitle>Recent content on Blog Bitix</subtitle><updated>2019-09-20T13:30:00+02:00</updated><author><name>picodotdev</name></author><generator>Hugo</generator><icon>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</icon><logo>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</logo><rights>https://creativecommons.org/licenses/by-sa/4.0/</rights><entry><id>https://picodotdev.github.io/blog-bitix/2019/09/libreria-editor-de-markdown-javascript-y-procesador-de-markdown-para-generar-html-con-java/</id><title>Librería editor de markdown JavaScript y procesador de markdown para generar HTML con Java</title><updated>2019-09-20T15:00:00+02:00</updated><published>2019-09-20T13:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/09/libreria-editor-de-markdown-javascript-y-procesador-de-markdown-para-generar-html-con-java/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" class="right" width="200" height="150" layout="responsive" alt="Java" title="Java">
</div>
<p>Algunas aplicaciones permiten escribir contenido para posteriormente mostrarse en una página web. Permitir introducir directamente en texto en formato HTML es peligroso ya que puede causar problemas si no es correcto y ha de validarse para no permitir introducir archivos CSS, archivos JavaScript u otras etiquetas que supongan un problema de seguridad o desmaqueten la página web. Una alternativa es utilizar como entrada texto en formato <em>markdown</em> y posteriormente transformarlo a contenido en formato HTML.</p>
<p><em>Markdown</em> es un formato de texto simple con una sintaxis que permite introducir títulos, negritas, itálica, listas y listas numeradas, enlaces o imágenes. El texto en formato <em>markdown</em> se puede transformar posteriormente a formato HTML. Hay múltiples librerías de JavaScript para crear un editor <em>markdown</em> con algunos botones para introducir las opciones básicas e incluso previsualizar el contenido.</p>
<p>Como editor JavaScript para <em>markdown</em> de las varias opciones que he encontrado la que más me ha gustado es <a href="https://pandao.github.io/editor.md/en.html">Editor.md</a> por sus numerosas opciones, documentación y ejemplos, aunque no tiene una versión reciente. Posee barra de herramientas para realizar opciones básicas de edición, previsualizador de contenido HTML, colapsador de secciones, manejadores de eventos, subir imágenes, internacionalización, personalizar la barra de herramientas como está descrito en su <a href="https://pandao.github.io/editor.md/examples/index.html">sección de ejemplos</a>. En la <a href="https://github.com/pandao/editor.md">página de Editor.md en GitHub</a> están documentadas las opciones de configuración.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;resources/css/editormd.css&#34;</span> <span class="p">/</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.3/jquery.min.js&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;resources/js/editormd.min.js&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;&#10;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">editor</span> <span class="o">=</span> <span class="nx">editormd</span><span class="p">(</span><span class="s2">&#34;test-editor&#34;</span><span class="p">,</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// width  : &#34;100%&#34;,&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// height : &#34;100%&#34;,&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">path</span>   <span class="o">:</span> <span class="s2">&#34;resources/lib/&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;test-editor&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">textarea</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display:none;&#34;</span><span class="p"></span><span class="p">&gt;</span>### Editor.md&#10;&#10;**Editor.md**: The open source embeddable online markdown editor, based on CodeMirror <span class="err">&amp;</span> jQuery <span class="err">&amp;</span> Marked.&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">textarea</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index-1.html</span>
    </div>
</div>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2019/09/libreria-editor-de-markdown-javascript-y-procesador-de-markdown-para-generar-html-con-java/images/editor-md_hu8590a6b882a54d9f2c5070316e74f92a_151427_2560x1440_fit_box_2.png" title="Editor JavaScript de markdown" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/09/libreria-editor-de-markdown-javascript-y-procesador-de-markdown-para-generar-html-con-java/images/editor-md_hu8590a6b882a54d9f2c5070316e74f92a_151427_650x450_fit_box_2.png" width="650" height="278" class="lozad"></a>
  <figcaption>Editor JavaScript de markdown</figcaption>
  </figure>
</div>
<p>Una vez que se obtiene el texto en formato <em>markdown</em> en algún momento al visualizarlo como parte del código fuente en una página web hay que transformarlo a formato HTML, para esto en Java hay varias librerías algunas ya obsoletas, antiguas y sin mantenimiento. De las que su desarrollo sigue activa una es <a href="https://github.com/vsch/flexmark-java">Flexmark Java</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.vladsch.flexmark.samples</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">com.vladsch.flexmark.util.ast.Node</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.vladsch.flexmark.html.HtmlRenderer</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.vladsch.flexmark.parser.Parser</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">com.vladsch.flexmark.util.data.MutableDataSet</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasicSample</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">MutableDataSet</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MutableDataSet</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// uncomment to set optional extensions&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//options.set(Parser.EXTENSIONS, Arrays.asList(TablesExtension.create(), StrikethroughExtension.create()));&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// uncomment to convert soft-breaks to hard breaks&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">//options.set(HtmlRenderer.SOFT_BREAK, &#34;&lt;br /&gt;\n&#34;);&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Parser</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">Parser</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="n">options</span><span class="o">)</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">HtmlRenderer</span> <span class="n">renderer</span> <span class="o">=</span> <span class="n">HtmlRenderer</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="n">options</span><span class="o">)</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// You can re-use parser and renderer instances&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Node</span> <span class="n">document</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&#34;This is *Sparta*&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="n">html</span> <span class="o">=</span> <span class="n">renderer</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">document</span><span class="o">)</span><span class="o">;</span>  <span class="c1">// &#34;&lt;p&gt;This is &lt;em&gt;Sparta&lt;/em&gt;&lt;/p&gt;\n&#34;&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">html</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Main.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">dependencies</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">implementation</span> <span class="s2">&#34;com.vladsch.flexmark:flexmark-all:0.50.40&#34;</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://www.markdownguide.org/getting-started">Markdown Guide</a></li>
<li><a href="https://www.markdownguide.org/basic-syntax">Markdown Basic Syntax</a></li>
</ul>
</div>
]]></content><category term="java"/><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/</id><title>Combinaciones de teclado en HTML, JavaScript y páginas web</title><updated>2019-05-19T09:00:00+02:00</updated><published>2019-05-19T09:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p><strong>En las páginas y aplicaciones web también es posible utilizar combinaciones de teclas para proporcionar acceso rápido a funciones usadas frecuentemente. Utilizando la propiedad global <em>accesskey</em> para los campos de texto la acción es ubicar el foco en el campo y para los botones realizar la acción de clic. Los <em>listeners</em> como <em>onkeydown</em> permiten conocer que teclas modificadoras como <kbd>Ctrl</kbd>, <kbd>Shift</kbd> y <kbd>Alt</kbd> se han pulsado al mismo tiempo.</strong></p>]]><![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/html.svg" class="right" width="200" height="150" layout="responsive" alt="HTML" title="HTML">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>En las aplicaciones de escritorio es habitual usar atajos de teclado o combinaciones de teclas para realizar acciones sin necesidad del ratón y sin requerir levantar las manos del teclado. Estos atajos de teclado permiten ahorrar tiempo al realizar acciones habituales ya que conociendo y usando la combinación de teclas es mucho más rápido que usar el ratón. Los usuarios que trabajan con una aplicación gran cantidad de tiempo les facilita la tarea. En las aplicaciones web ya no es tan habitual encontrar asignaciones de combinación de teclas pero también se pueden emplear y son igual de útiles.</p>
<p>La forma de utilizar combinaciones de teclas en una página web es haciendo uso de los eventos <em>onKeyDown</em> y <em>onKeyUp</em> o el <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey">atributo global <em>accesskey</em></a> que puede ser empleado en cualquier elemento aunque dependiendo del tipo de elemento el comportamiento puede ser distinto. El <em>listener</em> del evento recibe como argumento un objeto que representa el evento, entre la información que contiene está la tecla pulsada y las teclas de control adicionales pulsadas al mismo tiempo.</p>
<p>En este ejemplo se captura la combinación de teclas <kbd>Ctrl + Shift + s</kbd> a nivel de página que muestra una ventana emergente utilizando la función <em>alert()</em> de JavaScript. El <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">objeto del evento</a> que se recibe como parámetro del <em>listener</em> posee las propiedades <em>ctrlKey</em>, <em>shiftKey</em> y <em>altKey</em> con las que determinar además de la tecla pulsada las teclas modificadoras adicionales pulsadas al mismo tiempo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span>Key combinations test<span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.3.1.min.js&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;Press Ctrl + Shift + s<span class="p">&lt;</span><span class="nt">br</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="nt">br</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">accesskey</span><span class="o">=</span><span class="s">&#34;t&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="nt">br</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="nt">br</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">input</span> <span class="na">id </span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">accesskey</span><span class="o">=</span><span class="s">&#34;b&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Button&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;keydown&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">ctrlKey</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">shiftKey</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="mi">83</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;You pressed Ctrl + Shift + s&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#button&#34;</span><span class="p">)</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;You clicked button&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>HtmlKeyCombinations.html</span>
    </div>
</div>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-1_hucdbf9b80216b5889f92e6ea3089b108a_13920_2560x1440_fit_box_2.png" title="Ejemplo combinaciones de teclas" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-1_hucdbf9b80216b5889f92e6ea3089b108a_13920_300x200_fit_box_2.png" width="300" height="167" class="lozad"></a>
  <figcaption>Ejemplo combinaciones de teclas</figcaption>
  </figure>
</div>
<p>Los usos que se les pueden dar a estas combinaciones de teclas van desde posicionar el foco en un determinado campo de entrada o realizar alguna acción como enviar los datos de un formulario una vez están rellenados y son válidos o cualquiera otra acción mediante <a href="https://es.wikipedia.org/wiki/JavaScript">JavaScript</a>. Haciendo uso del método <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault">preventDefault()</a> del objeto evento se evita que el evento dispare la acción por defecto si tiene una asignada.</p>
<p>La propiedad global <em>accesskey</em> puede utilizarse en cualquier elemento de HTML, en el ejemplo en un elemento de formulario <em>input</em> y en un botón. En <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> y <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> la combinación de teclas es <kbd>Alt + Shift + [key]</kbd>, para el campo de texto la combinación es <kbd>Alt + Shift + t</kbd> y para el botón <kbd>Alt + Shift + b</kbd>, en el botón la acción es ubicar el foco de entrada en el campo de texto y para el botón realizar la acción clic.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-2_hucb0a71650a1fecca4774a5fbc5f53aea_17644_2560x1440_fit_box_2.png" title="Captura de Ctrl &#43; Shift &#43; s" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-2_hucb0a71650a1fecca4774a5fbc5f53aea_17644_200x150_fit_box_2.png" width="200" height="110" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-3_hu8f2ee8de5de0b6cc5962cdd220a09655_14112_2560x1440_fit_box_2.png" title="Captura de Alt &#43; Shift &#43; t, ubica el foco en el campo de texto" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-3_hu8f2ee8de5de0b6cc5962cdd220a09655_14112_200x150_fit_box_2.png" width="200" height="111" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-4_hu28de0382bc89a65a2ee12340ecc6d3a9_17581_2560x1440_fit_box_2.png" title="Captura de Alt &#43; Shift &#43; b, ejecuta la acción clic del botón" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/05/combinaciones-de-teclado-en-html-javascript-y-paginas-web/images/key-combinations-4_hu28de0382bc89a65a2ee12340ecc6d3a9_17581_200x150_fit_box_2.png" width="200" height="111" class="lozad"></a>
  <figcaption>Acciones con combinaciones de teclas</figcaption>
  </figure>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li>[Atributos globales][https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes]</li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/">Introducción al JavaScript de ECMAScript 6</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="programacion"/><category term="planeta-codigo"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/</id><title>Componentes en el cliente con Web Components usando JavaScript, HTML y CSS</title><updated>2019-03-08T18:00:00+01:00</updated><published>2019-03-08T18:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/html.svg" class="right" width="200" height="150" layout="responsive" alt="HTML" title="HTML">
</div>
<p>En la rapidez con la que evolucionan las tecnologías una tendencia es el usar componentes en el lado del cliente y en los navegadores de una aplicación o página web. Los componentes son muy útiles ya que siguen los principios de encapsulación deseables una la programación que hace que un componente oculte los detalles del funcionamiento interno. Esta encapsulación hace que su funcionamiento interno sea más fácilmente entendible, por otro lado son reutilizables conociendo únicamente la interfaz que exponen y componer otros más complejos con otros más simples.</p>
<p>Han surgido varias librerías en JavaScript para desarrollar componentes en el lado del cliente, una de las primeras es <a href="https://angular.io/">Angular</a>, otra <a href="https://reactjs.org/">React</a> y otra es <a href="https://vuejs.org/">Vue</a> pero el organismo W3C ha definido un estándar para desarrollar componentes, que los navegadores han de implementar. El estándar se llama <a href="https://www.webcomponents.org/">Web Components</a> está formado por varias especificaciones.</p>
<ul>
<li><em>Custom Elements</em>: permite definir nuevas etiquetas que el navegador es capaz de interpretar, hace el etiquetado de una página más sencillo.</li>
<li><em>Shadow DOM</em>: el contenido HTML oculto de las etiquetas personalizadas.</li>
<li><em>HTML Templates</em>: etiquetado HTML no visualizado por el navegador, utilizables para definir la estructura de los elementos sin tener que crearlo con código JavaScript.</li>
</ul>
<p>Los <em>Custom Elements</em> se definen mediante código JavaScript con la función <em>CustomElementRegistry.define()</em> que recibe como parámetros el nombre de la etiqueta, la clase que la implementa y opcionalmente el elemento del que hereda. Hay dos tipos de <em>Web Components</em> los autónomos que heredan de <em>HTMLElement</em> y los personalizados que heredan de un elemento más concreto como un párrafo o botón, en cada caso de declaran de forma diferente en la función <em>define</em> y la etiqueta que la representa en el HTML en el ejemplo usando la etiqueta <em>&lt;hello-world&gt;</em> o <em>&lt;p is=&quot;hello-world-customized&rdquo;&gt;</em>.</p>
<p>Usando una definición de clase para el <em>Custom Element</em> se añade su funcionalidad, entre ella su etiquetado y estilos propios del componente, los elementos se añaden al <em>Shadow DOM</em> con la función <em>appendChild()</em> del objeto <em>shadow</em> obtenido con <em>attachShadow()</em>. El <em>Custom Element</em> puede tener atributos para recibir datos que se recuperan con la función <em>getAttribute()</em> y <em>hasAttribute()</em>.</p>
<p>Con las funciones <em>connectedCallback()</em>, <em>disconnectedCallback()</em>, <em>adoptedCallback()</em>, <em>attributeChangedCallback()</em> y <em>observedAttributes()</em> del ciclo de vida un <em>Web Component</em> será notificado cuando se añada a una página, cuando se quite, cuando un atributo cambie su valor.</p>
<p>El <em>Shadow DOM</em> compone el etiquetado oculto del <em>Web Compnent</em>, las etiquetas HTML y los estilos CSS. El <em>Shadow DOM</em> es exclusivo del <em>Web Component</em> y está aislado del resto de modo que las clases CSS de estilos no entrarán en conflicto con las de otros <em>Web Components</em> aunque tengan los mismos nombres, esto hace menos necesarias las nomenclaturas que se utilizan precisamente para evitar los conflictos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">class</span> <span class="nx">HelloWorld</span> <span class="kr">extends</span> <span class="nx">HTMLElement</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">static</span> <span class="nx">get</span> <span class="nx">observedAttributes</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="p">[</span><span class="s2">&#34;observed&#34;</span><span class="p">]</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">constructor</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">style</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;style&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">style</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;.paragraph { font-size: 2em; font-weight: bold; }&#34;</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;p&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">paragraph</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;class&#34;</span><span class="p">,</span> <span class="s2">&#34;paragraph&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">paragraph</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;Hello World!&#34;</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attachShadow</span><span class="p">(</span><span class="p">{</span><span class="nx">mode</span><span class="o">:</span> <span class="s2">&#34;open&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">connectedCallback</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;HelloWorld element added to page.&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">attributeChangedCallback</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;HelloWorld element attributes changed.&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">oldValue</span><span class="o">:</span> <span class="nx">oldValue</span><span class="p">,</span> <span class="nx">newValue</span><span class="o">:</span> <span class="nx">newValue</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;hello-world&#34;</span><span class="p">,</span> <span class="nx">HelloWorld</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">hello-world</span> <span class="na">observed</span><span class="o">=</span><span class="s">&#34;value&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hello-world</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index-1.html</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">class</span> <span class="nx">HelloWorldCustomized</span> <span class="kr">extends</span> <span class="nx">HTMLParagraphElement</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">constructor</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">style</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;style&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">style</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;.paragraph { font-size: 2em; font-weight: bold; }&#34;</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">span</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;span&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">span</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;class&#34;</span><span class="p">,</span> <span class="s2">&#34;paragraph&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">span</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;Hello World! (Customized)&#34;</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attachShadow</span><span class="p">(</span><span class="p">{</span><span class="nx">mode</span><span class="o">:</span> <span class="s2">&#34;open&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">span</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;hello-world-customized&#34;</span><span class="p">,</span> <span class="nx">HelloWorldCustomized</span><span class="p">,</span> <span class="p">{</span> <span class="kr">extends</span><span class="o">:</span> <span class="s2">&#34;p&#34;</span> <span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">p</span> <span class="na">is</span><span class="o">=</span><span class="s">&#34;hello-world-customized&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index-2.html</span>
    </div>
</div>
<p>Para hacer más sencilla la creación del etiquetado de los <em>Web Components</em> en vez de usando código JavaScript con las funciones <em>createElement()</em> y <em>appendChild()</em> está la especificación de <em>HTML Templates</em>. Plantillas en las que además se puede incluir los estilos CSS.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">class</span> <span class="nx">HelloWorldTemplate</span> <span class="kr">extends</span> <span class="nx">HTMLElement</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">constructor</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hello-world-template&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attachShadow</span><span class="p">(</span><span class="p">{</span><span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;open&#39;</span><span class="p">}</span><span class="p">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;hello-world-template&#34;</span><span class="p">,</span> <span class="nx">HelloWorldTemplate</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;hello-world-template&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">style</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">.</span><span class="nc">paragraph</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-size</span><span class="p">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-weight</span><span class="p">:</span> <span class="kc">bold</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">style</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;paragraph&#34;</span><span class="p"></span><span class="p">&gt;</span>Hello World! (Template)<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">hello-world-template</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hello-world-template</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index-3.html</span>
    </div>
</div>
<p>Además con los <em>slots</em> se le puede proporcionar al <em>Web Component</em> un fragmento de HTML.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">class</span> <span class="nx">HelloWorldSlot</span> <span class="kr">extends</span> <span class="nx">HTMLElement</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">constructor</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">super</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hello-world-slot&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">let</span> <span class="nx">shadow</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attachShadow</span><span class="p">(</span><span class="p">{</span><span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;open&#39;</span><span class="p">}</span><span class="p">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">shadow</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;hello-world-slot&#34;</span><span class="p">,</span> <span class="nx">HelloWorldSlot</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">template</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;hello-world-slot&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">style</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">.</span><span class="nc">paragraph</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-size</span><span class="p">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">font-weight</span><span class="p">:</span> <span class="kc">bold</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">style</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;paragraph&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="nt">slot</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p"></span><span class="p">&gt;</span>Hello World! (Slot)<span class="p">&lt;</span><span class="p">/</span><span class="nt">slot</span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">template</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">hello-world-slot</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">hello-world-slot</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">hello-world-slot</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">span</span> <span class="na">slot</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p"></span><span class="p">&gt;</span>Hello World! (Slot Custom)<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">hello-world-slot</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;...&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index-4.html</span>
    </div>
</div>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/images/web-components-1_hu8fb888b13a4bb906e6526f7a4beeeb1e_96182_2560x1440_fit_box_2.png" title="Web Components" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/images/web-components-1_hu8fb888b13a4bb906e6526f7a4beeeb1e_96182_300x200_fit_box_2.png" width="300" height="180" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/images/web-components-2_hu23f8db5589e2072feeeca426fc744e65_100067_2560x1440_fit_box_2.png" title="Eventos de ciclo de vida Web Components" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2019/03/componentes-en-el-cliente-con-web-components-usando-javascript-html-y-css/images/web-components-2_hu23f8db5589e2072feeeca426fc744e65_100067_300x200_fit_box_2.png" width="300" height="197" class="lozad"></a>
  <figcaption>Etiquetado y eventos de varios Web Components</figcaption>
  </figure>
</div>
<p>En la página de <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">documentación los <em>Web Components</em> en MDN</a> esta muy bien detallados. Los componentes de lado del cliente permiten desarrollar elementos funcionales reutilizables y compuestos entre ellos. Combinado con una interfaz REST o <a href="https://graphql.org/">GraphQL</a> en el lado del servidor es una forma de construir una aplicación o página web. <a href="https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html">JSF</a>, <a href="https://wicket.apache.org/">Wicket</a>, <a href="https://tapestry.apache.org/">Apache Tapestry</a> son <em>frameworks</em> web Java que proporciona componentes con ciertas similitudes pero en el lado del servidor.</p>
<p>La <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components#Browser_compatibility">compatibilidad de los navegadores de los Web Components</a> es amplia, no necesita de librerías JavaScript adicionales ya que el soporte está incluido en el navegador pero React y Vue están disponibles con anterioridad y proyectos como <a href="https://redux.js.org/">Redux</a> y <a href="https://vuex.vuejs.org/">Vuex</a> proporcionan el manejo del estado de los componentes.</p>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/WebComponents">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a>. 
</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://www.w3.org/TR/components-intro/">Introduction to Web Components</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">MDN Web Components</a></li>
<li><a href="https://www.webcomponents.org/">Web Components</a></li>
<li><a href="https://dev.to/thepassle/web-components-from-zero-to-hero-4n4m">Web Components: from zero to hero</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/">Artículo REST con Java</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/graphql/">Serie GraphQL</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/</id><title>Soporte para lanzar eventos desde JavaScript con Ajax en un componente de Apache Tapestry</title><updated>2018-06-09T08:00:00+02:00</updated><published>2018-06-09T08:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-5.svg" class="right" width="400" height="300" layout="responsive" alt="Apache Tapestry" title="Apache Tapestry">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" class="right" width="200" height="150" layout="responsive" alt="Java" title="Java">
</div>
<p>Para desarrollar aplicaciones web con el lenguaje de programación Java hay gran cantidad de <em>frameworks</em> que proponen un marco de trabajo para proporcionar la mayor parte de la funcionalidad de infraestructura necesaria para una aplicación. La mayoría basados en acciones y unos pocos basados en componentes. Una aplicación web no solo consta de la parte del servidor y desde hace tiempo la parte de cliente ha cobrado gran importancia.</p>
<p>Algunos <em>frameworks</em> proporcionan cierto soporte para JavaScript y recursos CSS en otros es muy escaso o inexistente. En el caso del <em>framework</em> <a href="https://tapestry.apache.org/">Apache Tapestry</a> en la categoría de los basados en componentes proporciona un gran soporte no solo en la parte del servidor sino también para la parte cliente.</p>
<p>Una de estas funcionalidades que proporciona Tapestry es poder lanzar eventos desde el cliente mediante una petición <em>Ajax</em> para que sean procesados en el servidor y obtener la respuesta que se devuelva desde el servidor normalmente en formato <em>Json</em>. Hay que definir un manejador de evento en el servidor siguiendo la convención <em>on[Event]</em> y en caso de querer lanzar un evento desde el cliente anotándolo con <a href="http://tapestry.apache.org/current/apidocs/index.html?org/apache/tapestry5/ComponentResources.html">@PublishEvent</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.components</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.MarkupWriter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Component</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Environmental</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.PublishEvent</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.corelib.components.Any</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.json.JSONArray</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.json.JSONObject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.services.javascript.JavaScriptSupport</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * @tapestrydoc&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Event</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">selector</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Component</span>&#10;	<span class="kd">private</span> <span class="n">Any</span> <span class="n">span</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Environmental</span>&#10;	<span class="kd">private</span> <span class="n">JavaScriptSupport</span> <span class="n">support</span><span class="o">;</span>&#10;&#10;	<span class="nd">@PublishEvent</span>&#10;	<span class="n">Object</span> <span class="nf">onGetColores</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">JSONArray</span><span class="o">(</span><span class="s">&#34;Rojo&#34;</span><span class="o">,</span> <span class="s">&#34;Verde&#34;</span><span class="o">,</span> <span class="s">&#34;Azul&#34;</span><span class="o">,</span> <span class="s">&#34;Negro&#34;</span><span class="o">)</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">afterRender</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">JSONObject</span> <span class="n">spec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;		<span class="n">spec</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;selector&#34;</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">getClientId</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&#10;		<span class="n">support</span><span class="o">.</span><span class="na">require</span><span class="o">(</span><span class="s">&#34;app/event&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&#34;init&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">spec</span><span class="o">)</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Event.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">t:container</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/1999/xhtml&#34;</span> <span class="na">xmlns:t</span><span class="o">=</span><span class="s">&#34;http://tapestry.apache.org/schema/tapestry_5_4.xsd&#34;</span> <span class="na">xmlns:p</span><span class="o">=</span><span class="s">&#34;tapestry:parameter&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;Colores: <span class="p">&lt;</span><span class="nt">span</span> <span class="na">t:type</span><span class="o">=</span><span class="s">&#34;any&#34;</span> <span class="na">t:id</span><span class="o">=</span><span class="s">&#34;span&#34;</span><span class="p"></span><span class="p">&gt;</span>Cargando...<span class="p">&lt;</span><span class="p">/</span><span class="nt">span</span><span class="p">&gt;</span> (Event/Json)&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">t:container</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Event.tml</span>
    </div>
</div>
<p>El uso del componente en una plantilla de una página.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">t:event</span><span class="p">/</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<p>En el código JavaScript asociado a una página o componente hay que hacer uso del módulo que ofrece el soporte para <em>Ajax</em> y los eventos desde el cliente, con <a href="https://requirejs.org/">RequireJS</a> se obtiene una referencia a él. Solo es necesario indicar como parámetro el nombre del evento a lanzar, los parámetros si los hubiese y los manejadores de respuesta, tanto en el caso de ser correcta que recibirá los datos devueltos en el servidor como incorrecta. En el archivo <a href="https://git1-us-west.apache.org/repos/asf?p=tapestry-5.git;a=blob_plain;f=tapestry-core/src/main/coffeescript/META-INF/modules/t5/core/ajax.coffee;hb=85cc611fbad4a3574664b33ce9adf614b4f0fe07">ajax.coffee</a> están documentados todos los parámetros que posee la función <em>ajax</em> del módulo <em>t5/core/ajax</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;app/event&#34;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;t5/core/ajax&#34;</span><span class="p">,</span> <span class="s2">&#34;jquery&#34;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ajax</span><span class="p">,</span> <span class="nx">$</span><span class="p">)</span> <span class="p">{</span>&#10;	<span class="kd">function</span> <span class="nx">Colores</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>&#10;		<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;		&#10;		<span class="k">this</span><span class="p">.</span><span class="nx">spec</span> <span class="o">=</span> <span class="nx">spec</span><span class="p">;</span>&#10;&#10;		<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="nx">_this</span><span class="p">.</span><span class="nx">getColores</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span><span class="p">;</span>&#10;	<span class="p">}</span>&#10;&#10;	<span class="nx">Colores</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getColores</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;		<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;		&#10;		<span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;getColores&#39;</span><span class="p">,</span> <span class="p">{</span>&#10;			<span class="nx">element</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">selector</span><span class="p">)</span><span class="p">,</span>&#10;			<span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;				<span class="nx">$</span><span class="p">(</span><span class="nx">_this</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">selector</span><span class="p">)</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span>&#10;		<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	<span class="p">}</span>&#10;&#10;	<span class="kd">function</span> <span class="nx">init</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>&#10;		<span class="k">new</span> <span class="nx">Colores</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span><span class="p">;</span>&#10;	<span class="p">}</span>&#10;	&#10;	<span class="k">return</span> <span class="p">{</span>&#10;		<span class="nx">init</span><span class="o">:</span> <span class="nx">init</span>&#10;	<span class="p">}</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>event.js</span>
    </div>
</div>
<p>En el primer elemento del HTML se añade un atributo <em>data-componenent-events</em> que contiene la URL necesaria para cada evento que haya sido declarado como lanzable. A partir del elemento indicado en la opción <em>element</em> se busca la URL en el atributo <em>data-componenent-events</em> siguiendo un orden empezando por el propio elemento, en los previos al mismo nivel jerárquicamente empezando por el más cercano desde abajo hacia arriba, en los padres y finalmente en el elemento <em>body</em>.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/images/event_hu8172c8a741f24521f7cd7f3616353770_847602_2560x1440_fit_box_2.png" title="Petición Ajax del evento" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/images/event_hu8172c8a741f24521f7cd7f3616353770_847602_300x200_fit_box_2.png" width="300" height="183" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/images/data-component-events_hu8172c8a741f24521f7cd7f3616353770_837819_2560x1440_fit_box_2.png" title="Atributo con la URL del evento" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2018/06/soporte-para-lanzar-eventos-desde-javascript-con-ajax-en-un-componente-de-apache-tapestry/images/data-component-events_hu8172c8a741f24521f7cd7f3616353770_837819_300x200_fit_box_2.png" width="300" height="183" class="lozad"></a>
  <figcaption>Petición Ajax y atributo con la URL del evento</figcaption>
  </figure>
</div>
<p>Esta funcionalidad se incorporó en Apache Tapestry 5.2 donde hasta entonces era necesario construir la URL del evento en el servidor con <a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/ComponentResourcesCommon.html#createEventLink-java.lang.String-java.lang.Object...-">ComponentResources.createEventLink()</a> y enviarlo al componente haciendo uso de <a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/services/javascript/JavaScriptSupport.html">JavaScriptSupport</a> como se muestra en el componente <em>Ajax</em> que no hace uso de esta funcionalidad de eventos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.components</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.BindingConstants</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ComponentResources</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.MarkupWriter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Environmental</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.ioc.annotations.Inject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.json.JSONArray</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.json.JSONObject</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.services.javascript.JavaScriptSupport</span><span class="o">;</span>&#10;&#10;<span class="cm">/**&#10;</span><span class="cm"> * @tapestrydoc&#10;</span><span class="cm"> */</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ajax</span> <span class="o">{</span>&#10;&#10;	<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">LITERAL</span><span class="o">)</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">selector</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Environmental</span>&#10;	<span class="kd">private</span> <span class="n">JavaScriptSupport</span> <span class="n">support</span><span class="o">;</span>&#10;&#10;	<span class="nd">@Inject</span>&#10;	<span class="kd">private</span> <span class="n">ComponentResources</span> <span class="n">componentResources</span><span class="o">;</span>&#10;&#10;	<span class="n">Object</span> <span class="nf">onGetColores</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">JSONArray</span><span class="o">(</span><span class="s">&#34;Rojo&#34;</span><span class="o">,</span> <span class="s">&#34;Verde&#34;</span><span class="o">,</span> <span class="s">&#34;Azul&#34;</span><span class="o">,</span> <span class="s">&#34;Negro&#34;</span><span class="o">)</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">afterRender</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="n">String</span> <span class="n">link</span> <span class="o">=</span> <span class="n">componentResources</span><span class="o">.</span><span class="na">createEventLink</span><span class="o">(</span><span class="s">&#34;getColores&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">toAbsoluteURI</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;		<span class="n">JSONObject</span> <span class="n">spec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;		<span class="n">spec</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;selector&#34;</span><span class="o">,</span> <span class="n">selector</span><span class="o">)</span><span class="o">;</span>&#10;		<span class="n">spec</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;link&#34;</span><span class="o">,</span> <span class="n">link</span><span class="o">)</span><span class="o">;</span>&#10;&#10;		<span class="n">support</span><span class="o">.</span><span class="na">require</span><span class="o">(</span><span class="s">&#34;app/ajax&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&#34;init&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">spec</span><span class="o">)</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Ajax.java</span>
    </div>
</div>
<p>Con este soporte es algo más fácil enviar eventos y realizar peticiones <em>Ajax</em> desde el cliente para obtener datos.</p>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./gradlew run</code>. 
</p>
<div class="alert alert-warning">
    <img data-src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://tapestry.apache.org/ajax-and-zones.html">Ajax and Zones</a></li>
<li><a href="https://git1-us-west.apache.org/repos/asf?p=tapestry-5.git;a=blob_plain;f=tapestry-core/src/main/coffeescript/META-INF/modules/t5/core/ajax.coffee;hb=85cc611fbad4a3574664b33ce9adf614b4f0fe07">ajax.coffee</a></li>
</ul>
</div>
]]></content><category term="java"/><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/><category term="tapestry"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/</id><title>Depurar código JavaScript con la instrucción debugger</title><updated>2018-05-19T12:00:00+02:00</updated><published>2018-05-18T19:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>Los navegadores web utilizan la palabra clave sentencia <em>debugger;</em> como punto de ruptura para iniciar el depurado de un código JavaScript. En vez de poner el punto de ruptura desde el navegador utilizando la herrmienta de depuración para desarrolladores con esta instrucción se puede poner en el código fuente donde se desee, de esta forma se evita buscar entre los múltiples recursos que haya cargados en la página e ir a la línea en la que se desea iniciar la depuración poniendo un punto de ruptura.</p>
<p>Suponiendo que se desea poner un punto de ruptura en un código JavaScript hay que editar el archivo JavaScript de código fuente e incluir la sentencia <em>debugger;</em> como en el siguiente caso. Cuando el navegador ejecute esa sentencia iniciará, tiendo las herramientas de depuración abiertas, el depurador.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">html</span><span class="p"></span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">head</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">title</span><span class="p"></span><span class="p">&gt;</span>JavaScript Debugger<span class="p">&lt;</span><span class="p">/</span><span class="nt">title</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kr">debugger</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">date</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">)</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">element</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">element</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">head</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="nt">body</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">h1</span><span class="p"></span><span class="p">&gt;</span>JavaScript Debugger<span class="p">&lt;</span><span class="p">/</span><span class="nt">h1</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">body</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Debugger.html</span>
    </div>
</div>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/images/javascript-debugger_hu846d34e90b5e643f744d4823c28f732f_278539_2560x1440_fit_box_2.png" title="JavaScript Debugger" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/images/javascript-debugger_hu846d34e90b5e643f744d4823c28f732f_278539_300x200_fit_box_2.png" width="300" height="176" class="lozad"></a>
  <figcaption>JavaScript Debugger</figcaption>
  </figure>
</div>
<p>Con la herramienta de depuración abierta se pueden poner expresiones de inspección, nuevos puntos de ruptura e ir paso a paso en la ejecución del código JavaScript. Esta sentencia para iniciar la depuración es lo mismo que añadir un punto de ruptura inspeccionando los recursos de JavaScript de la página pero quizá resulta más cómodo.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger">MDN debugger</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/</id><title>Transpiling de ECMAScript 6 a 5, Uglify y ESLint con Gulp</title><updated>2016-12-11T01:35:00+01:00</updated><published>2016-12-09T12:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>Este artículo es una combinación de varias cosas que forman el actual estado del arte en JavaScript. <a href="https://gulpjs.com/">Gulp</a> como ejecutor de tareas, traducción o <em>transpiling</em> de ECMAScript 6 a ECMAcript 5 con <a href="https://babeljs.io/">Babel</a>, <a href="https://www.npmjs.com/package/uglify-js">Uglify</a> como minificador y ofuscador de código y <a href="https://eslint.org/">ESLint</a> como verificador del código.</p>
<p>Dos de los navegadores web más importantes como <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> y <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> ya soportan gran parte de la especificación de ECMAScript 6 que añade nuevas funcionalidades al lenguaje JavaScript que comento en <a href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/">Introducción al JavaScript de ECMAScript 6</a>. Sin embargo, hasta que prácticamente toda la totalidad de dispositivos soporten ECMAScript 6, formada por la diversidad actual de dispositivos en las que se incluyen los dispositivos móviles es necesario traducir el código JavaScript a la especificación ECMAScript 5. Haciendo esta traducción podemos usar ES6 y al mismo tiempo soportar todos los dispositivos. Hacer <em>transpiling</em> es necesario si el código será accedido desde internet de forma pública para cualquiera y queremos usar las nuevas características de ECMAScript 6. Si se tratase de una aplicación en un entorno controlado de uso interno en el que se usasen los navegadores que soporten ES6 el <em>transpiling</em> no sería imprescindible.</p>
<p>El tamaño de una página afecta al tiempo de carga de la misma, dada las velocidades de incluso los dispositivos móviles la velocidad ya no es tan importante como cuando el ancho de banda era significativamente menor y ahora importa más la latencia que <a href="https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/">el protocolo HTTP/2</a> trata de mejorar. En cualquier caso tanto comprimir con gzip el contenido devuelto por el servidor como minificar se consigue la mayor reducción en el tamaño de una página.</p>
<p>Minificar el código y ofuscarlo hace que depurar sea más complicado al no tener el código fuente original. Para que los depuradores tengan la información de los nombres originales al minificar se pueden generar archivos <em>.map</em> que los contengan y que los depuradores obtienen y usan cuando es necesario.</p>
<p>ESLint es un verificador estático de código que nos informará de aquellas reglas que se no se respetan según las normas de estilos que definamos. En ESLint hay cantidad de <a href="https://eslint.org/docs/rules/">reglas</a> que podemos aplicar al código y personalizar según nuestras preferencias, por ejemplo, requerir que las cadenas de texto se usen mediante comillas simples o que las llaves de bloques de código estén en la misma linea que la expresión <em>if</em>, <em>else</em>, <em>while</em>, etc.</p>
<p>Gulp define las tareas de un proyecto en un archivo de nombre <em>gulpfile.js</em> que usando <em>gulp-balbel</em>, <em>eslint</em>, <em>gulp-uglify</em> y <em>gulp-sourcemaps</em> obtenemos todas las funcionalidades anteriores. Con Gulp los archivos son transformados en varios pasos y finalmente enviados a un directorio destino del sistema de archivos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">babel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-babel&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">eslint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-eslint&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">sourcemaps</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sourcemaps&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&#10;<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;	<span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">&#34;src/main/js/**/*.js&#34;</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">babel</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist/babel&#34;</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="p">{</span><span class="nx">loadMaps</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist/uglify&#34;</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;./&#39;</span><span class="p">)</span><span class="p">)</span>&#10;		<span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&#34;build/dist&#34;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gulpfile.js</span>
    </div>
</div>
<p>Para usar Gulp deberemos tener instalado <a href="https://www.npmjs.com/">npm</a> que en Arch Linux sería instalar su paquete:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman -S npm</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>npm.sh</span>
    </div>
</div>
<p>Instalar Gulp a nivel global en el sistema:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># npm install -g gulp</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gulp.sh</span>
    </div>
</div>
<p>Y finalmente instalar en el proyecto las dependencias definidas en el archivo <em>package.json</em>:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ npm install --save-dev gulp-babel&#10;$ npm install --save-dev gulp-eslint&#10;$ npm install --save-dev gulp-uglify gulp-sourcemaps&#10;$ npm install</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>npm-install.sh</span>
    </div>
</div>
<p>El archivo JavaScript original con ECMAScript 6 es el siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">sentences</span> <span class="o">=</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;great&#39;</span> <span class="p">}</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;Elephants&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;large&#39;</span> <span class="p">}</span>&#10;<span class="p">]</span><span class="p">;</span>&#10;&#10;<span class="kd">function</span> <span class="nx">say</span> <span class="p">(</span><span class="p">{</span> <span class="nx">subject</span><span class="p">,</span> <span class="nx">verb</span><span class="p">,</span> <span class="nx">object</span> <span class="p">}</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">subject</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">verb</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">object</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">s</span> <span class="k">of</span> <span class="nx">sentences</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main.js</span>
    </div>
</div>
<p>Transformado a ECMAScript 5 queda lo siguiente.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>&#10;&#10;<span class="kd">var</span> <span class="nx">sentences</span> <span class="o">=</span> <span class="p">[</span><span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;great&#39;</span> <span class="p">}</span><span class="p">,</span> <span class="p">{</span> <span class="nx">subject</span><span class="o">:</span> <span class="s1">&#39;Elephants&#39;</span><span class="p">,</span> <span class="nx">verb</span><span class="o">:</span> <span class="s1">&#39;are&#39;</span><span class="p">,</span> <span class="nx">object</span><span class="o">:</span> <span class="s1">&#39;large&#39;</span> <span class="p">}</span><span class="p">]</span><span class="p">;</span>&#10;&#10;<span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">_ref</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">subject</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">subject</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">verb</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">verb</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">subject</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">verb</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">object</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kd">var</span> <span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>&#10;<span class="kd">var</span> <span class="nx">_didIteratorError</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>&#10;<span class="kd">var</span> <span class="nx">_iteratorError</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>&#10;&#10;<span class="k">try</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">_iterator</span> <span class="o">=</span> <span class="nx">sentences</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="nx">_step</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_step</span> <span class="o">=</span> <span class="nx">_iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span><span class="p">;</span> <span class="nx">_iteratorNormalCompletion</span> <span class="o">=</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">_step</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_didIteratorError</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_iteratorError</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>&#10;<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_iteratorNormalCompletion</span> <span class="o">&amp;&amp;</span> <span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">_didIteratorError</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">throw</span> <span class="nx">_iteratorError</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-babel.js</span>
    </div>
</div>
<p>Estos son los archivos de configuración para ESLint donde indicaremos las reglas que queremos aplicar al código JavaScript y la configuración para Babel donde indicamos a que versión de JavaScript haremos la transformación.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;extends&#34;</span><span class="o">:</span> <span class="s2">&#34;standard&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;plugins&#34;</span><span class="o">:</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;standard&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;promise&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">]</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;rules&#34;</span><span class="o">:</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;semi&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="s2">&#34;always&#34;</span><span class="p">]</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="s2">&#34;indent&#34;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>eslintrc.js</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">{&#10;  &#34;presets&#34;: [&#34;es2015&#34;]&#10;}</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>babelrc</span>
    </div>
</div>
<p>Transformado con Uglify queda algo ilegible pero con el archivo <em>.map</em> podremos depurar en el navegador mostrándose los nombres de las variables originales.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="s2">&#34;use strict&#34;</span><span class="p">;</span><span class="kd">function</span> <span class="nx">say</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">subject</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">verb</span><span class="p">,</span><span class="nx">o</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&#34; &#34;</span><span class="o">+</span><span class="nx">o</span><span class="p">)</span><span class="p">}</span><span class="kd">var</span> <span class="nx">sentences</span><span class="o">=</span><span class="p">[</span><span class="p">{</span><span class="nx">subject</span><span class="o">:</span><span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span><span class="nx">verb</span><span class="o">:</span><span class="s2">&#34;is&#34;</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="s2">&#34;great&#34;</span><span class="p">}</span><span class="p">,</span><span class="p">{</span><span class="nx">subject</span><span class="o">:</span><span class="s2">&#34;Elephants&#34;</span><span class="p">,</span><span class="nx">verb</span><span class="o">:</span><span class="s2">&#34;are&#34;</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="s2">&#34;large&#34;</span><span class="p">}</span><span class="p">]</span><span class="p">,</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">_didIteratorError</span><span class="o">=</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">_iteratorError</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">_iterator</span><span class="o">=</span><span class="nx">sentences</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span><span class="p">(</span><span class="p">)</span><span class="p">,</span><span class="nx">_step</span><span class="p">;</span><span class="o">!</span><span class="p">(</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=</span><span class="p">(</span><span class="nx">_step</span><span class="o">=</span><span class="nx">_iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span><span class="p">;</span><span class="nx">_iteratorNormalCompletion</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="p">{</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">_step</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="nx">say</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span><span class="p">}</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="p">{</span><span class="nx">_didIteratorError</span><span class="o">=</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">_iteratorError</span><span class="o">=</span><span class="nx">r</span><span class="p">}</span><span class="k">finally</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="o">!</span><span class="nx">_iteratorNormalCompletion</span><span class="o">&amp;&amp;</span><span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="o">&amp;&amp;</span><span class="nx">_iterator</span><span class="p">.</span><span class="k">return</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="k">finally</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">_didIteratorError</span><span class="p">)</span><span class="k">throw</span> <span class="nx">_iteratorError</span><span class="p">}</span><span class="p">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-uglify.js</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">{&#34;version&#34;:3,&#34;sources&#34;:[&#34;main.js&#34;],&#34;names&#34;:[&#34;say&#34;,&#34;_ref&#34;,&#34;subject&#34;,&#34;verb&#34;,&#34;object&#34;,&#34;console&#34;,&#34;log&#34;,&#34;sentences&#34;,&#34;_iteratorNormalCompletion&#34;,&#34;_didIteratorError&#34;,&#34;_iteratorError&#34;,&#34;undefined&#34;,&#34;_iterator&#34;,&#34;Symbol&#34;,&#34;iterator&#34;,&#34;_step&#34;,&#34;next&#34;,&#34;done&#34;,&#34;s&#34;,&#34;value&#34;,&#34;err&#34;,&#34;return&#34;],&#34;mappings&#34;:&#34;AAAA,YAIA,SAASA,KAAIC,GACT,GAAIC,GAAUD,EAAKC,QACfC,EAAOF,EAAKE,KACZC,EAASH,EAAKG,MAElBC,SAAQC,IAAIJ,EAAU,IAAMC,EAAO,IAAMC,GAP7C,GAAIG,aAAeL,QAAS,aAAcC,KAAM,KAAMC,OAAQ,UAAaF,QAAS,YAAaC,KAAM,MAAOC,OAAQ,UAUlHI,2BAA4B,EAC5BC,mBAAoB,EACpBC,eAAiBC,MAErB,KACI,IAAK,GAAIC,WAAYL,UAAUM,OAAOC,YAAaC,QAASP,2BAA6BO,MAAQH,UAAUI,QAAQC,MAAOT,2BAA4B,EAAM,CACxJ,GAAIU,GAAIH,MAAMI,KAEdnB,KAAIkB,IAEV,MAAOE,GACLX,mBAAoB,EACpBC,eAAiBU,EACnB,QACE,KACSZ,2BAA6BI,UAAUS,QACxCT,UAAUS,SAEhB,QACE,GAAIZ,kBACA,KAAMC&#34;,&#34;file&#34;:&#34;main.js&#34;,&#34;sourcesContent&#34;:[&#34;&#39;use strict&#39;;\n\nvar sentences = [{ subject: &#39;JavaScript&#39;, verb: &#39;is&#39;, object: &#39;great&#39; }, { subject: &#39;Elephants&#39;, verb: &#39;are&#39;, object: &#39;large&#39; }];\n\nfunction say(_ref) {\n&nbsp;&nbsp;&nbsp;&nbsp;var subject = _ref.subject;\n&nbsp;&nbsp;&nbsp;&nbsp;var verb = _ref.verb;\n&nbsp;&nbsp;&nbsp;&nbsp;var object = _ref.object;\n\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(subject + &#39; &#39; + verb + &#39; &#39; + object);\n}\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n&nbsp;&nbsp;&nbsp;&nbsp;for (var _iterator = sentences[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var s = _step.value;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;say(s);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n} catch (err) {\n&nbsp;&nbsp;&nbsp;&nbsp;_didIteratorError = true;\n&nbsp;&nbsp;&nbsp;&nbsp;_iteratorError = err;\n} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_iterator.return();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (_didIteratorError) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw _iteratorError;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}&#34;]}</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main.js.map</span>
    </div>
</div>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/ECMAScript6">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>npm install, gulp, node ./build/dist/main.js</code>. 
</p>
<p>El resultado son los siguientes mensajes en la terminal tanto para la ejecución del archivo ECMAScript 6 original con <code>node src/main/js/main.js</code> como para el <em>transpilado</em> con <code>node ./build/dist/main.js</code>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">JavaScript is great&#10;Elephants are large</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>System.out</span>
    </div>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/</id><title>Introducción al JavaScript de ECMAScript 6</title><updated>2016-12-09T13:50:00+01:00</updated><published>2016-12-03T12:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p><strong>Con ECMAScript 6 se han incorporado al lenguaje varias novedades como nuevas palabras reservadas para definir variables y constantes, símbolos, interpolación de variables en cadenas, desestructuración, forma abreviada para declarar funciones, nueva sintaxis más sencilla para definir clases, objetos de tipo <em>Map</em> y <em>Set</em>, <em>Promises</em> como alternativa a <em>callbacks</em>, el protocolo <em>Iterator</em> y generadores, además de algunas otras cosas que si como yo no habías dedicado tiempo a aprender mejor JavaScript aún te resulten novedosas.</strong></p>]]><![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>Hasta ahora como desarrollador web durante prácticamente toda mi vida laboral no había dedicado tiempo a conocer en más detalle el lenguaje de programación <a href="https://es.wikipedia.org/wiki/JavaScript">JavaScript</a> usado en los navegadores web. Mucho de lo que necesitaba me era suficiente con librerías como <a href="https://jquery.com/">jQuery</a> o <a href="https://underscorejs.org/">underscore</a>. Ahora algunas páginas web tienen un peso importante en el lado cliente y ante esta necesidad el lenguaje JavaScript está evolucionando e incorporando nuevas características como las definidas en sus especificaciones de <a href="https://es.wikipedia.org/wiki/ECMAScript">ECMAScript</a>.</p>
<p>Para aprender en mucho más en detalle lo poco que conocía de JavaScript he leído el libro <a href="https://amzn.to/2g3TV52">Learning JavaScript</a> que cubre las novedades de ECMAScript 2015 también conocido como ECMAScript 6 (ES6). Después de leerlo diré que es un libro que me ha gustado mucho y considero que es adecuado tanto para alguien que pueda estar aprendiendo a programar como para alguien que ya conoce otros lenguajes de programación explicando los conceptos sin complicaciones.</p>
<div class="media-amazon">
  <iframe style="width:120px;height:240px;" width="120" height="240" scrolling="no" frameborder="0" src="https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=3ea3a8ae787fc5f9cdd9ca6934c7d635&amp;internal=1" class="lozad">
</div>
<p>Las últimas versiones de los navegadores <a href="https://www.google.es/chrome/browser/desktop/">Chrome</a> y <a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox</a> ya soportan todo lo que describo a continuación y que está más detalladamente explicado en el libro. Para los navegadores que aún no soportan todo como en los dispositivos móviles hay compiladores o <em>transpilers</em> para <a href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/">traducir de ECMAScript 6 a ECMAScript 5</a>. En un entorno en el que sepamos se usa solo Chrome o Firefox como en una intranet o una aplicación de uso interno en una organización podemos utilizar estas novedades y si es una aplicación accesible por cualquier usuario desde internet podemos hacer la conversión de ECMAScript 6 a ECMAScript 5 con <a href="https://gulpjs.com/">gulp</a> o <a href="https://gruntjs.com/">grunt</a>.</p>
<p>Estas son gran parte de las novedades que he anotado al leer el libro Learning JavaScript. Para profundizar sobre JavaScript la documentación de <a href="https://developer.mozilla.org/es/">Mozilla Developer Network</a> está muy bien como manual de referencia donde hay más ejemplos y comentarios más extensos de los que hago en cada sección.</p>
<h3 id="definicin-de-variables">Definición de variables</h3>
<p>Para solventar las deficiencias de las variables declaradas con <em>var</em> hay dos nuevas palabras reservadas <em>let</em> para <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Declarations">declarar variables</a> que cambian de valor y <em>const</em> para constantes. También se pueden declarar símbolos que son identificadores de tipos únicos e inmutables.</p>
<p>El problema de las variables declaradas con <em>var</em> está en que tienen ámbito de función con <em>let</em> no existe hasta que es declarada. Las variables con <em>var</em> son declaradas al principio del ámbito de la función o en el ámbito global.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">string</span> <span class="o">=</span> <span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">symbol</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">(</span><span class="s1">&#39;descripcion&#39;</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>variables.js</span>
    </div>
</div>
<h3 id="interpolacin-de-variables-en-cadenas">Interpolación de variables en cadenas</h3>
<p>La <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">interpolación de variables en cadenas</a> facilita la construcción de <em>strings</em> y hace el código más legible. Las plantillas se definen con comillas de acento grave `.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`</span><span class="sb">¡Hola </span><span class="si">${</span><span class="nx">now</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">(</span><span class="p">)</span><span class="si">}</span><span class="sb">!</span><span class="sb">`</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// ¡Hola 2016!&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>interpolation.js</span>
    </div>
</div>
<h3 id="desestructuracin">Desestructuración</h3>
<p>Se ha incorporado la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">asignación desestructurada</a> pudiendo hacer cosas como las siguientes en las asignaciones y en las llamadas a las funciones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="c1">// Arrays&#10;</span><span class="c1"></span><span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">b</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// 1, 2&#10;</span><span class="c1"></span>&#10;<span class="c1">// Objects&#10;</span><span class="c1"></span><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Juan&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span> <span class="p">}</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="o">=</span> <span class="nx">object</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">age</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// Juan, 30&#10;</span><span class="c1"></span>&#10;<span class="c1">// Functions&#10;</span><span class="c1"></span><span class="kd">function</span> <span class="nx">whois</span><span class="p">(</span><span class="p">{</span><span class="nx">displayName</span><span class="o">:</span> <span class="nx">displayName</span><span class="p">,</span> <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span> <span class="nx">firstName</span><span class="o">:</span> <span class="nx">name</span> <span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">displayName</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>&#10;  <span class="nx">id</span><span class="o">:</span> <span class="mi">42</span><span class="p">,</span>&#10;  <span class="nx">displayName</span><span class="o">:</span> <span class="s2">&#34;jgarcia&#34;</span><span class="p">,</span>&#10;  <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Juan&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;García&#34;</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span><span class="p">;</span>&#10;&#10;<span class="nx">whois</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// Juan Garcia is jgarcia &#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>destructuring.js</span>
    </div>
</div>
<h3 id="operador--spread-">Operador <em>spread</em></h3>
<p>El <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">operador <em>spread</em></a> permite a una expresión se expandida en lugares donde se esperan múltiples argumentos como en llamadas a funciones, múltiples elementos para literales de <em>arrays</em> o múltiples variables para asignación desestructurada.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="p">...</span><span class="nx">array1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array2</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// Array [ 1, 2, 3, 4, 5, 6 ]&#10;</span><span class="c1"></span>&#10;<span class="kd">function</span> <span class="nx">func</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">x</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">y</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">z</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;<span class="nx">func</span><span class="p">(</span><span class="p">...</span><span class="nx">array1</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// 1, 2, 3&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>spread.js</span>
    </div>
</div>
<h3 id="bucles-con--in--y--of-">Bucles con <em>in</em> y <em>of</em></h3>
<p>Usando el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in">iterador <em>in</em></a> en un bucle recorremos las propiedades de un objeto y con el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of">iterador <em>of</em></a> podemos recorrer cualquier objeto iterable. Cualquier objeto que definamos podemos hacerlo iterable cumpliendo el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">protocolo Iterable</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Juan&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span> <span class="p">}</span><span class="p">;</span>&#10;<span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="p">;</span>&#10;&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">property</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">property</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">object</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;<span class="c1">// name: Juan &#10;</span><span class="c1"></span><span class="c1">// age: 30&#10;</span><span class="c1"></span>&#10;<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">property</span> <span class="k">of</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">property</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span>&#10;<span class="c1">// 1&#10;</span><span class="c1"></span><span class="c1">// 2&#10;</span><span class="c1"></span><span class="c1">// 3&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>iterator-in-of.js</span>
    </div>
</div>
<h3 id="funciones">Funciones</h3>
<p>En JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions">definir funciones</a> es una parte muy importante de la esencia del lenguaje, ahora hay una forma corta de definir funciones.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">(</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">)</span><span class="p">;</span> <span class="p">}</span>&#10;<span class="nx">func</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// ¡Hola mundo!&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>arrow-functions.js</span>
    </div>
</div>
<h3 id="arrays">Arrays</h3>
<p>El <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">tipo Array</a> tiene muchos métodos y funciones adecuadas para la programación funcional como <em>map</em>, <em>filter</em> o <em>reduce</em> y también <em>push</em>, <em>pop</em>, <em>shift</em>, <em>unshift</em>, <em>forEach</em>, <em>slice</em>, <em>splice</em>, <em>fill</em>, <em>copyWithin</em>, <em>findIndex</em>, <em>lastIndexOf</em>, <em>indexOf</em>, <em>reverse</em>, <em>sort</em>, <em>some</em>, <em>every</em>, <em>join</em> o <em>concat</em>. Funciones que antes no estaban presentes y para suplir su ausencia usábamos la librería <em>underscore</em>.</p>
<h3 id="mtodos-de-la-clase--function-">Métodos de la clase <em>Function</em></h3>
<p>Teniendo en una variable de <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">tipo Function</a> podemos llamarla con <em>call</em> incluyendo un parámetro que se considerará el valor de la referencia <em>this</em> dentro de la función. Con <em>apply</em> los argumentos serán los definidos en un array aunque con la sintaxis <em>spread</em> esta función puede caer en desuso. Con <em>bind</em> podemos asociar a la función la referencia que siempre se tomará como <em>this</em>.</p>
<h3 id="nueva-sintaxis-para-clases">Nueva sintaxis para clases</h3>
<p>Anteriormente en JavaScript ya se podían <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">definir clases</a> haciendo uso de la propiedad <em>prototype</em> aunque su sintaxis ahora se ha simplificado y hecho más parecida a otros lenguajes además de definir propiedades con su método <em>getter</em> y <em>setter</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">class</span> <span class="nx">Vehiculo</span> <span class="p">{</span>&#10;  <span class="nx">constructor</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_marca</span> <span class="o">=</span> <span class="s1">&#39;Seat&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_color</span> <span class="o">=</span> <span class="s1">&#39;rojo&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">get</span> <span class="nx">color</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_color</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">set</span> <span class="nx">color</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_color</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kr">class</span> <span class="nx">Coche</span> <span class="kr">extends</span> <span class="nx">Vehiculo</span> <span class="p">{</span>&#10;  <span class="nx">get</span> <span class="nx">kilometros</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;  <span class="nx">set</span> <span class="nx">kilometros</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">_kilometros</span> <span class="o">=</span> <span class="nx">k</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;<span class="kr">const</span> <span class="nx">coche</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Coche</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// rojo&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>classes.js</span>
    </div>
</div>
<h3 id="objetos-map-y-set">Objetos Map y Set</h3>
<p>Los objetos pueden ser utilizados como mapas pero a veces utilizar un objeto no es deseable como contenedor de datos, para ello se definen los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> que son clases que a través de una clave se accede a un valor y <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> para colecciones sin elementos repetidos.</p>
<p>Algunas funciones de la clase Map son <em>get</em>, <em>set</em>, <em>has</em>, <em>size</em>, <em>keys</em>, <em>values</em>, <em>entries</em>, <em>forEach</em>, <em>delete</em>, <em>clear</em> y <em>size</em>. Algunas de la clase Set son <em>add</em>, <em>has</em>, <em>forEach</em>, <em>delete</em> y <em>size</em>.</p>
<h3 id="operadores--instanceof--y--typeof-">Operadores <em>instanceof</em> y <em>typeof</em></h3>
<p>Con <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a> se puede comprobar si una variable es de un cierto tipo, si su cadena de prototipos incluye la función indicada. Con <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a> se puede conocer el tipo de dato de una variable.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">)</span><span class="p">;</span> <span class="c1">// true&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">coche</span> <span class="k">instanceof</span> <span class="nx">Coche</span><span class="p">)</span><span class="p">;</span>  <span class="c1">// true&#10;</span><span class="c1"></span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">coche</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// object&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">1</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// number&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="s1">&#39;¡Hola mundo!&#39;</span><span class="p">)</span><span class="p">;</span>   <span class="c1">// string&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">true</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// boolean&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">symbol</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="c1">// symbol&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">fibonacci</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// function&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>instanceof-typeof.js</span>
    </div>
</div>
<h3 id="excepciones">Excepciones</h3>
<p>JavaScript soporta gestionar ciertas circunstancias de error con excepciones y con la construcción <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">try catch finally</a> similar a la existente en lenguajes como Java.</p>
<h3 id="-callback--y--promise-"><em>Callback</em> y <em>Promise</em></h3>
<p>Algunas tareas las manejamos usando <a href="https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks">funciones <em>callback</em></a>, funciones que se pasan como argumento y que son llamadas en algún momento. La programación con <em>callback</em> se hace complicada en la programación asíncrona cuando se anidan varias funciones. Con los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">objetos Promise</a> el código de la programación asíncrona es más legible.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kr">const</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">resolve</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&#10;<span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;then&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;catch&#39;</span><span class="p">)</span><span class="p">;</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// then&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>callback-promise.js</span>
    </div>
</div>
<h3 id="-generators-"><em>Generators</em></h3>
<p>Los <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator">objetos Generator</a> que se basan en el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">protocolo <em>Iterator</em></a> pueden establecer una comunicación entre el generador y el código que lo llama con la palabra reservada <em>yield</em> que retorna el valor del generador y la función <em>next()</em> del iterador que puede proporcionar una parámetro usable en el generador. Las funciones generadoras se declaran poniendo un * después de la palabra <em>function</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="kd">var</span> <span class="nx">fn1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;  <span class="kd">var</span> <span class="nx">fn2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">fn1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn1</span> <span class="o">=</span> <span class="nx">fn2</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn2</span> <span class="o">=</span> <span class="nx">current</span> <span class="o">+</span> <span class="nx">fn1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">reset</span> <span class="o">=</span> <span class="k">yield</span> <span class="nx">current</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">reset</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">fn2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span>&#10;&#10;&#10;<span class="kd">var</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 0&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 2&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 3&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 5&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 8&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span> <span class="c1">// 0&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 1&#10;</span><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&nbsp;&nbsp;&nbsp;&nbsp; <span class="c1">// 2&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>generator.js</span>
    </div>
</div>
<p>Otros métodos nuevos de la <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">clase <em>Object</em></a> son <em>freeze</em> que impide añadir nuevas propiedades al objeto, eliminar existentes o modificar sus valores haciendo al objeto inmutable. Con <em>seal</em> se previene únicamente añadir nuevas propiedades.</p>
<h3 id="misc">Misc</h3>
<p>Declarando el <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">modo esctricto</a> con <em>&lsquo;use strict&rsquo;;</em> evitamos algunos de los errores que podemos cometer al usar JavaScript como declarar una variable en un ámbito global cuando no es nuestra intención. Con el método <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">toString()</a> de los objetos podremos proporcionar una representación de un objeto más descriptiva.</p>
<h3 id="manipulacin-dom">Manipulación DOM</h3>
<p>Es raro que para manipular el árbol <a href="https://es.wikipedia.org/wiki/Document_Object_Model">DOM</a> que representa el HTML cargado en el navegador no usemos la librería jQuery pero para casos básicos o cuando no podemos usar esa librería o queremos esa dependencia podemos hacer uso de las funciones incorporadas en el propio navegador y algunas funciones declaradas en el <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">objeto Document</a>. Algunos métodos del objeto Documento son <em>getElementById</em>, <em>getElementsByClassName</em>, <em>getElementsByTagName</em>, <em>querySelector</em> y <em>querySelectorAll</em>.</p>
<p>Para manipular el texto de un nodo se usa la propiedad <em>textContent</em> de la <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">interfaz Node</a> y para incluir en el nodo contenido HTML la propiedad <em>innerHTML</em> de la <a href="https://developer.mozilla.org/en-US/docs/Web/API/element">interfaz Element</a>.</p>
<p>Con <em>createElement</em> de Document mediante código podemos crear nuevos elementos y con <em>appendChild</em> o <em>insertBefore</em> de Node insertarlos en el árbol DOM. Con la propiedad <em>classList</em> y los métodos <em>add</em> y <em>remove</em> podemos añadir clases a un nodo y con <em>dataset</em> acceder a los atributos <em>data-</em> de la etiqueta.</p>
<h3 id="eventos">Eventos</h3>
<p>Los navegadores definen más de 200 eventos ante los que podemos reaccionar, uno de los más típicos es el <em>click</em> en un botón. A un <a href="https://developer.mozilla.org/en-US/docs/Web/API/element">Element</a> de la página y con el método <em>addEventListener()</em> se pueden asociar eventos.</p>
<p>Eventos como el <em>click</em> en algunos elementos tienen definido un comportamiento por defecto, para evitar ejecutar ese comportamiento por defecto disponemos de la función <em>preventDefault</em>.</p>
<p>Los manejadores de eventos se van recorriendo primero en modo captura desde la raíz hasta el nodo del árbol DOM donde se ha producido el evento y posteriormente en modo burbuja desde el nodo donde se ha producido el evento hasta la raíz. Con <em>stopPropagation</em> se puede cancelar la propagación del evento, realmente la propagación se sigue realizando pero el evento se marca como cancelado. Con <em>stopImmediatePropagation</em> se puede parar la propagación completamente, parando incluso la propagación con el evento cancelado.</p>
<p>Todos estos ejemplos funcionan en los navegadores Firefox y Chrome pudiendo probarlos en la consola JavaScript que incorporan para los desarrolladores. En la página <a href="http://es6-features.org/">es6-features</a> hay una lista completa de todas las nuevas características de ECMAScript 6.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://developer.mozilla.org/es/">Mozilla Developer Network</a></li>
<li><a href="http://es6-features.org/">es6-features</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/</id><title>Usar una imagen de fondo aleatoria al cargar una página web</title><updated>2017-03-20T21:00:00+01:00</updated><published>2016-11-13T12:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p>Para darle un toque de estilo a la bitácora he usado unas cuantas texturas de fondo obtenidas de <a href="https://www.toptal.com/designers/subtlepatterns/">Subtle Patterns</a>. Son unas imágenes con un patrón repetitivo de colores suaves y poco llamativos que podemos usar como fondo de una página web, son de libre uso respetando la <a href="https://creativecommons.org/licenses/by-sa/3.0/">licencia Creative Commons - Reconocimiento - Compartir igual</a>. Podemos encontrar texturas en las siguientes categorías y motivos:</p>
<ul>
<li><a href="http://subtlepatterns.com/tag/light/">Light</a></li>
<li><a href="http://subtlepatterns.com/tag/dark/">Dark</a></li>
<li><a href="http://subtlepatterns.com/tag/paper/">Paper</a></li>
<li><a href="http://subtlepatterns.com/tag/stripes/">Stripes</a></li>
<li><a href="http://subtlepatterns.com/tag/wall/">Wall</a></li>
<li><a href="http://subtlepatterns.com/tag/fabric/">Fabric</a></li>
<li><a href="http://subtlepatterns.com/tag/noise/">Noise</a></li>
<li><a href="http://subtlepatterns.com/tag/diamond/">Diamond</a></li>
<li><a href="http://subtlepatterns.com/tag/grid/">Grid</a></li>
<li><a href="http://subtlepatterns.com/tag/carbon/">Carbon</a></li>
</ul>
<p>En el momento de escribir este artículo hay 400+ texturas con diferentes patrones para temas claros, oscuros, &hellip; Como tenemos muchas podemos usar varias y hacer que se cargue una diferente de forma aleatoria cada vez que se visualiza una página variando un poco el estilo de la página cada vez que se carga. En el momento de escribir este artículo es lo que hago en Blog Bitix con el siguiente código JavaScript, puedes probar a recargar la página y verás que se carga otra textura de fondo.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">function</span> <span class="nx">random</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">min</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">spec</span> <span class="o">=</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">backgrounds</span><span class="o">:</span> <span class="p">[</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;confectionary.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;dimension.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;skulls.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;tree_bark.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;contemporary_china_2.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;eight_horns.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;swirl_pattern.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;upfeathers.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;contemporary_china.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;paisley.png&#39;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <span class="s1">&#39;symphony.png&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">]</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">backgrounds</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">backgrounds</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;background-image&#39;</span><span class="p">,</span> <span class="s1">&#39;url(&#34;assets/images/backgrounds/&#39;</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="s1">&#39;&#34;)&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// ...&#10;</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>app-theme.js</span>
    </div>
</div>
<p>Otra página que podemos para obtener una textura en este caso con ruido es <a href="http://www.noisetexturegenerator.com/">Noise Texture Generator</a>. Indicamos unos cuantos parámetros y podemos obtener la textura generada.</p>
<p>Si lo que queremos son fotos de buena calidad en la página en <a href="https://unsplash.com/">Unsplash</a> se publican 10 fotos cada 10 días que también podemos usar libremente, deberemos tener en cuenta que como son fotos de alta calidad y en formato jpg ocupan bastante más y si las usamos en una web deberemos reducir su tamaño para que la carga de la página no se ralentice demasiado en conexiones lentas o consuma demasiados datos, también podemos usarlas como fondo de pantalla de nuestro escritorio.</p>
<p>Una buena textura o imagen pueden darle a una página un aspecto mucho más atractivo y si además hacemos que se use una diferente cada cierto tiempo o de forma aleatoria hacemos que la página sea algo diferente cada vez que se visualiza.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="http://subtlepatterns.com/">Subtle Patterns</a></li>
<li><a href="http://www.noisetexturegenerator.com/">Noise Texture Generator</a></li>
<li><a href="https://unsplash.com/">Unsplash</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/</id><title>Añadir botones selectores de opciones a select múltiple de bootsrap-select</title><updated>2016-10-26T14:30:00+02:00</updated><published>2016-10-25T15:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-5.svg" class="right" width="400" height="300" layout="responsive" alt="Apache Tapestry" title="Apache Tapestry">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" class="right" width="200" height="150" layout="responsive" alt="Java" title="Java">
</div>
<p>La librería <a href="https://silviomoreto.github.io/bootstrap-select/">bootstrap-select</a> nos permite crear elementos <em>select</em> enriquecidos con más funcionalidades que las propias ofrecidas por el navegador para seleccionar una única opción o para seleccionar múltiples opciones. Usando esta librería y añadiendo algunos atributos a las etiquetas HTML <em>select</em>, <em>optgroup</em> y <em>option</em> añadirá varias funcionalidades interesantes como comento en <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/">Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</a>.</p>
<p>Una de las opciones que añade es poniendo en la etiqueta <em>select</em> el atributo <em>data-actions-box</em> son dos botones para seleccionar todas las opciones o para deseleccionar todas las opciones.</p>
<p>Este es el aspecto de un elemento de selección con los botones de seleccionar todas las opciones y ninguna que son muy útiles para el usuario evitándose seleccionar una a una cada una de las opciones.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-todos_huc1aae9ea09a793984ca66ef5b24c9d4d_12332_2560x1440_fit_box_2.png" title="Multiselect con opciones Todos y Ninguno" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-todos_huc1aae9ea09a793984ca66ef5b24c9d4d_12332_450x400_fit_box_2.png" width="450" height="222" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect_hub697a62ce7fc0de6d6f2d6c23d078055_12857_2560x1440_fit_box_2.png" title="Opciones seleccionadas de Multiselect" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect_hub697a62ce7fc0de6d6f2d6c23d078055_12857_450x400_fit_box_2.png" width="450" height="154" class="lozad"></a>
  <figcaption>MultiSelect con opciones Todos y Ninguno</figcaption>
  </figure>
</div>
<p>A pesar de todas las opciones adicionales que añade <em>bootstrap-select</em> incluidas los botones de seleccionar todas las opciones y ninguna aún quizá queramos personalizar más el comportamiento, por ejemplo, permitir seleccionar con botones adicionales un grupo de opciones relacionadas. Supongamos que tenemos un componente de selección múltiple de países y queremos seleccionar los países de Europa, América o Asia además de las opciones que <em>bootstrap-select</em> de todos y ninguno.</p>
<p>Un atributo que usa <em>bootstrap-select</em> para la opción de filtrado es el atributo <em>data-tokens</em>, si el valor introducido en el filtro coincide con este atributo la opción se muestra y en las que no coincide se oculta. Para no añadir más atributos usaré este atributo para asociar a la opción a los grupos que pertenecen o los <em>tokens</em> que tiene asociados. Dada una serie de <em>tokens</em> para los que queremos botón de filtrado en el atributo <em>data-tokens-selectors</em>.</p>
<p>Este sería un ejemplo de código JavaScript junto con el uso del componente de Tapestry en la aplicación que podríamos emplear para añadir al elemento selector este comportamiento de selección de grupos de opciones que básicamente añade de forma dinámica un pequeño trozo de HTML similar al que el componente utiliza para mostrar los botones de todos y ninguno. Cuando se haga clic en un botón de selección con el evento <em>loaded.bs.select</em> se buscan las opciones que contiene el <em>token</em> asociado al botón y se seleccionan teniendo en cuenta también las opciones que estén deshabilitadas. Además, cuando todas las opciones de un botón selector están seleccionadas queda como pulsado como indicativo, lógica que se realiza en el evento <em>change</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">t:multiselect</span> <span class="na">selected</span><span class="o">=</span><span class="s">&#34;paises&#34;</span> <span class="na">model</span><span class="o">=</span><span class="s">&#34;paisesSelectModel&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;selectpicker show-menu-arrow&#34;</span>&#10;  <span class="na">data-size</span><span class="o">=</span><span class="s">&#34;6&#34;</span> <span class="na">data-none-selected-text</span><span class="o">=</span><span class="s">&#34;Nada seleccionado&#34;</span> <span class="na">data-actions-box</span><span class="o">=</span><span class="s">&#34;true&#34;</span>&#10;  <span class="na">data-select-all-text</span><span class="o">=</span><span class="s">&#34;Todos&#34;</span> <span class="na">data-deselect-all-text</span><span class="o">=</span><span class="s">&#34;Ninguno&#34;</span> <span class="na">data-selected-text-format</span><span class="o">=</span><span class="s">&#34;count &gt; 2&#34;</span>&#10;  <span class="na">data-count-selected-text</span><span class="o">=</span><span class="s">&#34;{0} de {1} seleccionados&#34;</span> <span class="na">data-show-tick</span><span class="o">=</span><span class="s">&#34;true&#34;</span>&#10;  <span class="na">data-tokens-selectors</span><span class="o">=</span><span class="s">&#34;europa,america,asia&#34;</span><span class="p">/</span><span class="p">&gt;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span><span class="lnt">54&#10;</span><span class="lnt">55&#10;</span><span class="lnt">56&#10;</span><span class="lnt">57&#10;</span><span class="lnt">58&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;app/multiselect&#34;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;jquery&#34;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">function</span> <span class="nx">Multiselect</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">clientId</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">tokensSelectors</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;tokens-selectors&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span> <span class="p">(</span><span class="nx">tokensSelectors</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">tokensSelectors</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">tokensSelectors</span> <span class="o">=</span> <span class="nx">tokensSelectors</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;loaded.bs.select&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">tokensSelectors</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">it</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">buttons</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&lt;div class=&#34;btn-group btn-group-sm btn-block&#34;&gt;&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">buttons</span> <span class="o">+=</span> <span class="s1">&#39;&lt;button type=&#34;button&#34; data-select-custom-token=&#34;&#39;</span> <span class="o">+</span> <span class="nx">it</span> <span class="o">+</span> <span class="s1">&#39;&#34; class=&#34;actions-btn-custom bs-select-custom btn btn-default&#34;&gt;&#39;</span> <span class="o">+</span> <span class="nx">it</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(</span><span class="p">)</span> <span class="o">+</span> <span class="nx">it</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/button&gt;&#39;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">buttons</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="nx">tokensSelectors</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&lt;/div&gt;&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button[data-id=&#34;&#39;</span> <span class="o">+</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">clientId</span> <span class="o">+</span> <span class="s1">&#39;&#34;] + div[role=&#34;combobox&#34;] div.bs-actionsbox&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">buttons</span><span class="p">)</span><span class="p">;</span>&#10;	&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button[data-id=&#34;&#39;</span> <span class="o">+</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">clientId</span> <span class="o">+</span> <span class="s1">&#39;&#34;] + div[role=&#34;combobox&#34;] div.bs-actionsbox&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;button.bs-select-custom&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;data-select-custom-token&#34;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-tokens~=&#39;</span> <span class="o">+</span> <span class="nx">token</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;:not([disabled])&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">values</span> <span class="o">=</span> <span class="nx">values</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">selectpicker</span><span class="p">(</span><span class="s1">&#39;val&#39;</span><span class="p">,</span> <span class="nx">values</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">clickedIndex</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">tokensSelectors</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">it</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-tokens~=&#39;</span> <span class="o">+</span> <span class="nx">it</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;:not([disabled])&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">active</span> <span class="o">=</span> <span class="nx">values</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">that</span><span class="p">.</span><span class="nx">select</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button[data-id=&#34;&#39;</span> <span class="o">+</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">clientId</span> <span class="o">+</span> <span class="s1">&#39;&#34;] + div[role=&#34;combobox&#34;] div.bs-actionsbox&#39;</span><span class="p">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-select-custom-token=&#34;&#39;</span> <span class="o">+</span> <span class="nx">it</span> <span class="o">+</span> <span class="s1">&#39;&#34;]&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="nx">active</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">function</span> <span class="nx">init</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">new</span> <span class="nx">Multiselect</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span><span class="p">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;	&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">init</span><span class="o">:</span> <span class="nx">init</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>multiselect.js</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;bs-actionsbox&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn-group btn-group-sm btn-block&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions-btn bs-select-all btn btn-default&#34;</span><span class="p"></span><span class="p">&gt;</span>Todos<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions-btn bs-deselect-all btn btn-default&#34;</span><span class="p"></span><span class="p">&gt;</span>Ninguno<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn-group btn-group-sm btn-block&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">data-select-custom-token</span><span class="o">=</span><span class="s">&#34;europa&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions-btn-custom bs-select-custom btn btn-default&#34;</span><span class="p"></span><span class="p">&gt;</span>Europa<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">data-select-custom-token</span><span class="o">=</span><span class="s">&#34;america&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions-btn-custom bs-select-custom btn btn-default&#34;</span><span class="p"></span><span class="p">&gt;</span>America<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn-group btn-group-sm btn-block&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">data-select-custom-token</span><span class="o">=</span><span class="s">&#34;asia&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;actions-btn-custom bs-select-custom btn btn-default&#34;</span><span class="p"></span><span class="p">&gt;</span>Asia<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.html</span>
    </div>
</div>
<p>Y este sería el aspecto de componente en el navegador.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-europa_hu5297a14999dff36ddae4757ae9b095d6_15189_2560x1440_fit_box_2.png" title="Multiselect con opciones Europa" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-europa_hu5297a14999dff36ddae4757ae9b095d6_15189_450x400_fit_box_2.png" width="450" height="282" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-asia_hue08ad63d2befe4ca6d9f6cf51a45bc95_14395_2560x1440_fit_box_2.png" title="Multiselect con opciones Asia" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/images/multiselect-asia_hue08ad63d2befe4ca6d9f6cf51a45bc95_14395_450x400_fit_box_2.png" width="450" height="282" class="lozad"></a>
  <figcaption>MultiSelect con opciones Europa, America y Asia</figcaption>
  </figure>
</div>
<p>Si usásemos el <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/">componente de selección múltiple con Apache Tapetstry y bootstrap-select</a> sería el propio componente <em>MultiSelect</em> el que se encargaría de incluir el JavaScript en la página cuando en ella se usase lo que nos evita incluir el JavaScript de forma global en la aplicación y en todas las páginas cuando realmente no se usa.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span><span class="lnt">47&#10;</span><span class="lnt">48&#10;</span><span class="lnt">49&#10;</span><span class="lnt">50&#10;</span><span class="lnt">51&#10;</span><span class="lnt">52&#10;</span><span class="lnt">53&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.components</span><span class="o">;</span>&#10;&#10;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;<span class="nd">@SupportsInformalParameters</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiSelect</span> <span class="kd">extends</span> <span class="n">AbstractField</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">beginRender</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">JSONObject</span> <span class="n">spec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">spec</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;clientId&#34;</span><span class="o">,</span> <span class="n">getClientId</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">javaScriptSupport</span><span class="o">.</span><span class="na">require</span><span class="o">(</span><span class="s">&#34;app/multiselect&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&#34;init&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">spec</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">SelectModel</span> <span class="nf">getPaisesSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">AbstractSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionGroupModel</span><span class="o">&gt;</span> <span class="nf">getOptionGroups</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">europe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">america</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">asia</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">europe</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;data-tokens&#34;</span><span class="o">,</span> <span class="s">&#34;europa&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">america</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;data-tokens&#34;</span><span class="o">,</span> <span class="s">&#34;america&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">asia</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;data-tokens&#34;</span><span class="o">,</span> <span class="s">&#34;asia&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">espana</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;España&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;espana&#34;</span><span class="o">,</span> <span class="n">europe</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">francia</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Francia&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;francia&#34;</span><span class="o">,</span> <span class="n">europe</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">alemania</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Alemania&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;alemania&#34;</span><span class="o">,</span> <span class="n">europe</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">eeuu</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;EEUU&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;eeuu&#34;</span><span class="o">,</span> <span class="n">america</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">mexico</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Mexico&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;mexico&#34;</span><span class="o">,</span> <span class="n">america</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">argentina</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Argentina&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;argentina&#34;</span><span class="o">,</span> <span class="n">america</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">china</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;China&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;china&#34;</span><span class="o">,</span> <span class="n">asia</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">japon</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Japón&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;japon&#34;</span><span class="o">,</span> <span class="n">asia</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">india</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;India&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&#34;india&#34;</span><span class="o">,</span> <span class="n">asia</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">europaGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;Europa&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">espana</span><span class="o">,</span> <span class="n">francia</span><span class="o">,</span> <span class="n">alemania</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">americaGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;América&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">eeuu</span><span class="o">,</span> <span class="n">mexico</span><span class="o">,</span> <span class="n">argentina</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">asiaGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;Asia&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">china</span><span class="o">,</span> <span class="n">japon</span><span class="o">,</span> <span class="n">india</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">europaGroup</span><span class="o">,</span> <span class="n">americaGroup</span><span class="o">,</span> <span class="n">asiaGroup</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="nf">getOptions</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MultiSelect.java</span>
    </div>
</div>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./gradlew run</code>. 
</p>
<div class="alert alert-warning">
    <img data-src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
]]></content><category term="java"/><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/><category term="tapestry"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/</id><title>Componente select múltiple en Apache Tapestry</title><updated>2016-10-25T13:45:00+02:00</updated><published>2016-10-25T13:45:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-5.svg" class="right" width="400" height="300" layout="responsive" alt="Apache Tapestry" title="Apache Tapestry">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" class="right" width="200" height="150" layout="responsive" alt="Java" title="Java">
</div>
<p>El <em>framework</em> basado en componentes Apache Tapestry incorpora una amplia <a href="http://tapestry.apache.org/component-reference.html">colección de componentes</a> que nos bastarán en la mayoría de casos que necesitemos. Para los casos en que deseemos un componente con un comportamiento específico podemos construir uno completamente nuevo basado en otros existentes incluyendo los propios nuestros, de una librería o incluidos en Tapestry.</p>
<p>En Tapestry hay múltiples componentes con los que construir formularios para que el usuario pueda introducir datos, ser enviados por el navegador y procesados en el servidor. Hay componentes de formulario desde <em>checkboxes</em>, <em>radios</em>, <em>select</em>, <em>inputs</em>, &hellip; con soporte para <abbr title="HyperText Markup Language">HTML</abbr> 5.</p>
<p>Observando en detalle la lista de componentes ofrecidos nos daremos cuenta de que está un componente <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html">Select</a> pero que solo se puede utilizar para que el usuario seleccione una única opción, sin embargo, en el estándar de HTML los campos de selección pueden utilizarse para seleccionar múltiples opciones. Como se no ofrece un componente <em>select</em> para seleccionar múltiples opciones a la vez si lo necesitamos deberemos implementar uno que nos ofrezca esta funcionalidad. Con el codigo fuente de Tapestry la tarea es mucho más sencilla y prácticamente es copiar y pegar, el código completo del componente <em>MultiSelect</em> será lo que muestre a continuación.</p>
<p>Todo componente de formulario en este <em>framework</em> hereda de <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html">AbstracField</a> en el que básicamente deberemos proporcionar una implementación del método <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html#processSubmission(java.lang.String)">processSubmission()</a> donde procesaremos los datos recibidos en este caso con un método equivalente al tradicional en Java EE [ServletRequest.getParameterValues] (<a href="https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterValues-java.lang.String-)">https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterValues-java.lang.String-)</a>. La otra parte que deberemos implementar es la generación de etiquetas HTML del componente en el método de ciclo de vida <em>beginRender()</em> que en gran parte nos servirá lo implementado en el código fuente del componente <em>Select</em> de Tapestry pero incluyendo el atributo <em>multiple</em> que requiere HTML para los <em>selects</em> de múltiples opciones.</p>
<p>Esta sería una implementación de un componente <em>select</em> múltiple. La mayor diferencia entre el componente <em>Select</em> y este <em>MultiSelect</em> está en la propiedad <em>value</em> que en el primero es de tipo <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html">Object</a> donde se guardará el dato seleccionado y <em>selected</em> en el segundo que es un <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">List</a> de objetos donde se guardarán los datos seleccionados.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.components</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.*</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.Parameter</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.annotations.SupportsInformalParameters</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.corelib.base.AbstractField</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.internal.util.SelectModelRenderer</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>&#10;&#10;<span class="nd">@SupportsInformalParameters</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiSelect</span> <span class="kd">extends</span> <span class="n">AbstractField</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * A ValueEncoder used to convert server-side objects (provided from the&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * &#34;source&#34; parameter) into unique client-side strings (typically IDs) and&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * back. Note: this component does NOT support ValueEncoders configured to&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * be provided automatically by Tapestry.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">ValueEncoder</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">encoder</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Model used to define the values and labels used when rendering.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">allowNull</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">SelectModel</span> <span class="n">model</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * The list of selected values from the {@link SelectModel}. This will be updated when the form&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * is submitted. If the value for the parameter is null, a new list will be created, otherwise the existing list&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * will be cleared. If unbound, defaults to a property of the container matching this component&#39;s id.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * &lt;p&gt;&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Prior to Tapestry 5.4, this allowed null, and a list would be created when the form was submitted. Starting&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * with 5.4, the selected list may not be null, and it need not be a list (it may be, for example, a set).&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">autoconnect</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">allowNull</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">selected</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * The object that will perform input validation. The validate binding prefix is generally used to provide&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * this object in a declarative fashion.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; *&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * @since 5.2.0&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Parameter</span><span class="o">(</span><span class="n">defaultPrefix</span> <span class="o">=</span> <span class="n">BindingConstants</span><span class="o">.</span><span class="na">VALIDATE</span><span class="o">)</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">FieldValidator</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">validate</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kd">final</span> <span class="n">Renderable</span> <span class="n">mainRenderer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Renderable</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">SelectModelRenderer</span> <span class="n">visitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SelectModelRenderer</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">encoder</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isOptionSelected</span><span class="o">(</span><span class="n">OptionModel</span> <span class="n">optionModel</span><span class="o">,</span> <span class="n">String</span> <span class="n">clientValue</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">selected</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">optionModel</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">model</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="n">visitor</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">processSubmission</span><span class="o">(</span><span class="n">String</span> <span class="n">controlName</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameters</span><span class="o">(</span><span class="n">controlName</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">values</span> <span class="o">=</span> <span class="o">(</span><span class="n">values</span> <span class="o">=</span><span class="o">=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="o">:</span> <span class="n">values</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Use a couple of local variables to cut down on access via bindings&#10;</span><span class="c1"></span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Collection</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">selected</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">selected</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">selected</span><span class="o">.</span><span class="na">clear</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ValueEncoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">encoder</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Object</span> <span class="n">objectValue</span> <span class="o">=</span> <span class="n">toValue</span><span class="o">(</span><span class="n">value</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">selected</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">objectValue</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">putPropertyNameIntoBeanValidationContext</span><span class="o">(</span><span class="s">&#34;selected&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">try</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">fieldValidationSupport</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">selected</span><span class="o">,</span> <span class="n">resources</span><span class="o">,</span> <span class="n">validate</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">selected</span> <span class="o">=</span> <span class="n">selected</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">ValidationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validationTracker</span><span class="o">.</span><span class="na">recordError</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">removePropertyNameFromBeanValidationContext</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">beginRender</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">element</span><span class="o">(</span><span class="s">&#34;select&#34;</span><span class="o">,</span> <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="n">getControlName</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="s">&#34;id&#34;</span><span class="o">,</span> <span class="n">getClientId</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="s">&#34;multiple&#34;</span><span class="o">,</span> <span class="s">&#34;multiple&#34;</span><span class="o">,</span> <span class="s">&#34;disabled&#34;</span><span class="o">,</span> <span class="n">getDisabledValue</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="s">&#34;class&#34;</span><span class="o">,</span> <span class="n">cssClass</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">putPropertyNameIntoBeanValidationContext</span><span class="o">(</span><span class="s">&#34;selected&#34;</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">validate</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">removePropertyNameFromBeanValidationContext</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">resources</span><span class="o">.</span><span class="na">renderInformalParameters</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">decorateInsideField</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">mainRenderer</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">writer</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kt">void</span> <span class="nf">afterRender</span><span class="o">(</span><span class="n">MarkupWriter</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">writer</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">ValueEncoder</span> <span class="nf">defaultEncoder</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">defaultProvider</span><span class="o">.</span><span class="na">defaultValueEncoder</span><span class="o">(</span><span class="s">&#34;selected&#34;</span><span class="o">,</span> <span class="n">resources</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="cm">/**&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * Computes a default value for the &#34;validate&#34; parameter using&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; * {@link org.apache.tapestry5.services.FieldValidatorDefaultSource}.&#10;</span><span class="cm">&nbsp;&nbsp;&nbsp;&nbsp; */</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Binding</span> <span class="nf">defaultValidate</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">defaultProvider</span><span class="o">.</span><span class="na">defaultValidatorBinding</span><span class="o">(</span><span class="s">&#34;selected&#34;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">resources</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">String</span> <span class="nf">toClient</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">encoder</span><span class="o">.</span><span class="na">toClient</span><span class="o">(</span><span class="n">value</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">Object</span> <span class="nf">toValue</span><span class="o">(</span><span class="n">String</span> <span class="n">clientValue</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="o">(</span><span class="o">(</span><span class="n">Collection</span><span class="o">)</span> <span class="n">encoder</span><span class="o">.</span><span class="na">toValue</span><span class="o">(</span><span class="n">clientValue</span><span class="o">)</span><span class="o">)</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="o">)</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="o">;</span> <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isRequired</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">validate</span><span class="o">.</span><span class="na">isRequired</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getDisabledValue</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">disabled</span> <span class="o">?</span> <span class="s">&#34;disabled&#34;</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>MultiSelect.java</span>
    </div>
</div>
<p>Esta implementación del componente no necesita de una plantilla <em>tml</em> sino que todo el HTML se generará desde el código Java. El componente soporta parámetros informales como indicamos con la anotación <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/annotations/SupportsInformalParameters.html">@SupportsInformalParameters</a> que son parámetros que se añadirán a la etiqueta <em>select</em> incluidos tal cual se indican en su uso que por ejemplo podemos utilizar para variar el número de opciones visibles, personalizar los textos y otras funcionalidades de <a href="https://silviomoreto.github.io/bootstrap-select/">bootstrap-select</a>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">t:multiselect</span> <span class="na">selected</span><span class="o">=</span><span class="s">&#34;coloresSelect&#34;</span> <span class="na">model</span><span class="o">=</span><span class="s">&#34;coloresSelectModel&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;selectpicker show-menu-arrow&#34;</span> &#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="na">size</span><span class="o">=</span><span class="s">&#34;3&#34;</span> <span class="na">data-none-selected-text</span><span class="o">=</span><span class="s">&#34;Nada seleccionado&#34;</span> <span class="na">data-actions-box</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">data-select-all-text</span><span class="o">=</span><span class="s">&#34;Todos&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="na">data-deselect-all-text</span><span class="o">=</span><span class="s">&#34;Ninguno&#34;</span> <span class="na">data-selected-text-format</span><span class="o">=</span><span class="s">&#34;count &gt; 2&#34;</span> <span class="na">data-count-selected-text</span><span class="o">=</span><span class="s">&#34;{0} de {1} seleccionados&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="na">data-show-tick</span><span class="o">=</span><span class="s">&#34;true&#34;</span><span class="p">/</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.pages</span><span class="o">;</span>&#10;&#10;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Index</span> <span class="o">{</span>&#10;&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;	<span class="kd">public</span> <span class="n">SelectModel</span> <span class="nf">getColoresSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">return</span> <span class="k">new</span> <span class="n">AbstractSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;			<span class="nd">@Override</span>&#10;			<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionGroupModel</span><span class="o">&gt;</span> <span class="nf">getOptionGroups</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;			<span class="o">}</span>&#10;&#10;			<span class="nd">@Override</span>&#10;			<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="nf">getOptions</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;				<span class="n">OptionModel</span> <span class="n">rojo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Rojo&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;rojo&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;				<span class="n">OptionModel</span> <span class="n">azul</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Azul&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;azul&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;				<span class="n">OptionModel</span> <span class="n">verde</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Verde&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;verde&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;				<span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">rojo</span><span class="o">,</span> <span class="n">azul</span><span class="o">,</span> <span class="n">verde</span><span class="o">)</span><span class="o">;</span>&#10;			<span class="o">}</span>&#10;		<span class="o">}</span><span class="o">;</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.java</span>
    </div>
</div>
<p>El código HTML generado por el componente es el siguiente:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">select</span> <span class="na">data-actions-box</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">size</span><span class="o">=</span><span class="s">&#34;3&#34;</span> <span class="na">data-select-all-text</span><span class="o">=</span><span class="s">&#34;Todos&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="na">data-deselect-all-text</span><span class="o">=</span><span class="s">&#34;Ninguno&#34;</span> <span class="na">data-count-selected-text</span><span class="o">=</span><span class="s">&#34;{0} de {1} seleccionados&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="na">data-selected-text-format</span><span class="o">=</span><span class="s">&#34;count &amp;gt; 2&#34;</span> <span class="na">data-show-tick</span><span class="o">=</span><span class="s">&#34;true&#34;</span> <span class="na">data-none-selected-text</span><span class="o">=</span><span class="s">&#34;Nada seleccionado&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control selectpicker show-menu-arrow&#34;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="na">multiple</span><span class="o">=</span><span class="s">&#34;multiple&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;multiselect&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;multiselect&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;rojo&#34;</span><span class="p"></span><span class="p">&gt;</span>Rojo<span class="p">&lt;</span><span class="p">/</span><span class="nt">option</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;azul&#34;</span><span class="p"></span><span class="p">&gt;</span>Azul<span class="p">&lt;</span><span class="p">/</span><span class="nt">option</span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;verde&#34;</span><span class="p"></span><span class="p">&gt;</span>Verde<span class="p">&lt;</span><span class="p">/</span><span class="nt">option</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">select</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.html</span>
    </div>
</div>
<p>Este sería el aspecto del <em>select</em> múltiple con sus botones para seleccionar todas las opciones y deseleccionar todas, además de personalizados los textos y una pequeña flecha en el desplegable hacia el componente <em>select</em>, todo esto configurado principalmente a través de atributos <em>data</em> y clases <abbr title="Cascading Stylesheets">CSS</abbr>.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/multiselect_hu72bf607765942b5b3d2a9725cb171228_10025_2560x1440_fit_box_2.png" title="Aspecto del componente select mútiple" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/multiselect_hu72bf607765942b5b3d2a9725cb171228_10025_450x400_fit_box_2.png" width="450" height="179" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/multiselect-2_huef2dae54310e3d5c554c1c2e8d611d38_13940_2560x1440_fit_box_2.png" title="Vista con opciones seleccionadas enviadas al servidor" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/multiselect-2_huef2dae54310e3d5c554c1c2e8d611d38_13940_450x400_fit_box_2.png" width="450" height="163" class="lozad"></a>
  <figcaption>Componente MultiSelect con bootstrap-select</figcaption>
  </figure>
</div>
<p>Si queremos seleccionar múltiples opciones usando <em>checkboxes</em> Tapestry ofrece el componente <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Checklist.html">Checklist</a> y usando <em>selects</em> otra opción es el componente <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Palette.html">Palette</a> pero seguramente no sea lo que deseamos.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/checklist_hu75dc4db3b4dbea2007ec29f49d905629_56952_2560x1440_fit_box_2.png" title="Componente Checklist de Tapestry" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/checklist_hu75dc4db3b4dbea2007ec29f49d905629_56952_450x400_fit_box_2.png" width="450" height="223" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/palette_huea8f72718c98b9e2dd4a8f14ad9bbaea_38513_2560x1440_fit_box_2.png" title="Componente Palette de Tapestry" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/images/palette_huea8f72718c98b9e2dd4a8f14ad9bbaea_38513_450x400_fit_box_2.png" width="450" height="235" class="lozad"></a>
  <figcaption>Componentes Checklist y Palette</figcaption>
  </figure>
</div>
<p>En un artículo anterior comenté como <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/">adaptar el componente <em>Select</em> y este <em>MultiSelect</em> para añadirle funcionalidades de la librería bootstrap-select</a> como cuadro de búsqueda, búsqueda por palabras clave, divisores, etc que consiste en añadir a las etiquetas HTML <em>select</em>, <em>optiongrp</em> y <em>option</em> ciertos atributos con sus correspondientes valores con una combinación de parámetros informales y personalización de la clase <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html">SelectModel</a>. En el siguiente artículo comentaré como <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/">añadir botones selectores de opciones</a> además de los que incorpora <em>bootstrap-select</em> de Todos y Ninguno.</p>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./gradlew run</code>. 
</p>
<div class="alert alert-warning">
    <img data-src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html">Select</a></li>
<li><a href="https://silviomoreto.github.io/bootstrap-select/">Bootstrap Select</a></li>
</ul>
</div>
]]></content><category term="java"/><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/><category term="tapestry"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/</id><title>Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</title><updated>2016-10-25T12:30:00+02:00</updated><published>2016-10-15T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/apache-tapestry-5.svg" class="right" width="400" height="300" layout="responsive" alt="Apache Tapestry" title="Apache Tapestry">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/java.svg" class="right" width="200" height="150" layout="responsive" alt="Java" title="Java">
</div>
<p>El selector de opciones implementado en los navegadores es muy simple pudiendo seleccionar un elemento de una lista, mostrar los elementos agrupados por categorías o seleccionar múltiples elementos pero mostrándolos en formato de una lista en vez de como un desplegable. <a href="https://silviomoreto.github.io/bootstrap-select/">bootstrap-select</a> es una librería que utiliza los estilos de <a href="https://getbootstrap.com/">Bootstrap</a> y que añade algunas funcionalidades más a los componentes de selección de opciones de los formularios de una página web.</p>
<p>Algunas de estas funcionalidades adicionales está explicadas más detalladamente en los <a href="https://silviomoreto.github.io/bootstrap-select/examples/">ejemplos</a>, que son:</p>
<ul>
<li>Cuadro de búsqueda</li>
<li>Búsqueda por palabras clave</li>
<li>Limitar el número de opciones seleccionables</li>
<li>Texto personalizado de opción no seleccionada</li>
<li>Texto personalizado de opción seleccionada (distinto al texto de la opción)</li>
<li>Texto de opciones seleccionadas personalizado</li>
<li>Estilos personalizados</li>
<li>Marca en la opción seleccionada</li>
<li>Flecha hacia el campo del formulario en el desplegable</li>
<li>Estilos  personalizados en opciones individuales</li>
<li>Anchuras personalizables</li>
<li>Iconos en las opciones</li>
<li>Contenido personalizado en las opciones</li>
<li>Subtextos</li>
<li>Tamaño de menú personalizado</li>
<li>Opciones de selección y deselección</li>
<li>Divisores</li>
<li>Cabecera</li>
<li>Posición desplegable</li>
<li>Deshabilitar <em>select</em>, opción o grupo de opciones</li>
</ul>
<p>Todas estas capacidades de personalización se consiguen bien añadiendo atributos a las etiquetas <abbr title="HyperText Markup Language">HTML</abbr> <em>select</em> o a las etiquetas <em>option</em> y <em>optgroup</em> con lo que usar el componente <em>bootstrap-select</em> consiste básicamente generar el marcado HTML adecuado. Con JavaScript se puede construir el componente donde podemos indicar las mismas <a href="https://silviomoreto.github.io/bootstrap-select/options/">opciones adicionales</a> que con los atributos <em>data-</em>, también tiene <a href="https://silviomoreto.github.io/bootstrap-select/methods/">métodos</a> para manipular su comportamiento de forma programática como por ejemplo recibir eventos cuando cambia la selección.</p>
<p>Usando <a href="https://tapestry.apache.org/">Apache Tapestry</a> con su concepto de parámetros informales añadiremos las atributos necesarios en la etiqueta <em>select</em> y con el modelo de datos proporcionado en <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html">SelectModel</a>, <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionGroupModel.html">OptionGroupModel</a> y <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionModel.html">OptionModel</a> podremos proporcionar los atributos adicionales para las etiquetas de los <em>option</em> y <em>optgroup</em>. El modelo de datos de una etiqueta <em>select</em> es una lista de opciones y grupos de opciones, cada opción tiene una etiqueta que se le mostrará al usuario, si está habilitada o no, el valor que se enviará al servidor cuando esté seleccionada y un mapa de atributos a añadir en la etiqueta de la opción.</p>
<p>Este sería el código para crear una instancia de <em>SelectModel</em> para un componente <a href="https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html">Select</a> de Tapestry para un ficticio selector de país. En el ejemplo en vez de usar un mapa vacío con <em>Collections.EMPTY_MAP</em> se podría sustituir por un mapa con atributos que se añadirían a la opción para usar alguna otra funcionalidad de <em>bootstrap-select</em>.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span><span class="lnt">43&#10;</span><span class="lnt">44&#10;</span><span class="lnt">45&#10;</span><span class="lnt">46&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.pages</span><span class="o">;</span>&#10;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Index</span> <span class="o">{</span>&#10;&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>  &#10;  <span class="nd">@Property</span>&#10;  <span class="nd">@Persist</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">PersistenceConstants</span><span class="o">.</span><span class="na">FLASH</span><span class="o">)</span>&#10;  <span class="kd">private</span> <span class="n">String</span> <span class="n">pais</span><span class="o">;</span>	&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;  <span class="nd">@Environmental</span>&#10;  <span class="kd">private</span> <span class="n">JavaScriptSupport</span> <span class="n">javascriptSupport</span><span class="o">;</span>&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;  <span class="kt">void</span> <span class="nf">afterRender</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">javascriptSupport</span><span class="o">.</span><span class="na">require</span><span class="o">(</span><span class="s">&#34;app/index&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&#34;init&#34;</span><span class="o">)</span><span class="o">;</span>&#10;  <span class="o">}</span>&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;  <span class="kd">public</span> <span class="n">SelectModel</span> <span class="nf">getPaisesSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="k">new</span> <span class="n">AbstractSelectModel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionGroupModel</span><span class="o">&gt;</span> <span class="nf">getOptionGroups</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">espana</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;España&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;espana&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">francia</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Francia&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;francia&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">alemania</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Alemania&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;alemania&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">eeuu</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;EEUU&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;eeuu&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">mexico</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Mexico&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;mexico&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">argentina</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Argentina&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;argentina&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">china</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;China&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;china&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">japon</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;Japón&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="s">&#34;japon&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionModel</span> <span class="n">india</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionModel</span><span class="o">(</span><span class="s">&#34;India&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&#34;india&#34;</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">)</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">europa</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;Europa&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">espana</span><span class="o">,</span> <span class="n">francia</span><span class="o">,</span> <span class="n">alemania</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">america</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;America&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">eeuu</span><span class="o">,</span> <span class="n">mexico</span><span class="o">,</span> <span class="n">argentina</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">OptionGroupModel</span> <span class="n">asia</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AppOptionGroupModel</span><span class="o">(</span><span class="s">&#34;Asia&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">Collections</span><span class="o">.</span><span class="na">EMPTY_MAP</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">china</span><span class="o">,</span> <span class="n">japon</span><span class="o">,</span> <span class="n">india</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">europa</span><span class="o">,</span> <span class="n">america</span><span class="o">,</span> <span class="n">asia</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="nf">getOptions</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;  <span class="o">}</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span><span class="o">;</span>&#10;  <span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-html" data-lang="html">...&#10;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;  <span class="p">&lt;</span><span class="nt">t:select</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;pais&#34;</span> <span class="na">model</span><span class="o">=</span><span class="s">&#34;paisesSelectModel&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;selectpicker&#34;</span> <span class="na">data-size</span><span class="o">=</span><span class="s">&#34;6&#34;</span> <span class="na">data-none-selected-text</span><span class="o">=</span><span class="s">&#34;Nada seleccionado&#34;</span><span class="p">/</span><span class="p">&gt;</span>&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;...&#10;<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p"></span><span class="p">&gt;</span>&#10;  ...&#10;  País seleccionado: ${pais}&#10;<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>&#10;...</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>Index.tml</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span><span class="lnt">41&#10;</span><span class="lnt">42&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.OptionGroupModel</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.OptionModel</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppOptionGroupModel</span> <span class="kd">implements</span> <span class="n">OptionGroupModel</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="n">options</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">AppOptionGroupModel</span><span class="o">(</span><span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">disabled</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="n">options</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">disabled</span> <span class="o">=</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">attributes</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">options</span> <span class="o">=</span> <span class="n">options</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getLabel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isDisabled</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">getAttributes</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">attributes</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OptionModel</span><span class="o">&gt;</span> <span class="nf">getOptions</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">options</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppOptionGroupModel.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span><span class="lnt">25&#10;</span><span class="lnt">26&#10;</span><span class="lnt">27&#10;</span><span class="lnt">28&#10;</span><span class="lnt">29&#10;</span><span class="lnt">30&#10;</span><span class="lnt">31&#10;</span><span class="lnt">32&#10;</span><span class="lnt">33&#10;</span><span class="lnt">34&#10;</span><span class="lnt">35&#10;</span><span class="lnt">36&#10;</span><span class="lnt">37&#10;</span><span class="lnt">38&#10;</span><span class="lnt">39&#10;</span><span class="lnt">40&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.plugintapestry.misc</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">org.apache.tapestry5.OptionModel</span><span class="o">;</span>&#10;&#10;<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>&#10;&#10;<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppOptionModel</span> <span class="kd">implements</span> <span class="n">OptionModel</span> <span class="o">{</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">String</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="nf">AppOptionModel</span><span class="o">(</span><span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">disabled</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">disabled</span> <span class="o">=</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="o">.</span><span class="na">attributes</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">String</span> <span class="nf">getLabel</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">label</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isDisabled</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">disabled</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">getAttributes</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">attributes</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nd">@Override</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">value</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="o">}</span>&#10;<span class="o">}</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>AppOptionModel.java</span>
    </div>
</div>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/images/select-1_huea54e05f9d5753b922b38d6939c0cdbc_15559_2560x1440_fit_box_2.png" title="Componente selector con bootstrap-select" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/images/select-1_huea54e05f9d5753b922b38d6939c0cdbc_15559_450x400_fit_box_2.png" width="450" height="279" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/images/select-2_hu2f5e5c7660717b7773a03dbd729e0045_20170_2560x1440_fit_box_2.png" title="" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/images/select-2_hu2f5e5c7660717b7773a03dbd729e0045_20170_450x400_fit_box_2.png" width="450" height="279" class="lozad"></a>
  <figcaption>Componente selector con bootstrap-select</figcaption>
  </figure>
</div>
<p>Al ser enviado el formulario que contiene el <em>select</em> el valor seleccionado los tendremos en la propiedad que hayamos indicado en el parámetro <em>value</em> del componente <em>Select</em>, este caso en la propiedad <em>pais</em> de la clase <em>Index</em> que representa la página.</p>
<p>En la clase <em>PlugInStack</em> hay que especificar los recursos CSS y de JavaScript necesarios para usar <em>bootstrap-select</em>, además de iniciarlizar los selectores con JavaScript.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span><span class="lnt">22&#10;</span><span class="lnt">23&#10;</span><span class="lnt">24&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlugInStack</span> <span class="kd">implements</span> <span class="n">JavaScriptStack</span> <span class="o">{</span>&#10;&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;  <span class="nd">@Override</span>&#10;  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Asset</span><span class="o">&gt;</span> <span class="nf">getJavaScriptLibraries</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">Asset</span><span class="o">&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">r</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">assetSource</span><span class="o">.</span><span class="na">getClasspathAsset</span><span class="o">(</span><span class="s">&#34;META-INF/assets/tapestry5/bootstrap/js/dropdown.js&#34;</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">r</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">UrlAsset</span><span class="o">(</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.11.2/js/bootstrap-select.min.js&#34;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">r</span><span class="o">;</span>&#10;  <span class="o">}</span>&#10;	&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;  <span class="nd">@Override</span>&#10;  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">StylesheetLink</span><span class="o">&gt;</span> <span class="nf">getStylesheets</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">List</span><span class="o">&lt;</span><span class="n">StylesheetLink</span><span class="o">&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">r</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StylesheetLink</span><span class="o">(</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.11.2/css/bootstrap-select.min.css&#34;</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">r</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StylesheetLink</span><span class="o">(</span><span class="n">assetSource</span><span class="o">.</span><span class="na">getContextAsset</span><span class="o">(</span><span class="s">&#34;css/app.css&#34;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span> <span class="n">r</span><span class="o">;</span>&#10;  <span class="o">}</span>&#10;&#10;  <span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>PlugInStack.java</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="s2">&#34;app/index&#34;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;jquery&#34;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>&#10;  <span class="kd">function</span> <span class="nx">init</span><span class="p">(</span><span class="nx">spec</span><span class="p">)</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.selectpicker&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">selectpicker</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;  <span class="p">}</span>&#10;&#10;  <span class="k">return</span> <span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nx">init</span><span class="o">:</span> <span class="nx">init</span>&#10;  <span class="p">}</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>index.js</span>
    </div>
</div>
<p>En el artículo <a href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/">Componente select múltiple en Apache Tapestry</a> explico como crear un <em>select</em> múltiple que por defecto no incluye Tapestry pero el estandar HTML soporta y en algún caso nos será necesario y en <a href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/">añadir botones selectores de opciones</a> como incluir selectores adicionales además de Todos y Ninguno.</p>
<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./gradlew run</code>. 
</p>
<div class="alert alert-warning">
    <img data-src="https://picodotdev.github.io/blog-bitix/assets/images/misc/PugInTapestry.png" alt="Portada libro: PlugIn Tapestry" title="Portada libro: PlugIn Tapestry" style="float: left; margin-right: 1.5em;" class="lozad">
    <h3>Libro PlugIn Tapestry</h3>
    <p>Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este <i>framework</i> en el formato que prefieras, <a href="https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/">PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry</a>, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.</p>
    <br style="clear: both;">
    <div class="buttons">
        <a href="https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf" class="btn btn-lg btn-success">PDF</a>
        <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry" class="btn btn-lg btn-success">Código fuente ejemplos</a>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://silviomoreto.github.io/bootstrap-select/">Bootstrap Select</a></li>
<li><a href="https://silviomoreto.github.io/bootstrap-select/examples/">Bootstrap Select Examples</a></li>
<li><a href="https://silviomoreto.github.io/bootstrap-select/methods/">Bootstrap Select Methods</a></li>
</ul>
</div>
]]></content><category term="java"/><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/><category term="tapestry"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/06/moment-js-libreria-javascript-para-fechas/</id><title>Moment.js, librería JavaScript para fechas</title><updated>2016-06-05T17:00:00+02:00</updated><published>2016-06-05T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/06/moment-js-libreria-javascript-para-fechas/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>Hace un tiempo escribí una serie de artículos mostrando el uso de varias de la librerías de JavaScript, el primer artículo fue sobre una <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">introducción sobre RequireJS</a> hasta un <a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a> pasando por otra serie de herramientas útiles en una aplicación que tiene una parte importante en el navegador como:</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.htmlf">Plantillas con Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html"><em>Logging</em> log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Modelos con Backbone</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">Ejemplo de lista de tareas con Backbone, RESTEasy y Tapestry</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Pruebas unitarias con Jasmine y Sinon</a></li>
<li>El mismo <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">ejemplo de lista de tareas con Marionette</a></li>
<li>Una vez más el mismo <a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">ejemplo de lista de tareas con Backbone y React</a> opción que me gustó más que con <a href="https://marionettejs.com/">Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
</ul>
<p>En este artículo comentaré otra librería de JavaScript que nos será de utilidad para el trabajo con datos de tipo fecha en el navegador, la librería es <a href="https://momentjs.com/">Moment.js</a>.</p>
<p>La librería Moment.js permite en el lado del cliente formatear fechas según un patrón, manipular fechas añadiendo o restando días, comparar fechas, hacer consultas como si es un año bisiesto o la fecha está usando una zona horaria de verano o según calendario, soporta diferentes lenguajes además de permitirnos trabajar con diferentes zonas horarias y periodos de tiempo. En la propia <a href="http://momentjs.com/">página de inicio del proyecto</a> y la <a href="http://momentjs.com/timezone/">sección de zonas horarias</a> están incluidos diferentes ejemplos de cada una de estas posibilidades. El la <a href="http://momentjs.com/docs/">documentación</a> están explicadas más detalladamente todas las opciones, como usarlo con <a href="https://requirejs.org/">Require.js</a> y el gestor de paquetes <a href="https://bower.io/">Bower</a> o con <a href="https://www.npmjs.com/">npm</a>.</p>
<p>En este artículo no incluiré un ejemplo de código ya que en la página de inicio del proyecto está muy bien explicado, la documentación parece bastante completa.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://momentjs.com/">Moment.js</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/</id><title>Internacionalización (i18n) en JavaScript</title><updated>2015-01-31T01:00:00+01:00</updated><published>2015-01-23T10:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/javascript.svg" class="right" width="200" height="150" layout="responsive" alt="JavaScript" title="JavaScript">
</div>
<p>Si desarrollamos una aplicación web, que es usada en múltiples idiomas y el lado del cliente tiene cierta complejidad quizá nos encontremos con la necesidad de proporcionar internacionalización (i18n) para los textos o mensajes mediante una librería javascript. Una de la que más me ha gustado de las que he encontrado ha sido <a href="http://i18next.com/">i18next</a> pero hay <a href="https://stackoverflow.com/questions/3084675/internationalization-in-javascript">varias opciones más</a>, incluidas dos que merecen ser nombradas que son <a href="http://airbnb.github.io/polyglot.js/">polyglot</a> y <a href="https://github.com/SlexAxton/messageformat.js">messageformat</a>, estas tres opciones son parecidas pero no tienen exactamente las mismas funcionalidades, deberemos evaluarlas para elegir una según lo que necesitemos.</p>
<p>La documentación de i18next no es muy extensa pero es suficiente, las funcionalidades que ofrece son:</p>
<ul>
<li>Soporte para variables (interpolación)</li>
<li>Soporte para variables anidadas</li>
<li>Soporte para múltiples formas plurales e indefinidos</li>
<li>Soporte sprintf</li>
<li>Integración con jquery</li>
<li>Búsqueda de locales</li>
<li>Obtención de traducciones del servidor</li>
<li>Cacheo de recursos en el navegador</li>
<li>Algunas otras adicionales</li>
</ul>
<p>Para mostrar su uso me basaré en el ejemplo <a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Lista de tareas con Backbone y React</a> al que le añadiré el soporte de internacionalización con i18next. Como en el ejemplo uso RequireJS usaré la versión de i18next con soporte para AMD. Una vez descargada y colocada en el directorio de los módulos de RequireJS deberemos añadir la dependencia a los módulos donde la usemos, en el caso del ejemplo en tareas.js. En el ejemplo los textos que se necesitan internacionalizar son el título, el texto que aparece en el input antes de introducir el nombre de una tarea, el número de tareas completadas y el texto del botón limpiar, para mostrar estos textos usaremos la función t de i18next que nos devolverá dada la clave del texto que queremos el valor adecuado según los archivos de literales y el idioma de la aplicación. Todo esto lo hacemos de la siguiente forma:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">i18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Lista_de_tareas&#39;</span><span class="p">)</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>tareas-1.js</span>
    </div>
</div>
<p>Los archivos de literales son poco más que una relación de claves valor similar a los archivos properties de Java aunque en el caso de i18next se definen en archivos con formato json. En este ejemplo la localización (l10n) que proporcionaré será para español (translation-dev.json, idioma por defecto) y para inglés (translation-en.json). Por cada idioma localizado necesitamos crea un archivo con los literales:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Lista_de_tareas&#34;</span><span class="p">:</span> <span class="s2">&#34;Lista de tareas&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;COMPLETADAS_tareas_completadas_de_TOTAL&#34;</span><span class="p">:</span> <span class="s2">&#34;__completadas__ tarea completada de __total__&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;COMPLETADAS_tareas_completadas_de_TOTAL_plural&#34;</span><span class="p">:</span> <span class="s2">&#34;__completadas__ tareas completadas de __total__&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Muy_bien_has_completado_todas_las_tareas&#34;</span><span class="p">:</span> <span class="s2">&#34;¡Muy bien! has completado todas las tareas&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Limpiar&#34;</span><span class="p">:</span> <span class="s2">&#34;Limpiar&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Introduce_una_nueva_tarea&#34;</span><span class="p">:</span> <span class="s2">&#34;Introduce una nueva tarea&#34;</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>translation-dev.json</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Lista_de_tareas&#34;</span><span class="p">:</span> <span class="s2">&#34;Tasks List&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;COMPLETADAS_tareas_completadas_de_TOTAL&#34;</span><span class="p">:</span> <span class="s2">&#34;__completadas__ task completed of __total__&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;COMPLETADAS_tareas_completadas_de_TOTAL_plural&#34;</span><span class="p">:</span> <span class="s2">&#34;__completadas__ tasks completed of __total__&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Muy_bien_has_completado_todas_las_tareas&#34;</span><span class="p">:</span> <span class="s2">&#34;¡Perfect! You have done all tasks&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Limpiar&#34;</span><span class="p">:</span> <span class="s2">&#34;Clean&#34;</span><span class="p">,</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="nt">&#34;Introduce_una_nueva_tarea&#34;</span><span class="p">:</span> <span class="s2">&#34;Type a new task&#34;</span>&#10;<span class="p">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>translation-en.json</span>
    </div>
</div>
<p>Los lenguajes tienen diferentes formas plurales, por ejemplo, en español hay dos formas plurales (1 y más de uno) pero dependiendo del número de elementos a los que hagamos referencia y el lenguaje puede variar el <a href="http://docs.translatehouse.org/projects/localization-guide/en/latest/l10n/pluralforms.html?id=l10n/pluralforms">número de formas plurales</a>. Si en una aplicación ves las típicas eses entre paréntesis, (s), es porque esa aplicación aunque esté internacionalizada no soporta las múltiples formas plurales de los lenguajes, para un usuario ver esos (s) crea confusión y dificulta la lectura del texto. Si nos encontramos con este caso el literal de la forma plural lo definiríamos y lo obtendríamos de la siguiente forma en el caso del español, el parámetro <em>count</em> se utiliza para determinada la forma plural a utilizar (en el caso de español, singular o plural) y los parámetros <em>completadas</em> y <em>total</em> como parématros del literal usando sus valores en la interpolación en la cadena:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">i18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;COMPLETADAS_tareas_completadas_de_TOTAL&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">completadas</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">total</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}</span><span class="p">)</span><span class="p">;</span> &#10;<span class="c1">// -&gt; { count: 1 } -&gt; COMPLETADAS_tareas_completadas_de_TOTAL -&gt; &#10;</span><span class="c1"></span><span class="c1">// -&gt; __completadas__ tarea completada de __total__ + { completadas: 1, total: 4 }&#10;</span><span class="c1"></span><span class="c1">// -&gt; 1 tarea completada de 4&#10;</span><span class="c1"></span>&#10;<span class="nx">i18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;COMPLETADAS_tareas_completadas_de_TOTAL&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">completadas</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">total</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">// -&gt; { count: 2 } -&gt; COMPLETADAS_tareas_completadas_de_TOTAL_plural&#10;</span><span class="c1"></span><span class="c1">// -&gt; __completadas__ tareas completadas de __total__ + { completadas: 2, total: 4 }&#10;</span><span class="c1"></span><span class="c1">// -&gt; 2 tareas completadas de 4&#10;</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>tareas-2.js</span>
    </div>
</div>
<p>Para completar el ejemplo debemos inicializar la librería i18next con la configuración que queramos por lo menos para definir el locale  y la disposición de los archivos de literales. Esta configuración en el ejemplo está antes de inicializar el componente de la lista de tareas:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span><span class="lnt">4&#10;</span><span class="lnt">5&#10;</span><span class="lnt">6&#10;</span><span class="lnt">7&#10;</span><span class="lnt">8&#10;</span><span class="lnt">9&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="p">[</span><span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;tareas&#39;</span><span class="p">,</span> <span class="s1">&#39;i18next&#39;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">React</span><span class="p">,</span> <span class="nx">tareas</span><span class="p">,</span> <span class="nx">i18n</span><span class="p">)</span> <span class="p">{</span>&#10;	<span class="nx">i18n</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="p">{</span> &#10;		<span class="nx">lng</span><span class="o">:</span> <span class="nx">requirejs</span><span class="p">.</span><span class="nx">s</span><span class="p">.</span><span class="nx">contexts</span><span class="p">.</span><span class="nx">_</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">locale</span><span class="p">,</span>&#10;		<span class="nx">getAsync</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>&#10;		<span class="nx">resGetPath</span><span class="o">:</span> <span class="s1">&#39;js/locales/__lng__/__ns__.json&#39;</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	&#10;	<span class="c1">// ...&#10;</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main.js</span>
    </div>
</div>
<p>Cambiando el idioma preferido en el navegador podemos ver los textos de la aplicación según el mismo:</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/lista-tareas-es_hu4fffc33330c7356efb7d78fb0bf1042f_112035_2560x1440_fit_box_2.png" title="Aplicación en español" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/lista-tareas-es_hu4fffc33330c7356efb7d78fb0bf1042f_112035_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/lista-tareas-en_hu29c1d8e2333171926bcb978ef1032464_111310_2560x1440_fit_box_2.png" title="Aplicación en inglés" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/lista-tareas-en_hu29c1d8e2333171926bcb978ef1032464_111310_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  </figure>
</div>
<p>El texto que indica cuantas tareas están completadas usa las diferentes formas plurales del lenguaje, en el caso del español dos, singular y plural cuando se marca una o dos tareas completadas.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/una-tarea-completada_hu19880757f83886461346764de6ace85a_113614_2560x1440_fit_box_2.png" title="Una tarea completada" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/una-tarea-completada_hu19880757f83886461346764de6ace85a_113614_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/dos-tareas-completadas_hu19880757f83886461346764de6ace85a_114028_2560x1440_fit_box_2.png" title="Dos tareas completadas" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/dos-tareas-completadas_hu19880757f83886461346764de6ace85a_114028_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  </figure>
</div>
<p>i18next se encarga de obtener los archivos de traducciones automáticamente según el idioma en que se deba mostrar la aplicación, para el caso de que el usuario tenga como idioma preferido es-ES se buscarán los archivos localizados es-ES, es y finalmente dev:</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/peticiones-locales-es-ES_huece4ec21fc827eead67df2f890a04fc9_155599_2560x1440_fit_box_2.png" title="Búsqueda de traducciones" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/peticiones-locales-es-ES_huece4ec21fc827eead67df2f890a04fc9_155599_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/peticiones-locales-dev_huce496a18efce224633be7674a57166e8_154965_2560x1440_fit_box_2.png" title="Búsqueda de traducciones" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/peticiones-locales-dev_huce496a18efce224633be7674a57166e8_154965_450x400_fit_box_2.png" width="450" height="304" class="lozad"></a>
  </figure>
</div>
<p>Una vez hechos los cambios y habiendo modificado las pruebas unitarias de javascript comprobamos que todos siguen pasando correctamente:</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/teses_hu1a324ee03e7c394df7b271af0c2fb1f3_36608_2560x1440_fit_box_2.png" title="Pruebas unitarias" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/images/teses_hu1a324ee03e7c394df7b271af0c2fb1f3_36608_450x400_fit_box_2.png" width="450" height="256" class="lozad"></a>
  </figure>
</div>
<p>Eso es todo, este ejemplo aunque sencillo muestra bastantes cosas que se podrían utilizar como base para algo real, usa <a href="https://requirejs.org/">RequireJS</a>, <a href="https://mustache.github.io/">Mustache</a>, <a href="https://backbonejs.org/">Backbone</a>, <a href="https://reactjs.org/">React</a>, <a href="https://jasmine.github.io/">Jasmine</a>, <a href="https://gruntjs.com/">Grunt</a> y ahora <a href="http://i18next.com/">i18next</a> por la parte cliente y <a href="https://resteasy.jboss.org/">RESTEasy</a> y <a href="https://tapestry.apache.org/">Apache Tapestry</a> por la parte servidor, cada una de estas tecnologías las he comentado individualmente en varios artículos.</p>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en JavaScript con log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos JavaScript</a></li>
<li><a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Lista de tareas con Backbone y React</a></li>
</ul>
<p>El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/BackboneReact">código fuente completo de este ejemplo</a> está en <a href="https://github.com/picodotdev">mi repositorio de GitHub</a>, una vez descargado el código puedes probarlo en tu equipo con el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew tomcatRun&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-tomcatRun.sh</span>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://stackoverflow.com/questions/3084675/internationalization-in-javascript">Internationalization in JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/08/internacionalizacion-lenguajes-con.html">Internacionalización a lenguajes con diferentes formas plurales en Java</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2011/11/internacionalizacion-i18n-de-campos-con.html">Internacionalización (i18n) de campos con Hibernate</a></li>
</ul>
</div>
]]></content><category term="javascript"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/</id><title>Ejemplo lista de tareas con Backbone y React</title><updated>2015-10-01T20:00:00+02:00</updated><published>2014-04-11T16:33:28+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>He desarrollado este ejemplo de lista de tareas usando diferentes herramientas javascript primeramente con solo Backbone y después con Marionette. En este caso realizaré el mismo ejemplo para ver las diferencias usando la combinación Backbone para los modelos y React para las vistas junto con otras herramientas como ReactJS, Mustache, Jasmine, Grunt e i18n. Un ejemplo bastante completo de lo que ofrece javascript en estos momentos con la composición de herramientas que más me ha gustado.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/backbone.png" class="right" width="200" height="150" layout="responsive" alt="Backbone" title="Backbone">
</div>
<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/react.png" class="right" width="200" height="150" layout="responsive" alt="React" title="React">
</div>
<p>En anteriores entradas explicaba como hacer el típico ejemplo que se suele usar como demostración en los <em>framework</em> MVC de JavaScript que consiste en una lista de tareas en la que se pueden añadir nuevas, marcarlas como completadas y eliminarlas. Realice este ejemplo en uno de ellos <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">usando solo Backbone</a> y posteriormente <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">usando Marionette</a>. Estos ejemplos eran parte de una serie de artículos sobre JavaScript que la que mostaba como usar muchas otras herramientas como <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Require JS</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Mustache</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">logging con javscript</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">capturar errores en javascript</a>, <a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">introducción a Backbone</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">lista de tarea con Backbone, RESTEasy y Tapestry</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">pruebas unitarias con Jasmine y Sinon</a>, <a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a> y que constituyen parte del actual «estado del arte» en cuanto a desarrollo con JavaScript.</p>
<p>La lista de tareas aunque es un ejemplo sencillo sirve perfectamente como ejercicio para mostrar el uso de los <em>frameworks</em> MVC. En esta entrada voy a mostrar como hacer el mismo ejemplo usando <a href="http://backbonejs.org/">Backbone</a> y <a href="https://reactjs.org/">React</a> y veremos, en mi opinión, que el ejemplo es mucho mas sencillo y lógico.</p>
<p>La parte más complicada y menos intuitiva del ejemplo de la lista de tareas con solamente Backbone o con <a href="https://marionettejs.com/">Marionette</a> probablemente era la V del MVC. Backbone es un <em>framework</em> que deja bastante libertad al desarrollador pudiendo usar únicamente las partes que necesitemos de él, sin embargo, esta sencillez nos obliga a gestionar ciertas «tareas de fontanería» y repetitivas nosotros mismos como la gestión de las vistas y la memoria. Marionette trata de dar solución a parte de estas tareas necesarias además de proporcionar unas guías y arquitectura para el desarrollo de las aplicaciones. Sin embargo, aún con Marionette la construcción de la parte de la vista con el uso de ItemView, CollectionView y Layout comentados en la <a href="https://github.com/marionettejs/backbone.marionette">documentación</a> me resultó poco intuitivo y en cierta medida todavía complicado, no acabé convencido del todo, con React he acabado con la sensación que hacer algo más complejo que este ejemplo es algo al menos manejable.</p>
<p>React es una librería que en algunos casos se está usando en aplicaciones junto con Backbone para proporcionar la parte de la vista y controlador que en conjunto definen lo que en React se conoce como un componente. De esta manera Backbone proporciona los modelos, eventos, routing , &hellip; y React proporciona la representación de esos modelos en html y el código encargado de gestionar el estado de esa vista. React tiene ciertas ventajas adicionales por su funcionamiento y es que cuando se cambia algo en la vista no se reemplaza el html completo de la vista y se inserta uno nuevo sino que React busca las diferencias entre la vista actual y la nueva y realiza únicamente los cambios necesarios para tener la vista nueva, esto tiene la ventaja de que el proceso es más eficiente y rápido y puede notarse en aplicaciones con muchos datos gestionados en el cliente. Pero lo que más me ha gustado de React es la definición del concepto de componente (vista + controlador) que por una parte hace que la creación de las vistas sea mucho más sencilla e intuitiva que en Backbone o Marionette y que junto con el controlador permite crear piezas reusables de código.</p>
<p>Los componentes de React reemplazan a las vistas de Backbone y vistas, controladores y layouts de Marionette. En el nuevo ejemplo los cambios principales se encuentran en el archivo tareas.js que contiene el código de la aplicación de lista de tareas.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">  1&#10;</span><span class="lnt">  2&#10;</span><span class="lnt">  3&#10;</span><span class="lnt">  4&#10;</span><span class="lnt">  5&#10;</span><span class="lnt">  6&#10;</span><span class="lnt">  7&#10;</span><span class="lnt">  8&#10;</span><span class="lnt">  9&#10;</span><span class="lnt"> 10&#10;</span><span class="lnt"> 11&#10;</span><span class="lnt"> 12&#10;</span><span class="lnt"> 13&#10;</span><span class="lnt"> 14&#10;</span><span class="lnt"> 15&#10;</span><span class="lnt"> 16&#10;</span><span class="lnt"> 17&#10;</span><span class="lnt"> 18&#10;</span><span class="lnt"> 19&#10;</span><span class="lnt"> 20&#10;</span><span class="lnt"> 21&#10;</span><span class="lnt"> 22&#10;</span><span class="lnt"> 23&#10;</span><span class="lnt"> 24&#10;</span><span class="lnt"> 25&#10;</span><span class="lnt"> 26&#10;</span><span class="lnt"> 27&#10;</span><span class="lnt"> 28&#10;</span><span class="lnt"> 29&#10;</span><span class="lnt"> 30&#10;</span><span class="lnt"> 31&#10;</span><span class="lnt"> 32&#10;</span><span class="lnt"> 33&#10;</span><span class="lnt"> 34&#10;</span><span class="lnt"> 35&#10;</span><span class="lnt"> 36&#10;</span><span class="lnt"> 37&#10;</span><span class="lnt"> 38&#10;</span><span class="lnt"> 39&#10;</span><span class="lnt"> 40&#10;</span><span class="lnt"> 41&#10;</span><span class="lnt"> 42&#10;</span><span class="lnt"> 43&#10;</span><span class="lnt"> 44&#10;</span><span class="lnt"> 45&#10;</span><span class="lnt"> 46&#10;</span><span class="lnt"> 47&#10;</span><span class="lnt"> 48&#10;</span><span class="lnt"> 49&#10;</span><span class="lnt"> 50&#10;</span><span class="lnt"> 51&#10;</span><span class="lnt"> 52&#10;</span><span class="lnt"> 53&#10;</span><span class="lnt"> 54&#10;</span><span class="lnt"> 55&#10;</span><span class="lnt"> 56&#10;</span><span class="lnt"> 57&#10;</span><span class="lnt"> 58&#10;</span><span class="lnt"> 59&#10;</span><span class="lnt"> 60&#10;</span><span class="lnt"> 61&#10;</span><span class="lnt"> 62&#10;</span><span class="lnt"> 63&#10;</span><span class="lnt"> 64&#10;</span><span class="lnt"> 65&#10;</span><span class="lnt"> 66&#10;</span><span class="lnt"> 67&#10;</span><span class="lnt"> 68&#10;</span><span class="lnt"> 69&#10;</span><span class="lnt"> 70&#10;</span><span class="lnt"> 71&#10;</span><span class="lnt"> 72&#10;</span><span class="lnt"> 73&#10;</span><span class="lnt"> 74&#10;</span><span class="lnt"> 75&#10;</span><span class="lnt"> 76&#10;</span><span class="lnt"> 77&#10;</span><span class="lnt"> 78&#10;</span><span class="lnt"> 79&#10;</span><span class="lnt"> 80&#10;</span><span class="lnt"> 81&#10;</span><span class="lnt"> 82&#10;</span><span class="lnt"> 83&#10;</span><span class="lnt"> 84&#10;</span><span class="lnt"> 85&#10;</span><span class="lnt"> 86&#10;</span><span class="lnt"> 87&#10;</span><span class="lnt"> 88&#10;</span><span class="lnt"> 89&#10;</span><span class="lnt"> 90&#10;</span><span class="lnt"> 91&#10;</span><span class="lnt"> 92&#10;</span><span class="lnt"> 93&#10;</span><span class="lnt"> 94&#10;</span><span class="lnt"> 95&#10;</span><span class="lnt"> 96&#10;</span><span class="lnt"> 97&#10;</span><span class="lnt"> 98&#10;</span><span class="lnt"> 99&#10;</span><span class="lnt">100&#10;</span><span class="lnt">101&#10;</span><span class="lnt">102&#10;</span><span class="lnt">103&#10;</span><span class="lnt">104&#10;</span><span class="lnt">105&#10;</span><span class="lnt">106&#10;</span><span class="lnt">107&#10;</span><span class="lnt">108&#10;</span><span class="lnt">109&#10;</span><span class="lnt">110&#10;</span><span class="lnt">111&#10;</span><span class="lnt">112&#10;</span><span class="lnt">113&#10;</span><span class="lnt">114&#10;</span><span class="lnt">115&#10;</span><span class="lnt">116&#10;</span><span class="lnt">117&#10;</span><span class="lnt">118&#10;</span><span class="lnt">119&#10;</span><span class="lnt">120&#10;</span><span class="lnt">121&#10;</span><span class="lnt">122&#10;</span><span class="lnt">123&#10;</span><span class="lnt">124&#10;</span><span class="lnt">125&#10;</span><span class="lnt">126&#10;</span><span class="lnt">127&#10;</span><span class="lnt">128&#10;</span><span class="lnt">129&#10;</span><span class="lnt">130&#10;</span><span class="lnt">131&#10;</span><span class="lnt">132&#10;</span><span class="lnt">133&#10;</span><span class="lnt">134&#10;</span><span class="lnt">135&#10;</span><span class="lnt">136&#10;</span><span class="lnt">137&#10;</span><span class="lnt">138&#10;</span><span class="lnt">139&#10;</span><span class="lnt">140&#10;</span><span class="lnt">141&#10;</span><span class="lnt">142&#10;</span><span class="lnt">143&#10;</span><span class="lnt">144&#10;</span><span class="lnt">145&#10;</span><span class="lnt">146&#10;</span><span class="lnt">147&#10;</span><span class="lnt">148&#10;</span><span class="lnt">149&#10;</span><span class="lnt">150&#10;</span><span class="lnt">151&#10;</span><span class="lnt">152&#10;</span><span class="lnt">153&#10;</span><span class="lnt">154&#10;</span><span class="lnt">155&#10;</span><span class="lnt">156&#10;</span><span class="lnt">157&#10;</span><span class="lnt">158&#10;</span><span class="lnt">159&#10;</span><span class="lnt">160&#10;</span><span class="lnt">161&#10;</span><span class="lnt">162&#10;</span><span class="lnt">163&#10;</span><span class="lnt">164&#10;</span><span class="lnt">165&#10;</span><span class="lnt">166&#10;</span><span class="lnt">167&#10;</span><span class="lnt">168&#10;</span><span class="lnt">169&#10;</span><span class="lnt">170&#10;</span><span class="lnt">171&#10;</span><span class="lnt">172&#10;</span><span class="lnt">173&#10;</span><span class="lnt">174&#10;</span><span class="lnt">175&#10;</span><span class="lnt">176&#10;</span><span class="lnt">177&#10;</span><span class="lnt">178&#10;</span><span class="lnt">179&#10;</span><span class="lnt">180&#10;</span><span class="lnt">181&#10;</span><span class="lnt">182&#10;</span><span class="lnt">183&#10;</span><span class="lnt">184&#10;</span><span class="lnt">185&#10;</span><span class="lnt">186&#10;</span><span class="lnt">187&#10;</span><span class="lnt">188&#10;</span><span class="lnt">189&#10;</span><span class="lnt">190&#10;</span><span class="lnt">191&#10;</span><span class="lnt">192&#10;</span><span class="lnt">193&#10;</span><span class="lnt">194&#10;</span><span class="lnt">195&#10;</span><span class="lnt">196&#10;</span><span class="lnt">197&#10;</span><span class="lnt">198&#10;</span><span class="lnt">199&#10;</span><span class="lnt">200&#10;</span><span class="lnt">201&#10;</span><span class="lnt">202&#10;</span><span class="lnt">203&#10;</span><span class="lnt">204&#10;</span><span class="lnt">205&#10;</span><span class="lnt">206&#10;</span><span class="lnt">207&#10;</span><span class="lnt">208&#10;</span><span class="lnt">209&#10;</span><span class="lnt">210&#10;</span><span class="lnt">211&#10;</span><span class="lnt">212&#10;</span><span class="lnt">213&#10;</span><span class="lnt">214&#10;</span><span class="lnt">215&#10;</span><span class="lnt">216&#10;</span><span class="lnt">217&#10;</span><span class="lnt">218&#10;</span><span class="lnt">219&#10;</span><span class="lnt">220&#10;</span><span class="lnt">221&#10;</span><span class="lnt">222&#10;</span><span class="lnt">223&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;tareas&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span> <span class="s1">&#39;underscore&#39;</span><span class="p">,</span> <span class="s1">&#39;backbone&#39;</span><span class="p">,</span> <span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;mustache&#39;</span><span class="p">,</span> <span class="s1">&#39;plantillas&#39;</span><span class="p">,</span> <span class="s1">&#39;i18n!i18n/nls/mensajes&#39;</span> <span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">React</span><span class="p">,</span> <span class="nx">Mustache</span><span class="p">,</span> <span class="nx">Plantillas</span><span class="p">,</span> <span class="nx">Mensajes</span><span class="p">)</span> <span class="p">{</span>&#10;	<span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">plantilla</span><span class="p">,</span> <span class="nx">datos</span><span class="p">,</span> <span class="nx">mensajes</span><span class="p">)</span> <span class="p">{</span>&#10;		<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">datos</span> <span class="o">||</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>&#10;		<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">mensajes</span> <span class="o">||</span> <span class="p">{</span><span class="p">}</span><span class="p">;</span>&#10;		&#10;		<span class="kd">var</span> <span class="nx">vista</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="p">{</span>&#10;			<span class="nx">message</span><span class="o">:</span> <span class="nx">m</span>&#10;		<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		&#10;		<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">Plantillas</span><span class="p">[</span><span class="nx">plantilla</span><span class="p">]</span><span class="p">;</span>&#10;		<span class="kd">var</span> <span class="nx">pp</span> <span class="o">=</span> <span class="nx">p</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="k">return</span> <span class="nx">pp</span><span class="p">(</span><span class="nx">vista</span><span class="p">)</span><span class="p">;</span>&#10;	<span class="p">}</span>&#10;	&#10;	<span class="c1">// An example generic Mixin that you can add to any component that should react&#10;</span><span class="c1"></span>	<span class="c1">// to changes in a Backbone component. The use cases we&#39;ve identified thus far&#10;</span><span class="c1"></span>	<span class="c1">// are for Collections -- since they trigger a change event whenever any of&#10;</span><span class="c1"></span>	<span class="c1">// their constituent items are changed there&#39;s no need to reconcile for regular&#10;</span><span class="c1"></span>	<span class="c1">// models. One caveat: this relies on getBackboneModels() to always return the&#10;</span><span class="c1"></span>	<span class="c1">// same model instances throughout the lifecycle of the component. If you&#39;re&#10;</span><span class="c1"></span>	<span class="c1">// using this mixin correctly (it should be near the top of your component&#10;</span><span class="c1"></span>	<span class="c1">// hierarchy) this should not be an issue.&#10;</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">BackboneMixin</span> <span class="o">=</span> <span class="p">{</span>&#10;		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="c1">// Whenever there may be a change in the Backbone data, trigger a reconcile.&#10;</span><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">getBackboneModels</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add change remove reset&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="c1">// Ensure that we clean up any dangling references when the component is&#10;</span><span class="c1"></span>			<span class="c1">// destroyed.&#10;</span><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">getBackboneModels</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="nx">model</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">;</span>&#10;&#10;	<span class="kd">var</span> <span class="nx">Tarea</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">urlRoot</span> <span class="o">:</span> <span class="s1">&#39;rest/tareas/tarea&#39;</span><span class="p">,</span>&#10;		<span class="nx">defaults</span> <span class="o">:</span> <span class="p">{</span>&#10;			<span class="nx">id</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>&#10;			<span class="nx">descripcion</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>&#10;			<span class="nx">completada</span> <span class="o">:</span> <span class="kc">false</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">toogle</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">,</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&#10;	<span class="kd">var</span> <span class="nx">Tareas</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;rest/tareas&#39;</span><span class="p">,</span>&#10;		<span class="nx">model</span><span class="o">:</span> <span class="nx">Tarea</span><span class="p">,</span>&#10;		<span class="nx">findCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="k">return</span> <span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">removeCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="nx">tarea</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;&#10;	<span class="kd">var</span> <span class="nx">TareaComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="p">{</span>&#10;				<span class="nx">completada</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=completada]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;			<span class="p">}</span><span class="p">;</span>&#10;			&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">completada</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="nx">_this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">toogle</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;				<span class="nx">_this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>		&#10;		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;<span class="c1">//			return (&#10;</span><span class="c1"></span><span class="c1">//				&lt;label className=&#34;checkbox&#34;&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;input type=&#34;checkbox&#34; name=&#34;completada&#34; checked={(this.props.tarea.get(&#39;completada&#39;))?&#39;checked&#39;:&#39;&#39;}/&gt; &lt;span className={this.props.tarea.completada}&gt;{this.props.tarea.get(&#39;descripcion&#39;)}&lt;/span&gt;&#10;</span><span class="c1"></span><span class="c1">//				&lt;/label&gt;&#10;</span><span class="c1"></span><span class="c1">//			);&#10;</span><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">label</span><span class="p">(</span><span class="p">{</span><span class="nx">className</span><span class="o">:</span><span class="s1">&#39;checkbox&#39;</span><span class="p">}</span><span class="p">,</span>&#10;				<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;checkbox&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;completada&#39;</span><span class="p">,</span> <span class="nx">checked</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completada&#39;</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;checked&#39;</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>&#10;				<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">span</span><span class="p">(</span><span class="p">{</span><span class="nx">className</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">completada</span><span class="p">}</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tarea</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;descripcion&#39;</span><span class="p">)</span><span class="p">)</span>&#10;			<span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	&#10;	<span class="kd">var</span> <span class="nx">TareasComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="kd">var</span> <span class="nx">tareas</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;<span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;	return (&#10;</span><span class="c1"></span><span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;		&lt;li&gt;&lt;TareaComponent tarea={tarea}/&gt;&lt;/li&gt;&#10;</span><span class="c1"></span><span class="c1">//		&nbsp;&nbsp;&nbsp;&nbsp;	);&#10;</span><span class="c1"></span>				<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">li</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>&#10;						<span class="nx">TareaComponent</span><span class="p">(</span><span class="p">{</span><span class="nx">tarea</span><span class="o">:</span><span class="nx">tarea</span><span class="p">}</span><span class="p">)</span>&#10;				<span class="p">)</span><span class="p">;</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">//			return (&#10;</span><span class="c1"></span><span class="c1">//				&lt;ul&gt;{tareas}&lt;/ul&gt;				&#10;</span><span class="c1"></span><span class="c1">//			);&#10;</span><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">ul</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">tareas</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	&#10;	<span class="kd">var</span> <span class="nx">EstadoComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getData</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">{</span>&#10;				<span class="s1">&#39;COMPLETADAS_tareas_de_TOTAL_completadas&#39;</span><span class="o">:</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">COMPLETADAS_tareas_de_TOTAL_completadas</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span><span class="p">,</span>&#10;				<span class="s1">&#39;Muy_bien_has_completado_todas_las_tareas&#39;</span><span class="o">:</span> <span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Muy_bien_has_completado_todas_las_tareas</span><span class="p">,</span>&#10;			<span class="p">}</span><span class="p">;</span>&#10;			<span class="kd">var</span> <span class="nx">estado</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span><span class="s1">&#39;estado&#39;</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span><span class="p">;</span>&#10;<span class="c1">//			return (&#10;</span><span class="c1"></span><span class="c1">//				&lt;span className=&#34;estado&#34;&gt;{estado}&lt;/span&gt;&#10;</span><span class="c1"></span><span class="c1">//			);&#10;</span><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">span</span><span class="p">(</span><span class="p">{</span><span class="nx">className</span><span class="o">:</span><span class="s1">&#39;estado&#39;</span><span class="p">}</span><span class="p">,</span> <span class="nx">estado</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="c1">// Métodos&#10;</span><span class="c1"></span>		<span class="nx">getData</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="kd">var</span> <span class="nx">completadas</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>&#10;			<span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>&#10;&#10;			<span class="k">return</span> <span class="p">{</span>&#10;				<span class="nx">completadas</span><span class="o">:</span> <span class="nx">completadas</span><span class="p">,</span>&#10;				<span class="nx">total</span><span class="o">:</span> <span class="nx">total</span>&#10;			<span class="p">}</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	&#10;	<span class="kd">var</span> <span class="nx">TareasApp</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">(</span><span class="p">{</span>&#10;		<span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">BackboneMixin</span><span class="p">]</span><span class="p">,</span>&#10;		<span class="nx">getBackboneModels</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">]</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">return</span> <span class="p">{</span><span class="nx">tareas</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Tareas</span><span class="p">(</span><span class="p">)</span><span class="p">}</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">ui</span> <span class="o">=</span> <span class="p">{</span>&#10;				<span class="nx">nuevaTarea</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=nuevaTarea]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="p">,</span>&#10;				<span class="nx">limpiar</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=limpiar]&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">(</span><span class="p">)</span><span class="p">)</span>&#10;			<span class="p">}</span><span class="p">;</span>&#10;			&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">focus</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="c1">// Eventos&#10;</span><span class="c1"></span>		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">keypress</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="c1">// Comprobar si la tecla pulsada es el return&#10;</span><span class="c1"></span>				<span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>&#10;					<span class="kd">var</span> <span class="nx">descripcion</span> <span class="o">=</span> <span class="nx">_this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;&#10;					<span class="c1">// Comprobar si se ha introducido descripción de la tarea&#10;</span><span class="c1"></span>					<span class="k">if</span> <span class="p">(</span><span class="nx">descripcion</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>&#10;						<span class="k">return</span><span class="p">;</span>&#10;					<span class="p">}</span>&#10;&#10;					<span class="c1">// Añadir la tarea y limpiar el input&#10;</span><span class="c1"></span>					<span class="kd">var</span> <span class="nx">tarea</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tarea</span><span class="p">(</span><span class="p">{</span>&#10;						<span class="nx">descripcion</span><span class="o">:</span> <span class="nx">descripcion</span><span class="p">,</span>&#10;						<span class="nx">completada</span><span class="o">:</span> <span class="kc">false</span>&#10;					<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;					<span class="nx">_this</span><span class="p">.</span><span class="nx">addTarea</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span><span class="p">;</span>&#10;					<span class="nx">_this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">nuevaTarea</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="p">;</span>&#10;				<span class="p">}</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">this</span><span class="p">.</span><span class="nx">ui</span><span class="p">.</span><span class="nx">limpiar</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;				<span class="nx">_this</span><span class="p">.</span><span class="nx">removeTareasCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		&nbsp;&nbsp;&nbsp;&nbsp;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;<span class="c1">//			return (&#10;</span><span class="c1"></span><span class="c1">//				&lt;div&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;h2&gt;{Mensajes.Lista_de_tareas}&lt;/h2&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;input type=&#34;text&#34; name=&#34;nuevaTarea&#34; className=&#34;form-control&#34; placeholder={Mensajes.Introduce_una_nueva_tarea} /&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;TareasComponent tareas={this.state.tareas} /&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;EstadoComponent tareas={this.state.tareas} /&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;br/&gt;&#10;</span><span class="c1"></span><span class="c1">//					&lt;input type=&#34;button&#34; name=&#34;limpiar&#34; value={Mensajes.Limpiar} disabled={(this.isTareasCompletadas())?null:&#39;disabled&#39;} className=&#34;btn&#34; /&gt;&#10;</span><span class="c1"></span><span class="c1">//				&lt;/div&gt;&#10;</span><span class="c1"></span><span class="c1">//			);&#10;</span><span class="c1"></span>			<span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">div</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span>&#10;					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">h2</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Lista_de_tareas</span><span class="p">)</span><span class="p">,</span>&#10;					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;nuevaTarea&#39;</span><span class="p">,</span> <span class="nx">className</span><span class="o">:</span><span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="nx">placeholder</span><span class="o">:</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Introduce_una_nueva_tarea</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>&#10;					<span class="nx">TareasComponent</span><span class="p">(</span><span class="p">{</span><span class="nx">tareas</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>&#10;					<span class="nx">EstadoComponent</span><span class="p">(</span><span class="p">{</span><span class="nx">tareas</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">}</span><span class="p">)</span><span class="p">,</span>&#10;					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">br</span><span class="p">(</span><span class="p">)</span><span class="p">,</span>&#10;					<span class="nx">React</span><span class="p">.</span><span class="nx">DOM</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;limpiar&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span><span class="nx">Mensajes</span><span class="p">.</span><span class="nx">Limpiar</span><span class="p">,</span> <span class="nx">disabled</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isTareasCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39;&#39;</span><span class="o">:</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="nx">className</span><span class="o">:</span><span class="s1">&#39;btn&#39;</span><span class="p">}</span><span class="p">)</span>&#10;			<span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="c1">// Métodos&#10;</span><span class="c1"></span>		<span class="nx">isTareasCompletadas</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">findCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">addTarea</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tarea</span><span class="p">)</span><span class="p">;</span>&#10;			<span class="nx">tarea</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">removeTareasCompletadas</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">removeCompletadas</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">resetTareas</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tareas</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span><span class="nx">tareas</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span><span class="p">,</span>&#10;		<span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;			<span class="c1">// Con reset:true solo se lanza un evento para todos los cambios que se produzcan en la colección&#10;</span><span class="c1"></span>			<span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">tareas</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="p">{</span><span class="nx">reset</span><span class="o">:</span><span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;		<span class="p">}</span>&#10;	<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;	&#10;	<span class="k">return</span> <span class="p">{</span>&#10;		<span class="nx">Tarea</span><span class="o">:</span> <span class="nx">Tarea</span><span class="p">,</span>&#10;		<span class="nx">Tareas</span><span class="o">:</span> <span class="nx">Tareas</span><span class="p">,</span>&#10;		<span class="nx">TareaComponent</span><span class="o">:</span> <span class="nx">TareaComponent</span><span class="p">,</span>&#10;		<span class="nx">TareasComponent</span><span class="o">:</span> <span class="nx">TareasComponent</span><span class="p">,</span>&#10;		<span class="nx">EstadoComponent</span><span class="o">:</span> <span class="nx">EstadoComponent</span><span class="p">,</span>&#10;		<span class="nx">TareasApp</span><span class="o">:</span> <span class="nx">TareasApp</span>&#10;	<span class="p">}</span><span class="p">;</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>tareas.js</span>
    </div>
</div>
<p>El resultado es el siguiente:</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/images/backbone-react_hua47f19bdb771f96b8f9ecc179db0dc06_133834_2560x1440_fit_box_2.png" title="" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/images/backbone-react_hua47f19bdb771f96b8f9ecc179db0dc06_133834_450x400_fit_box_2.png" width="450" height="380" class="lozad"></a>
  </figure>
</div>
<p>Los elementos de las vistas se recomienda definirlas con los elementos que proporciona React con React.DOM, pueden definirse más al estilo de html con jsx pero esto hace que el javascript haya de compilarse para transformar ese jsx/html a los elementos React.DOM, el mayor problema es que esto es un proceso costoso lo que puede ralentizar la carga de una página y que el compilador tiene un tamaño considerable de unos 300 KiB. El JSX es más claro y parecido al resultado final que el código equivalente React.DOM pero aún así el código javascript es suficientemente claro. Si aún así quisiésemos usar JSX lo recomendable sería que los archivos con contenido jsx se precompilase en un momento anterior de enviarlo al cliente, posiblemente antes del despliegue de la aplicación en el servidor.</p>
<p>Para probar el código podemos hacerlo abriendo el archivo test/javascript/SpecRunner.html, sin embargo, deberemos hacerlo con Chrome o Chromium y lanzándolo con un parámetro opcional para permitir la carga de los archivos.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ chromium --allow-file-access-from-files&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>chromium.sh</span>
    </div>
</div>
<p>También podríamos probarlo usando gradle con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew jasmine&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradlew.sh</span>
    </div>
</div>
<p>Sin embargo, <a href="http://phantomjs.org/">PhantomJS</a> que es lo que se utiliza para simular el navegador en las pruebas con jasmine y grunt, no soporta la función bind produciéndose la siguiente excepción al usarse en la librería de React.</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span><span class="lnt">3&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">Error: define: &#39;undefined&#39; is not a function (evaluating &#39;RegExp.prototype.test.bind(&#10;&gt;&gt;&nbsp;&nbsp;&nbsp;&nbsp; /^(data|aria)-[a-z_][a-z\d_.\-]*$/&#10;&gt;&gt;   )&#39;)</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>error-bind.txt</span>
    </div>
</div>
<p>Para evitarlo debemos añadir un <em>polyfill</em>. Deberemos añadir los polyfills de <a href="https://github.com/cujojs/poly">cujojs/poly</a>, podemos hacer uso de ellos con RequireJS basta como añadirlo como dependencia:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-JavaScript" data-lang="JavaScript"><span class="nx">define</span><span class="p">(</span><span class="p">[</span><span class="s1">&#39;poly/function&#39;</span><span class="p">,</span> <span class="s1">&#39;specs/tareas-specs&#39;</span><span class="p">]</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>&#10;<span class="p">}</span><span class="p">)</span><span class="p">;</span>&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>main-specs.js</span>
    </div>
</div>
<p>Este problema de la función <em>bind</em> ya esta incluido como <a href="https://code.google.com/p/phantomjs/issues/detail?id=522">peticion en PhantomJS</a> y probablemente se resuelva en la versión 2.0.</p>
<p>El ejemplo con el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/BackboneReact">código fuente completo de este ejemplo</a> está en <a href="https://github.com/picodotdev">mi repositorio de GitHub</a>, puedes probarlo en tu equipo con el siguiente comando:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew tomcatRun&#10;</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>gradle-tomcatRun.sh</span>
    </div>
</div>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en JavaScript con log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos JavaScript</a></li>
<li><a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código JavaScript</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2016/06/moment-js-libreria-javascript-para-fechas/">Moment.js, librería JavaScript para fechas</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2015/01/internacionalizacion-i18n-en-javascript/">Internacionalización (i18n) en JavaScript</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">Function/bind#Compatibility</a></li>
<li><a href="http://neugierig.org/software/blog/2014/02/react-jsx-coffeescript.html">React, JSX, and CoffeeScript</a></li>
</ul>
</div>
]]></content><category term="software"/><category term="programacion"/><category term="javascript"/><category term="planeta-codigo"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/</id><title>Usar Grunt para ejecutar teses unitarios de código JavaScript</title><updated>2015-11-10T19:00:00+01:00</updated><published>2014-04-04T16:43:23+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes">
    <img src="https://picodotdev.github.io/blog-bitix/assets/images/logotypes/grunt.png" class="right" width="200" height="150" layout="responsive" alt="Grunt" title="Grunt">
</div>
<p>En la <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">serie de artículos que escribí sobre javascript</a> hice un ejemplo más o menos complejo y parecido a lo que podría ser una aplicación real usando muchas de las herramientas que ahora se consideran una buena opción para desarrollar aplicaciones javascript como <a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">RequireJS</a>, <a href="http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs">Backbone</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Marionette</a>, <a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Jasmine y Sinon</a>. En el <a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">ejemplo de la lista de tareas con estas herramientas</a> hice unas cuantas pruebas unitarias para mostrar en un ejemplo como son y la forma de usar <a href="http://jasmine.github.io/">Jasmine</a>.</p>
<p>Sin embargo, para ejecutar las pruebas unitarias se necesitaba un navegador y hacerlo de forma manual cuando quisiéramos comprobar el estado de las pruebas. Lo ideal tal y como se comenta en el libro <a href="https://www.amazon.es/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=020161622X&linkCode=as2&tag=blobit-21">The Pragmatic programmer</a><img src="https://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />, es que las pruebas unitarias se ejecuten de forma automatizada con la herramienta de construcción que usemos, esto evitará que se nos olvide ejecutarlas en cada cambio y así descubriremos los errores pronto, también podremos hacer que se ejecuten en un entorno de integración continua como podría ser <a href="http://jenkins-ci.org/">Jenkins</a>. En esta entrada mostraré como ejecutar esas pruebas unitarias de javascript con una tarea de la herramienta <a href="http://www.gradle.org/">Gradle</a> y usando una herramienta similar a Gradle pero para JavaScript llamada <a href="http://gruntjs.com/">Grunt</a>.</p>
<p>Primeramente necesitaremos instalar node.js y el paquete de javascript grunt-cli con de forma global en el sistema:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># pacman -S nodejs</span>&#10;<span class="c1"># npm install -g grunt-cli</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-1.sh</span>
    </div>
</div>
<p>En caso de que tengamos pruebas unitarias con Jasmine como es el caso de este ejemplo deberemos instalar los siguientes paquetes en el directorio raíz del proyecto:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ npm install grunt-contrib-jasmine&#10;$ npm install grunt-template-jasmine-requirejs</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-2.sh</span>
    </div>
</div>
<p>La siguiente linea como se explica en <a href="https://www.npmjs.org/package/grunt-template-jasmine-requirejs">la documentación del paquete grunt-template-jasmine-requirejs</a> puede ser necesaria si en algún momento obtenemos el siguiente error:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ npm install grunt-contrib-jasmine@0.5.3 --save-dev</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-3.sh</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">npm ERR! peerinvalid The package grunt-contrib-jasmine does not satisfy its siblings&#39; peerDependencies requirements!&#10;npm ERR! peerinvalid Peer grunt-template-jasmine-requirejs@0.1.10 wants grunt-contrib-jasmine@~0.5.3</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>mensaje.txt</span>
    </div>
</div>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ npm install</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-4.sh</span>
    </div>
</div>
<p>Si usamos <a href="https://mochajs.org/">Mocha</a> como librería de pruebas unitarias probablemente disponemos de varios paquetes que podemos instalar de forma similar. Una vez instaladas estas herramientas debemos crear dos archivos necesarios para Grunt, que son <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/package.json">package.json</a> y <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/grunt.js">grunt.js</a>. El primero contiene la definición del paquete js para Grunt, quizá lo más destacable es que el nombre del paquete debe estar en minúsculas sino obtendremos un error parecido a «Error: Invalid name: &ldquo;MarionetteREST&rdquo; npm ERR! at ensureValidName». El archivo grunt.js es la descripción de las tareas de grunt que contiene un poco de configuración donde indicamos las especificaciones que contienen las pruebas unitarias, las dependencias necesarias para ejecutar las pruebas y las tareas que se definen. Con todo esto ya podemos ejecutar las pruebas con:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt">1&#10;</span><span class="lnt">2&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-bash" data-lang="bash">$ grunt --gruntfile grunt.js jasmine:requirejs&#10;$ ./gradlew jasmine</code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>script-5.sh</span>
    </div>
</div>
<p>Sin embargo, puede que deseemos ejecutarlas desde la herramienta de construcción que usemos, en mi caso con Gradle. Para añadir el soporte a Gradle de ejecutar las pruebas unitarias a su vez con Grunt debemos añadir la siguiente configuración a nuestro archivo build.gradle:</p>
<div class="code">
    <div class="highlight"><div class="chroma">&#10;<table class="lntable"><tr><td class="lntd">&#10;<pre class="chroma"><code><span class="lnt"> 1&#10;</span><span class="lnt"> 2&#10;</span><span class="lnt"> 3&#10;</span><span class="lnt"> 4&#10;</span><span class="lnt"> 5&#10;</span><span class="lnt"> 6&#10;</span><span class="lnt"> 7&#10;</span><span class="lnt"> 8&#10;</span><span class="lnt"> 9&#10;</span><span class="lnt">10&#10;</span><span class="lnt">11&#10;</span><span class="lnt">12&#10;</span><span class="lnt">13&#10;</span><span class="lnt">14&#10;</span><span class="lnt">15&#10;</span><span class="lnt">16&#10;</span><span class="lnt">17&#10;</span><span class="lnt">18&#10;</span><span class="lnt">19&#10;</span><span class="lnt">20&#10;</span><span class="lnt">21&#10;</span></code></pre></td>&#10;<td class="lntd">&#10;<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">task</span> <span class="nf">jasmine</span><span class="o">(</span><span class="nl">type:</span> <span class="n">GruntTask</span><span class="o">)</span> <span class="o">{</span>&#10;&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">gruntArgs</span> <span class="o">=</span> <span class="s2">&#34;jasmine:requirejs&#34;</span>&#10;<span class="o">}</span>&#10;&#10;<span class="o">.</span><span class="o">.</span><span class="o">.</span>&#10;&#10;<span class="kd">class</span> <span class="nc">GruntTask</span> <span class="kd">extends</span> <span class="n">Exec</span> <span class="o">{</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">gruntExecutable</span> <span class="o">=</span> <span class="n">Os</span><span class="o">.</span><span class="na">isFamily</span><span class="o">(</span><span class="n">Os</span><span class="o">.</span><span class="na">FAMILY_WINDOWS</span><span class="o">)</span> <span class="o">?</span> <span class="s2">&#34;grunt.cmd&#34;</span> <span class="o">:</span> <span class="s2">&#34;grunt&#34;</span>&#10;	<span class="kd">private</span> <span class="n">String</span> <span class="n">switches</span> <span class="o">=</span> <span class="s2">&#34;--gruntfile grunt.js&#34;</span>&#10;&#10;	<span class="n">String</span> <span class="n">gruntArgs</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span> &#10;&#10;	<span class="kd">public</span> <span class="nf">GruntTask</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="kd">super</span><span class="o">(</span><span class="o">)</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">setExecutable</span><span class="o">(</span><span class="n">gruntExecutable</span><span class="o">)</span>&#10;	<span class="o">}</span>&#10;&#10;	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGruntArgs</span><span class="o">(</span><span class="n">String</span> <span class="n">gruntArgs</span><span class="o">)</span> <span class="o">{</span>&#10;		<span class="k">this</span><span class="o">.</span><span class="na">args</span> <span class="o">=</span> <span class="s2">&#34;$switches $gruntArgs&#34;</span><span class="o">.</span><span class="na">trim</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s2">&#34; &#34;</span><span class="o">)</span> <span class="k">as</span> <span class="n">List</span>&#10;	<span class="o">}</span>&#10;<span class="o">}</span></code></pre></td></tr></table>&#10;</div>&#10;</div>
    <div class="highlight-meta">
        <span>build.gradle</span>
    </div>
</div>
<p>Veremos como salida el siguiente resultado en la terminal.</p>
<div class="media">
  <figure>
  <a href="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/images/grunt-jasmine_hu79f9c7ae54435c10e67b3a5309b3972b_34504_2560x1440_fit_box_2.png" title="Ejecutar teses Jasmine con Grunt" data-gallery="data-gallery"><img src="https://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/images/grunt-jasmine_hu79f9c7ae54435c10e67b3a5309b3972b_34504_450x400_fit_box_2.png" width="450" height="220" class="lozad"></a>
  </figure>
</div>
<p>Al hacer esta entrada de forma que las pruebas se ejecuten con Grunt he movido las plantillas de Mustache de lugar, antes estaban embebidas en el html en el ejemplo <a href="https://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">Backbone</a> y las he movido a dentro del javascript de la aplicación de la lista de tareas. Esto hace que para pasar las pruebas no tengamos una dependencia sobre un archivo html externo en el que buscar las plantillas, también así el javascript es más autónomo y está incluido en él todo lo que necesita.</p>
<p>Aún tengo otra entrada preparada sobre javascript que es el mismo ejemplo de la lista de tareas pero en vez de usando las vistas de Backbone o Marionette usando <a href="https://reactjs.org/">React</a>. El <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/MarionetteREST">código fuente completo de este ejemplo sobre pruebas unitarias y Marionette</a> está en <a href="https://github.com/picodotdev">mi regpostorio de GitHub</a>.</p>
<div class="reference">
    Referencia:<br>
<ul>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en JavaScript con log4javascript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de JavaScript</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos JavaScript</a></li>
<li><a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a></li>
<li><a href="https://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></li>
</ul>
</div>
]]></content><category term="software"/><category term="programacion"/><category term="javascript"/><category term="planeta-codigo"/></entry></feed>