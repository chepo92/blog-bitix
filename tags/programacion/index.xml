<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-09-16T10:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/</id>
        <title>Crear anotaciones de Javadoc personalizadas con taglets</title>        
        <updated>2017-09-16T10:00:00+02:00</updated>
        <published>2017-09-16T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;La herramienta de documentación es Javadoc de Java&lt;/a&gt; permite a partir del código fuente de un programa o librería generar un conjunto de documentos en formato HTML enlazados entre si consultables con un navegador web y accesibles desde internet si son accesibles con un servidor web. La documentación se genera a partir de las clases y métodos del código fuente y también a partir de los comentarios de las clases y métodos.&lt;/p&gt;

&lt;p&gt;En los comentarios se pueden incluir anotaciones que enriquecen la documentación, por ejemplo, para indicar el autor o en qué versión se incluyó una clase o método, incluir enlaces, &amp;hellip; en el propio JDK ya se incluye un amplio &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;conjunto completo de anotaciones&lt;/a&gt;. Pero además de usar las anotaciones ya incorporados por defecto en la herramienta también es posible añadir nuevos propios, escribiendo un &lt;em&gt;taglet&lt;/em&gt;. Con la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;API de los &lt;em&gt;taglets&lt;/em&gt;&lt;/a&gt; basta implementar una clase que implemente la interfaz &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html&#34;&gt;Taglet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La clase tiene varios métodos uno que indica el nombre único del &lt;em&gt;taglet&lt;/em&gt; que identificará la anotación en los comentarios de Javadoc, varios métodos para indicar en que localizaciones es usable y dos métodos que generan el contenido a incluir en el HTML resultante. Las clases &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/Tag.html&#34;&gt;Tag&lt;/a&gt; que recibe el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html#toString-com.sun.javadoc.Tag-&#34;&gt;Taglet.toString()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/ParamTag.html&#34;&gt;ParamTag&lt;/a&gt; permite obtener diversa información utilizable para generar el contenido apropiado.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;taglets&lt;/em&gt; pueden ser de tipo bloque con su propia entidad o ser embebidos en linea en un comentario del &lt;em&gt;javadoc&lt;/em&gt;. En ejemplo de &lt;em&gt;taglet&lt;/em&gt; de bloque siguiente consiste en permitir incluir elementos que quedan por hacer en el código, una anotación &lt;em&gt;todo&lt;/em&gt;. Con esta anotación el desarrollador incluye un comentario descriptivo de cuales son las cosas pendientes para un futuro. El código del &lt;em&gt;taglet&lt;/em&gt; sería el siguiente.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=TodoTaglet.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=Main.java&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;p&gt;Una vez escrito el código fuente del &lt;em&gt;taglet&lt;/em&gt; hay que compilarlo e indicar su ubicación al generar la documentación con la herramienta &lt;em&gt;javadoc&lt;/em&gt;. Hay que indicar varias opciones (&lt;em&gt;tagletPath&lt;/em&gt; y &lt;em&gt;taglets&lt;/em&gt;) que también se usarían como parámetros empleando directamente la herramienta &lt;em&gt;javadoc&lt;/em&gt;, los comandos serían los siguientes usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;. También hay que incluir de forma explícita como dependencia la librería &lt;em&gt;tools.jar&lt;/em&gt; ubicado en el JDK.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=build.gradle&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet.png&#34; title=&#34;Contenido del taglet todo en el javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Contenido del taglet todo en el javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html&#34;&gt;Javadoc Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;Taglet Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/</id>
        <title>Cómo generar la documentación Javadoc con Gradle</title>        
        <updated>2017-09-14T10:00:00+02:00</updated>
        <published>2017-09-14T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Habiendo explicado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;que es la herramienta Javadoc&lt;/a&gt;, y en otros artículos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;como crear taglets&lt;/a&gt; para incluirlos en los comentarios y generar contenido con los mecanismos de extensión que ofrece y explicado &lt;em&gt;como cambiar los estilos que se usan por defecto en el Javadoc&lt;/em&gt; para por ejemplo cambiar los colores según la organización o incluir un texto de derechos de autor en el pie de página, hay que generar la documentación &lt;em&gt;javadoc&lt;/em&gt; usando la herramienta de construcción que usemos. En este artículo muestro como generar la documentación &lt;em&gt;javadoc&lt;/em&gt; con &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo primero es incluir en el proyecto el &lt;em&gt;plugin&lt;/em&gt; de java. Con el &lt;em&gt;plugin&lt;/em&gt; incluido se añade una tarea con la que generar la documentación &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=gradle.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para indicar en Gradle &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#options&#34;&gt;las opciones del comando javadoc&lt;/a&gt; hay que ver cuales son en las clases &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/MinimalJavadocOptions.html&#34;&gt;MinimalJavadocOptions&lt;/a&gt;, &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html&#34;&gt;CoreJavadocOptions&lt;/a&gt; y &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html&#34;&gt;StandardJavadocDocletOptions&lt;/a&gt;. Las opciones permiten indicar la clase de &lt;em&gt;taglet&lt;/em&gt; propio y lo mismo para usar una hoja de estilos propia que puede estar basada pero con pequeñas modificaciones sobre la que usa &lt;em&gt;javadoc&lt;/em&gt; por defecto, también para incluir un texto en cada página en el pie. Lo mismo sería para usar cualquiera de las otras opciones que tiene el comando &lt;em&gt;javadoc&lt;/em&gt;. En el ejemplo se usan dos opciones para la codificación de caracteres.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-1.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para generar un artefacto con la documentación comprimida en un archivo &lt;em&gt;zip&lt;/em&gt; hay que incluir la siguiente configuración en el archivo &lt;em&gt;build.gradle&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-2.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Gradle la documentación Javadoc se genera en el directorio &lt;em&gt;build/xxx&lt;/em&gt; y el artefacto en el directorio &lt;em&gt;build/xxx&lt;/em&gt;. Con las opciones anteriores este es el resultado del HTML generado.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc.png&#34; title=&#34;Artefacto generado con la documentación javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Artefacto generado con la documentación javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/</id>
        <title>La herramienta de documentación Javadoc de Java</title>        
        <updated>2017-09-11T13:00:00+02:00</updated>
        <published>2017-09-11T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Programar y desarrollar requiere además de poseer diversos conocimientos disponer de una buena documentación de consulta y referencia. Una de las cosas buenas que me gustaron de Java cuando empecé a programar en este lenguaje, cuando aún estaba lejos de tener internet y aún me lo sigue pareciendo, fue su &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;documentación Javadoc&lt;/a&gt; de toda la API de clases incluidas en el JDK.&lt;/p&gt;

&lt;p&gt;La documentación Javadoc es una colección de páginas HTML de todas las clases, métodos, parámetros y retornos junto con la información y especificaciones que quiera incluir el desarrollador de la API que en el caso de las clases de JDK incluye abundantes e interesantes detalles de implementación a tener en cuenta al usar las clases.&lt;/p&gt;

&lt;p&gt;Se genera a partir del propio código fuente de las clases con los comentarios incluidos que siguen cierto formato precediendo la definición de las clases y métodos. Al estar código y documentación en el propio archivo de código fuente es más fácil mantener sincronizados el código y su documentación.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk.png&#34; title=&#34;Documentación Javadoc del JDK&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Documentación Javadoc del JDK&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación en el código fuente se incluye en comentarios que preceden una clase o método, además, con anotaciones se pueden documentar los parámetros y el valor de retorno. Se pueden incluir etiquetas HTML junto con algunas de las anotaciones o &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt;, algunas &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;anotaciones Javadoc incluidas en el JDK&lt;/a&gt; son las siguientes pero también se pueden desarrollar &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt; propios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;@author&lt;/em&gt;: indica el autor de la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@code}&lt;/em&gt;: incluye en el comentario un trozo de código que se formatea de forma especial.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@docRoot}&lt;/em&gt;: incluye una ruta relativa al directorio raíz donde se genera la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@deprecated&lt;/em&gt;: indica que un método ha quedado obsoleto, se desaconseja su uso y puede que en futuras versiones desaparezca.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@exception&lt;/em&gt;: es sinónima de throws.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@inheritDoc}&lt;/em&gt;: hereda el comentario Javadoc de la clase o método superior en la jerarquía de clases.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@link}&lt;/em&gt;: incluye un enlace a otra sección de la documentación, método o clase.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@linkplain}&lt;/em&gt;: es idéntica a @link pero el enlace es un texto plano.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@literal}&lt;/em&gt;: muestra un texto sin interpretar el texto como HTML.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@param&lt;/em&gt;: documenta un parámetro de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@return&lt;/em&gt;: documenta el valor de retorno de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@see&lt;/em&gt;: incluye un enlace con documentación adicional en la sección final de la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serial&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialData&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialField&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@since&lt;/em&gt;: indica a partir de que versión de la API fue incluida la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@throws&lt;/em&gt;: documenta una posible excepción que puede ser lanzada por el método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@value}&lt;/em&gt;: muestra el valor de un campo estático.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@version&lt;/em&gt;: para documentar la versión de cuando se hizo &lt;em&gt;checkout&lt;/em&gt; del sistema de control de versiones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un ejemplo usando estas anotaciones en una clase sería el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez documentado el código fuente hay que usar la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;herramienta Javadoc&lt;/a&gt; para generar la documentación. Mediante la herramienta de construcción &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; se hace con la tarea &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=gradle.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;La propia documentación de las clases del JDK está generada con la herramienta Javadoc. Este es el aspecto de la documentación de este ejemplo que tiene exactamente el mismo aspecto que la del JDK.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Documentación Javadoc del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos.png&#34; title=&#34;Archivos de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Archivos de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación Javadoc al ser una colección de archivos HTML y demás recursos estáticos pueden copiarse a cualquier servidor web si es necesario que estén disponibles a través de internet y accesibles con cualquier navegador web.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html&#34;&gt;How to Write Doc Comments for the Javadoc Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/</id>
        <title>Los tipos de referencias débiles soft, weak y phantom en Java</title>        
        <updated>2017-09-11T01:00:00+02:00</updated>
        <published>2017-09-10T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Cuando un objeto ya no es alcanzable a través de ninguna referencia directa o cadena de referencias fuertes el objeto es seleccionable para reclamar su memoria y el recolector de basura o &lt;em&gt;garbage collector&lt;/em&gt; de Java lo hace cuando estima oportuno, liberándonos a los programadores de esta tarea, simplificando el código y evitando fugas de memoria. El lenguaje Java le debe al recolector de basura entre otras varias cosas una buena parte de su éxito.&lt;/p&gt;

&lt;p&gt;En Java en realidad hay 4 tipos de referencias a objetos, además de las fuertes hay otras 3 más débiles que no impiden al recolector de basura reclamar el objeto referenciado. Es raro tener la necesidad de usar otra que no sean las fuertes o &lt;em&gt;strong&lt;/em&gt; pero es interesante conocerlas por si en algún caso nos resultase de utilidad. Los otros 3 tipos de referencias denominadas débiles son &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/SoftReference.html&#34;&gt;SoftReference&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html&#34;&gt;WeakReference&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/PhantomReference.html&#34;&gt;PhantomReference&lt;/a&gt; que extienden de &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html&#34;&gt;Reference&lt;/a&gt;. Usar una de estas otras 3 referencias es muy simple basta usar el constructor de cada tipo de referencia.&lt;/p&gt;

&lt;p&gt;Después de la llamada de varias veces al recolector de basura en este caso de forma explícita con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#gc--&#34;&gt;System.gc()&lt;/a&gt; las referencias son encoladas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;El objeto de una referencia &lt;em&gt;soft&lt;/em&gt; es recolectable a discreción del recolector de basura ante necesidades de memoria, el objeto de una referencias &lt;em&gt;weak&lt;/em&gt; es recolectable si solo es alcanzable por referencias &lt;em&gt;weak&lt;/em&gt; y las referencias &lt;em&gt;phantom&lt;/em&gt; son una mejor y más flexible alternativa al mecanismo de finalización de los objetos.&lt;/p&gt;

&lt;p&gt;Algunos usos prácticos de las referencias &lt;em&gt;soft&lt;/em&gt; y &lt;em&gt;weak&lt;/em&gt; son como caches de datos posiblemente usando la clase &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html&#34;&gt;WeakHashMap&lt;/a&gt;, en el caso de las referencias &lt;em&gt;phantom&lt;/em&gt; como mecanismo alternativo a la finalización de objetos incorporada en los objetos desde la versión inicial de Java.&lt;/p&gt;

&lt;p&gt;El mecanismo de finalización de los objetos Java con el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--&#34;&gt;finalize&lt;/a&gt; que puede ser implementado por cualquier clase presenta los siguientes problemas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La llamada al método &lt;em&gt;finalize&lt;/em&gt; es impredecible ya que depende de cuando del recolector de basura reclame el objeto.&lt;/li&gt;
&lt;li&gt;No hay garantía de que el método &lt;em&gt;finalize&lt;/em&gt; sea llamado ya que puede perdurar durante toda la vida de la JVM.&lt;/li&gt;
&lt;li&gt;Una referencia fuerte al objeto puede ser revivida en el método &lt;em&gt;finalize&lt;/em&gt; si se implementa de forma inadecuada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En los constructores de las referencias débiles se puede indicar un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html&#34;&gt;ReferenceQueue&lt;/a&gt; en el que se encolará la referencia cuando el objeto al que referencia cambia su alcanzabilidad. Este mecanismo de notificación es utilizado con las referencias &lt;em&gt;phantom&lt;/em&gt; para proporcionar el mecanismo de finalización alternativo. En la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/&#34;&gt;documentación javadoc&lt;/a&gt; con la descripción del paquete de las referencias se comenta este &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/package-summary.html&#34;&gt;proceso de notificación&lt;/a&gt;. Las referencias son encoladas cuando el recolector de basura determina que son solo alcanzables por referencias &lt;em&gt;soft&lt;/em&gt;, &lt;em&gt;weak&lt;/em&gt; o &lt;em&gt;phantom&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;http://resources.ej-technologies.com/jprofiler/help/doc/helptopics/cpu/finalizers.html&#34;&gt;Replacing Finalizers With Phantom References&lt;/a&gt; se explica junto con su código como implementar el mecanismo alternativo al método &lt;em&gt;finalize&lt;/em&gt;. La librería &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt; proporciona las clases &lt;a href=&#34;https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizablePhantomReference.html&#34;&gt;FinalizablePhantomReference&lt;/a&gt; y &lt;a href=&#34;https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizableReferenceQueue.html&#34;&gt;FinalizableReferenceQueue&lt;/a&gt; con una forma un poco más sencilla de usar las referencias &lt;em&gt;phantom&lt;/em&gt;, en esa documentación también hay un ejemplo de código con su uso para liberar un recurso (&lt;em&gt;ServerSocket&lt;/em&gt;) asociado a un objeto (&lt;em&gt;MyServer&lt;/em&gt;).&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=MyServer.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las referencias débiles añaden una indirección a la referencia que contienen, usando el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html#get--&#34;&gt;get()&lt;/a&gt; se accede al objeto referenciado pero hay que tener en en cuenta que el método &lt;em&gt;get&lt;/em&gt; puede devolver un &lt;em&gt;null&lt;/em&gt; ya que no impiden al recolector de basura reclamar el objeto referenciado, en el caso de las &lt;em&gt;PhantomReferences&lt;/em&gt; el método &lt;em&gt;get&lt;/em&gt; siempre devuelve &lt;em&gt;null&lt;/em&gt; para evitar que la referencia a un objeto sea revivida.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaReference&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.guajava.net/tipos-de-referencias-en-java/&#34;&gt;Tipos de referencias en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javarevisited.blogspot.com.es/2014/03/difference-between-weakreference-vs-softreference-phantom-strong-reference-java.html&#34;&gt;Difference between WeakReference vs SoftReference vs PhantomReference vs Strong reference in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&#34;&gt;Understanding Weak References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/finalization-and-phantom&#34;&gt;Finalization and Phantom References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kdgregory.com/index.php?page=java.refobj&#34;&gt;Java Reference Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14494875/weakreference-string-didnt-garbage-collected-how&#34;&gt;WeakReference string didn&amp;rsquo;t garbage collected? How?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/26211657/understanding-phantom-reference-vs-weak-reference-with-respect-to-reference-queu&#34;&gt;Understanding Phantom reference vs weak reference with respect to Reference queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-posessive-en-expresiones-regulares/</id>
        <title>Los cuantificadores greedy, reluctant y posessive en expresiones regulares</title>        
        <updated>2017-09-09T11:30:00+02:00</updated>
        <published>2017-09-09T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-posessive-en-expresiones-regulares/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;En el mundo de las expresiones regulares hay tres tipos de cuantificadores que varían el comportamiento según el número caracteres que toman para encontrar ocurrencias. Son &lt;em&gt;greedy&lt;/em&gt; o avaricioso, &lt;em&gt;reluctant&lt;/em&gt; o reacio y &lt;em&gt;possesive&lt;/em&gt; o posesivo. Cada cuantificador tiene una expresión en una expresión regular. La opción más habitual es el cuantificador &lt;em&gt;greedy&lt;/em&gt;, añadiendo una &lt;em&gt;?&lt;/em&gt; se convierte en &lt;em&gt;reluctant&lt;/em&gt; y añadiendo un &lt;em&gt;+&lt;/em&gt; se convierte en &lt;em&gt;possesive&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;
Greedy  Reluctant  Possessive  Signigicado
X?      X??        X?+         X, uno o ninguno
X*      X*?        X*+         X, cero o mas
X+      X+?        X++         X, uno o más
X{n}    X{n}?      X{n}+       X, exactamente n veces
X{n,}   X{n,}?     X{n,}+      X, al menos n veces
X{n,m}  X{n,m}?    X{n,m}+     X, al menos n veces pero no mas de m
&lt;/pre&gt;

&lt;p&gt;Aparentemente cada uno de los cuantificadores realiza lo mismo, sin embargo, hay diferencias en su comportamiento al hacer emparejamientos entre los elementos de la expresión regular y la cadena en la que se está aplicando.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Greedy&lt;/em&gt; o avaricioso: este cuantificador intenta obtener el emparejamiento más largo que pueda, tantos carecteres como pueda, si el emparejamiento no es válido elimina un caracter de la cadena que se está comprobando y lo intenta de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reluctant&lt;/em&gt;, reacio o vago: funciona al contrario que el cuantificador &lt;em&gt;greedy&lt;/em&gt;, intentando inicialmente ningún caracter, tan pocos caracteres como pueda, si el emparejamiento no es válido añade un caracter de la cadena que se está comprobando y lo intenta de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Possesive&lt;/em&gt; o posesivo: funciona igual que &lt;em&gt;greedy&lt;/em&gt; salvo que si el emparejamiento no es válido no elimina un caracter de la cadena que se está comprobando y finaliza la comprobación.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/dbd0adb0d0d6e94367c660f96f4ea70d.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/dbd0adb0d0d6e94367c660f96f4ea70d.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el primer ejemplo del cuantificador &lt;em&gt;greedy&lt;/em&gt; se usa &lt;em&gt;.*&lt;/em&gt; para encontrar cualquier cosa, cero o más veces, seguido de las letras &lt;em&gt;f&lt;/em&gt; &lt;em&gt;o&lt;/em&gt; &lt;em&gt;o&lt;/em&gt;. Dado que el cuantificador de la expresión la expresión &lt;em&gt;.*&lt;/em&gt; es avaricioso primero consume toda la cadena. En este punto, no hay coincidencia dado que las tres últimas letras (&lt;em&gt;f&lt;/em&gt; &lt;em&gt;o&lt;/em&gt; &lt;em&gt;o&lt;/em&gt;) han sido consumidas. De modo quese busca con una letra menos sucesivamente hasta que la la ocurrencia más a la derecha de &lt;em&gt;foo&lt;/em&gt; ha sido regurgitada, en este punto hay coincidencia y la búsqueda finaliza.&lt;/p&gt;

&lt;p&gt;En el segundo ejemplo, sin embargo, el cuantificador es reacio o vago de modo que empieza consumiendo nada. Dado que &lt;em&gt;foo&lt;/em&gt; no aparece en el inicio de la cadena es forzado a tomar la primera letra &lt;em&gt;x&lt;/em&gt; con la que se encuentra la primera coincidencia entre 0 y 4. Se siguen encontrando coincidencias hata que la cadena de entrada ha sido consumida. Encuenta otra coincidencia en 4 y 13.&lt;/p&gt;

&lt;p&gt;En el tercer caso se se hayan coincidencias ya que el cuantificador es posesivo. En este caso, la cadena completa es consuimida por &lt;em&gt;.*+&lt;/em&gt; dejando nada que satisfaga el patrón &lt;em&gt;foo&lt;/em&gt; al final de la expresión. Dado que no vuelve hacia atrás tiene mejor rendimiento que el cuantoficador &lt;em&gt;greedy&lt;/em&gt; en los casos que se quiera encontrar una coincidiencia completa en algo.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRegexQuantifiers&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/&#34;&gt;Extraer elementos de una cadena con una expresión regular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/regex/quant.html&#34;&gt;Regular Expression Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers&#34;&gt;Greedy vs. Reluctant vs. Possessive Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rexegg.com/regex-quantifiers.html&#34;&gt;Regex Quantifier Tutorial: Greedy, Lazy, Possessive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/</id>
        <title>Cache simple de datos y con Ehcache en Java</title>        
        <updated>2017-08-25T11:00:00+02:00</updated>
        <published>2017-08-25T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En ocasiones es necesario usar una cache que contenga un número de elementos hasta un límite y que cuando se vayan añadiendo más se vayan borrando otros según algún criterio. En Java si no queremos añadir una nueva dependencia al proyecto con una librería especializada como &lt;a href=&#34;http://www.ehcache.org/&#34;&gt;Ehcache&lt;/a&gt; la clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html&#34;&gt;LinkedHashMap&lt;/a&gt; sirve para aquellos casos de uso simples sin necesidad de dependencias adicionales.&lt;/p&gt;

&lt;p&gt;Si el coste de obtener algunos datos es costoso ya sean porque hay que obtenerlos de una base de datos, mediante una operación de disco o red o hay que hacer algún cálculo sobre ellos en estos casos guardar los datos en una cache supondrá un aumento notable de rendimiento de mayor o menor medida según el coste de la operación que evita la cache. Usar una cache es viable si es posible usar datos no completamente actualizados y dedicar algo de espacio en memoria para la cache. Si en la mayor parte de las búsquedas que se hacen en la cache el elemento buscado está ya presente se considera un acierto o &lt;em&gt;hit&lt;/em&gt; y si no está presente un fallo o &lt;em&gt;miss&lt;/em&gt;, cuando mayor sea el número de aciertos en la cache mayor será el aumento rendimiento percibido.&lt;/p&gt;

&lt;p&gt;Para usar la clase &lt;em&gt;LinkedHashMap&lt;/em&gt; como estructura de datos para una cache simple basta que creemos una nueva clase que extienda de esta con una implementación personalizada para el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-&#34;&gt;removeEldestEntry&lt;/a&gt; que devuelva &lt;em&gt;true&lt;/em&gt; para eliminar entrada más antigua, un caso sería cuando en el mapa se alcance el límite de elementos a almacenar como máximo.&lt;/p&gt;

&lt;p&gt;En el ejemplo se crea una cache que tiene como máximo 5 elementos y se insertan en ella 15, cuando se intenta insertar en elemento más de la capacidad máxima el elemento más viejo se elimina de modo que la cache siempre tiene como máximo 5 elementos. Si la cache va a ser accedida tanto para operaciones de lectura como de escritura desde múltiples &lt;em&gt;threads&lt;/em&gt; hay que prevenir posibles problemas de concurrencia sincronizando su acceso con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-&#34;&gt;Collections.synchronizedMap&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=Main-1.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=SimpleCache.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si son necesarias funcionalidades más avanzadas como que los elementos expiren pasado un tiempo y para mayores cantidades de datos guardar parte de la cache en disco con un límite de espacio ocupado una de las opciones más conocidas es Ehcache.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=Main-2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Cachear datos se puede hacer en varios puntos de una aplicación, si se trata de una aplicación web &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt; cachea el HTML, CSS y JavaScript además de los códigos de estado incluso &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;nginx incorpora la funcionalidad de cache&lt;/a&gt;, la propia aplicación puede cachear ciertos datos con alguna de las formas expuestas en este artículo y las propias bases de datos pueden cachear en memoria ciertos datos para evitar acceder al sistema de ficheros o disco. En definitiva una cache usada de forma efectiva ayuda a mitigar la penalización de operaciones costosas de acceso a red o a disco comparado con el acceso a memoria.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/255/java-cache.png&#34; title=&#34;Ejecución del ejemplo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/255/java-cache-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaCache&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/</id>
        <title>37 buenos libros sobre sobre Java, Linux, DevOps y desarrollo que he leído</title>        
        <updated>2017-08-19T11:00:00+02:00</updated>
        <published>2017-08-18T23:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Con el buscador Google y usando las palabras clave adecuadas es raro no encontrar información sobre aquello que estemos buscando. Pero en internet la información suele estar muy dispersa y en cada sitio la información no es completa y con profundidad, internet esta muy bien como apoyo o para precisar una determinada cuestión. Sin embargo, los libros siguen siendo un buen material de aprendizaje, entre sus ventajas está que la información está mejor organizada con una estructura más didáctica y dependiendo del libro el tema tratado es explicado con profundidad. Desde el 2014 son unos cuantos libros más los que he leído.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;En internet hay cantidad de información que nos permiten aprender sobre cualquier cosa a nuestro libre albedrío y que queramos teniendo el tiempo para dedicárselo ya sea en forma de escuetas presentaciones en &lt;a href=&#34;https://speakerdeck.com/&#34;&gt;SpeakerDeck&lt;/a&gt; o &lt;a href=&#34;http://es.slideshare.net/&#34;&gt;SlideShare&lt;/a&gt;, páginas sobre temas de programación, artículos en bitácoras como esta que estás leyendo u otras, vídeos en &lt;a href=&#34;https://www.youtube.com/&#34;&gt;YouTube&lt;/a&gt;, convenciones presenciales o &lt;em&gt;hangouts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Algunas páginas dedicadas a la programación relativa a &lt;a href=&#34;http://www.oracle.com/technetwork/java/index.html&#34;&gt;Java&lt;/a&gt; y &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt; a las que estoy suscrito son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/&#34;&gt;JAXenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/&#34;&gt;JavaWorld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/&#34;&gt;JavaMagazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualjug.com/&#34;&gt;VirtualJUG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsdmag.org/&#34;&gt;BSD Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net&#34;&gt;LWN.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linux.com/&#34;&gt;linux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la biblioteca digital &lt;a href=&#34;https://openlibra.com&#34;&gt;OpenLibra&lt;/a&gt; encontramos una gran cantidad de libros de diversos temas cuyas licencias permiten su libre acceso.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/254/openlibra.png&#34; title=&#34;OpenLibra&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/254/openlibra-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Web de OpenLibra&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Podemos leer libros cuya información no está relacionada con un determinado herramienta técnica sino que su conocimiento es más generalista e independiente de la tecnología, en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/&#34;&gt;8+ libros para mejorar como programadores&lt;/a&gt; recogía varios de los más mencionados y recomendados por mucha gente todavía válidos a pesar del tiempo transcurrido desde que fueron escritos, son atemporales. En la época que estaba en la universidad hace unos 15-20 años para mi internet aún estaba llegando, lo más parecido que tenía era la biblioteca en la que pedía prestados libros pero lógicamente con mayor limitación de material disponible. Hoy en día los alumnos, de universidad o bachillerato y gente con interés que quiera formarse mediante internet tiene acceso a material del que aprender mucho mejor en cantidad, facilidad y seguramente en calidad. A la gente que ahora está en la universidad le recomendaría que no se limiten a aprender lo que les enseñan en clases magistrales sus profesores sino que tomen parte activa en su formación aprovechándose de los recursos que pueden encontrar en internet.&lt;/p&gt;

&lt;p&gt;Estos son los que me ha parecido que están bastante bien, algunos he leído de forma completa otros solo ciertos capítulos, algunos después de leídos olvidados en parte por falta de uso y porque mi inglés no es muy bueno. Son libros relacionados con la programación, la web o el lenguaje Java en su mayoría. Hay algún libro más que he leído pero estos son los que quería destacar. Además de aprender leer esta buena cantidad de libros me da ideas para escribir algunos artículos, algunos de los cuanles he incluído en este artículo como relacionados.&lt;/p&gt;

&lt;h2 id=&#34;libros-sobre-java&#34;&gt;Libros sobre Java&lt;/h2&gt;

&lt;h3 id=&#34;java-9-modularity&#34;&gt;Java 9 Modularity&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491954167&amp;linkId=a4ac0f67b92d5e64b2f115dec0ed246c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La modularidad no es la única característica que se incorporará en Java 9 hay muchas otras pero quizá la que más llama la atención en parte porque estaba prevista ya para versiones anteriores y finalmente se ha postergado desde la versión 7. En cualquier caso la modularidad mejora la encapsulación, seguridad, rendimiento y compatibilidad con versiones futuras aspecto de la compatibilidad hacia atrás que siempre se la ha dado y es destacado en la plataforma Java.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2ic88Qc&#34;&gt;Java 9 Modularity&lt;/a&gt; explica los cambios que afectan principalmente a algún nuevo archivo de código fuente para definir de forma explícita las dependencias que posee un módulo y los paquetes que exporta que definen su interfaz pública. También explica los cambios que afectan a comandos básicos como &lt;em&gt;javac&lt;/em&gt; para compilar y &lt;em&gt;java&lt;/em&gt; para ejecutar una aplicación. Hasta que los módulos se empiecen a adoptar por las librerías, y será lento, se explican los mecanismos para usar en Java 9 con módulos librerías de código que no hayan sido adaptadas aún.&lt;/p&gt;

&lt;p&gt;Java 9 será publicado en septiembre y ya tengo ideados unos cuantos artículos para publicar.&lt;/p&gt;

&lt;h3 id=&#34;java-generics-and-collections&#34;&gt;Java Generics and Collections&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596527756&amp;linkId=7392be28d1ec52d1dca41e10fc216fc1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los tipos genéricos se añadieron en Java 5, en el año 2004, que el copilador utiliza para validar la corrección del código evitando problemas que serían producidos en tiempo de ejecución. En la API de colecciones se usa de forma extensiva.&lt;/p&gt;

&lt;p&gt;El concepto no es difícil pero dominar las declaraciones de los &lt;em&gt;generics&lt;/em&gt; no lo es, se puede complicar bastante. El libro &lt;a href=&#34;https://amzn.to/2whneuf&#34;&gt;Java Generics and Collections&lt;/a&gt; es antiguo pero no está anticuado y sigue tiendo plena validez hoy, explica porque los &lt;em&gt;generics&lt;/em&gt; fueron implementados en Java como fueron implementados, las limitaciones que causa y las ponderaciones que realizaron sus desarrolladores.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/&#34;&gt;Tutorial sobre los tipos genéricos de Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cloud-native-java&#34;&gt;Cloud Native Java&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B074R4B7LY&amp;linkId=cb4b120dd4eac60796de0ec4796fbf8e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La flexibilidad que aporta la computación en la nube (o en los ordenadores de otros como dice la FSF) es en gran medida su éxito. Los programas que adopten esta nueva arquitectura obtienen varias ventajas como escalabilidad, tolerancia a fallos o administración de automatizada. Sin embargo, las aplicaciones tiene que diseñarse o adaptarse a este nuevo entorno.&lt;/p&gt;

&lt;p&gt;Algunas librerías como &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; proporciona a las aplicaciones Java facilidades para desarrollar aplicaciones que se consideran nativas para la computación en la nube. &lt;a href=&#34;https://amzn.to/2v7T4EK&#34;&gt;Cloud Native Java&lt;/a&gt; hace un repaso a los factores a tener en cuenta en las aplicaciones.&lt;/p&gt;

&lt;h3 id=&#34;java-the-good-parts&#34;&gt;Java The Good Parts&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596803737&amp;linkId=c8d9a7967ea7439451a570b1f2659e9d&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El lenguaje de programación Java es uno de los lenguajes más populares y que más desarrolladores posee desde ya muchos años. Su éxito se debe a varios principios que los arquitectos de la plataforma incorporaron desde sus inicios. Un lenguaje orientado a objetos, con excepciones para el tratamiento de errores, organización de clases en paquetes, recolector de basura que libera al programador de la tarea y evitar fugas de memoria o errores no controlados, la máquina virtual que posibilita escribir el código una vez y ejecutarlo en cualquier plataforma para la que haya una JVM, la gran documentación en &lt;em&gt;javadoc&lt;/em&gt; que sirve como consulta y como formato para documentar en el propio código fuente, las colecciones que proporcionan estructuras de datos básicas y útiles para cualquier programa, concurrencia con hilos y primitivas para la sincronización y con el paso del tiempo un ecosistema muy grande de librerías, herramientas y entornos integrados de desarrollo.&lt;/p&gt;

&lt;p&gt;Todas estas características se comentan detalladamente en &lt;a href=&#34;https://amzn.to/2xaP6wf&#34;&gt;Java The Good Parts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;building-maintainable-software-java-edition&#34;&gt;Building Maintainable Software Java Edition&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491953527&amp;linkId=6a378c8faf06d2e362cdeb9226b925cf&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Hay conocimiento que es independiente del lenguaje que se utilice como tratar de escribir funciones o métodos con pocas líneas de código, mantener las interfaces pequeñas, separar en módulos, mantener el acoplamiento bajo y balanceados, que la base de código sea pequeña, automatizar las pruebas o escribir código limpio. Aunque &lt;a href=&#34;https://amzn.to/2vPOQ6v&#34;&gt;Building Maintainable Software Java Edition&lt;/a&gt; es una edición para Java con los ejemplos en este lenguaje las motivaciones que describe de cada uno de los puntos anteriores es universal.&lt;/p&gt;

&lt;h3 id=&#34;the-well-grounded-java-developer&#34;&gt;The Well-Grounded Java Developer&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617290068&amp;linkId=1b305765190419f6de43b75335e43746&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2fRQgJS&#34;&gt;The Well-Grounded Java Developer&lt;/a&gt; diserta sobre varios conceptos a tener en cuenta para tener una base sólida sobre la plataforma Java. Nuevas características de Java 7, cosas vitales como inyección de dependencias, concurrencia, ficheros &lt;em&gt;class&lt;/em&gt; y &lt;em&gt;bytecode&lt;/em&gt; o lenguajes alternativos para la máquina virtual.&lt;/p&gt;

&lt;h3 id=&#34;spring-boot-in-action&#34;&gt;Spring Boot in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=990ac035faf92b423b7edd4e70377b89&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Spring Boot permite que una aplicación sea completamente autocontenida incluyendo un servidor web como &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; entre otros disponibles. En vez de distribuir la aplicación en formato &lt;em&gt;war&lt;/em&gt; para ser desplegada en un contenedor de &lt;em&gt;servlets&lt;/em&gt; o aplicaciones la aplicación se distribuye en formato &lt;em&gt;jar&lt;/em&gt; y se inicia como una aplicación Java tradicional. Es la aplicación la que inicia el servidor web embebido y hace que proporcione su servicio. Esta es nueva tendencia que se sigue en las aplicaciones y en las aplicaciones basadas en la nube.&lt;/p&gt;

&lt;p&gt;Spring Boot proporciona una integración con la parte del ecosistema de &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; que requiera la aplicación. Para nuevos proyectos &lt;a href=&#34;https://amzn.to/2v8gMk7&#34;&gt;Spring Boot in Action&lt;/a&gt; es muy interesante.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/&#34;&gt;Aplicación Java autocontenida con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/&#34;&gt;Información y métricas de la aplicación con Spring Boot Actuator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Ejemplo de API REST en Java con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gradle-in-action&#34;&gt;Gradle in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291307&amp;linkId=86af7295a55368699341bfbe2ae7040e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; es una herramienta de construcción de proyectos y gestión de dependencias que adopta las mejores características de &lt;a href=&#34;https://ant.apache.org/&#34;&gt;Ant&lt;/a&gt; y &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; con pocas o ninguna de sus deficiencias. &lt;a href=&#34;https://amzn.to/2uY2naN&#34;&gt;Gradle in Action&lt;/a&gt; explica en profundidad esta herramienta de construcción para llegar a dominarla.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html&#34;&gt;Herramienta de construcción Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/04/usar-gradle-mediante-gradle-wrapper.html&#34;&gt;Usar Gradle mediante Gradle wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;Ejemplo de multiproyecto con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/&#34;&gt;Incluir información de la versión en el artefacto distribuible con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/iniciar-rapido-un-proyecto-de-java-con-gradle-o-de-spring-con-spring-initializr/&#34;&gt;Iniciar rápido un proyecto de Java con Gradle o de Spring con Spring Initializr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-testing-with-spock&#34;&gt;Java Testing with Spock&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292532&amp;linkId=ac77f9a86125173cda19c2c4949ce0a3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Las pruebas automatizadas son indispensables para escribir código con menos errores y con mayor calidad. En Java hay varias herramientas de &lt;em&gt;testing&lt;/em&gt; para hacer pruebas unitarias, de integración o funcionales. &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; con el que se escriben especificaciones con un DSL y utilizando el lenguaje &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; permite automatizar las indispensables pruebas de todo código. &lt;a href=&#34;https://amzn.to/2vPt5Ul&#34;&gt;Java Testing with Spock&lt;/a&gt; explica esta herramienta.&lt;/p&gt;

&lt;h3 id=&#34;portlets-in-action&#34;&gt;Portlets in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1935182544&amp;linkId=e954596f73982d6fc4c7338ffb4225b7&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los portales son utilizados por algunas organizaciones para gestionar el contenido que publican en su web. &lt;a href=&#34;https://amzn.to/2w96DIn&#34;&gt;Portlets in Action&lt;/a&gt; explica como crear las unidades básicas de los portales en Java, los &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/&#34;&gt;Introducción a los portales y ejemplo de portlet con Liferay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/&#34;&gt;Portlets con el framework Apache Tapestry y Apache Pluto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;varios-libros&#34;&gt;Varios libros&lt;/h2&gt;

&lt;h3 id=&#34;learning-javascript&#34;&gt;Learning JavaScript&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=380952682c6e61c533807cd32a6dd038&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2xbmkMh&#34;&gt;Learning JavaScript&lt;/a&gt; explica este lenguaje de programación utilizado en los navegadores web. Denostado a veces por falta de conocimiento el libro explica muchas cosas interesantes del lenguaje e incorporadas la versión de ECMAScript 6. Es un libro que no requiere gran conocimiento previo y empieza desde un nivel básico.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/&#34;&gt;Introducción al JavaScript de ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-book-of-css3&#34;&gt;The Book of CSS3&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275803&amp;linkId=74be128029bfbd8f789af03a1b673aba&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Al igual que JavaScript el denostado CSS también a veces lo es por el mismo motivo. &lt;a href=&#34;https://amzn.to/2wgURft&#34;&gt;The Book of CSS3&lt;/a&gt; explica las nuevas posibilidades para aplicar estilos a documentos HTML en los navegadores. &lt;em&gt;Media queries&lt;/em&gt;, selectores, psedo-clases y pseudo-elementos, &lt;em&gt;web fonts&lt;/em&gt;, efectos y estilos de tipografías, disposiciones en múltiples columnas, imágenes de fondo, bordes y efectos de caja, color y opacidad, gradientes transoformaciones 3D, animaciones y transiciones, &lt;em&gt;layouts&lt;/em&gt;, modos &lt;em&gt;blend&lt;/em&gt;, filtros y máscaras es el contenido del libro.&lt;/p&gt;

&lt;h3 id=&#34;learning-rabbitmq-y-mastering-rabbitmq&#34;&gt;Learning RabbitMQ y Mastering RabbitMQ&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=bffff9170b71717eb95f6be0a95274db&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=4cce33b79c609e875e6fb2a8b3b9ded2&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los libros &lt;a href=&#34;https://amzn.to/2xbdSN2&#34;&gt;Learning RabbitMQ&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2xbjaI2&#34;&gt;Mastering RabbitMQ&lt;/a&gt; tratan sobre la herramienta &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; para desarrollar aplicaciones que se comuniquen mediante mensajes. Los mensajes son una forma efectiva de desacoplar dos aplicaciones tanto temporalmente como en el lenguaje utilizado en cada una de ellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mongodb-in-action&#34;&gt;MongoDB in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291609&amp;linkId=497acae6ed525c559c046c38d3ed28c0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La misión de las bases de datos es almacenar información para una posterior consulta o búsqueda. &lt;a href=&#34;https://amzn.to/2xb7KUJ&#34;&gt;MongoDB in Action&lt;/a&gt; trata sobre la base de datos orientada a documentos &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; catalogada como NoSQL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/usar-la-base-de-datos-nosql-mongodb-con-java/&#34;&gt;Usar la base de datos NoSQL MongoDB con Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sql-antipatterns&#34;&gt;SQL Antipatterns&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1934356557&amp;linkId=f6f8cc4cba1c24fdec9a4a47503e738d&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aún con la popularización de las bases de datos NoSQL las bases de datos relacionales siguen siendo perfectamente válidas. El libro &lt;a href=&#34;https://amzn.to/2icem2F&#34;&gt;SQL Antipatterns&lt;/a&gt; es una colección de consejos a tener en cuenta al diseñar y utilizar las bases de datos relacionales. Algunas formas de uso que generan problemas están desaconsejados y se consideran antipatrones.&lt;/p&gt;

&lt;h3 id=&#34;beginning-sql-queries-y-learning-postgresql&#34;&gt;Beginning SQL Queries y Learning PostgreSQL&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484219546&amp;linkId=6c88c8326d867c036266f6483f41477d&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783989181&amp;linkId=0b62f915f94acd860485c75946fa0392&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El lenguaje declarativo SQL es muy potente y yo al menos desconocía o he usado poco muchas cosas que se han añadido al lenguaje en versiones más modernas y que algunas bases de datos como &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; implementan. Algunas de estas cosas son las &lt;em&gt;windows functions&lt;/em&gt;, tipos definidos por el usuario, &lt;em&gt;triggers&lt;/em&gt;, &lt;em&gt;common table expression&lt;/em&gt; o CTE, consultas recursivas, búsqueda de texto más avanzado y eficiente que la expresión &lt;em&gt;like&lt;/em&gt;, &lt;em&gt;lateral subqueries&lt;/em&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Los libros &lt;a href=&#34;https://amzn.to/2xbh62O&#34;&gt;Beginning SQL Queries&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2vaxQG8&#34;&gt;Learning PostgreSQL&lt;/a&gt; son una buena documentación sobre el lenguaje SQL que van más allá de lo enseñado en algunos cursos académicos.&lt;/p&gt;

&lt;h3 id=&#34;cors-in-action&#34;&gt;CORS in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=161729182X&amp;linkId=a1fec0248175841014bd8986c63eb82e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; permite a sitios distintos del origen de la página proporcionar su contenido. Por defecto, los navegadores solo permiten hacer peticiones al mismo sitio del origen de la página, con una combinación del navegador y cabeceras en las peticiones que proporcionan los sitios web permiten hacer llamadas entre diferentes sitios manteniendo la seguridad. El libro &lt;a href=&#34;https://amzn.to/2vKvmlf&#34;&gt;CORS in Action&lt;/a&gt; trata en detalle este tema.&lt;/p&gt;

&lt;h3 id=&#34;microservice-architecture&#34;&gt;Microservice Architecture&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491956259&amp;linkId=57e9f172013ca12309e2ca2b5fa19fc2&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El ámbito &lt;em&gt;cloud&lt;/em&gt; y una nueva forma de arquitectura para las aplicaciones han originado los denominados microservicios. En vez de desarrollar una aplicación monolítica y grande se tiende hacia múltiples aplicaciones más pequeñas con un contexto específico que colaboran para proporcionar la misma funcionalidad. El libro &lt;a href=&#34;https://amzn.to/2vPtaY3&#34;&gt;Microservice Architecture&lt;/a&gt; trata las motivaciones, que valor aportan los microservicios así como sus principios y cultura.&lt;/p&gt;

&lt;h3 id=&#34;learning-http-2&#34;&gt;Learning HTTP/2&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491962445&amp;linkId=1a89f93cde97f31c639b38ca79811040&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La siguiente versión del protocolo HTTP mejora varios aspectos del anterior. Es más eficiente, con menos latencia, con mejor rendimiento mas seguro al requerirse una conexión cifrada y haciendo innecesarios varias técnicas que se usaban anteriormente. &lt;a href=&#34;https://amzn.to/2xaScjO&#34;&gt;Learning HTTP/2&lt;/a&gt; es un buen material para conocer las diferencias y los problemas que presentaba HTTP/1.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;Introducción al protocolo HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mastering-oauth-2-0&#34;&gt;Mastering OAuth 2.0&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=c62cfbc31fdea33038fa6650c9bf9686&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; es un protocolo para proporcionar autenticación y autorización a un sitio o aplicación sin que el usuario le proporcione las credenciales. Una aplicación que requiera acceso aun tercero necesita obtener un &lt;em&gt;bearer token&lt;/em&gt; que mediante un proceso de autorización se puede obtener de cuatro formas diferentes dependiendo de la aplicación y de si el dispositivo autorizado es de confianza o no. &lt;a href=&#34;https://amzn.to/2wXTEH6&#34;&gt;Matering OAuth 2.0&lt;/a&gt; es una buena introducción.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;libros-sobre-linux-y-devops&#34;&gt;Libros sobre Linux y DevOps&lt;/h2&gt;

&lt;h3 id=&#34;git-mastering-version-control&#34;&gt;Git: Mastering Version Control&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MXIFY5E&amp;linkId=f6eea55958b2783765b4bda371dd3e04&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;He leído varios libros sobre &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, muchos empiezan explicando como es la estructura de información que guarda Git, no es necesario empezar por ahí. El libro &lt;a href=&#34;https://amzn.to/2vKqyMR&#34;&gt;Git: Mastering Version Control&lt;/a&gt; es mucho más pragmático y explica muy bien los casos de uso que uno requiere de este sistema de control de versiones. Con este libro finalmente he aprendido mejor como usar un &lt;em&gt;rebase&lt;/em&gt; interactivo para reescribir los &lt;em&gt;commits&lt;/em&gt; o hacer un &lt;em&gt;squash&lt;/em&gt;, también como crear &lt;em&gt;alias&lt;/em&gt; y &lt;em&gt;hooks&lt;/em&gt;, los diferentes modos de &lt;em&gt;reset&lt;/em&gt; además de como crear &lt;em&gt;commits&lt;/em&gt;, hacer búsquedas en el repositorio y otras muchas cosas que no he usado aún.&lt;/p&gt;

&lt;h3 id=&#34;gitlab-cookbook&#34;&gt;GitLab Cookbook&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783986840&amp;linkId=153454430c956fe5335fe123ab829a40&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Como servidor de Git me gustan de &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; dos cosas: que tiene una versión para la comunidad usable por ejemplo en un servidor propio de una empresa u organización y que tiene varias herramientas integradas como son una wiki, un sistema de &lt;em&gt;tracking&lt;/em&gt; para las tareas de un proyecto junto con tableros y soporte para hacer integración y entrega continua sin necesidad de más herramientas lo que simplifica la infraestructura para el desarrollo en gran medida. También soporta otras características presentes en GitHub como &lt;em&gt;merge request&lt;/em&gt;, revisiones entre pares o calidad de código entre otras muchas otras, la &lt;a href=&#34;https://about.gitlab.com/features/&#34;&gt;lista completa de &lt;em&gt;features&lt;/em&gt;&lt;/a&gt; es grande. &lt;a href=&#34;https://amzn.to/2icQyvr&#34;&gt;GitLab Cookbook&lt;/a&gt; es un libro introductorio para empezar a manejarlo.&lt;/p&gt;

&lt;h3 id=&#34;docker-in-action-y-the-devops-2-1-toolkit&#34;&gt;Docker in Action y The DevOps 2.1 Toolkit&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=f257277b2f9112d7cd77aa1147bafd1d&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=f250891fe3d29d340f3fd3f82af96671&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y los contenedores junto con la computación en la nube han cambiado la forma de distribuir y desplegar las aplicaciones en los servidores. Docker es una gran herramienta muy interesante de conocer. Son varias las herramientas del ecosistema, &lt;a href=&#34;https://amzn.to/2icqdxN&#34;&gt;Docker in Action&lt;/a&gt; explica &lt;em&gt;docker&lt;/em&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;&lt;em&gt;docker compose&lt;/em&gt;&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2uXSwBT&#34;&gt;The DevOps 2.1 Toolkit&lt;/a&gt; explica &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;&lt;em&gt;docker swarm&lt;/em&gt;&lt;/a&gt; para crear &lt;em&gt;clusters&lt;/em&gt; de servidores.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ansible-up-and-running-y-implementing-devops-with-ansible-2&#34;&gt;Ansible Up and Running y Implementing DevOps with Ansible 2&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491979801&amp;linkId=35c25b05f8577bf1bf72e0797ca47367&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1787120538&amp;linkId=2e83b442739bb1c91a6637a6f3d50a6c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; es una herramienta para automatizar tareas en una o múltiples máquinas locales o remotas. Otra de sus propiedades en la mayoría de los casos es que es idempotente, es decir, se pueden ejecutar las acciones múltiples veces aplicando los cambios pertinentes o no haciendo nada según el estado de la máquina y el estado deseado.&lt;/p&gt;

&lt;p&gt;La herramienta es muy útil para tratar a los servidores siendo numerosos como ganado en vez de como mascotas y los libros &lt;a href=&#34;https://amzn.to/2wY1LDM&#34;&gt;Ansible Up and Running&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2wgRIMR&#34;&gt;Implementing DevOps with Ansible 2&lt;/a&gt; lo explican.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/11/introduccion-a-ansible/&#34;&gt;Introducción a Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unix-and-linux-system-administration-handbook-linux-administration-a-beginner-s-guide-y-how-linux-works&#34;&gt;UNIX and Linux System Administration Handbook, Linux Administration A Beginner’s Guide y How Linux Works&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0134277554&amp;linkId=7c91fcafae6964872c27d9bf3f68a9f1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0071845364&amp;linkId=a7a84bf9b3f731a5b2e4cffba08c00b4&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275676&amp;linkId=09f1c68e67a12909a5af564fc43cf8d3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2vPg7WB&#34;&gt;UNIX and Linux System Administration Handbook&lt;/a&gt; es un libro que presenta al usuario los sistemas GNU/Linux, &lt;a href=&#34;https://amzn.to/2wXrJae&#34;&gt;Linux Administration A Beginner’s Guide&lt;/a&gt; detalla las tareas administrativas para un servidor Linux y &lt;a href=&#34;https://amzn.to/2uYcE6Z&#34;&gt;How Linux Works&lt;/a&gt; es un libro que explica detalles más profundos de aspectos internos de Linux.&lt;/p&gt;

&lt;h3 id=&#34;amazon-web-services-in-action-y-amazon-web-services-for-dummies&#34;&gt;Amazon Web Services in Action y Amazon Web Services For Dummies&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292885&amp;linkId=88093372487f3f14280848b9bec59ef8&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1118571835&amp;linkId=03661313e03334c617b0ec833c2e2eb3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aún habiendo leído &lt;a href=&#34;https://amzn.to/2v8nI0F&#34;&gt;Amazon Web Services in Action&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2icfumV&#34;&gt;Amazon Web Services For Dummies&lt;/a&gt; como no he tenido la oportunidad de practicar con la nube de Amazon casi todo de lo que leí lo tengo olvidado. &lt;a href=&#34;https://aws.amazon.com/es/free/&#34;&gt;Amazon ofrece una capa gratuita&lt;/a&gt; para probarlo.&lt;/p&gt;

&lt;h2 id=&#34;publicaciones-más-breves&#34;&gt;Publicaciones más breves&lt;/h2&gt;

&lt;p&gt;Esto ya no son libros sino documentos más pequeños sobre diferentes temas.&lt;/p&gt;

&lt;h3 id=&#34;guide-to-the-java-ecosystem-2015&#34;&gt;Guide to the Java Ecosystem 2015&lt;/h3&gt;

&lt;p&gt;Aun es la &lt;a href=&#34;https://dzone.com/guides/the-java-ecosystem-2015-edition&#34;&gt;edición del 2015&lt;/a&gt; y no he visto que hayan publicado una más reciente. Explica las tendencias y el ecosistema de Java. Microservicios, &lt;em&gt;docker&lt;/em&gt;, Java 8, programación &lt;em&gt;reactiva&lt;/em&gt;, mejores prácticas, &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;java-the-legend&#34;&gt;Java The Legend&lt;/h3&gt;

&lt;p&gt;¿A que es debido el éxito de Java? El libro &lt;a href=&#34;http://www.oreilly.com/programming/free/java-the-legend.csp&#34;&gt;Java The Legend&lt;/a&gt; expone varios motivos como importancia de la compatibilidad hacia atrás, fácil de aprender y de leer, un sistema de tipos simple o la máquina virtual de Java o JVM. Aunque también según el documento con algunos fracasos como los &lt;em&gt;Java Bean&lt;/em&gt; por promover la mutabilidad que es molesta para la concurrencia, la finalización de los objetos, sobre configuración de Java EE o la abstracción muy básica de hilos. Comenta el ecosistema alrededor de la plataforma Java con &lt;a href=&#34;https://eclipse.org&#34;&gt;Eclipse&lt;/a&gt;, &lt;a href=&#34;https://www.apache.org/&#34;&gt;Apache&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; junto con el futuro con Java 9, HTTP/2, JShell y quizá en un futuro el proyecto Panama para una nueva interfaz alternativa a JNI para código nativo y el proyecto Valhalla que trata sobre los tipos para usar cosas como definir colecciones genéricas con tipos primitivos.&lt;/p&gt;

&lt;h3 id=&#34;the-daemon-the-gnu-and-the-penguin&#34;&gt;The daemon, the GNU and the penguin&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=097903423X&amp;linkId=cf2cd5a87906b63405d49e3f74dc59a3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2vKs5CH&#34;&gt;The daemon, the GNU and the penguin&lt;/a&gt; es un documento que repasa el origen, inicios y evolución del software libre y de código abierto desde el año 1968 con referencias a Unix, BSD, Minix, Sun, GPL, Hurd, la web, Tanenbaum, Torvalds, Linux, &amp;hellip; Este documento y el siguiente son unos clásicos en internet.&lt;/p&gt;

&lt;h3 id=&#34;la-catedral-y-el-bazar&#34;&gt;La catedral y el bazar&lt;/h3&gt;

&lt;p&gt;La catedral y el bazar hace referencia a dos modelos distintos de desarrollo uno centralizado y controlado por una organización y otro distribuido de más libre albedrío pero también se ha demostrado muy efectivo posibilitado por la democratización de internet. &lt;a href=&#34;http://catb.org/esr/writings/cathedral-bazaar/&#34;&gt;La catedral y el bazar&lt;/a&gt; está traducido a varios idiomas entre ellos el &lt;a href=&#34;http://biblioweb.sindominio.net/telematica/catedral.html&#34;&gt;español&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para acabar este artículo, viendo la cantidad de libros que he leído en unos 3 o 4 años con el tiempo que supone dedicado a adquirir estos conocimientos en gran parte en el tiempo libre y que en general empleamos los que trabajamos en el sector tecnológico hay que hacerse valer a la hora de recibir o postular a una oferta de trabajo y me refiero al ámbito económico que en muchas ofertas de &lt;a href=&#34;https://www.infojobs.net/&#34;&gt;InfoJobs&lt;/a&gt; o &lt;a href=&#34;https://www.tecnoempleo.com/&#34;&gt;Tecnoempleo&lt;/a&gt; no se corresponde con lo que supone los conocimientos que se solicitan.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="linux "/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/el-antipatron-de-inicializacion-de-variables-con-dobles-llaves-en-java/</id>
        <title>El antipatrón de inicialización de variables con dobles llaves en Java</title>        
        <updated>2017-08-14T11:00:00+02:00</updated>
        <published>2017-08-14T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/el-antipatron-de-inicializacion-de-variables-con-dobles-llaves-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java es un lenguaje más verboso y con menos azúcar sintáctico (o veneno para ratas, según se mire) que otros lenguajes. Esto hace que por ejemplo para declarar e inicializar objetos tan comunes en un programa de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&#34;&gt;List&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&#34;&gt;Set&lt;/a&gt; que contengan un número fijo de elementos haya que escribir varias líneas de código. Estas clases de estructuras de datos del grupo de colecciones son de las más usadas en una aplicación Java. A la fecha de escribir este artículo Java no soporta literales para las colecciones que reduzca las lineas de código para inicializarlas y mejore la legibilidad del código aunque en versiones recientes si se han incorporado métodos de utilidad que cubren el requerimiento.&lt;/p&gt;

&lt;p&gt;Con el objetivo de reducir la verbosidad quizá en algún sitio se pueda ver que usando la técnica de doble llave se puede inicializar un &lt;em&gt;Map&lt;/em&gt; o &lt;em&gt;List&lt;/em&gt; de una forma más reducida, tal que:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=AntipatronLlaves.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Sin embargo, no es recomendable usar este &lt;em&gt;hack&lt;/em&gt; del lenguaje porque presenta sus inconvenientes, por ello está desaconsejado y se considera un antipatrón. En el pozo de sabiduría para el programador de &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; se indican &lt;a href=&#34;http://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java#27521360&#34;&gt;varios inconvenientes&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cada bloque de inicialización con doble llave crea una clase anónima que incrementa el número de clases de la aplicación y que puede penalizar el rendimiento si se usa de forma extensiva en una aplicación.&lt;/li&gt;
&lt;li&gt;Si se retorna un mapa inicializado de esta forma desde un método el mapa tendrá una referencia al objeto que lo creo, lo que evita que el objeto sea destruido por el recolector de basura hasta que no se recolecte el mapa creando una potencial fuga de memoria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En &lt;a href=&#34;http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line#1005083&#34;&gt;otros hilos de StackOverflow&lt;/a&gt; algunas respuestas muy votadas se propone usar dobles llaves para la inicialización, pero por los puntos comentados anteriormente mejor no usarla por mucho que esté en StackOverflow y haya sido esta una respuesta muy votada.&lt;/p&gt;

&lt;p&gt;Las alternativas en Java 8 en el caso del &lt;em&gt;Map&lt;/em&gt; si queremos reducir la verbosidad al inicializar estos tipos de datos usados profusamente podemos usar lo siguiente, en el caso de &lt;em&gt;List&lt;/em&gt; o &lt;em&gt;Set&lt;/em&gt; disponemos desde hace más tiempo del método &lt;em&gt;Arrays.asList&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava8.java&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava7.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En Java 9 aunque aún no se incorporen la definición de literales al lenguaje con los métodos de utilidad &lt;em&gt;of&lt;/em&gt; en su respectivas interfaces gracias a los &lt;em&gt;defaults methods&lt;/em&gt; el código se simplifica en gran medida.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava9.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javarevisited.blogspot.com.es/2015/10/what-is-double-brace-initialization-in-java-example-anti-pattern.html&#34;&gt;What is Double Brace Initialization in Java? Anti Pattern Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi/wiki?DoubleBraceInitialization&#34;&gt;Double Brace Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java&#34;&gt;What is Double Brace initialization in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://minborgsjavapot.blogspot.com.es/2014/12/java-8-initializing-maps-in-smartest-way.html&#34;&gt;Java 8, Initializing Maps in the Smartest Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/ejecutar-varias-tareas-de-forma-concurrente-en-java/</id>
        <title>Ejecutar varias tareas de forma concurrente en Java</title>        
        <updated>2017-07-23T13:00:00+02:00</updated>
        <published>2017-07-23T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/ejecutar-varias-tareas-de-forma-concurrente-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En el artículo de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/&#34;&gt;iniciación a la programación concurrente en Java&lt;/a&gt; explicaba las facilidades que proporciona este lenguaje para la programación de tareas con varios hilos que implica la sincronización y bloqueo mediante varias primitivas como semáforos o &lt;em&gt;locks&lt;/em&gt;, ponía el ejemplo y su código de dos de los típicos ejemplos que suelen usarse en las asignaturas de sistemas operativos, el problema de los filósofos y el del barbero.&lt;/p&gt;

&lt;p&gt;En el caso de tener varias tareas que tardan unos segundos si las ejecutamos de forma secuencial el tiempo que tardarán será la suma de todas las tareas. Si las tareas no son dependientes, no hace falta esperar a que termine una anterior para comenzar otra, o el problema se puede descomponer en varias partes ejecutándolas de forma concurrente y simultáneamente el tiempo total que tardarán aproximadamente será el tiempo de la tarea más lenta.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;API de Java&lt;/a&gt; además de las primitivas de sincronización se ofrece además algunas clases para manejar hilos y tareas a ejecutar de forma concurrente sin tener que manejar los hilos a bajo nivel. La clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&#34;&gt;ExecutorService&lt;/a&gt; permite crear un &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; con un número fijo de ellos, el &lt;em&gt;pool&lt;/em&gt; reutilizará cada &lt;em&gt;thread&lt;/em&gt; para ir ejecutando las tareas. Crear &lt;em&gt;threads&lt;/em&gt; es una operación más o menos costosa con lo que reutilizándolos se aprovecha mejor los recursos del sistema y en un número grande de tareas a ejecutar la mejora en el rendimiento quizá se note. Crear un &lt;em&gt;pool&lt;/em&gt; con un número fijo y limitado de &lt;em&gt;threads&lt;/em&gt; evita que el sistema se sature o por el contrario esté infrautilizado, configurando el tamaño del &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; según las características del sistema que las ejecutará y del tipo de recursos que más utiliza las tareas se obtiene el mejor rendimiento posible.&lt;/p&gt;

&lt;p&gt;Con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#availableProcessors--&#34;&gt;Runtime.availableProcessors&lt;/a&gt; se obtiene el número de núcleos lógicos del ordenador de los modernos procesadores que utilizan &lt;a href=&#34;https://es.wikipedia.org/wiki/HyperThreading&#34;&gt;Hyper Threading&lt;/a&gt; tanto los de Intel como AMD, si las tareas hacen un uso muy intensivo de CPU y poco de entrada/salida el tamaño del &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; óptimo será cercano al número de núcleos del procesador. Por el contrario, si las tareas hacen un uso intensivo de de entrada/salida el tamaño del &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; óptimo será mayor ya que estarán la mayor parte del tiempo esperando a que finalicen las lentas operaciones de entrada y salida comparadas con la CPU.&lt;/p&gt;

&lt;p&gt;Suponiendo que una aplicación ha de realizar varias consultas a una base de datos para presentar su información al usuario, esas consultas y por la cantidad de información que tiene la base de datos o porque los índices no ayudan tardan en ejecutarse 3 segundos, teniendo que realizar 8 de estas consultas el tiempo total que tardará la aplicación en presentar la información será de 24 segundos (8 tareas x 3 segundos/tarea) ejecutando las consultas de forma secuencial. 24 segundos es un tiempo considerable y el usuario pensará que la aplicación no responde. Ejecutando las tareas con un &lt;em&gt;pool&lt;/em&gt; de 8 &lt;em&gt;threads&lt;/em&gt; el tiempo total empleado para presentar la información será de 3 segundos y con un &lt;em&gt;pool&lt;/em&gt; de 4 &lt;em&gt;threads&lt;/em&gt; el tiempo será de 6 segundos, mucho menos que los 24 de forma secuencial.&lt;/p&gt;

&lt;p&gt;Este es el código para ejecutar tareas de forma secuencial y de forma concurrente con un &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; de tamaño el doble del número de procesadores del sistema midiendo además el tiempo total para comprobar la diferencia de tiempos de ambas opciones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/492e1b80c21886c748600784c9f9cfdc.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/vuoXPba1ks9aOg5Ebm3MTkIbM.js&#34; id=&#34;asciicast-vuoXPba1ks9aOg5Ebm3MTkIbM&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/vuoXPba1ks9aOg5Ebm3MTkIbM&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/vuoXPba1ks9aOg5Ebm3MTkIbM.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Ejemplo de ejecución secuencial y concurrente&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaExecutors&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/4-formas-de-hacer-un-bucle-for-en-java/</id>
        <title>4 formas de hacer un bucle for en Java</title>        
        <updated>2017-07-19T22:30:00+02:00</updated>
        <published>2017-07-16T12:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/4-formas-de-hacer-un-bucle-for-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Hasta Java 5 para hacer un bucle desde 0 a N elementos había que usar una variable para mantener un contador, hacer una comparación para comprobar si se había llegado al límite e incrementar la variable en la siguiente ejecución. El código era bastante verboso y dado que los bucles son una construcción básica de cualquier lenguaje de programación es empleada numerosas veces en cualquier algoritmo. Antes de Java 5 un bucle &lt;em&gt;for&lt;/em&gt; de 0 a 5 y de una colección se realizaba de la siguiente manera:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=For.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=Iterator.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En Java 5 el bucle &lt;em&gt;for&lt;/em&gt; se enriqueció notablemente, con el &lt;em&gt;foreach&lt;/em&gt; se puede recorrer una colección y cualquier objeto que implemente la interfaz &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&#34;&gt;Iterable&lt;/a&gt;. Con el bucle &lt;em&gt;foreach&lt;/em&gt; una &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&#34;&gt;Collection&lt;/a&gt; se recorre de la siguiente manera.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=Foreach.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Pero esto es para las colecciones si se quiere hacer un bucle un número fijo de veces como en el primer caso de 0 a 5 conociendo que para usar el &lt;em&gt;foreach&lt;/em&gt; basta que le indiquemos un objeto que implemente la interfaz &lt;em&gt;Iterable&lt;/em&gt; podemos usar la siguiente expresión y su implementación que tiene la ventaja de no tener que incluir la expresión de comparación y el incremento de la variable, la clase &lt;em&gt;Counter&lt;/em&gt; implementa la interfaz &lt;em&gt;Iterable&lt;/em&gt; y devuelve un &lt;em&gt;Iterator&lt;/em&gt; sobre los valores del rango indicado:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=CounterIterable.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=Counter.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En Java 8 con la introducción de los &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; y de &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&#34;&gt;IntStream&lt;/a&gt; podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#range-int-int-&#34;&gt;range&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#rangeClosed-int-int-&#34;&gt;rangeClosed&lt;/a&gt; para obtener un &lt;em&gt;Stream&lt;/em&gt; de enteros y hacer un bucle con un comportamiento similar a los anteriores.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=Stream.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los &lt;em&gt;Stream&lt;/em&gt; de Java 8 están muy bien para simplificar algunas operaciones complejas pero para un bucle &lt;em&gt;for&lt;/em&gt; sencillo tiene sus inconvenientes como ofuscar significativamente el &lt;em&gt;stacktrace&lt;/em&gt; en caso de producirse alguna excepción. Se puede usar cualquier opción pero la primera con el tradicional bucle &lt;em&gt;for&lt;/em&gt; sea la menos recomendable teniendo a nuestra disposición la clase &lt;em&gt;Counter&lt;/em&gt; con Java 5 o los &lt;em&gt;Stream&lt;/em&gt; y &lt;em&gt;lambdas&lt;/em&gt; con Java 8.&lt;/p&gt;

&lt;p&gt;El siguiente programa muestra las cuatro opciones, su salida en la consola sería el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1c1ec809be02caae060a9055bcab2cf3.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/247/bucles-java.png&#34; title=&#34;4 formas de hacer un bucle en Java&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/247/bucles-java-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;4 formas de hacer un bucle en Java&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaForeach&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/</id>
        <title>Iniciación a la programación concurrente en Java</title>        
        <updated>2017-07-15T00:00:00+02:00</updated>
        <published>2017-07-15T00:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/iniciacion-a-la-programacion-concurrente-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Java proporciona en su API numerosas primitivas para realizar programación concurrente. La programación concurrente permite realizar varias tareas simultáneamente aprovechando los múltiples núcleos de los procesadores modernos con un tiempo de ejecución total para un conjunto de tareas significativamente menor. Dos de los problemas de concurrencia más conocidos son el problema de los filósofos y del barbero que en este artículo muestro como implementar usando varias de las primitivas ofrecidas por Java.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En todo el tiempo que llevo programando en Java no he tenido necesidad de conocer en detalle las primitivas de concurrencia que ofrece el lenguaje y la API. Java desde sus primeras versiones ya ofrecía el soporte básico para la programación concurrente con las clases &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&#34;&gt;Thread&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html&#34;&gt;Runnable&lt;/a&gt; y algunas primitivas de sincronización como la palabra clave reservada &lt;em&gt;syncrhonized&lt;/em&gt;, los &lt;em&gt;locks&lt;/em&gt; intrínsecos de los objetos y algunos métodos de la clase &lt;em&gt;Thread&lt;/em&gt; como &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-&#34;&gt;sleep&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--&#34;&gt;wait&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join--&#34;&gt;join&lt;/a&gt;. Entre la documentación de Java está el siguiente &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/&#34;&gt;tutorial sobre la concurrencia en Java&lt;/a&gt; que es muy recomendable leer.&lt;/p&gt;

&lt;p&gt;Las computadoras realizan varias tareas de forma concurrente con la ayuda del sistema operativo que permite compartir el procesador para realizar diferentes tareas (navegar por internet, editar un documento, escuchar música, &amp;hellip;) cambiando cada muy poco tiempo (medido en ms) entre procesos, con los procesadores de varios núcleos las tareas se ejecutan silmultáneamente en diferentes núcleos. Los &lt;em&gt;threads&lt;/em&gt; en Java se comunican principalmente compartiendo referencias a objetos, este tipo de comunicación es eficiente pero posibilita dos tipos de errores, interferencias entre &lt;em&gt;threads&lt;/em&gt; y errores de consistencia, la herramienta para evitarlos es la sincronización. Sin embargo, la sincronización introduce contención cuando dos o más hilos intentan acceder al mismo recurso simultáneamente y provocan una pérdida de rendimiento. El bloqueo mutuo o &lt;em&gt;deadlock&lt;/em&gt;, la inanición o &lt;em&gt;starvation&lt;/em&gt; y un bloqueo vivo o &lt;em&gt;livelock&lt;/em&gt; son problemas de la sincronización. Seguramente te suenen los objetos inmutables, en la programación concurrente son especialmente útiles dado que su estado no cambia y no pueden corromperse ni quedar en un estado inconsistente por la interferencia entre &lt;em&gt;threads&lt;/em&gt; evitando de esta manera errores que suelen ser difíciles de depurar por ofrecer un comportamiento errático.&lt;/p&gt;

&lt;p&gt;En vez de usar los &lt;em&gt;locks&lt;/em&gt; implícitos de los objetos la API de Java para concurrencia ofrece varios tipos más con propiedades adicionales como la habilidad de salir si el intento de adquirir el &lt;em&gt;lock&lt;/em&gt; falla. En el paquete &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-summary.html&#34;&gt;java.util.concurrent.locks&lt;/a&gt; está listados. Otro tipo de primitivas de sincronización para &lt;em&gt;threads&lt;/em&gt; son los &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html&#34;&gt;Semaphore&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html&#34;&gt;CyclicBarrier&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html&#34;&gt;CountDownLatch&lt;/a&gt; entre otros como &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html&#34;&gt;Phaser&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html&#34;&gt;Exchanger&lt;/a&gt;. En el paquete &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html&#34;&gt;java.util.concurrent.atomic&lt;/a&gt; hay varios tipos de datos básicos que realizan sus operaciones de forma atómica como por ejemplo contadores.&lt;/p&gt;

&lt;p&gt;Con los &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html&#34;&gt;Executors&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&#34;&gt;ExecutorService&lt;/a&gt; no hace falta que manejemos los hilos a bajo nivel, es posible obtener un &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; de una tamaño específico y enviar clases &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html&#34;&gt;Callable&lt;/a&gt; o &lt;em&gt;Runnable&lt;/em&gt; que devuelven un resultado para que se ejecuten con un &lt;em&gt;thread&lt;/em&gt; del &lt;em&gt;pool&lt;/em&gt; cuando esté libre. Con la clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html&#34;&gt;ScheduledExecutorService&lt;/a&gt; se programa la ejecución de tareas de forma periódica. En los &lt;em&gt;streams&lt;/em&gt; añadidos a Java 8 el procesamiento se puede realizar de forma paralela aprovechando los microprocesadores multinúcleo sin tener que usar de forma explícita ninguna de las utilidades anteriores, internamente usa el &lt;em&gt;Fork/Join&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El soporte para la programación concurrente ofrecido en Java es suficiente para la mayoría de tareas que podamos necesitar y ha mejorado bastante desde las primeras versiones.&lt;/p&gt;

&lt;p&gt;El primer ejemplo que muestro es usando concurrencia ejecutar varias tareas y como realizándolas de forma secuencial el tiempo total empleado es la suma del tiempo de las tareas individuales y como usando concurrencia es la suma de la tarea que más tarda. El ejemplo se trata de 8 tareas que de forma secuencial tardan aproximadamente 24 segundos ya que cada tarea emplea 3 segundos, en el caso empleando concurrencia el tiempo es de aproximadamente 6 segundos ya se se emplea en &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;threads&lt;/em&gt; de 4 de capacidad con lo que las primeras 4 tareas tardan 3 segundos y el siguiente lote de 4 tareas tarda otros 3 segundos para un total de 6 segundos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/GjXM3ACFPPW027eLqKiZlrvMh.js&#34; id=&#34;asciicast-GjXM3ACFPPW027eLqKiZlrvMh&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/GjXM3ACFPPW027eLqKiZlrvMh&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/GjXM3ACFPPW027eLqKiZlrvMh.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Ejecución secuencial y concurrente de tareas&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Dos de los problemas más conocidos en la programación concurrente son el de &lt;a href=&#34;https://es.wikipedia.org/wiki/Problema_de_la_cena_de_los_fil%C3%B3sofos&#34;&gt;La cena de los filósofos&lt;/a&gt; y el de &lt;a href=&#34;https://es.wikipedia.org/wiki/Problema_del_barbero_durmiente&#34;&gt;El barbero durmiente&lt;/a&gt;. Usando algunas de las primitivas comentadas en este artículo este sería el código para para resolver ambos problemas en Java.&lt;/p&gt;

&lt;p&gt;En este código del problema de los filósofos la clase &lt;em&gt;Table&lt;/em&gt; crea los filósofos asignándoles los &lt;em&gt;Fork&lt;/em&gt; que tienen que compartir para comer después de estar un tiempo pensando. En la ejecución se observa que el primer filósofo que intenta comer puede hacerlo ya que sus tenedores adyacentes está libres pero posteriormente se observa que en algunas ocasiones algún filósofo no puede hacerlo porque sus tenedores están siendo usados por alguno de sus compañeros adyacentes.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=PhilosophersMain.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Table.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Fork.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Philosopher.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/kxDfAc6SNNZ3EFdR4Zrc1U163.js&#34; id=&#34;asciicast-kxDfAc6SNNZ3EFdR4Zrc1U163&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/kxDfAc6SNNZ3EFdR4Zrc1U163&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/kxDfAc6SNNZ3EFdR4Zrc1U163.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Ejemplo de concurrencia de los filósofos&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En el caso de ejemplo del barbero cuando solo hay un barbero los clientes se acumulan ya que estos entran en la tienda a razón de 1 entre 1500 y 3500ms y el barbero tarda afeitar un cliente entre 2000 y 7000ms. Poniendo en la barbería dos barberos los clientes ya no se acumulan en la sala de espera.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=BarberShopMain.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=BarberShop.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Street.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Barber.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/b18f1c1e32d73b4ef03d4ae3670f80b6.js?file=Client.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/BeA6bcKy5yoSGfByRUfE1HfYD.js&#34; id=&#34;asciicast-BeA6bcKy5yoSGfByRUfE1HfYD&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/BeA6bcKy5yoSGfByRUfE1HfYD&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/BeA6bcKy5yoSGfByRUfE1HfYD.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Ejemplo de concurrencia del barbero (1 barbero)&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/K7Ug6RT60mjWRbNcwRGapw7V6.js&#34; id=&#34;asciicast-K7Ug6RT60mjWRbNcwRGapw7V6&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/K7Ug6RT60mjWRbNcwRGapw7V6&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/K7Ug6RT60mjWRbNcwRGapw7V6.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Ejemplo de concurrencia del barbero (2 barberos)&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaconCurrency&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/&#34;&gt;Tutorial sobre la concurrencia en Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/iniciar-rapido-un-proyecto-de-java-con-gradle-o-de-spring-con-spring-initializr/</id>
        <title>Iniciar rápido un proyecto de Java con Gradle o de Spring con Spring Initializr</title>        
        <updated>2017-07-09T13:00:00+02:00</updated>
        <published>2017-07-09T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/iniciar-rapido-un-proyecto-de-java-con-gradle-o-de-spring-con-spring-initializr/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gradle.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Gradle&#34; title=&#34;Gradle&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/spring.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Spring&#34; title=&#34;Spring&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Cuando se empieza un proyecto nuevo desde cero se debe disponer de una herramienta de construcción, una estructura de directorios que siga las convenciones de la herramienta de construcción, añadir las dependencias que vayamos a utilizar y alguna clase que muestre algo al ejecutarlo para comprobar que disponemos de la infraestructura básica de compilación, teses, generación de artefactos e inicio de proyecto.&lt;/p&gt;

&lt;p&gt;Dado que las clases Java hay que compilarlas para facilitar la tarea están las herramientas de construcción y estas siguen una serie de convenciones en la estructura de directorios además de requerir algunos archivos. En un proyecto de duración de varios meses o años el tiempo dedicado a crear esta infraestructura básica es despreciable y no complicado si nos basamos en un proyecto similar del que copiar, sin embargo, para hacer alguna prueba rápida es costoso.&lt;/p&gt;

&lt;p&gt;En &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; existen los arquetipos que construyen el esqueleto básico del proyecto en base a unas plantillas. En &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; el equivalente es el &lt;a href=&#34;https://docs.gradle.org/current/userguide/build_init_plugin.html&#34;&gt;&lt;em&gt;plugin&lt;/em&gt; init &lt;/a&gt; pudiendo elegir crear la estructura de una librería o aplicación Java, &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; o &lt;a href=&#34;https://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; ejecutable. También se puede elegir el &lt;em&gt;framework&lt;/em&gt; para hacer las pruebas automatizadas unitarias, de integración o funcionales.&lt;/p&gt;

&lt;p&gt;Al usar el &lt;em&gt;plugin&lt;/em&gt; &lt;em&gt;init&lt;/em&gt; de Gradle se especifica el tipo de artefacto, aplicación o librería, y el &lt;em&gt;framework&lt;/em&gt; para las pruebas unitarias en este caso &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/195fab0e57a91bfd17328db9b24d84ef.js?file=gradle-init.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para proyectos que usen &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; está disponible la herramienta &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; que en pocos minutos permite disponer de una aplicación funcional con las propiedades que se seleccionen. Se puede elegir la herramienta de construcción, Maven o Gradle, la versión de Spring Boot, los metadatos de la aplicación para el paquete de las clases y artefacto, las dependencias de otros módulos de Spring y otras librerías populares.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/245/spring-initalizr.png&#34; title=&#34;Generador de proyectos Spring Initalizr&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/245/spring-initalizr-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Cambiando a la versión completa del generador es posible cambiar el tipo de empaquetado (&lt;em&gt;jar&lt;/em&gt; o &lt;em&gt;war&lt;/em&gt;), la versión de Java o el lenguaje de programación, además seleccionar aquellas dependencias que inicialmente sean necesarias, muchas son de otros proyectos de Spring. Las dependencias están agrupadas por categorías y van desde seguridad, &lt;em&gt;framework&lt;/em&gt; web, motores de plantillas, SQL, NoSQL, numerosas herramientas para la nube, integración con redes sociales, entrada/salida o utilidades para operaciones.&lt;/p&gt;

&lt;p&gt;Una vez seleccionadas las opciones se genera el proyecto y descarga un archivo comprimido &lt;em&gt;zip&lt;/em&gt;. Con el comando &lt;code&gt;gradlew bootRun&lt;/code&gt; si inicia la aplicación, pero dependiendo de las dependencias incluidas quizá sea necesaria hacer alguna configuración adicional antes de poder iniciar la aplicación, por ejemplo si seleccionamos la dependencia de &lt;a href=&#34;https://www.jooq.org/&#34;&gt;jOOQ&lt;/a&gt; hay que definir las propiedades para el &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html&#34;&gt;DataSource&lt;/a&gt; en el archivo &lt;em&gt;application.properties&lt;/em&gt; con las que el contenedor inversión de control de Spring pueda crear las conexiones a la base de datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/195fab0e57a91bfd17328db9b24d84ef.js?file=tree-initializr.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como con todos los generadores de código es recomendable saber suficientemente que es código que generan para en caso de modificaciones posteriores saber como aplicarlas. También es posible que no se adapte exactamente a lo que necesitamos, por ejemplo, si queremos hacer un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;multiproyecto con Gradle&lt;/a&gt; o si una dependencia necesaria no está incluida en la lista de categorías hay añadirla después. A partir de aquí se empieza a programar el proyecto.&lt;/p&gt;

&lt;p&gt;En el libro &lt;a href=&#34;https://amzn.to/2tvCJMs&#34;&gt;Spring Boot in Action&lt;/a&gt; se comenta detalladamente Spring Boot que ofrece múltiples nuevas posibilidades que hace más fácil el desarrollo de un proyecto con Spring. Por otro lado para conocer más detalladamente y ampliamente el ecosistema de Spring está el libro &lt;a href=&#34;https://amzn.to/2tZInqM&#34;&gt;Mastering Spring 5.0&lt;/a&gt; que también inlcuye secciones sobre Spring Boot.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=86ce91eca968f6de1d0a777f48ca3069&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N750Z7H&amp;linkId=e4f7f44a8b854b00a547d526b83f6469&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En definitiva el &lt;em&gt;plugin&lt;/em&gt; &lt;em&gt;init&lt;/em&gt; de Gradle y la utilidad Spring Initializr son unas buenas herramientas para empezar un proyecto Java rápidamente y en pocos minutos disponer de un proyecto básico funcional y listo para implementar la funcionalidad de la aplicación.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/</id>
        <title>Portlets con el framework Apache Tapestry y Apache Pluto</title>        
        <updated>2017-07-08T13:30:00+02:00</updated>
        <published>2017-07-07T23:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Los portales ofrecen una solución para los casos de uso de integración de aplicaciones, edición de contenido a modo de CMS, agregación de blogs, foros, colaboración entre personas, red social entre otros. La pieza fundamental de un portal en Java es un &lt;em&gt;portlet&lt;/em&gt;. Desarrollar un &lt;em&gt;portlet&lt;/em&gt; usando la API directamente no es simple, algunos &lt;em&gt;frameworks&lt;/em&gt; que usaríamos para desarrollar aplicaciones y páginas web son usables para desarrollar &lt;em&gt;portlets&lt;/em&gt;, Apache Tapestry es uno de ellos como muestro con un ejemplo en este artículo.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-tapestry-5.svg&#34; class=&#34;right&#34; width=&#34;400&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-pluto.png&#34; class=&#34;right&#34; width=&#34;300&#34; alt=&#34;Apache Pluto&#34; title=&#34;Apache Pluto&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La API ofrecida de los &lt;em&gt;portlets&lt;/em&gt; se puede considerar de bajo nivel y para facilitar la tarea de su programación es posible emplear un &lt;em&gt;framework&lt;/em&gt; al igual que ocurre al programar una aplicación web con los &lt;em&gt;servlets&lt;/em&gt; utilizando el lenguaje Java. Aún así es importante conocer los conceptos subyacentes de los &lt;em&gt;portlets&lt;/em&gt; que están explicados de forma didáctica en el libro &lt;a href=&#34;https://amzn.to/2tzpbjL&#34;&gt;Portlets in Action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Explicado como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/&#34;&gt;crear un &lt;em&gt;portlet&lt;/em&gt; directamente con su API&lt;/a&gt; usaré el mismo ejemplo pero usando el &lt;em&gt;framework&lt;/em&gt; &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; que también es usable para realizar aplicaciones web pero para el que existe un &lt;a href=&#34;https://github.com/got5/tapestry5-portlet&#34;&gt;módulo para desarrollar &lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; y una pequeña &lt;a href=&#34;http://got5.github.io/tapestry5-portlet/&#34;&gt;documentación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.liferay.com/&#34;&gt;Liferay&lt;/a&gt; 7 debe usar algún mecanismo especial para cargar las clases no compatible con Tapestry por ello en este ejemplo usaré el contenedor de &lt;em&gt;portlets&lt;/em&gt; &lt;a href=&#34;https://portals.apache.org/pluto/&#34;&gt;Apache Pluto&lt;/a&gt;. Apache Pluto es la implementación de referencia para la API de los &lt;em&gt;portlets&lt;/em&gt;, inicia el servidor significativamente más rápido que Liferay aunque no incorpora tantos &lt;em&gt;portlets&lt;/em&gt; listos para usar.&lt;/p&gt;

&lt;p&gt;El libro &lt;a href=&#34;https://amzn.to/2tzpbjL&#34;&gt;Portlets in Action&lt;/a&gt; define portal de la siguiente manera traducida al español:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Un portal es una colección de miniaplicaciones web llamadas &lt;em&gt;portlets&lt;/em&gt;. Un portal soporta características como personalización, agregación de contenido o autenticación. Los &lt;em&gt;portlets&lt;/em&gt; actúan como aplicaciones web dentro del portal mostradas en ventanas donde cada ventana en una página del portal representa un &lt;em&gt;portlet&lt;/em&gt;. El portal agrega la información y proporciona una vista consolidada al usuario.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El ejemplo consiste en un mensaje de saludo que incluye un nombre el cual se introduce con un formulario desde el mismo &lt;em&gt;portlet&lt;/em&gt;. Los &lt;em&gt;portlets&lt;/em&gt; usando Apache Tapestry son muy similares a una aplicación web, con lo que gran parte del conocimiento es el mismo, pero en los que están a disposición varios servicios adicionales de la API de los &lt;em&gt;portlets&lt;/em&gt; como &lt;a href=&#34;https://github.com/got5/tapestry5-portlet/blob/master/src/main/java/org/apache/tapestry5/portlet/services/PortletRequestGlobals.java&#34;&gt;PortletRequestGlobals&lt;/a&gt; donde están agregados varios objetos relativos las peticiones y respuestas como &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletRequest.html&#34;&gt;PortletRequest&lt;/a&gt; para la petición con &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ActionRequest.html&#34;&gt;ActionRequest&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/EventRequest.html&#34;&gt;EventRequest&lt;/a&gt;,  &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/RenderRequest.html&#34;&gt;RenderRequest&lt;/a&gt; y &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ResourceRequest.html&#34;&gt;ResourceRequest&lt;/a&gt;, y  &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletResponse.html&#34;&gt;PortletResponse&lt;/a&gt; para la respuesta con &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ActionResponse.html&#34;&gt;ActionResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/EventResponse.html&#34;&gt;EventResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/RenderResponse.html&#34;&gt;RenderResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ResourceResponse.html&#34;&gt;ResourceResponse&lt;/a&gt;, &amp;hellip; y la amplia colección de componentes reusables de toda aplicación con uno específico para enlazar páginas en un &lt;em&gt;portlet&lt;/em&gt;, &lt;a href=&#34;https://github.com/got5/tapestry5-portlet/blob/master/src/main/java/org/apache/tapestry5/corelib/components/PortletPageLink.java&#34;&gt;PortletPageLink&lt;/a&gt;. Apache Tapestry permite abstraerse en gran medida de la API subyacente de los &lt;em&gt;portlets&lt;/em&gt; y las diferencias con una aplicación web no serán muy significativas. Todos los conceptos conocidos para desarrollar aplicaciones y páginas web sirven prácticamente en su totalidad para desarrollar &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Los &lt;a href=&#34;http://tapestry.apache.org/component-reference.html&#34;&gt;componentes usables&lt;/a&gt; en las plantillas de las páginas, salvo alguno adicional son los mismos que en una aplicación web. Unos 57 componentes listos para usar además de los propios y específicos de la aplicación.&lt;/p&gt;

&lt;p&gt;Al igual que en el &lt;em&gt;framework&lt;/em&gt; están incluidos múltiples componentes el contenedor de dependencias que tiene integrado Tapestry ofrece muchos servicios que es posible inyectar en las páginas y en componentes nuevos y propios, también desarrollar nuevos servicios que necesiten los &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para hacer el ejemplo &lt;em&gt;Hola Mundo&lt;/em&gt; hay que definir dos páginas, una para mostrar el mensaje y otra para obtener un nombre, cada página se compone de una clase Java y una plantilla asociada que genera el HTML, ambos elementos son muy simples. El &lt;em&gt;portlet&lt;/em&gt; hará uso del mecanismo de preferencias proporcionado por el portal con la clase &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletPreferences.html&#34;&gt;PorletPreferences&lt;/a&gt; y que se encarga de persistir en su propia base de datos para obtener y guardar valores en este caso el nombre usado en el mensaje. El &lt;em&gt;portlet&lt;/em&gt; usa un formulario que envía el nombre donde se utilizan los componentes &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Form.html&#34;&gt;Form&lt;/a&gt;, &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Label.html&#34;&gt;Label&lt;/a&gt; y &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/TextField.html&#34;&gt;TextField&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=Index.tml&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=preferences-Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=preferences-Index.tml&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=AppPortletModule.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El resto son varios archivos descriptores necesarios entre los que está el típico &lt;em&gt;web.xml&lt;/em&gt; de las aplicaciones web Java y el descriptor específico de los &lt;em&gt;portlets&lt;/em&gt; &lt;em&gt;portlet.xml&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=portlet.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=web.xml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Apache Tapestry están a nuestra disposición todas las facilidades de un &lt;em&gt;framework&lt;/em&gt; de más alto nivel que la API de los &lt;em&gt;portlets&lt;/em&gt;, con la API de los &lt;em&gt;portlets&lt;/em&gt; accesible si es necesaria, altamente productivo y con el que reutilizaremos en otros &lt;em&gt;portlets&lt;/em&gt; o proyectos los componentes desarrollados con una librería de componentes.&lt;/p&gt;

&lt;p&gt;Construido el &lt;em&gt;portlet&lt;/em&gt; con una tarea de &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; el &lt;em&gt;portlet&lt;/em&gt; se despliega copiando el archivo &lt;em&gt;war&lt;/em&gt; al directorio de despliegue de los &lt;em&gt;portlets&lt;/em&gt; de Apache Pluto, en &lt;em&gt;webapps&lt;/em&gt;. Una vez desplegado accediendo a la página de administración se configuran los &lt;em&gt;portlets&lt;/em&gt; que incluye cada página. El usuario y contraseña para iniciar sesión en Apache Pluto es &lt;em&gt;pluto&lt;/em&gt; para el usuario y &lt;em&gt;pluto&lt;/em&gt; para la contraseña.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/pluto-admin.png&#34; title=&#34;Página de administración de portlets de Apache Pluto&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/pluto-admin-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/pluto-login.png&#34; title=&#34;Inicio de sesión de Apache Pluto&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/pluto-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Páginas de administración y sesión de Apache Pluto&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Insertado el &lt;em&gt;portlet&lt;/em&gt; en una página y accediendo a ella el &lt;em&gt;portlet&lt;/em&gt; muestra el mensaje que emite y seleccionando la opción &lt;em&gt;edit&lt;/em&gt; acceder a la página de preferencias acceder a la página que muestra el formulario y permite cambiar el mensaje. Este es el resultado del &lt;em&gt;portlet&lt;/em&gt; desplegado en Apache Pluto.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet.png&#34; title=&#34;Porlet con Apache Tapestry en Apache Pluto&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet-preferences.png&#34; title=&#34;Página de preferencias del portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet-preferences-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet-name.png&#34; title=&#34;Portlet usando un dato almacenado en las preferencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/244/tapestry-portlet-name-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Porlet con Apache Tapestry en Apache Pluto&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para conocer más sobre los &lt;em&gt;portlets&lt;/em&gt; el libro &lt;a href=&#34;https://amzn.to/2tzpbjL&#34;&gt;Portlets in Action&lt;/a&gt; es una buena fuente de documentación.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1935182544&amp;linkId=6d736075105602e7c318919a1c81609d&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Descargado y descomprimido el &lt;a href=&#34;https://portals.apache.org/pluto/download.html&#34;&gt;binario de Apache Pluto&lt;/a&gt; para inicia con el comando &lt;code&gt;startup.sh&lt;/code&gt;. Apache Pluto es en realidad un servidor &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Apache Tomcat&lt;/a&gt; con las adiciones para proporcionarle la funcionalidad de portal en la dirección &lt;em&gt;http://localhost:8080/pluto&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/71e519379b23ab0c4a54d0aed927a3f3.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/TapestryPortlet&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./pluto-3.0.0/bin &amp;amp;&amp;amp; ./gradlew build&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2014/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.epub&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.mobi&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.zip&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/got5/tapestry5-portlet&#34;&gt;Apache Tapestry Portlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://got5.github.io/tapestry5-portlet/&#34;&gt;Documentación Apache Tapestry Portlet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/</id>
        <title>Introducción a los portales y ejemplo de portlet con Liferay</title>        
        <updated>2017-07-08T23:00:00+02:00</updated>
        <published>2017-07-01T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Muchas organizaciones usan portales para mantener su presencia en internet. Los portales son herramientas muy versátiles que incluyen la gestión de contenidos y flujo de trabajo para publicarlo, foros, blog, &amp;hellip; Liferay es uno de los más conocidos que usa la plataforma Java. La unidad básica funcional de un portal es un &lt;em&gt;portlet&lt;/em&gt; que en ciertos aspectos son similares en otros diferentes a lo que son los &lt;em&gt;servlets&lt;/em&gt; en las aplicaciones web Java.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/liferay.png&#34; class=&#34;right&#34; width=&#34;400&#34; alt=&#34;Liferay&#34; title=&#34;Liferay&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los portales son una especialización de un sitio web que presenta información diversa de una forma integrada y uniforme. Suelen aplicarse cuando una entidad tiene necesidades de presentar información según el usuarios autenticado, su rol, los usuarios necesitan colaborar o se necesita integrar información de múltiples fuentes. Son usados por entidades públicas como gobiernos, ayuntamientos y también por corporaciones de tamaño mediano y grande.&lt;/p&gt;

&lt;p&gt;Algunos de sus casos de uso son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/web-platform&#34;&gt;Plataforma web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/enterprise-cms&#34;&gt;Sistema de gestión de contenidos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/integration-platform&#34;&gt;Plataforma de integración&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/collaboration-platform&#34;&gt;Plataforma de colaboración&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/social-apps-platform&#34;&gt;Plataforma de aplicaciones sociales&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uno de los servidores de portales más destacados y usados es &lt;a href=&#34;https://www.liferay.com/&#34;&gt;Liferay&lt;/a&gt; aunque no es el único siendo &lt;a href=&#34;https://portals.apache.org/pluto/&#34;&gt;Apache Pluto&lt;/a&gt; el servidor de referencia. En lo poco que los he probado Liferay comparado con Apache Pluto el primero tarda bastante más en iniciarse, se nota más lento y me ha dado problemas al usar el &lt;em&gt;framework&lt;/em&gt; &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; para desarrollar un &lt;em&gt;portlet&lt;/em&gt;, sin embargo, Liferay incorpora más &lt;a href=&#34;https://es.wikipedia.org/wiki/Portlet&#34;&gt;&lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; con multitud de funcionalidades, es más usado y solicitado en ofertas de trabajo. Tanto Liferay como Apache Pluto implementan la &lt;a href=&#34;https://jcp.org/aboutJava/communityprocess/edr/jsr362/index2.html&#34;&gt;especificación de los &lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; de Java que son la pieza básica funcional de un portal.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio.png&#34; title=&#34;Página inicial de Liferay&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Liferay es el contenedor de &lt;em&gt;portlets&lt;/em&gt; y proporciona un entorno de ejecución similar a lo que los contenedores de &lt;em&gt;servlets&lt;/em&gt; como &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; proporcionan para los &lt;em&gt;servlets&lt;/em&gt;. Las similitudes y diferencias entre un &lt;em&gt;servlet&lt;/em&gt; y un &lt;em&gt;portlet&lt;/em&gt; son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los &lt;em&gt;portlets&lt;/em&gt; son gestionados por un contenedor.&lt;/li&gt;
&lt;li&gt;Su ciclo de vida está gestionado por el contenedor.&lt;/li&gt;
&lt;li&gt;Generan contenido dinámico.&lt;/li&gt;
&lt;li&gt;Interactúan con el cliente mediante peticiones y respuestas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y se diferencia en que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los &lt;em&gt;portlets&lt;/em&gt; generan únicamente un fragmento de la página web.&lt;/li&gt;
&lt;li&gt;No están asociados directamente a una URL.&lt;/li&gt;
&lt;li&gt;No pueden generar contenido arbitrario, si se solicita text/html los &lt;em&gt;portlets&lt;/em&gt; deben generar text/html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El contenedor de &lt;em&gt;portlets&lt;/em&gt; proporciona funcionalidades como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Almacenamiento persistente para las preferencias.&lt;/li&gt;
&lt;li&gt;Procesamiento de solicitudes.&lt;/li&gt;
&lt;li&gt;Modos de los &lt;em&gt;portlets&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Estado de la ventana o fragmento.&lt;/li&gt;
&lt;li&gt;Información de usuario,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://web.liferay.com/es/community/wiki/-/wiki/Main/Liferay+Portlets&#34;&gt;Liferay incluye más de 60 &lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; listos para usar que cumplen las funciones de &lt;abbr title=&#34;Content Management System&#34;&gt;CMS&lt;/abbr&gt;, foros, blogs, agregador de blogs, wiki, calendario, encuestas, anuncios, herramientas sociales, de comercio electrónico, integración de contenido de sistemas externos, geolocalización, tiempo, administración, gestión de flujo de trabajo y &lt;a href=&#34;https://web.liferay.com/marketplace&#34;&gt;otros muchos más ofrecidos en el marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Desde la &lt;a href=&#34;https://www.liferay.com/es/downloads&#34;&gt;página de descargas&lt;/a&gt; se puede obtener la edición para la comunidad de Liferay además de otros productos eligiendo la versión deseada y en la &lt;a href=&#34;https://dev.liferay.com/es/home&#34;&gt;red para desarrolladores&lt;/a&gt; obtener documentación y material de referencia. Una vez descargado el archivo de la distribución de Liferay y descomprimido se inicia con el comando ubicado en &lt;em&gt;tomcat-8.0.32/bin/startup.sh&lt;/em&gt;. En el archivo &lt;em&gt;tomcat-8.0.32logs/catalina.out&lt;/em&gt; se emiten las trazas y mensajes del servidor. Iniciado Liferay se presenta una página de configuración, se han de aceptar los términos y condiciones e iniciar sesión con el usuario creado en la primera página de configuración.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/configuracion.png&#34; title=&#34;Configuración básica de Liferay&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/configuracion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para añadir un &lt;em&gt;portlet&lt;/em&gt; propio a Liferay hay que acceder al &lt;em&gt;Panel de control &amp;gt; Aplicaciones &amp;gt; Gestor de aplicaciones&lt;/em&gt; y pulsar la opción cargar ubicada en la parte superior derecha de la página. En la salida del servidor aparecerán varias trazas relativas al despliegue del &lt;em&gt;portlet&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/gestor-de-aplicaciones.png&#34; title=&#34;Gestor de aplicaciones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/gestor-de-aplicaciones-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/instalar-aplicacion.png&#34; title=&#34;Instalar aplicación&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/instalar-aplicacion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Los &lt;em&gt;portlets&lt;/em&gt; se distribuyen por lo general como archivos de aplicaciones web &lt;em&gt;.war&lt;/em&gt; con varios descriptores adicionales con información que usa Liferay para el despliegue del &lt;em&gt;portlet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo comentaré cómo crear un &lt;em&gt;portlet&lt;/em&gt; Hola Mundo sin ayuda de ningún &lt;em&gt;framework&lt;/em&gt; como &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; o Apache Tapestry aunque Liferay proporciona ayuda y documentación para desarrollarlos con &lt;a href=&#34;https://dev.liferay.com/es/develop/tutorials/-/knowledge_base/7-0/liferay-mvc-portlet&#34;&gt;Liferay MVC Portlet&lt;/a&gt; o &lt;a href=&#34;https://dev.liferay.com/es/develop/tutorials/-/knowledge_base/7-0/spring-mvc&#34;&gt;Spring MVC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El archivo descriptor principal es &lt;em&gt;portlet.xml&lt;/em&gt; donde se describen los &lt;em&gt;portlets&lt;/em&gt; de la aplicación indicando por ejemplo su nombre, la clase que lo implementa o los modos que soporta, otros archivos descriptores son &lt;em&gt;web.xml&lt;/em&gt;, &lt;em&gt;liferay-portlet.xml&lt;/em&gt; y &lt;em&gt;liferay-display.xml&lt;/em&gt; con unas propiedades exclusivas de Liferay indicando el icono y la categoría en la que ubicar el &lt;em&gt;portlet&lt;/em&gt; en la paleta de &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=portlet.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=web.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=liferay-portlet.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=liferay-display.xml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un &lt;em&gt;portlet&lt;/em&gt; es una clase Java que extiende de &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html&#34;&gt;GenericPortlet&lt;/a&gt;. En el caso del ejemplo es muy sencillo ya que solo emite un mensaje usando una preferencia de configuración que Liferay se encarga de persistir, tiene un modo de edición y procesa una acción para cambiar el valor de una preferencia que se utiliza al emitir el mensaje.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;portlets&lt;/em&gt; con sus diferencias funcionales con los &lt;em&gt;servlets&lt;/em&gt; tienen muchas similitudes y una API con clases equivalentes a los &lt;em&gt;servlets&lt;/em&gt;. Así la clase principal de la que hay que heredar para crear un portlet es GenericPortlet o implementar la interfaz &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/Portlet.html&#34;&gt;Portlet&lt;/a&gt;. Las peticiones en los &lt;em&gt;portlets&lt;/em&gt; siguen una serie de fases que se van ejecutando en el siguiente orden &lt;em&gt;ActionPhase&lt;/em&gt;, &lt;em&gt;EventPhase&lt;/em&gt;, &lt;em&gt;HeaderPhase&lt;/em&gt; y &lt;em&gt;RenderPhase&lt;/em&gt;. Para los recursos como imágenes o documentos hay una fase específica &lt;em&gt;ResourcePhase&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/portlets-phase-model.png&#34; title=&#34;Fases del ciclo de vida de una petición de un portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/portlets-phase-model-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/portlet-lifecycle-methods.png&#34; title=&#34;Métodos de ciclo de vida de un portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/portlet-lifecycle-methods-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Fases y métodos del ciclo de vida de un portlet&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para cada una de estas fases en la API de los &lt;em&gt;portlets&lt;/em&gt; hay un método específico que son &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#processAction(javax.portlet.ActionRequest,%20javax.portlet.ActionResponse)&#34;&gt;processAction&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#processEvent(javax.portlet.EventRequest,%20javax.portlet.EventResponse)&#34;&gt;procesEvent&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#renderHeaders(javax.portlet.HeaderRequest,%20javax.portlet.HeaderResponse)&#34;&gt;renderHeaders&lt;/a&gt; y &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#render(javax.portlet.RenderRequest,%20javax.portlet.RenderResponse)&#34;&gt;render&lt;/a&gt;. Los &lt;em&gt;portlets&lt;/em&gt; poseen modos que se visualizan con los métodos &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#doEdit(javax.portlet.RenderRequest,%20javax.portlet.RenderResponse)&#34;&gt;doEdit&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#doHelp(javax.portlet.RenderRequest,%20javax.portlet.RenderResponse)&#34;&gt;doHelp&lt;/a&gt; y &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/GenericPortlet.html#doView(javax.portlet.RenderRequest,%20javax.portlet.RenderResponse)&#34;&gt;doView&lt;/a&gt; o el correspondiente anotado con &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/RenderMode.html&#34;&gt;@RenderMode&lt;/a&gt;. Cada uno de esos métodos para cada una de las fases reciben dos parámetros uno que representa a la petición que heredan de &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletRequest.html&#34;&gt;PortletRequest&lt;/a&gt; y son &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ActionRequest.html&#34;&gt;ActionRequest&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ClientDataRequest.html&#34;&gt;ClientDataRequest&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/EventRequest.html&#34;&gt;EventRequest&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/HeaderRequest.html&#34;&gt;HeaderRequest&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/RenderRequest.html&#34;&gt;RenderRequest&lt;/a&gt; y &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ResourceRequest.html&#34;&gt;ResourceRequest&lt;/a&gt;. Los objetos que representan a las respuestas heredan de &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletResponse.html&#34;&gt;PortletResponse&lt;/a&gt; y son &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ActionResponse.html&#34;&gt;ActionResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/EventResponse.html&#34;&gt;EventResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/HeaderResponse.html&#34;&gt;HeaderResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/MimeResponse.html&#34;&gt;MimeResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/RenderResponse.html&#34;&gt;RenderResponse&lt;/a&gt;, &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/ResourceResponse.html&#34;&gt;ResourceResponse&lt;/a&gt; y &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/StateAwareResponse.html&#34;&gt;StateAwareResponse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La interfaz &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletPreferences.html&#34;&gt;PorletPreferences&lt;/a&gt; obtenida con el método &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletRequest.html#getPreferences()&#34;&gt;getPreferences()&lt;/a&gt; de una clase que herede de &lt;em&gt;PortletRequest&lt;/em&gt; también es importante ya que con ella el &lt;em&gt;portlet&lt;/em&gt; es capaz de persistir incluso entre reinicios del servidor los datos relativos a su funcionamiento que desee aunque esto no sustituye a la utilización de una base de datos como &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; o &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;. Los &lt;em&gt;portlets&lt;/em&gt; también tienen el equivalente de filtros de los &lt;em&gt;servlets&lt;/em&gt; con la clase &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/filter/PortletFilter.html&#34;&gt;PortletFilter&lt;/a&gt; y el equivalente de sesión con la clase &lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/javax/portlet/PortletSession.html&#34;&gt;PortletSession&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=HolaMundoPortlet.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando como herramienta de construcción del proyecto &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; el archivo &lt;em&gt;.war&lt;/em&gt; a desplegar el Liferay se genera con la tarea &lt;em&gt;build&lt;/em&gt; en el directorio &lt;em&gt;build/libs/HolaMundoPortlet-0.1.war&lt;/em&gt;. Esta archivo hay que desplegarlo en Liferay para posteriormente incluirlo en alguna página, se visualice el contenido que genera y se pueda interactuar con él.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/anadir-portlet.png&#34; title=&#34;Añadir portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/anadir-portlet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-hola-mundo-portlet.png&#34; title=&#34;Portlet HolaMundo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-hola-mundo-portlet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias.png&#34; title=&#34;Preferencias del portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-usuario.png&#34; title=&#34;Portlet HolaMundo con preferencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-usuario-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Desarrollar un &lt;em&gt;portlet&lt;/em&gt; con su API directamente es una tarea costosa si la funcionalidad o complejidad del &lt;em&gt;portlet&lt;/em&gt; es mucha. Al igual que en Java no se suele utilizar la API de los &lt;em&gt;servlets&lt;/em&gt; directamente, aunque es la API subyacente, y se suele utilizar alguno de los muchos &lt;em&gt;frameworks&lt;/em&gt; disponibles para los &lt;em&gt;portlets&lt;/em&gt; también hay varios &lt;em&gt;frameworks&lt;/em&gt; entre los que elegir. En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/&#34;&gt;&lt;em&gt;Portlets&lt;/em&gt; con el framework Apache Tapestry y Apache Pluto&lt;/a&gt; muestro un ejemplo usando un &lt;em&gt;framework&lt;/em&gt; de alto nivel, orientado a componentes y altamente productivo.&lt;/p&gt;

&lt;p&gt;Aunque el libro &lt;a href=&#34;https://amzn.to/2sc1tWN&#34;&gt;Liferay in Action&lt;/a&gt; o &lt;a href=&#34;https://amzn.to/2tzpbjL&#34;&gt;Portlets in Action&lt;/a&gt; no están actualizados a la última versión sirven para conocer los conceptos básicos de su funcionamiento, explican la teoría e incluyen ejemplos de código de como crear un &lt;em&gt;portlet&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1935182544&amp;linkId=6d736075105602e7c318919a1c81609d&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=193518282X&amp;linkId=a4fdbe9a2a0c68685cfc8119f253125b&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoPortlet&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_portal&#34;&gt;Web portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Portlet&#34;&gt;Portlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/web-platform&#34;&gt;¿Qué es un Portal?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jcp.org/aboutJava/communityprocess/edr/jsr362/index2.html&#34;&gt;Portlet Specification 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://portals.apache.org/pluto/portlet-3.0-apidocs/&#34;&gt;Portlets 3.0 API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/06/hemeroteca-11/</id>
        <title>Hemeroteca #11</title>        
        <updated>2017-06-27T21:00:00+02:00</updated>
        <published>2017-06-24T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/06/hemeroteca-11/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;Desde hace ya tiempo escribir y publicar en el blog es una de las cosas que realmente me gustan y me motivan a pesar de que el blog me requiere mucho tiempo de mi tiempo personal, cada artículo me exige entre 5 y 10 horas de dedicación durante el fin de semana y en mi tiempo libre. Es satisfactorio ver que cada semana y cada mes el número de visitas aumentan a un ritmo rozando los dos dígitos y que también se nota en los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/donacion/&#34;&gt;ingresos por publicidad de AdSense que en parte dono&lt;/a&gt; a alguno de los proyectos de software libre que usó o me parecen interesantes de apoyarles económicamente aunque sea pequeña.&lt;/p&gt;

&lt;p&gt;Aún no he llegado al punto de plantearme seriamente abandonar el blog y recuperar mi tiempo para leer, ver películas que ahora me descargo pero pocas veo, andar en bicicleta, pasear u otras cosas, a veces pienso que le dedico mucho tiempo al blog, antes escribía un artículo a la semana, ahora estoy publicando muchas dos artículos faltándome más tiempo para editar y publicar los artículos que para redactarlos. La fe de poder de usar en un trabajo muchas de las herramientas de escribo, que es uno de mis motivaciones de tener el blog, me mantiene escribiendo aunque la realidad es que llevo ya 3 lustros trabajando y en prácticamente la totalidad de proyectos la tecnología estaba ya decidida e impuesta.&lt;/p&gt;

&lt;p&gt;El número de visitas ha aumentado notablemente de unas 9K páginas vistas en enero de 2016 a unas 30K en enero de 2017 y ahora a finales de junio unas 60K. Solamente en estos seis primeros meses ya he duplicado el tráfico mayoritariamente proveniente del buscador Google. Los ingresos por AdSense también han aumentado notablemente de 15€ pasando a 50€ mensuales con los que ahora cada dos meses recibo una transferencia de Google en mi cuenta corriente lo que empieza a ser una cantidad respetable aunque no compense por ello solamente la dedicación que requiere.&lt;/p&gt;

&lt;p&gt;Más del 90% del tráfico que recibo proviene del buscador Google y el resto de tráfico directo o de referencia. Solo unos 5 artículos son los que reciben la mayor parte de las visitas y que intento aprovechar para que los usuarios accedan a otros artículos relacionados. El aumento de visitas se debe a que con el paso del tiempo habré posicionado mejor algunos artículos en Google y en menor medida a los nuevos que he publicado. A Google creo que le gustan los sitios que publican nuevo contenido con asiduidad y regularmente en primera instancia y en medida similar si es de calidad. De enero de 2014 a enero de 2016 el crecimiento parece plano pero también fue constante aunque simplemente se ve enmascarado por el de los últimos meses.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/analytics.png&#34; title=&#34;Analytics&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/analytics-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/adsense.png&#34; title=&#34;AdSense&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/adsense-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Evolución visitas e ingresos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Analizando los ingresos y visitas de mi blog y divagando cual sería el tráfico que debería generar para vivir únicamente blog si con 60K páginas vistas obtengo 50€ en ingresos al mes, debería multiplicar por ¿30, 40? el tráfico de este momento para vivir del blog, pero siendo más modesto multiplicar por 5 o 10 ya serían unos ingresos muy notables y algo que parece alcanzable aunque no sea fácilmente, ¿cuantas visitas mensuales son esas para una web? ¿3,6M de páginas vistas al mes? ¿300K o 600K siendo más modesto?. Quizá si publicase en inglés la audiencia sería mayor, aún no se cual es el tráfico que poseen otras páginas hispanas personales de temática tecnológica, software libre o programación más conocidos para saber cual es el límite de visitas alcanzable en este nicho de temática ya que los blogs que sigo en pocos he visto esta misma exhivición impúdica de datos que incluyo aquí (si como blogger te sientes aludido ya tienes tema para un artículo ;). Medios como &lt;a href=&#34;https://www.xataka.com/&#34;&gt;Xataka&lt;/a&gt; o &lt;a href=&#34;https://www.genbeta.com/&#34;&gt;Genbeta&lt;/a&gt; por citar algunos tecnológicos muy conocidos profesionales, empresariales o de grupos editoriales con las vistas que tienen deben generar suficiente tráfico para que sus ingresos solo en publicidad costeen los gastos de los redactores, servidores, viajes, paguen algunos sueldos, etc.&lt;/p&gt;

&lt;p&gt;Cambiando de tema y yendo a la hemeroteca en la lista de artículos que he publicado en estos seis meses están los siguientes, en total 40 (incluido este) nuevos artículos únicos y fabricados artesanalmente a mano. Este semestre he hecho dos donaciones de 60€ y publicados otros tantos artículos comentando a que proyectos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/articulo-3-de-yo-apoyo-al-software-libre/&#34;&gt;Artículo #3 de Yo apoyo al software libre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/&#34;&gt;Artículo #4 de Yo apoyo al software libre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este semestre he publicado una nueva serie sobre electrónica aprovechando que compre un kit con varios elementos electrónicos con los que jugar para la &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; 3 que he usado en la 1, se ha compuesto de un total de 10 artículos y aún podría escribir alguno más pero lo dejaré para otro momento si recupero las ganas de cacharrear con el hardware otra vez.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;Desempaquetado del kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/&#34;&gt;Ejemplo Hello World con Java en la Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/&#34;&gt;Ejemplo de JNI, usar código en C desde Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/&#34;&gt;Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/&#34;&gt;Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-movimiento-en-la-raspberry-pi-con-java/&#34;&gt;Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un servomotor con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/luces-navidenas-con-la-raspberry-pi-y-java/&#34;&gt;Luces navideñas con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La otra serie de varios artículos publicados durante otras tantas semanas ha sido sobre &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; continuando y completando un poco más la serie sobre &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; para crear &lt;em&gt;clusters&lt;/em&gt; de nodos con la tecnología de la se se está hablando mucho y está transformando el estado del arte para el despliegue, ejecución y distribución de servicios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;Introducción y ejemplo de cluster de contenedores con Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/&#34;&gt;Iniciar un stack de servicios en un cluster de Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/&#34;&gt;Escalar y actualizar un servicio de un cluster de Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/&#34;&gt;Contenedores en Docker Swarm con volúmenes de datos persistentes usando REX-Ray y VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-contenedores-con-docker-secrets/&#34;&gt;Información sensible en los contenedores con Docker Secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/&#34;&gt;Imágenes de Docker con Alpine Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entre otros artículos que he publicado está un &lt;em&gt;script&lt;/em&gt; para instalar &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; de forma desatendida, automatizada y personalizable. Dado que Arch Linux no posee un instalador y hay que introducir los comandos directamente en la terminal para realizar la instalación después de leer una buena cantidad de documentación de la estupenda &lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;wiki de Arch Linux&lt;/a&gt;, este &lt;em&gt;script&lt;/em&gt; sirve para instalar Arch Linux de forma sencilla o como consulta de los comandos a ejecutar paso a paso para instalar esta distribución.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/script-de-instalacion-de-arch-linux-desatendido-automatizado-y-personalizable/&#34;&gt;Script de instalación de Arch Linux desatendido, automatizado y personalizable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También he publicado algún que otro artículo de opinión de dos noticias relevantes que se han producido en este periodo de tiempo, como son el ataque del &lt;em&gt;ransomware&lt;/em&gt; WannaCry y que afectó a algunas empresas y organizaciones y relacionado con este tema me preguntaba si las distribuciones GNU/Linux son más seguras que Windows. También daba mi opinión sobre el el anuncio de Shuttleworth de abandonar la convergencia con el servidor gráfico Mir y el entorno de escritorio Unity. Y un último sobre la diferencia de trato para bien de &lt;a href=&#34;https://www.pepephone.com/&#34;&gt;Pepephone&lt;/a&gt; con lo que es habitual en otras empresas de telecomunicaciones para mal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/distribuciones-gnu-linux-mas-seguras-que-windows/&#34;&gt;Distribuciones GNU/Linux, ¿más seguras que Windows?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/sobre-el-anuncio-de-shuttleworth-de-abandonar-unity-y-mir-y-volver-a-gnome-en-ubuntu/&#34;&gt;Sobre el anuncio de Shuttleworth de abandonar Unity y Mir y volver a GNOME en Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/sobre-el-ataque-de-ransomware-que-ha-sufrido-telefonica-y-otras-empresas/&#34;&gt;Sobre el ataque de ransomware que ha sufrido Telefonica y otras empresas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/asi-trata-pepephone-a-sus-clientes/&#34;&gt;Así trata Pepephone a sus clientes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dos artículos para usuarios sin muchos conocimientos de como instalar &lt;a href=&#34;https://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; o la distribución &lt;a href=&#34;https://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; de &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. Explicando paso a paso y detalladamente con capturas de pantalla cuales son los pasos para realizar la instalación desde cero.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/&#34;&gt;Descargar e instalar Windows 10 paso a paso desde cero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/&#34;&gt;Descargar e instalar la distribución Ubuntu de GNU/Linux paso a paso desde cero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un par de artículos patrocinados de los cuales uno ha sido otra forma de ingreso.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/&#34;&gt;Cursos de formación de KeepCoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/&#34;&gt;Servidores Cloud VPS de Clouding.io para hospedar blogs y páginas web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También he publicado un par de artículos en inglés traducción de otros que publique en español como experimento para comprobar que tal se indexan en Google y si alguno de ellos atrae visitas a mi blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/windows-10-and-office-2016-as-easy-to-use-without-license-as-always/&#34;&gt;Windows 10 and Office 2016 as easy to use without license as always&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/3-office-alternative-options-to-microsoft-office/&#34;&gt;3 office alternative options to Microsoft Office&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habiendo publicado dos series con una buena cantidad de artículos este semestre he publicado pocos artículos de programación. A destacar de estos últimos ha sido el resumen como en años anteriores de la conferencia &lt;a href=&#34;http://bilbostack.com/&#34;&gt;BilboStack&lt;/a&gt; celebrada en febrero de las presentaciones a las que asistí. Varios artículos sobre diferentes tipos de bases de datos relacionales, de documentos y de clave valor representadas por &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; y &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;. También como realizar autenticación mutua entre cliente y servidor con certificados ya sea con el programa &lt;em&gt;curl&lt;/em&gt;, una aplicación en la plataforma Java o con un navegador web.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/&#34;&gt;Registro y descubrimiento de servicios con Spring Cloud y Consul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/&#34;&gt;Conferencia BilboStack 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/&#34;&gt;Cómo crear un servicio de systemd para una aplicación con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-relacional-postgresql/&#34;&gt;Introducción a la base de datos relacional PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/&#34;&gt;Introducción a la base de datos NoSQL MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/usar-la-base-de-datos-nosql-mongodb-con-java/&#34;&gt;Usar la base de datos NoSQL MongoDB con Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/introduccion-a-la-base-de-datos-nosql-redis/&#34;&gt;Introducción a la base de datos NoSQL Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/&#34;&gt;Autenticación mutua de cliente y servidor con certificados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para acabar publique un artículo de un cargador de pilas recargables, un paquete de pilas de la marca blanca de Amazon y un reloj con un pequeño análisis y múltiples fotos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/desempaquetado-de-cargador-de-pilas-recargables-pilas-recargables-aa-y-reloj-despertador/&#34;&gt;Desempaquetado de cargador de pilas recargables, pilas recargables AA y reloj despertador&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Que disfrutéis leyendo algunos de los artículos que publiqué y aprovechar para suscribiros con vuestro lector de &lt;em&gt;feeds&lt;/em&gt; preferido a Blog Bitix para no perderos ninguno de los que publique en el siguiente semestre que posiblemente verse bastante sobre Java.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="hemeroteca"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    
</feed>