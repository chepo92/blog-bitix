<?xml version="1.0" encoding="utf-8"?><feed version="2.0" xmlns="http://www.w3.org/2005/Atom"><id>https://picodotdev.github.io/blog-bitix/series/hashicorp/</id><title type="text">Blog Bitix</title><subtitle>Recent content on Blog Bitix</subtitle><updated>2019-10-12T02:30:00+02:00</updated><author><name>picodotdev</name></author><generator>Hugo</generator><icon>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</icon><logo>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</logo><rights>https://creativecommons.org/licenses/by-sa/4.0/</rights><entry><id>https://picodotdev.github.io/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/</id><title>Microservicios con Spring Cloud, Consul, Nomad y Traefik</title><updated>2019-10-12T02:30:00+02:00</updated><published>2019-10-12T02:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p><strong>Sin entrar a si los microservicios son adecuados o no son adecuados en una aplicación, está claro que si se utilizan estos tienen varias necesidades. Un servicio de registro y descubrimiento, configuración centralizada, tolerancia a fallos, <em>gateway/load balancer/reverse proxy</em>, trazabilidad y métricas, autenticación, orquestación, &hellip; Los microservicios quiza no sean un gran monolito, quizá mas pequeños y con funcinalidad más acotada, pero el hecho de que se comuniquen a través de un medio más complejo y menos fiable como la red en vez de una llamada a un método y sean más numerosos hacen que la complejidad sea incluso mayor. Este artículo propone un ejemplo con Spring Cloud para los servicios, Consul para el registro y descubrimiento, Nomad para la orquestación y Traefik como <em>gateway</em>.</strong></p>]]><![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/java.svg" class="right " width="200" alt="Java" title="Java"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/spring.svg" class="right " width="200" alt="Spring" title="Spring"/>
</div>

<p>En otro artículo mostraba un ejemplo de <a href="https://picodotdev.github.io/blog-bitix/2018/09/registro-y-descubrimiento-de-servicios-con-spring-cloud-netflix/">microservicios con Spring Cloud</a> usando únicamente herramientas de <a href="https://spring.io/">Spring</a>. Cada una de esas herramientas cubren una funcionalidad que necesitan los microservicios. Entre ellas:</p>

<ul>
<li>Registro y descubrimiento, con <a href="https://github.com/Netflix/eureka">Eureka</a>. Los microservicios son numerosos, de vida efímera creándose y destruyéndose en diferentes ubicaciones por lo tanto necesitan una forma de localizarse unos a otros, la forma para encontrarse es acudiendo a un servicio donde se registran cuando se inician y se descubren cuando necesitan la ubicación de otro servicio.</li>
<li>Configuración centralizada, con <a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a>. Dado el número de microservicios actualizar la configuración de cada uno de ellos puede ser un problema, además dado que se pueden iniciar en diferentes ubicaciones aprovisionarles la configuración adecuada es un reto. En vez de aprovisionar la configuración otra técnica es hacer que cuando se inicien la obtengan de un servicio donde queda centralizada la configuración.</li>
<li>Tolerancia a fallos, con <a href="https://github.com/Netflix/Hystrix">Hyxtrix</a> y <a href="https://github.com/resilience4j/resilience4j">Resilience4j</a>. El medio de comunicación de los microservicios es a través de la red un medio mucho menos confiable que una llamada a un método en un lenguaje de programación en una aplicación monolítica. De modo que los microservicios han de estar preparados para tolerar fallos en sus comunicaciones con otros servicios.</li>
<li><em>Gateway</em>, <em>load balancer</em> y <em>reverse proxy</em> con tolerancia a fallos, con <a href="https://github.com/Netflix/zuul">Zuul</a>. Para aumentar la disponibilidad, escalabilidad y tolerar fallos en algunos servicios se suelen crear varias instancias de cada microservicio pero tener varias instancias hace que sea necesario balancear la carga entre cada una de las instancias. Para que los clientes sean agnósticos del número de instancias se emplea un <em>gateway</em> que proporciona balanceo de carga e implementa a su vez patrones de tolerancia a fallos.</li>
<li>Trazabilidad y correlación de trazas entre diferentes servicios, con <a href="https://spring.io/projects/spring-cloud-sleuth">Spring Cloud Sleuth</a>. Una petición puede desencadenar una cadena de peticiones entre diferentes servicios ubicados en múltiples nodos, para tareas de diagnóstico en caso de querer investigar un <em>bug</em> o que ha ocurrido es necesario correlacionar todas las trazas que ha desencadenado una petición, se implementa asignado un identificativo global a la petición que es transmitido en las llamadas de microservicio a microservicio.</li>
</ul>

<p>En otro <a href="https://picodotdev.github.io/blog-bitix/2019/02/servidor-oauth-gateway-y-servicio-rest-utilizando-tokens-jwt-con-spring/">ejemplo sobre OAuth con Spring</a> mostraba otra funcionalidad:</p>

<ul>
<li><em>Gateway</em>, con <a href="https://spring.io/projects/spring-cloud-gateway">Spring Cloud Gateway</a>.</li>
<li>Autenticación y autorización, con <a href="https://spring.io/projects/spring-security-oauth">Spring Security OAuth</a>.</li>
</ul>

<p>Los microservicios también necesitan monitorización y métricas, en el ejemplo <a href="https://picodotdev.github.io/blog-bitix/2018/12/monitorizar-una-aplicacion-java-de-spring-boot-con-micrometer-prometheus-y-grafana/">Monitorizar una aplicación Java de Spring Boot con Micrometer, Prometheus y Grafana</a>:</p>

<ul>
<li>Con <a href="https://prometheus.io/">Prometheus</a> y <a href="https://grafana.com/">Grafana</a>. Nuevamente el número de instancias que requiere una arquitectura orientada a microservicios origina la necesidad en mayor medida de conocer el estado del sistema, ya sean métricas de los sistemas como uso de CPU, memoria o almacenamiento o de la aplicación como peticiones por segundo y porcentaje de correctas e incorrectas.</li>
</ul>

<p>En esta lista falta un orquestador para el despliegue de los microservicios, que se encargue de su ciclo de vida, escalado de instancias y despliegue con estrategias <em>rolling</em>, <em>blue/green</em> y <em>canary</em>. Es una cosa que le faltaba al ejemplo de microservicios con Spring Cloud.</p>

<ul>
<li>Orquestador de servicios, con <a href="https://www.nomadproject.io/">Nomad</a>. <a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a>, <a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">Estrategias de despliegue para microservicios con Nomad</a>.</li>
</ul>

<p>Además, en este ejemplo reemplazo varias de estas herramientas de Spring. Sustituyo el servicio de registro y descubrimiento proporcionado por Eureka por <a href="https://www.consul.io/">Consul</a>, el <em>gateway</em>, <em>load balancer</em> y <em>reverse proxy</em> proporcionado por Zuul por <a href="https://traefik.io/">Traefik</a> y añado el orquestador de microservicios <a href="https://www.nomadproject.io/">Nomad</a>.</p>

<div class="media">
  <img src="assets/images/logotipos/consul.svg" alt="Consul" title="Consul" width="200"/>
  <img src="assets/images/logotipos/nomad.svg" alt="Nomad" title="Nomad" width="200"/>
  <img src="assets/images/logotipos/traefik.svg" alt="Traefik" title="Traefik" width="200"/>
</div>

<p>Traefik se configura con los servicios iniciados en los contenedores de Docker utilizando junto con los bloques o <em>stanzas</em> de <em>config</em> y <em>labels</em> en la definición de los servicios de Nomad. Según el criterio definido por el servicio Traefik es capaz de redirigir el tráfico que le llegue al servicio apropiado, entre las posibilidades que puede realizar Traefik es balanceo de carga entre las múltiples instancias que se hayan definido pero también implementa patrones de tolerancia a fallos con reintentos, el patrón <em>circuit breaker</em> o limitar el tráfico para evitar saturar a un servicio con demasiadas peticiones.</p>

<p>El esquema de servicios sería el siguiente. Los <em>job</em> son enviados a Nomad desde la linea de comandos que inicia los contenedores en Docker y registra los servicios en Consul, Traefik monitoriza los contenedores que se inician en Docker y se autoconfigura según las propiedades de los <em>labels</em> definidos para los contenedores. Una vez iniciados los servicios desde la terminal con un <em>curl</em> o desde la aplicación cliente que accede a Consul para conocer la ubicación del servicio de Traefik envían una petición a Traefik que haciendo balanceo de carga la reenvía a una de las instancias del servicio, el servicio responde y Traefik envía la respuesta al cliente. Para ser más funcional Traefik debería configurarse a partir de Consul en vez de Docker para posibilitar que los contenedores pudieran estar en varios nodos.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  















<figure>
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/esquema-arquitectura_hud9745ca4e3e6c708b4af1c72fc0d4ff7_167252_2560x1440_fit_box_2.png" title="Esquema arquitectura" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/esquema-arquitectura_hud9745ca4e3e6c708b4af1c72fc0d4ff7_167252_600x450_fit_box_2.png" width="600"/></a>
  
  
  
  
  <figcaption>Esquema arquitectura</figcaption>
  
</figure>


</div>

<p>La ejecución del ejemplo requiere <a href="https://www.docker.com/">Docker</a> ya que es en este caso el <em>driver</em> empleado en Nomad para ejecutar los servicios del servicio de configuración, el <em>gateway</em>, el servicio y el cliente del servicio. Nomad además se encarga de registrar los servicios en el servicio de registro y descubrimiento de Consul.</p>

<p>Los contenedores de Docker se añade a una misma red para que puedan comunicarse entre ellos, ha de ser así hasta que no se resuelva una <a href="https://github.com/docker/for-linux/issues/264">petición de Docker para que los contenedores puedan comunicarse con la máquina <em>host</em></a> que los alberga.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker network create --subnet 172.30.0.0/16 nomad
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/docker-network-create.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/docker-network-create.sh" target="_blank">docker-network-create.sh</a>
    </div>
</div>

<p>Poteriormente hay que ejecutar Consul y Nomad tras lo cual se puede acceder a sus consolas de estado.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev -ui -client<span class="o">=</span>0.0.0.0
$ nomad agent -dev</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-consul-run.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-consul-run.sh" target="_blank">nomad-consul-run.sh</a>
    </div>
</div>

<p>Enviar a Nomad los <em>job</em> de Traefik tras lo cual se puede acceder a su consola de estado. El siguiente paso es enviar el <em>job</em> del servicio que proporciona la configuración a los microservicios. Lo anterior únicamente es infraestructura aún no hay ningún servicio que proporcione alguna funcionalidad, la funcionalidad que proporciona el servicio implementado con Spring es simplemente devolver un mensaje como respuesta a la petición que se le realice, se envía el <em>job</em> del servicio a Nomad. Finalmente, el servicio es consumido por un cliente que realiza una petición al servicio cada 1 segundo.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./gradlew assemble

$ nomad job run nomad/traefik.nomad
$ nomad job run nomad/configserver.nomad
$ nomad job run nomad/service.nomad
$ nomad job run nomad/client.nomad</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-job-run.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-job-run.sh" target="_blank">nomad-job-run.sh</a>
    </div>
</div>

<p>Definición de un servicio en un <em>job</em> para Nomad. <em>count</em> define cuantas instancias del servicio se inicia, la <em>stanza</em> <em>update</em> define como será la actualización cuando se actualice el servicio, la <em>stanza</em> <em>labels</em> contiene la configuración para Traefik, <em>check</em> define los parámetros para la monitorización.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-HCL" data-lang="HCL"><span class="k">job</span> <span class="s2">&#34;service&#34;</span> {
<span class="n">  datacenters</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;dc1&#34;</span><span class="p">]</span>

  <span class="k">group</span> <span class="s2">&#34;service&#34;</span> {
<span class="n">    count</span> <span class="o">=</span> <span class="m">2</span>

    <span class="k">update</span> {
<span class="n">      max_parallel</span>      <span class="o">=</span> <span class="m">1</span>
<span class="n">      health_check</span>      <span class="o">=</span> <span class="s2">&#34;checks&#34;</span>
<span class="n">      min_healthy_time</span>  <span class="o">=</span> <span class="s2">&#34;20s&#34;</span>
<span class="n">      healthy_deadline</span>  <span class="o">=</span> <span class="s2">&#34;10m&#34;</span>
<span class="n">      progress_deadline</span> <span class="o">=</span> <span class="s2">&#34;20m&#34;</span>
<span class="n">      canary</span>            <span class="o">=</span> <span class="m">1</span>
<span class="n">      stagger</span>           <span class="o">=</span> <span class="s2">&#34;15s&#34;</span>
    }

    <span class="k">task</span> <span class="s2">&#34;service&#34;</span> {
<span class="n">      driver</span> <span class="o">=</span> <span class="s2">&#34;docker&#34;</span>
      <span class="k">config</span> {
<span class="n">        image</span> <span class="o">=</span> <span class="s2">&#34;openjdk:11-jdk&#34;</span>
<span class="n">        args</span> <span class="o">=</span> <span class="p">[</span>
          <span class="s2">&#34;bash&#34;</span><span class="p">,</span>
          <span class="s2">&#34;-c&#34;</span><span class="p">,</span>
<span class="n">          &#34;(cd /app &amp;&amp; java -jar /app/service/build/libs/service-1.0.jar --port</span><span class="o">=</span><span class="m">8080</span><span class="p">)</span><span class="err">&#34;</span>
        <span class="p">]</span>
        <span class="k">port_map</span> {
<span class="n">          http</span> <span class="o">=</span> <span class="s2">&#34;8080&#34;</span>
        }
<span class="n">        network_mode</span> <span class="o">=</span> <span class="s2">&#34;nomad&#34;</span>
<span class="n">        extra_hosts</span> <span class="o">=</span> <span class="p">[</span>
          <span class="s2">&#34;traefik:172.30.0.3&#34;</span>
        <span class="p">]</span>
<span class="n">        volumes</span> <span class="o">=</span> <span class="p">[</span>
          <span class="s2">&#34;/home/picodotdev/Software/personal/blog-ejemplos/SpringCloudConsulNomadTraefik/:/app&#34;</span>
        <span class="p">]</span>
        <span class="k">labels</span> {
<span class="n">          traefik.http.middlewares.service1-stripprefix.stripprefix.prefixes</span><span class="o">=</span><span class="s2">&#34;/service&#34;</span><span class="p">,</span>
<span class="n">          traefik.http.middlewares.service1-retry.retry.attempts</span><span class="o">=</span><span class="s2">&#34;10&#34;</span><span class="p">,</span>
<span class="n">          traefik.http.routers.service1.middlewares</span><span class="o">=</span><span class="s2">&#34;service1-stripprefix,service1-retry&#34;</span><span class="p">,</span>
<span class="n">          traefik.http.routers.service1.rule</span><span class="o">=</span><span class="s2">&#34;PathPrefix(`/service`)&#34;</span><span class="p">,</span>
<span class="n">          traefik.http.services.service1.loadbalancer.server.port</span><span class="o">=</span><span class="s2">&#34;8080&#34;</span>
        }
      }

      <span class="k">service</span> {
<span class="n">        name</span> <span class="o">=</span> <span class="s2">&#34;service&#34;</span>
<span class="n">        port</span> <span class="o">=</span> <span class="s2">&#34;http&#34;</span>

        <span class="k">check</span> {
<span class="n">          type</span>     <span class="o">=</span> <span class="s2">&#34;http&#34;</span>
<span class="n">          port</span>     <span class="o">=</span> <span class="s2">&#34;http&#34;</span>
<span class="n">          path</span>     <span class="o">=</span> <span class="s2">&#34;/actuator/health&#34;</span>
<span class="n">          interval</span> <span class="o">=</span> <span class="s2">&#34;5s&#34;</span>
<span class="n">          timeout</span>  <span class="o">=</span> <span class="s2">&#34;2s&#34;</span>
        }
      }

      <span class="k">resources</span> {
<span class="n">        cpu</span>    <span class="o">=</span> <span class="m">200</span>
<span class="n">        memory</span> <span class="o">=</span> <span class="m">1024</span>
        <span class="k">network</span> {
<span class="n">          mbits</span> <span class="o">=</span> <span class="m">20</span>
          <span class="k">port</span> <span class="s2">&#34;http&#34;</span> {}
        }
      }
    }
  }
}</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/service.nomad" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/service.nomad" target="_blank">service.nomad</a>
    </div>
</div>

<p>Tanto Consul, Nomad como Traefik ofrecen una consola para ver su estado ubicadas en las siguientes direcciones respectivamente accesibles con el navegador <em>http://127.0.0.1:8500</em>, <em>http://127.0.0.1:4646</em>, <em>http://127.0.0.1:8092</em>.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  











<figure>
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/consul_hudc42d06e92419bb68cedcf920ffbb9e1_66952_2560x1440_fit_box_2.png" title="Consul" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/consul_hudc42d06e92419bb68cedcf920ffbb9e1_66952_200x150_fit_box_2.png" width="200"/></a>
  
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/nomad-1_hu236530498253a3dba6bcdeea43b58303_63779_2560x1440_fit_box_2.png" title="Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/nomad-1_hu236530498253a3dba6bcdeea43b58303_63779_200x150_fit_box_2.png" width="200"/></a>
  
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/nomad-2_huf614ca5d87e91f36d0a6f0dc0f7e1da1_112167_2560x1440_fit_box_2.png" title="Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/nomad-2_huf614ca5d87e91f36d0a6f0dc0f7e1da1_112167_200x150_fit_box_2.png" width="200"/></a>
  
  
</figure>


    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  













<figure>
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/traefik-1_hu752c6a0b248029866df45cca04eee0f1_104793_2560x1440_fit_box_2.png" title="Traefik" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/traefik-1_hu752c6a0b248029866df45cca04eee0f1_104793_200x150_fit_box_2.png" width="200"/></a>
  
  
  <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/traefik-2_hu3d23c9c51ffc17299ed33c1319107a0c_130051_2560x1440_fit_box_2.png" title="Traefik" data-gallery="data-gallery"><img src="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/images/traefik-2_hu3d23c9c51ffc17299ed33c1319107a0c_130051_200x150_fit_box_2.png" width="200"/></a>
  
  
  
  <figcaption>Consolas de administración de Consul, Nomad y Traefik</figcaption>
  
</figure>


</div>

<p>El código del servicio, del cliente implementados con Spring y la salida del cliente son los siguientes.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.service</span><span class="o">;</span>

<span class="o">.</span><span class="o">.</span><span class="o">.</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">DefaultConfiguration</span> <span class="n">configuration</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">Tracing</span> <span class="n">tracing</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">Tracer</span> <span class="n">tracer</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Counter</span> <span class="n">counter</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">DefaultController</span><span class="o">(</span><span class="n">MeterRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">&#34;service.invocations&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">&#34;Total service invocations&#34;</span><span class="o">)</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">registry</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">counter</span><span class="o">.</span><span class="na">increment</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// Timeout simulation
</span><span class="c1"></span>        <span class="c1">//Thread.sleep(random.nextInt(4000));
</span><span class="c1"></span>
        <span class="n">TraceContext</span><span class="o">.</span><span class="na">Extractor</span><span class="o">&lt;</span><span class="n">HttpServletRequest</span><span class="o">&gt;</span> <span class="n">extractor</span> <span class="o">=</span> <span class="n">tracing</span><span class="o">.</span><span class="na">propagation</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">extractor</span><span class="o">(</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">carrier</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">carrier</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">key</span><span class="o">)</span><span class="o">;</span> <span class="o">}</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Span</span> <span class="n">span</span> <span class="o">=</span> <span class="n">tracer</span><span class="o">.</span><span class="na">nextSpan</span><span class="o">(</span><span class="n">extractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">request</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Service Span (traceId: %s, spanId: %s)%n&#34;</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">traceIdString</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">spanIdString</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;Hello world (url: %s, remoteAddress_%s, localAddress: %s, traceId: %s, spanId: %s, key: %s)&#34;</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> 
        <span class="n">request</span><span class="o">.</span><span class="na">getRemoteAddr</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getLocalAddr</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">traceIdString</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">spanIdString</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getKey</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/DefaultController.java" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/DefaultController.java" target="_blank">DefaultController.java</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloud.client</span><span class="o">;</span>

<span class="o">.</span><span class="o">.</span><span class="o">.</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxyService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">LoadBalancerClient</span> <span class="n">loadBalancer</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">Tracing</span> <span class="n">tracing</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">Tracer</span> <span class="n">tracer</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">CircuitBreakerConfig</span> <span class="n">circuitBreakerConfiguration</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">TimeLimiterConfig</span> <span class="n">timeLimiterConfiguration</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">HttpClient</span> <span class="n">client</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProxyService</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">circuitBreakerConfiguration</span> <span class="o">=</span> <span class="n">CircuitBreakerConfig</span><span class="o">.</span><span class="na">custom</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">failureRateThreshold</span><span class="o">(</span><span class="n">50</span><span class="o">)</span>
                <span class="o">.</span><span class="na">recordExceptions</span><span class="o">(</span><span class="n">IOException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">TimeoutException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">timeLimiterConfiguration</span> <span class="o">=</span> <span class="n">TimeLimiterConfig</span><span class="o">.</span><span class="na">custom</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">timeoutDuration</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofMillis</span><span class="o">(</span><span class="n">2500</span><span class="o">)</span><span class="o">)</span>
                <span class="o">.</span><span class="na">cancelRunningFuture</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClient</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="n">HttpClient</span><span class="o">.</span><span class="na">Version</span><span class="o">.</span><span class="na">HTTP_2</span><span class="o">)</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ServiceInstance</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">loadBalancer</span><span class="o">.</span><span class="na">choose</span><span class="o">(</span><span class="s">&#34;traefik&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getUri</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%s%s&#34;</span><span class="o">,</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&#34;127.0.0.1&#34;</span><span class="o">,</span> <span class="s">&#34;traefik&#34;</span><span class="o">)</span><span class="o">,</span> <span class="s">&#34;/service&#34;</span><span class="o">)</span><span class="o">;</span>        
        <span class="n">HttpRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">r</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span> 
            <span class="n">r</span> <span class="o">=</span> <span class="n">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="k">new</span> <span class="n">URI</span><span class="o">(</span><span class="n">resource</span><span class="o">)</span><span class="o">)</span><span class="o">.</span><span class="na">GET</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">getFallback</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">final</span> <span class="n">HttpRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">request</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>

        <span class="n">Span</span> <span class="n">span</span> <span class="o">=</span> <span class="n">tracer</span><span class="o">.</span><span class="na">newTrace</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">TraceContext</span><span class="o">.</span><span class="na">Injector</span><span class="o">&lt;</span><span class="n">HttpRequest</span><span class="o">.</span><span class="na">Builder</span><span class="o">&gt;</span> <span class="n">injector</span> <span class="o">=</span> <span class="n">tracing</span><span class="o">.</span><span class="na">propagation</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">injector</span><span class="o">(</span><span class="o">(</span><span class="n">HttpRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">carrier</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">carrier</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span><span class="o">;</span> <span class="o">}</span><span class="o">)</span><span class="o">;</span>
        <span class="n">injector</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">request</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Client Span (traceId: %s, spanId: %s)%n&#34;</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">traceIdString</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">span</span><span class="o">.</span><span class="na">context</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">spanIdString</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

        <span class="n">CircuitBreaker</span> <span class="n">circuitBreaker</span> <span class="o">=</span> <span class="n">CircuitBreaker</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;resilience4jCircuitBreakerProxyService&#34;</span><span class="o">,</span> <span class="n">circuitBreakerConfiguration</span><span class="o">)</span><span class="o">;</span>
        <span class="n">TimeLimiter</span> <span class="n">timeLimiter</span> <span class="o">=</span> <span class="n">TimeLimiter</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">timeLimiterConfiguration</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">get</span> <span class="o">=</span> <span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(</span><span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span> 
                    <span class="n">HttpResponse</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
                    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">getFallback</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span><span class="o">;</span>
        <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getLimiter</span> <span class="o">=</span> <span class="n">TimeLimiter</span><span class="o">.</span><span class="na">decorateFutureSupplier</span><span class="o">(</span><span class="n">timeLimiter</span><span class="o">,</span> <span class="n">get</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getCircuitBreaker</span> <span class="o">=</span> <span class="n">CircuitBreaker</span><span class="o">.</span><span class="na">decorateCallable</span><span class="o">(</span><span class="n">circuitBreaker</span><span class="o">,</span> <span class="n">getLimiter</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">Try</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">getCircuitBreaker</span><span class="o">:</span><span class="o">:</span><span class="n">call</span><span class="o">)</span><span class="o">.</span><span class="na">recover</span><span class="o">(</span><span class="o">(</span><span class="n">throwable</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">getFallback</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="nf">getFallback</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&#34;Fallback&#34;</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/ProxyService.java" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/ProxyService.java" target="_blank">ProxyService.java</a>
    </div>
</div>

<p>Como hay 2 instancias del servicio y Traefik realiza balanceo de carga utilizando el algoritmo <em>round robbin</em> se observa en la salida con las respuestas que la dirección IP que ha atendido la petición es alternativamente una de las dos instancias del servicio.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">...
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.4, traceId: 63afa4d0cd4f466c, spanId: 4719dfcc16b6104e, key: value)
Client Span (traceId: 57eeaa436aa09238, spanId: 57eeaa436aa09238)
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.5, traceId: 57eeaa436aa09238, spanId: 26dc213be2d933ac, key: value)
Client Span (traceId: 23c748bf222052a6, spanId: 23c748bf222052a6)
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.4, traceId: 23c748bf222052a6, spanId: 0404d949c6e04c18, key: value)
Client Span (traceId: c45d66a4ec9cf14c, spanId: c45d66a4ec9cf14c)
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.5, traceId: c45d66a4ec9cf14c, spanId: e7f6ccf2efb8234b, key: value)
Client Span (traceId: 2fdb3b71a682d2e6, spanId: 2fdb3b71a682d2e6)
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.4, traceId: 2fdb3b71a682d2e6, spanId: 24ac2a8d2bfb1e6e, key: value)
Client Span (traceId: a33b010e02709c6a, spanId: a33b010e02709c6a)
Service response: Hello world (url: http://172.30.0.3/, remoteAddress_172.30.0.3, localAddress: 172.30.0.5, traceId: a33b010e02709c6a, spanId: 0abe6074fc277af6, key: value)
...</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/System.out" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/System.out" target="_blank">System.out</a>
    </div>
</div>

<p>En un momento posterior si surge la necesidad de querer desplegar una nueva versión del microservicio basta con generar de nuevo el artefacto del microservicio, cambiando la versión en el archivo <em>build.gradle</em>. El despliegue de la nueva versión se realizan mediante la estrategia <em>canary</em>, manteniendo las instancias con la versión anterior del servicio y añadiendo una nueva con la nueva versión. Si se descubre algún error en la instancia <em>canary</em> se puede revertir el estado a la versión anterior, que consiste en detener la instancia <em>canary</em>. Una vez se comprueba que la instancia con la nueva versión funciona correctamente analizando sus trazas y métricas se envía la order a Nomad de promocionar las instancias de forma progresiva con la versión antigua a la nueva versión.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job run nomad/service.nomad
$ nomad job promote service
$ nomad job revert service <span class="m">0</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-job-promote.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/nomad-job-promote.sh" target="_blank">nomad-job-promote.sh</a>
    </div>
</div>

<p>El servicio exporta métricas en formato para Prometheus que con Grafana. Según se realizan peticiones al servicio el valor de métrica de contador de llamadas al servicio aumenta de forma progresiva.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ curl http://127.0.0.1:8093/service/actuator/prometheus <span class="p">|</span> grep <span class="s2">&#34;service.invocations&#34;</span>
<span class="c1"># HELP service_invocations_total Total service invocations</span>
<span class="c1"># TYPE service_invocations_total counter</span>
service_invocations_total 20.0
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/service-prometheus.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/10/microservicios-con-spring-cloud-consul-nomad-y-traefik/code/service-prometheus.sh" target="_blank">service-prometheus.sh</a>
    </div>
</div>

<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudConsulNomadTraefik">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./run.sh</code>. 
</p>
]]></content><category term="java"/><category term="planeta-codigo"/><category term="programacion"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/</id><title>Utilizar credenciales de conexión a la base de datos generadas por Vault en una aplicación de Spring</title><updated>2019-08-23T09:00:00+02:00</updated><published>2019-08-23T09:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Spring Cloud Vault facilita la integración con Vault, una de sus usos es utilizarlo para obtener unas credenciales de conexión a la base de datos generadas bajo demanda y con un tiempo de vida limitado en vez de embeberlas en la configuración de la aplicación y con u tiempo de vida indefinido.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/spring.svg" class="right " width="200" alt="Spring" title="Spring"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/vault.svg" class="right " width="200" alt="Vault" title="Vault"/>
</div>

<p>La herramienta <a href="https://www.vaultproject.io/">Vault</a> de <a href="https://www.hashicorp.com/">HashiCorp</a> permite almacenar secretos, otra de sus funcionalidad es ser capaz de generar credenciales de forma dinámica. Habitualmente una aplicación para conectarse a una base de datos incluye en su configuración las credenciales, usuario y contraseña, para autenticarse y crear las conexiones, estas credenciales tiene un tiempo de vida indefinido y comprometidas proporcionan acceso a la base de datos.</p>

<p>Vault permite centralizar la seguridad, otorgar a cada aplicación los permisos para conectarse a una base de datos a través de la obtención de credenciales (usuario y contraseña), auditar su uso y limitar el tiempo de validez de las credenciales a unas horas en vez de forma indefinida.</p>

<p><a href="https://cloud.spring.io/spring-cloud-vault/">Spring Cloud Vault</a> permite a una aplicación <a href="https://spring.io/">Spring</a> simplificar la integración con Vault para obtener unas credenciales generadas dinámicamente.</p>

<p>En el archivo de contrucción de la aplicación hay que incluir las dependencias de Spring para la integración con Vault.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Groovy" data-lang="Groovy"><span class="o">.</span><span class="o">.</span><span class="o">.</span>
<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>
<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-starter-vault-config&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>
<span class="n">implementation</span><span class="o">(</span><span class="s1">&#39;org.springframework.cloud:spring-cloud-vault-config-databases&#39;</span><span class="o">,</span> <span class="n">excludeSpringBootStarterLogging</span><span class="o">)</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span>
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/build.gradle" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/build.gradle" target="_blank">build.gradle</a>
    </div>
</div>

<p>Obtener la credenciales de conexión a la base de datos es transparente para el código de la aplicación, lo único que se necesita es el usuario y contraseña además de la URL de conexión.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.picodotdev.blogbitix.springcloudvault</span><span class="o">;</span>

<span class="o">.</span><span class="o">.</span><span class="o">.</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${spring.datasource.username}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${spring.datasource.password}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="o">.</span><span class="o">.</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Username: %s%n&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;Password: %s%n&#34;</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">&#34;jdbc:postgresql://127.0.0.1:5432/app&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Connected to the database!&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Failed to make connection!&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;SQL State: %s\n%s&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getSQLState</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/Main.java" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/Main.java" target="_blank">Main.java</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">...
10:37:47.013 [main] INFO  io.github.picodotdev.blogbitix.springcloudvault.Main - Started Main in 1.368 seconds (JVM running for 1.784)
Username: v-approle-app-gRlHQlNyPF8qJ3DCUz9U-1566549466
Passowrd: A1a-MPPFfvMD3OQUC00H
Connected to the database!
...</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/System.out" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/System.out" target="_blank">System.out</a>
    </div>
</div>

<p>La parte más relevante está en la configuración necesaria de la aplicación. Hay que añadir como configuración la ubicación del servidor Vault, es necesario configurar un método de autenticación para Vault, para el caso de aplicaciones el recomendado es <em>AppRole</em>. Con <em>AppRole</em> cada aplicación necesita de un <em>role-id</em> y un <em>secret-id</em> que hay que generar previamente. Y el rol del que obtener las credenciales, <em>app</em>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-YAML" data-lang="YAML">spring.application.name<span class="p">:</span><span class="w"> </span>app<span class="w">
</span><span class="w"></span>spring.cloud.vault<span class="p">:</span><span class="w">
</span><span class="w">  </span>uri<span class="p">:</span><span class="w"> </span>http<span class="p">:</span>//<span class="m">127.0</span><span class="m">.0</span><span class="m">.1</span><span class="p">:</span><span class="m">8200</span><span class="w">
</span><span class="w">  </span>authentication<span class="p">:</span><span class="w"> </span>APPROLE<span class="w">
</span><span class="w">  </span>app-role<span class="p">:</span><span class="w">
</span><span class="w">    </span>role-id<span class="p">:</span><span class="w"> </span>a248529d-882c-ef5f-f7e6-6a9d349afa57<span class="w">
</span><span class="w">    </span>secret-id<span class="p">:</span><span class="w"> </span>13b6c224-dc18<span class="m">-0404</span>-7bc1-7c258c4c5a48<span class="w">
</span><span class="w">  </span>database<span class="p">:</span><span class="w">
</span><span class="w">    </span>enabled<span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span>role<span class="p">:</span><span class="w"> </span>app<span class="w">
</span><span class="w">    </span>backend<span class="p">:</span><span class="w"> </span>database<span class="w">
</span><span class="w">    </span>username-property<span class="p">:</span><span class="w"> </span>spring.datasource.username<span class="w">
</span><span class="w">    </span>password-property<span class="p">:</span><span class="w"> </span>spring.datasource.password</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/bootstrap.yml" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/bootstrap.yml" target="_blank">bootstrap.yml</a>
    </div>
</div>

<p>Para probarlo hay que iniciar en este caso el servidor <a href="https://www.consul.io/">Consul</a> ya que en el ejemplo se utiliza como el lugar donde se guardan los secretos. También hay que iniciar Vault.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev
<span class="o">=</span><span class="o">=</span>&gt; Starting Consul agent...
<span class="o">=</span><span class="o">=</span>&gt; Consul agent running!
           Version: <span class="s1">&#39;v1.5.0&#39;</span>
           Node ID: <span class="s1">&#39;2f523068-b196-e3bb-0b09-dc34e20989d2&#39;</span>
         Node name: <span class="s1">&#39;archlinux&#39;</span>
        Datacenter: <span class="s1">&#39;dc1&#39;</span> <span class="o">(</span>Segment: <span class="s1">&#39;&lt;all&gt;&#39;</span><span class="o">)</span>
            Server: <span class="nb">true</span> <span class="o">(</span>Bootstrap: <span class="nb">false</span><span class="o">)</span>
       Client Addr: <span class="o">[</span>127.0.0.1<span class="o">]</span> <span class="o">(</span>HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600<span class="o">)</span>
      Cluster Addr: 127.0.0.1 <span class="o">(</span>LAN: 8301, WAN: 8302<span class="o">)</span>
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/consul.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/consul.sh" target="_blank">consul.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault server -dev -config vault.hcl
<span class="o">=</span><span class="o">=</span>&gt; Vault server configuration:

             Api Address: http://127.0.0.1:8200
                     Cgo: disabled
         Cluster Address: https://127.0.0.1:8201
              Listener 1: tcp <span class="o">(</span>addr: <span class="s2">&#34;127.0.0.1:8200&#34;</span>, cluster address: <span class="s2">&#34;127.0.0.1:8201&#34;</span>, max_request_duration: <span class="s2">&#34;1m30s&#34;</span>, max_request_size: <span class="s2">&#34;33554432&#34;</span>, tls: <span class="s2">&#34;disabled&#34;</span><span class="o">)</span>
               Log Level: info
                   Mlock: supported: true, enabled: <span class="nb">false</span>
                 Storage: consul <span class="o">(</span>HA available<span class="o">)</span>
                 Version: Vault v1.1.1
             Version Sha: a3dcd63451cf6da1d04928b601bbe9748d53842e

WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to <span class="nb">set</span> the following environment variable:

    $ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://127.0.0.1:8200&#39;</span>

The unseal key and root token are displayed below in <span class="k">case</span> you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: <span class="nv">jsBAedtA88Lm7uU1pCSYOBK1980Ervf9GSky4usmEdQ</span><span class="o">=</span>
Root Token: s.8wwm4fRuRRVFm1cbBUMgdNtE

Development mode should NOT be used in production installations!</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault.sh" target="_blank">vault.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">ui = true

storage &#34;consul&#34; {
 address = &#34;127.0.0.1:8500&#34;
 path  = &#34;vault&#34;
}</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault.hcl" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault.hcl" target="_blank">vault.hcl</a>
    </div>
</div>

<p>La base de datos postgres se inicia como un contenedor de <a href="https://www.docker.com/">Docker</a>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run --rm -it -p <span class="s2">&#34;5432:5432&#34;</span> -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>postgres -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>postgres postgres:alpine
docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
8fedf0ef1342        postgres:alpine     <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">22</span> seconds ago      Up <span class="m">20</span> seconds       0.0.0.0:5432-&gt;5432/tcp   serene_leavitt

$ docker <span class="nb">exec</span> -it 8fedf0ef1342 bash
bash-5.0# psql -U postgres
psql <span class="o">(</span>11.4<span class="o">)</span>
Type <span class="s2">&#34;help&#34;</span> <span class="k">for</span> help.

<span class="nv">postgres</span><span class="o">=</span><span class="c1"># CREATE DATABASE app;</span>
CREATE DATABASE
<span class="nv">postgres</span><span class="o">=</span>#</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/postgres.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/postgres.sh" target="_blank">postgres.sh</a>
    </div>
</div>

<p>Para realizar la configuración de Vault primero hay que iniciar sesión, en el modo desarrollo del ejemplo utilizando el <em>token root</em> que es generado y emitido en la salida al iniciarlo.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://127.0.0.1:8200&#39;</span>
$ vault login s.8wwm4fRuRRVFm1cbBUMgdNtE</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-login.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-login.sh" target="_blank">vault-login.sh</a>
    </div>
</div>

<p>Como en el artículo <a href="https://picodotdev.github.io/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/">Generar credenciales de conexión a base de datos bajo demanda con Vault</a> hay que activar el <em>backend</em> de <em>database</em> para generar credenciales de bases de datos, en las que básicamente se especifica la cadena de conexión a la base de datos de postgres con un usuario y contraseña con permisos suficientes para crear usuarios y la sentencia SQL que los crea. Se habilita y configura el <em>backend database</em> del que obtener las credenciales.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault secrets <span class="nb">enable</span> database
$ vault write database/config/app <span class="se">\
</span><span class="se"></span>    <span class="nv">plugin_name</span><span class="o">=</span>postgresql-database-plugin <span class="se">\
</span><span class="se"></span>    <span class="nv">allowed_roles</span><span class="o">=</span><span class="s2">&#34;app&#34;</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">connection_url</span><span class="o">=</span><span class="s2">&#34;postgresql://{{username}}:{{password}}@localhost:5432/?sslmode=disable&#34;</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">username</span><span class="o">=</span><span class="s2">&#34;postgres&#34;</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">password</span><span class="o">=</span><span class="s2">&#34;postgres&#34;</span>
$ vault write database/roles/app <span class="se">\
</span><span class="se"></span>     <span class="nv">db_name</span><span class="o">=</span>app <span class="se">\
</span><span class="se"></span>     <span class="nv">creation_statements</span><span class="o">=</span><span class="s2">&#34;CREATE ROLE \&#34;{{name}}\&#34; WITH LOGIN PASSWORD &#39;{{password}}&#39; VALID UNTIL &#39;{{expiration}}&#39;; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \&#34;{{name}}\&#34;;&#34;</span> <span class="se">\
</span><span class="se"></span>     <span class="nv">default_ttl</span><span class="o">=</span><span class="s2">&#34;1h&#34;</span> <span class="se">\
</span><span class="se"></span>     <span class="nv">max_ttl</span><span class="o">=</span><span class="s2">&#34;24h&#34;</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-database.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-database.sh" target="_blank">vault-database.sh</a>
    </div>
</div>

<p>Para que la aplicación de Spring Boot obtenga las credenciales ha de autenticarse en Vault en este caso utilizando el método recomendado para las aplicaciones que es utilizando en mecanismo de autenticación <em>AppRole</em> que básicamente es un usuario y contraseña para las aplicaciones.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault auth <span class="nb">enable</span> approle
$ vault write auth/approle/role/app <span class="se">\
</span><span class="se"></span>    <span class="nv">secret_id_ttl</span><span class="o">=</span>10m <span class="se">\
</span><span class="se"></span>    <span class="nv">token_num_uses</span><span class="o">=</span><span class="m">10</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">token_ttl</span><span class="o">=</span>20m <span class="se">\
</span><span class="se"></span>    <span class="nv">token_max_ttl</span><span class="o">=</span>30m <span class="se">\
</span><span class="se"></span>    <span class="nv">secret_id_num_uses</span><span class="o">=</span><span class="m">40</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">policies</span><span class="o">=</span>database-app
$ vault <span class="nb">read</span> auth/approle/role/app/role-id
Key        Value
---        -----
role_id    a248529d-882c-ef5f-f7e6-6a9d349afa57
$ vault write -f auth/approle/role/app/secret-id
Key                   Value
---                   -----
secret_id             13b6c224-dc18-0404-7bc1-7c258c4c5a48
secret_id_accessor    fd9a0915-af6e-b0a8-4e6c-dbb6ee587903</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-approle.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-approle.sh" target="_blank">vault-approle.sh</a>
    </div>
</div>

<p>En Vault los permisos se otorgan con las <em>policy</em>, los secretos se organiza en una estructura jerárquica de directorios y a cada una de los contextos se le otorga los permisos deseados. Spring obtiene las credenciales para la base de datos del contexto <em>database/creds/app</em> por lo que al rol utilizando para obtener las credenciales hay que asocialer un <em>policy</em> con permisos de lectura para este contexto.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault policy write database-app database-app.hcl</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-policy.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-policy.sh" target="_blank">vault-policy.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">path &#34;secret/application&#34; {
  capabilities = [&#34;read&#34;]
}

path &#34;secret/app&#34; {
  capabilities = [&#34;read&#34;]
}

path &#34;database/creds/app&#34; {
  capabilities = [&#34;read&#34;]
}
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/database-app.hcl" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/database-app.hcl" target="_blank">database-app.hcl</a>
    </div>
</div>

<p>Obtenido un <em>role-id</em> y un <em>secret-id</em> so observa los <em>policies</em> asociados además de otras propiedades.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault write auth/approle/login <span class="nv">role_id</span><span class="o">=</span>a248529d-882c-ef5f-f7e6-6a9d349afa57 <span class="nv">secret_id</span><span class="o">=</span>13b6c224-dc18-0404-7bc1-7c258c4c5a48
Key                     Value
---                     -----
token                   s.yAKbv8Qz5tfXpc8n7C8oND01
token_accessor          GPHO70D2NFRHFFdsiNiftmzO
token_duration          20m
token_renewable         <span class="nb">true</span>
token_policies          <span class="o">[</span><span class="s2">&#34;database-app&#34;</span> <span class="s2">&#34;default&#34;</span><span class="o">]</span>
identity_policies       <span class="o">[</span><span class="o">]</span>
policies                <span class="o">[</span><span class="s2">&#34;database-app&#34;</span> <span class="s2">&#34;default&#34;</span><span class="o">]</span>
token_meta_role_name    app</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-role-id.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/utilizar-credenciales-de-conexion-a-la-base-de-datos-generadas-por-vault-en-una-aplicacion-de-spring/code/vault-role-id.sh" target="_blank">vault-role-id.sh</a>
    </div>
</div>

<p>En este caso la aplicación de Spring incluye en su configuración las credenciales del <em>AppRole</em>, también se puede proporcionar como variables de entorno y propiedades del sistema.</p>

<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudVault">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a>. 
</p>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://www.baeldung.com/spring-cloud-vault">An Intro to Spring Cloud Vault</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-vault/reference/html/#_approle_authentication">Spring Cloud Vault AppRole authentication</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.database-backends">Spring Cloud Vault Database backends</a></li>
</ul>

</div>
]]></content><category term="java"/><category term="planeta-codigo"/><category term="programacion"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/</id><title>Generar credenciales de conexión a base de datos bajo demanda con Vault</title><updated>2019-08-15T09:00:00+02:00</updated><published>2019-08-15T09:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Una de las funcionalidades proporcionada por Vault es generar credenciales dinámicas para la conexión a bases de datos. Generar las credenciales de forma dinámica proporciona varios beneficios: no hay unas credenciales que usen las aplicaciones que tengan un tiempo de vida indefinido, las aplicaciones no necesitan guardar en su configuración las credenciales, las credenciales se rotan de forma automática y los permisos para obtenerlas se pueden revocar de forma centralizada con Vault para cuales quiera bases de datos que se utilicen. Soporta las bases de datos más populares entre ellas postgres.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/vault.svg" class="right " width="200" alt="Vault" title="Vault"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/postgresql.svg" class="right " width="200" alt="PostgreSQL" title="PostgreSQL"/>
</div>

<p>Las base de datos para proteger los datos realizan autenticación del usuario que se conecta. Normalmente utilizando un usuario y contraseña, una vez autenticado el usuario mediante permisos se realiza la autorización de las operaciones que puede realizar, a que bases de datos se puede conectar, que tablas puede acceder y que operaciones puede realizar.</p>

<p>Este modelo de autenticación tiene algunos inconvenientes. Uno de los inconvenientes es que los usuarios y contraseñas para mayor seguridad han de cambiarse con cierta frecuencia para evitar que si las credenciales quedan comprometidas no puedan utilizarse indefinidamente. Otro problema es que cada aplicación ha de conocer las credenciales de la base de datos, esto hace que haya múltiples posibilidades de que las credenciales queden comprometidas. Por otro lado el uso de las credenciales no queda registrado de forma centralizada que es necesario para saber ante una brecha de seguridad qué datos han sido accedidos y por quien.</p>

<p>La herramienta <a href="https://www.vaultproject.io/">Vault</a> de <a href="https://www.hashicorp.com/">HashiCorp</a> da solución a estos problemas generando credenciales de acceso a las bases de datos de forma dinámica, bajo demanda y con un tiempo de concesión limitado. Las credenciales tiene un tiempo de vida limitado si no se renueva su concesión y la generación de las credenciales queda registrado. La forma que tiene Vault de generar credenciales de forma dinámica en una base de datos relacional como <a href="https://www.postgresql.org/">postgres</a> es conectarse a la base de datos con un usuario con permisos para generarlas y ejecutar una sentencia SQL que crea las credenciales.</p>

<p>Para permitir a Vault generar credenciales de conexión hay que activar el <em>backend</em> de bases de datos, configurarlo con la sentencia SQL que se utilizará para generar las credenciales y crear el rol de Vault que genera las credenciales cuando se le solicite. En este ejemplo se muestra para la base de datos postgres pero Vault también soporta otras bases de datos como <a href="https://www.mysql.com/">MySQL</a>. En el ejemplo la base de datos postgres se ejecuta en un contenedor de <a href="https://www.docker.com/">Docker</a> en el que se asignan el usuario y contraseña del usuario <em>root</em> que utiliza Vault para generar las credenciales de forma dinámica.</p>

<p>Con las siguientes comandos se inicia <a href="https://www.consul.io/">Consul</a> y Vault.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev
<span class="o">=</span><span class="o">=</span>&gt; Starting Consul agent...
<span class="o">=</span><span class="o">=</span>&gt; Consul agent running!
           Version: <span class="s1">&#39;v1.5.0&#39;</span>
           Node ID: <span class="s1">&#39;38d4f541-0958-6d7d-d49e-a31a15987286&#39;</span>
         Node name: <span class="s1">&#39;archlinux&#39;</span>
        Datacenter: <span class="s1">&#39;dc1&#39;</span> <span class="o">(</span>Segment: <span class="s1">&#39;&lt;all&gt;&#39;</span><span class="o">)</span>
            Server: <span class="nb">true</span> <span class="o">(</span>Bootstrap: <span class="nb">false</span><span class="o">)</span>
       Client Addr: <span class="o">[</span>127.0.0.1<span class="o">]</span> <span class="o">(</span>HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600<span class="o">)</span>
      Cluster Addr: 127.0.0.1 <span class="o">(</span>LAN: 8301, WAN: 8302<span class="o">)</span>
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/consul.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/consul.sh" target="_blank">consul.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault server -dev -config vault.hcl
<span class="o">=</span><span class="o">=</span>&gt; Vault server configuration:

             Api Address: http://127.0.0.1:8200
                     Cgo: disabled
         Cluster Address: https://127.0.0.1:8201
              Listener 1: tcp <span class="o">(</span>addr: <span class="s2">&#34;127.0.0.1:8200&#34;</span>, cluster address: <span class="s2">&#34;127.0.0.1:8201&#34;</span>, max_request_duration: <span class="s2">&#34;1m30s&#34;</span>, max_request_size: <span class="s2">&#34;33554432&#34;</span>, tls: <span class="s2">&#34;disabled&#34;</span><span class="o">)</span>
               Log Level: info
                   Mlock: supported: true, enabled: <span class="nb">false</span>
                 Storage: consul <span class="o">(</span>HA available<span class="o">)</span>
                 Version: Vault v1.1.1
             Version Sha: a3dcd63451cf6da1d04928b601bbe9748d53842e

WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to <span class="nb">set</span> the following environment variable:

    $ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://127.0.0.1:8200&#39;</span>

The unseal key and root token are displayed below in <span class="k">case</span> you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: <span class="nv">jeW10eak6TxJzH2qFnwk7bWk7HcpDXd3KQOobi1rZTQ</span><span class="o">=</span>
Root Token: s.0YRcRzojVcPG8LbbzyUd1MEA

Development mode should NOT be used in production installations!</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault.sh" target="_blank">vault.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">ui = true

storage &#34;consul&#34; {
  address = &#34;127.0.0.1:8500&#34;
  path  = &#34;vault&#34;
}</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault.hcl" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault.hcl" target="_blank">vault.hcl</a>
    </div>
</div>

<p>La base de datos se inicia en un contenedor de Docker, se crea una base de datos y una tabla.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run -it -p <span class="s2">&#34;5432:5432&#34;</span> -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>postgres -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>postgres postgres:alpine
$ docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
2792b13c36c1        postgres:alpine     <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">3</span> minutes ago       Up <span class="m">3</span> minutes        0.0.0.0:5432-&gt;5432/tcp   distracted_keldysh
$ docker <span class="nb">exec</span> -it 2792b13c36c1 bash
bash-5.0# psql -U postgres
psql <span class="o">(</span>11.4<span class="o">)</span>
Type <span class="s2">&#34;help&#34;</span> <span class="k">for</span> help.

<span class="nv">postgres</span><span class="o">=</span><span class="c1"># CREATE DATABASE app;</span>
<span class="nv">postgres</span><span class="o">=</span><span class="c1"># \connect app</span>
You are now connected to database <span class="s2">&#34;app&#34;</span> as user <span class="s2">&#34;postgres&#34;</span>.
<span class="nv">app</span><span class="o">=</span><span class="c1"># CREATE TABLE product (</span>
    id          bigint PRIMARY KEY,
    name       varchar<span class="o">(</span>256<span class="o">)</span> NOT NULL
<span class="o">)</span><span class="p">;</span>
<span class="nv">app</span><span class="o">=</span><span class="c1"># \dt</span>
          List of relations
 Schema <span class="p">|</span>  Name   <span class="p">|</span> Type  <span class="p">|</span>  Owner   
--------+---------+-------+----------
 public <span class="p">|</span> product <span class="p">|</span> table <span class="p">|</span> postgres
<span class="o">(</span><span class="m">1</span> row<span class="o">)</span>
$ docker inspect -f <span class="s1">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> 2792b13c36c1
172.17.0.2</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres.sh" target="_blank">postgres.sh</a>
    </div>
</div>

<p>En Vault hay que crear la configuración para conectarse a la base de datos y un rol que contiene la configuración para generar las credenciales y permitir obtenerlas, básicamente es un sentencia SQL con el nombre del usuario y contraseña, los permisos que se le asignan y el tiempo de concesión.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span>http://127.0.0.1:8200
$ vault login s.0YRcRzojVcPG8LbbzyUd1MEA
$ vault secrets <span class="nb">enable</span> database</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-database.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-database.sh" target="_blank">vault-database.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault write database/config/app <span class="se">\
</span><span class="se"></span>   <span class="nv">plugin_name</span><span class="o">=</span>postgresql-database-plugin <span class="se">\
</span><span class="se"></span>   <span class="nv">allowed_roles</span><span class="o">=</span><span class="s2">&#34;app&#34;</span> <span class="se">\
</span><span class="se"></span>   <span class="nv">connection_url</span><span class="o">=</span><span class="s2">&#34;postgresql://{{username}}:{{password}}@localhost:5432/?sslmode=disable&#34;</span> <span class="se">\
</span><span class="se"></span>   <span class="nv">username</span><span class="o">=</span><span class="s2">&#34;postgres&#34;</span> <span class="se">\
</span><span class="se"></span>   <span class="nv">password</span><span class="o">=</span><span class="s2">&#34;postgres&#34;</span>
$ vault write database/roles/app <span class="se">\
</span><span class="se"></span>    <span class="nv">db_name</span><span class="o">=</span>app <span class="se">\
</span><span class="se"></span>    <span class="nv">creation_statements</span><span class="o">=</span><span class="s2">&#34;CREATE ROLE \&#34;{{name}}\&#34; WITH LOGIN PASSWORD &#39;{{password}}&#39; VALID UNTIL &#39;{{expiration}}&#39;; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \&#34;{{name}}\&#34;;&#34;</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">default_ttl</span><span class="o">=</span><span class="s2">&#34;1h&#34;</span> <span class="se">\
</span><span class="se"></span>    <span class="nv">max_ttl</span><span class="o">=</span><span class="s2">&#34;24h&#34;</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-role.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-role.sh" target="_blank">vault-role.sh</a>
    </div>
</div>

<p>Las credenciales se generan en el momento de leer una propiedad de Vault.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault <span class="nb">read</span> database/roles/app
Key                      Value
---                      -----
creation_statements      <span class="o">[</span>CREATE ROLE <span class="s2">&#34;{{name}}&#34;</span> WITH LOGIN PASSWORD <span class="s1">&#39;{{password}}&#39;</span> VALID UNTIL <span class="s1">&#39;{{expiration}}&#39;</span><span class="p">;</span> GRANT SELECT ON ALL TABLES IN SCHEMA public TO <span class="s2">&#34;{{name}}&#34;</span><span class="p">;</span><span class="o">]</span>
db_name                  app
default_ttl              1h
max_ttl                  24h
renew_statements         <span class="o">[</span><span class="o">]</span>
revocation_statements    <span class="o">[</span><span class="o">]</span>
rollback_statements      <span class="o">[</span><span class="o">]</span>
$ vault <span class="nb">read</span> database/creds/app
Key                Value
---                -----
lease_id           database/creds/app/rFFlNmpNoxezccTVh3WufZOT
lease_duration     1h
lease_renewable    <span class="nb">true</span>
password           A1a-6hRTGNaShFIEGLvp
username           v-root-app-ydbbHqVq1gYQqsUxMuIc-1565857370</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-credentials.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/vault-credentials.sh" target="_blank">vault-credentials.sh</a>
    </div>
</div>

<p>En postgres la conexión desde la máquina local se permiten sin necesidad de credenciales, para simular realizar la conexión desde otra máquina hay que iniciar otro contenedor. En la conexión se utilizan las credenciales que ha proporcionado Vault. Dado que se realiza una operación de red hay que desactivar el <em>firewall</em> del sistema o permitir la conexión al puerto de la base de datos que en postgres es el 5432 si fuera necesario. Listando los usuarios de la base de datos con el comando <em>\du</em> se muestra el creado por Vault y si tiempo de validez.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run -it postgres:alpine bash
bash-5.0# <span class="nv">PGPASSWORD</span><span class="o">=</span>A1a-6hRTGNaShFIEGLvp psql -U v-root-app-ydbbHqVq1gYQqsUxMuIc-1565857370 -h 172.17.0.2 -d app
psql <span class="o">(</span>11.4<span class="o">)</span>
Type <span class="s2">&#34;help&#34;</span> <span class="k">for</span> help.

<span class="nv">app</span><span class="o">=</span>&gt; <span class="se">\d</span>t
          List of relations
 Schema <span class="p">|</span>  Name   <span class="p">|</span> Type  <span class="p">|</span>  Owner   
--------+---------+-------+----------
 public <span class="p">|</span> product <span class="p">|</span> table <span class="p">|</span> postgres
<span class="o">(</span><span class="m">1</span> row<span class="o">)</span>
<span class="nv">app</span><span class="o">=</span><span class="c1"># \du</span>
                                                    List of roles
                 Role name                  <span class="p">|</span>                         Attributes                         <span class="p">|</span> Member of 
--------------------------------------------+------------------------------------------------------------+-----------
 postgres                                   <span class="p">|</span> Superuser, Create role, Create DB, Replication, Bypass RLS <span class="p">|</span> <span class="o">{</span><span class="o">}</span>
 v-root-app-ydbbHqVq1gYQqsUxMuIc-1565857370 <span class="p">|</span> Password valid <span class="k">until</span> 2019-08-15 09:22:55+00                <span class="p">|</span> <span class="o">{</span><span class="o">}</span>
<span class="nv">app</span><span class="o">=</span>&gt; quit</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres-connect.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres-connect.sh" target="_blank">postgres-connect.sh</a>
    </div>
</div>

<p>Si el usuario y contraseña no es correcto no se permite la conexión a la base de datos.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">bash-5.0# <span class="nv">PGPASSWORD</span><span class="o">=</span>tampered psql -U v-root-app-ydbbHqVq1gYQqsUxMuIc-1565857370 -h 172.17.0.2 -d app
psql: FATAL:  password authentication failed <span class="k">for</span> user <span class="s2">&#34;v-root-app-ydbbHqVq1gYQqsUxMuIc-1565857370&#34;</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres-connect-fail.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/code/postgres-connect-fail.sh" target="_blank">postgres-connect-fail.sh</a>
    </div>
</div>

<p>En las aplicaciones Java que utilizan <a href="https://spring.io/">Spring</a> el proyecto <a href="https://cloud.spring.io/spring-cloud-vault/">Spring Cloud Vault</a> proporciona las utilidades para simplificar en gran medida la obtención de las credenciales a la base de datos utilizando Vault.</p>

<p>Esto permite que únicamente Vault conozca la cuenta <em>root</em> de la base de datos o una con suficientes permisos para crear credenciales, las aplicaciones no almacenan en su configuración las credenciales para conectarse la base de datos solo las de Vault que le permiten obtener unas credenciales para la base de datos con un tiempo de vida limitado y que pueden revocarse desde Vault en caso de un problema de seguridad para cuales quiera bases de datos que se utilicen.</p>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-relacional-postgresql/">Introducción a la base de datos relacional PostgreSQL</a></li>
</ul>

</div>
]]></content><category term="programacion"/><category term="planeta-codigo"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/</id><title>Administrar secretos y proteger datos sensibles con Vault</title><updated>2019-07-27T23:00:00+02:00</updated><published>2019-07-27T18:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p><strong>Herramientas de aprovisionamiento como Chef, Puppet y Ansible solucionan el problema de la seguridad de los secretos de forma similar, utilizando una única clave de cifrado. Los datos cifrados están siempre a un secreto (contraseña, clave, &hellip;) de ser descifrados y generalmente no está bien protegidos dado que en un entorno elástico cada servidor necesita disponer de este secreto para descifrar los datos. Adicionalmente el acceso a los datos cifrados no está registrado de modo que si hay una intrusión no está claro que dato ha sido accedido y por quien. Utilizar variables de entorno para proporcionar secretos tampoco es seguro, y en entornos Docker suele usarse.</strong></p>]]><![CDATA[

<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/vault.svg" class="right " width="200" alt="Vault" title="Vault"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/hashicorp.svg" class="right " width="200" alt="HashiCorp" title="HashiCorp"/>
</div>

<p>La seguridad es un aspecto muy importante de los sistemas informáticos, no darle la consideración necesaria puede dar lugar a caídas de servicio y robo de datos potencialmente ocasionando importantes pérdidas de dinero, sanciones y pérdida de confianza de los clientes y proveedores de una organización.</p>

<p>La seguridad se mantiene mediante mecanismos de autenticación identifican al solicitante solicitante, de autorización permitiendo realiza únicamente las acciones para las que se tienen permisos y mediante firma y cifrado para impedir la modificación de los datos y el acceso a la información sin las credenciales y autorización requerida.</p>

<p>La infraestructura informática de los sistemas actuales es cada vez más compleja por el número y tipo de las distintas de piezas que emplean como bases de datos, sistemas de mensajes u otros servicios, también por el aspecto efímero en la tendencia actual de microservicios como por la utilización de entornos en la nube con una infraestructura no confiable al estar fuera del control de una organización y estar compartida con otras organizaciones.</p>

<p>No es seguro utilizar archivos sin cifrar aún utilizando los permisos del sistema de archivos dado que una intrusión en el sistema posibilita el acceso al secreto. Cifrarlos los archivos es el mismo caso de herramientas como <a href="https://www.getchef.com/">Chef</a>, <a href="https://puppet.com/">Puppet</a> y <a href="https://www.ansible.com/">Ansible</a>. Utilizar variables de entorno para proporcionar secretos tampoco es seguro ya que aunque los secretos no están en el sistema de archivos se pueden inspeccionar las variables de entorno de un proceso.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ env <span class="p">|</span> grep SECRET
$ docker inspect
$ sudo cat /proc/<span class="nv">$pid</span>/environ</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/commands.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/commands.sh" target="_blank">commands.sh</a>
    </div>
</div>

<p>Por otra parte las contraseñas y claves han de rotarse regularmente para limitar en el tiempo el acceso ante el filtrado de las credenciales en un sistema o para denegar el acceso a una persona que en algún momento haya tenido credenciales de acceso como un empleado que ya no pertenece a la compañía.</p>

<h3 id="vault">Vault</h3>

<p><a href="https://www.vaultproject.io/">Vault</a> es una herramienta para acceder de forma segura a secretos. Un secreto es cualquier cosa a la que se quiera tener severamente controlado como claves de API, contraseñas y certificados. Vault proporciona una interfaz para cualquier secreto a la vez que mantiene un control de acceso y un <em>log</em> de acceso detallado.</p>

<ul>
<li><a href="https://www.vaultproject.io/docs/what-is-vault/index.html">Introduction to Vault</a></li>
<li><a href="https://www.vaultproject.io/docs/use-cases/index.html">Use Cases</a></li>
</ul>

<p>Las características principales de Vault se engloban en tres aspectos de la seguridad: cifrado, control de acceso y ciclo de vida.</p>

<ul>
<li>Almacenamiento seguro de secretos: se pueden almacenar secretos arbitrarios clave/valor. Los secretos son cifrados previamente a ser almacenados en el almacenamiento persistente de modo que obtener acceso al almacenamiento persistente no es suficiente para acceder a los secretos. Vault puede almacenar los secretos en disco, <a href="https://www.consul.io/">Consul</a> y más.</li>
<li>Secretos dinámicos: puede <a href="https://picodotdev.github.io/blog-bitix/2019/08/generar-credenciales-de-conexion-a-base-de-datos-bajo-demanda-con-vault/">generar secretos bajo demanda para bases de datos</a> o algunos sistemas como AWS. Por ejemplo, cuando una aplicación necesita acceso a una base de datos SQL solicita a Vault unas credenciales, Vault genera unas credenciales con los permisos adecuados. Después de crear estos secretos dinámicos también los revoca automáticamente una vez pasado su tiempo de concesión.</li>
<li>Cifrado de datos: puede cifrar y descifrar datos sin almacenarlos. Esto permite definir parámetros de seguridad y los desarrolladores almacenar los datos cifrados en localizaciones como bases de datos sin tener que diseñar sus propios métodos de cifrado.</li>
<li>Concesión y renovación: todos los secretos en Vault tienen un tiempo de concesión asociado. Al finalizar la concesión Vault los revoca automáticamente, los clientes pueden solicitar renovar las concesiones mediante las API disponibles de Vault.</li>
<li>Revocación: integra la funcionalidad de revocación, no solo secretos individuales sino jerarquías de secretos. La revocación asiste en la rotación de las claves así como cerrar el sistema en caso de intrusión.</li>
</ul>

<h3 id="conceptos">Conceptos</h3>

<p>Los motores de secretos son uno de los conceptos en el ámbito de Vault. Son componentes que permite almacenar, generar o cifrar datos. Algunos motores de secretos simplemente almacenan y leen datos, otros se conectan a otros servicios y generan credenciales dinámicamente bajo demanda. Otros motores de secretos proporcionan el cifrado como servicio, <em>tokens</em> de un solo uso, certificados y mucho más.</p>

<ul>
<li><a href="https://www.vaultproject.io/api/secret/index.html">Secrets Engines</a></li>
<li><a href="https://www.vaultproject.io/docs/secrets/kv/index.html">KV Secrets Engine</a></li>
<li><a href="https://www.vaultproject.io/docs/secrets/databases/index.html">Databases Secrets Engine</a></li>
<li><a href="https://www.vaultproject.io/docs/secrets/rabbitmq/index.html">RabbitMQ Secrets Engine</a></li>
<li><a href="https://www.vaultproject.io/docs/secrets/pki/index.html">PKI Secrets Engine</a></li>
<li><a href="https://www.vaultproject.io/docs/secrets/ssh/index.html">SSH Secrets Engine</a></li>
</ul>

<p>Otro concepto es la <a href="https://www.vaultproject.io/docs/auth/index.html">autenticación</a>. Permiten realizar la autenticación y son responsables de asignar una identidad y un conjunto de <em>policies</em> a un usuario. Por ejemplo, para los desarrolladores el método de autenticación de GitHub es fácil de usar pero para servidores el método <em>AppRole</em> es el recomendado</p>

<p>Los secretos necesitan <a href="https://www.vaultproject.io/docs/configuration/storage/index.html">almacenamiento</a>. Algunos tipos de almacenamiento son mejores para la alta disponibilidad y otros facilitan la copia de seguridad y la restauración. Puede ser en memoria, sistema de archivos, una herramienta como Consul o varias bases de datos entre ellas bases de datos relacionales.</p>

<p>La <a href="(https://www.vaultproject.io/docs/audit/index.html)">auditoria</a> permite obtener una trazabilidad de las operaciones que se han realizado, dado que todas las operaciones se realizan mediante una API el <em>log</em> de auditoría es simplemente cada interacción autenticada con Vault, incluidas los errores. Puede ser un archivo o un <em>socket</em>.</p>

<p>Todo en Vault está basado en <em>paths</em>. Las <a href="(https://www.vaultproject.io/docs/concepts/policies.html)"><em>policies</em></a> permiten o deniegan el acceso a ciertos <em>paths</em>.  Poseen la siguiente sintaxis, donde las <em>capabilities</em> son las operaciones CRUD permitidas.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">path &#34;secret/*&#34; {
  capabilities = [&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;delete&#34;, &#34;list&#34;]
}</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/policy.hcl" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/policy.hcl" target="_blank">policy.hcl</a>
    </div>
</div>

<h3 id="instalación-y-un-caso-de-uso">Instalación y un caso de uso</h3>

<p>La <a href="https://www.vaultproject.io/docs/install/index.html">instalación de Vault</a> es muy sencilla ya que es un único binario sin más dependencias. En una distribución <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> estará en los repositorios oficiales. En <a href="https://www.archlinux.org/">Arch Linux</a> se instala con el comando.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo pacman -S vault</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/install.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/install.sh" target="_blank">install.sh</a>
    </div>
</div>

<p>En el siguiente ejemplo en modo desarrollo de uso de Vault se inicia, se realiza la autenticación con el <em>token</em> <em>root</em> de superusuario y se crea un secreto. Aquí solo se muestra el caso de uso de guardar y recuperar secretos, otros son generar credenciales para conectarse a una base de datos y proporcionar cifrado y descifrado como servicio.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vault server -dev
<span class="o">=</span><span class="o">=</span>&gt; Vault server configuration:

             Api Address: http://127.0.0.1:8200
                     Cgo: disabled
         Cluster Address: https://127.0.0.1:8201
              Listener 1: tcp <span class="o">(</span>addr: <span class="s2">&#34;127.0.0.1:8200&#34;</span>, cluster address: <span class="s2">&#34;127.0.0.1:8201&#34;</span>, max_request_duration: <span class="s2">&#34;1m30s&#34;</span>, max_request_size: <span class="s2">&#34;33554432&#34;</span>, tls: <span class="s2">&#34;disabled&#34;</span><span class="o">)</span>
               Log Level: info
                   Mlock: supported: true, enabled: <span class="nb">false</span>
                 Storage: inmem
                 Version: Vault v1.1.1
             Version Sha: a3dcd63451cf6da1d04928b601bbe9748d53842e

WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to <span class="nb">set</span> the following environment variable:

    $ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://127.0.0.1:8200&#39;</span>

The unseal key and root token are displayed below in <span class="k">case</span> you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: <span class="nv">R6MKrMxcJtTTUuIjeQjwDxnv4sHbKtjmuRn0Fok98zk</span><span class="o">=</span>
Root Token: s.hQoeIivTHHgl1AtsoVz1UF1G

Development mode should NOT be used in production installations!</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/vault.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/vault.sh" target="_blank">vault.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://127.0.0.1:8200&#39;</span>
$ vault kv put secret/key <span class="nv">key</span><span class="o">=</span>s3cr3t
Key              Value
---              -----
created_time     2019-07-27T17:30:29.559274833Z
deletion_time    n/a
destroyed        <span class="nb">false</span>
version          <span class="m">1</span>
$ vault kv get secret/key
<span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span> <span class="nv">Metadata</span> <span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span><span class="o">=</span>
Key              Value
---              -----
created_time     2019-07-27T17:30:29.559274833Z
deletion_time    n/a
destroyed        <span class="nb">false</span>
version          <span class="nv">1</span>

<span class="o">=</span><span class="o">=</span><span class="o">=</span> <span class="nv">Data</span> <span class="o">=</span><span class="o">=</span><span class="o">=</span>
Key    Value
---    -----
key    s3cr3t</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/secret.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/code/secret.sh" target="_blank">secret.sh</a>
    </div>
</div>

<p>Vault al igual que otras de las herramientas de <a href="https://www.hashicorp.com/">HashiCorp</a> como Consul y <a href="https://www.nomadproject.io/">Nomad</a> posee una interfaz gráfica accesible mediante el navegador que permite realizar las mismas operaciones que a través de la API o desde la linea de comandos.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  













<figure>
  
  <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/images/vault-ui-1_hu835606e7b9de313fbe556011bb61b531_35945_2560x1440_fit_box_2.png" title="Interfaz gráfica de Vault" data-gallery="data-gallery"><img src="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/images/vault-ui-1_hu835606e7b9de313fbe556011bb61b531_35945_300x200_fit_box_2.png" width="300"/></a>
  
  
  <a href="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/images/vault-ui-2_hu643c4f275edb6aabb6ede21353b42f5b_36609_2560x1440_fit_box_2.png" title="" data-gallery="data-gallery"><img src="/blog-bitix/2019/07/administrar-secretos-y-proteger-datos-sensibles-con-vault/images/vault-ui-2_hu643c4f275edb6aabb6ede21353b42f5b_36609_300x200_fit_box_2.png" width="300"/></a>
  
  
  
  <figcaption>Interfaz gráfica de Vault</figcaption>
  
</figure>


</div>

<p>Vault a igual que otras de las herramientas de HashiCorp tiene una muy buena documentación en formato de <a href="https://learn.hashicorp.com/vault">guía</a> y en formato de <a href="https://www.vaultproject.io/docs/">documentación</a>. En una aplicación Java el proyecto <a href="https://spring.io/">Spring</a> facilita su uso con <a href="https://projects.spring.io/spring-vault/">Spring Vault</a> y <a href="https://cloud.spring.io/spring-cloud-vault/">Spring Cloud Vault</a>.</p>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://www.baeldung.com/vault">An Intro to Vault</a></li>
</ul>

</div>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/</id><title>Registro y descubrimiento de servicios en contenedores de Docker con Consul y Registrator</title><updated>2019-05-26T11:30:00+02:00</updated><published>2019-05-26T11:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>En los microservicios se hace necesario un servicio de registro y descubrimiento como Eureka o Consul que permita conocer la ubicación de las instancias en cada momento. Las instancias de los servicios se pueden registrar ellas mismas o esta tarea se puede delegar en una en otro servicio. Al usar contenedores de Docker una herramienta que permite delegar el registro y desregistro en Consul de los servicios es GliderLabs Registrator.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/consul.svg" class="right " width="200" alt="Consul" title="Consul"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/docker.svg" class="right " width="200" alt="Docker" title="Docker"/>
</div>

<p>El registro y descubrimiento de servicios permite a los servicios registrase y a los clientes descubrir la ubicación de otros servicios, la ubicación consiste en la dirección IP y el puerto en el que contactarles. Dado la naturaleza efímera de los servicios donde nuevas instancias de servicios se inician y se detienen en diferentes máquinas y puertos el servicio de descubrimiento es esencial.</p>

<p>La funcionalidad de registro y descubrimiento consiste en dos partes, por un lado cuando se inicia una instancia de un servicio se registra su ubicación en el servicio de registro y descubrimiento y por otro lado los clientes cuando requieren una instancia de un servicio la buscan en el servicio de descubrimiento.</p>

<p>El registro en el servicio de descubrimiento puede hacerse de dos formas, que sea el propio servicio el que se registra en el servicio de descubrimiento o que se sea otro servicio el que lo registra. Para el primer caso escribí un artículo con <a href="https://www.consul.io/">Consul</a> como servicio de descubrimiento en una aplicación de <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> que se registra al iniciarse. La ventaja es que es autosuficiente pero adquiere la tarea de autoregistrarse. Por el contrario delegar la trea de registro permite extraerla de los servicios y ofrecer esa funcionalidad por un servicio con esa misión específicamente.</p>

<ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/">Registro y descubrimiento de servicios con Spring Cloud y Consul</a></li>
</ul>

<p>En este artículo se usa <a href="https://github.com/gliderlabs/registrator">GliderLabs Registrator</a> como servicio que se encarga de registrar en un servicio de descubrimiento como Consul los servicios que se inicien en <a href="https://www.docker.com/">Docker</a>, aunque soporta otros como <a href="https://etcd.io/">etcd</a>.</p>

<p>Registrator es un contenedor de Docker, su funcionamiento es escuchar los eventos del demonio de Docker y monitorizar cuando se inician nuevos contenedores o cuando se paran. La monitorización la hace a través del <em>socket</em> del servicio de Docker, para lo que hay que montar un volumen en este contenedor con el archivo <em>/var/run/docker.sock</em> del <em>host</em>.</p>

<p>Primero se inicia el servicio de Consul.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/consul.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/consul.sh" target="_blank">consul.sh</a>
    </div>
</div>

<p>Luego se inicia el contenedor Registrator indicando la ubicación con dirección IP y puerto del servicio de Consul.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run --rm --name<span class="o">=</span>registrator --net<span class="o">=</span>host --volume<span class="o">=</span>/var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator:latest consul://localhost:8500
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-registrator.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-registrator.sh" target="_blank">docker-registrator.sh</a>
    </div>
</div>

<p>Iniciados estos dos servicios en la interfaz de estado de Consul se observa que no hay ningún servicio pero cuando se inicie un nuevo contenedor será registrado en Consul por Registrator.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  















<figure>
  
  <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul_hudf2f8b03877264bacf83a564e5686ede_36482_2560x1440_fit_box_2.png" title="Dirección" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul_hudf2f8b03877264bacf83a564e5686ede_36482_300x200_fit_box_2.png" width="287"/></a>
  
  
  
  
</figure>


</div>

<p>En este caso se utiliza como servicio una base de datos <a href="https://www.postgresql.org/">PostgreSQL</a>. Dado que el puerto en el que esté disponible el servicio de PostgreSQL es indiferente al utilizar un servicio de registro y descubrimiento se indica el <em>-p</em> sin indicar el puerto del <em>host</em>, de este modo Docker le asigna un puerto público aleatorio.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run --rm --name postgres -e <span class="nv">POSTGRES_USER</span><span class="o">=</span>user -e <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span>password -e <span class="nv">POSTGRES_DB</span><span class="o">=</span>database -p <span class="m">5432</span> postgres:alpine
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-postgres.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-postgres.sh" target="_blank">docker-postgres.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE                           COMMAND                  CREATED              STATUS              PORTS                     NAMES
cb7602605725        postgres:alpine                 <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">54</span> seconds ago       Up <span class="m">53</span> seconds       0.0.0.0:32777-&gt;5432/tcp   postgres
d286341148cb        gliderlabs/registrator:latest   <span class="s2">&#34;/bin/registrator co…&#34;</span>   About a minute ago   Up About a minute                             registrator</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-ps.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-ps.sh" target="_blank">docker-ps.sh</a>
    </div>
</div>

<p>En la salida del contenedor de Registrator se emite una traza indicando que el servicio de postgres ha sido registrado en Consul.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">2019/05/26 11:05:29 Starting registrator v7 ...
2019/05/26 11:05:29 Using consul adapter: consul://localhost:8500
2019/05/26 11:05:29 Connecting to backend (0/0)
2019/05/26 11:05:29 consul: current leader  127.0.0.1:8300
2019/05/26 11:05:29 Listening for Docker events ...
2019/05/26 11:05:29 Syncing services on 1 containers
2019/05/26 11:05:29 ignored: d286341148cb no published ports
2019/05/26 11:05:50 added: cb7602605725 archlinux:postgres:5432</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-registrator.out" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-registrator.out" target="_blank">docker-registrator.out</a>
    </div>
</div>

<p>Una vez iniciado el servicio de postgres en la consola de Consul se muestra con su dirección y puerto en el que se encuentra, en el contenedor utiliza su puerto por defecto <em>5432</em> pero hacia el exterior en este caso al no haber especificado uno Docker le asigna un puerto aleatorio en este caso el <em>32777</em>. Este puerto aleatorio es con el que los clientes acceden a la base de datos.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  













<figure>
  
  <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul-postgres-1_hu5336dadbc35299bcca8969f84d373cf0_39850_2560x1440_fit_box_2.png" title="Servicio de postgres registrado en Consul" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul-postgres-1_hu5336dadbc35299bcca8969f84d373cf0_39850_300x200_fit_box_2.png" width="300"/></a>
  
  
  <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul-postgres-2_huf0df6f6a3d2138a93d9a38f4927788b0_43545_2560x1440_fit_box_2.png" title="Servicio de postgres registrado en Consul" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/images/consul-postgres-2_huf0df6f6a3d2138a93d9a38f4927788b0_43545_300x200_fit_box_2.png" width="300"/></a>
  
  
  
  <figcaption>Servicio de postgres registrado en Consul por Registrator</figcaption>
  
</figure>


</div>

<p>En vez de iniciar los servicios individualmente con comandos de Docker creando un archivo de <a href="https://docs.docker.com/compose/">Docker Compose</a> con la definición de todos los contenedores se facilita iniciar todos los contenedores con un comando.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker-compose up</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-compose-up.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-compose-up.sh" target="_blank">docker-compose-up.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-YAML" data-lang="YAML">version<span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.7&#34;</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>consul<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>consul<span class="p">:</span>latest<span class="w">
</span><span class="w">    </span>container_name<span class="p">:</span><span class="w"> </span>consul<span class="w">
</span><span class="w">    </span>network_mode<span class="p">:</span><span class="w"> </span><span class="s2">&#34;host&#34;</span><span class="w">
</span><span class="w">    </span>command<span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;consul&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;agent&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-dev&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;-ui&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span>registrator<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>gliderlabs/registrator<span class="p">:</span>latest<span class="w">
</span><span class="w">    </span>container_name<span class="p">:</span><span class="w"> </span>registrator<span class="w">
</span><span class="w">    </span>network_mode<span class="p">:</span><span class="w"> </span><span class="s2">&#34;host&#34;</span><span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>/var/run/docker.sock<span class="p">:</span>/tmp/docker.sock<span class="w">
</span><span class="w">    </span>entrypoint<span class="p">:</span><span class="w"> </span>/bin/registrator<span class="w"> </span>consul<span class="p">:</span>//localhost<span class="p">:</span><span class="m">8500</span><span class="w">
</span><span class="w">    </span>depends_on<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>consul<span class="w">
</span><span class="w">  </span>postgres<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>postgres<span class="p">:</span>alpine<span class="w">
</span><span class="w">    </span>container_name<span class="p">:</span><span class="w"> </span>postgres<span class="w">
</span><span class="w">    </span>ports<span class="p">:</span><span class="w">
</span><span class="w">        </span>-<span class="w"> </span><span class="s2">&#34;5432&#34;</span><span class="w">
</span><span class="w">    </span>environment<span class="p">:</span><span class="w">
</span><span class="w">        </span>-<span class="w"> </span>POSTGRES_USER=user<span class="w">
</span><span class="w">        </span>-<span class="w"> </span>POSTGRES_PASSWORD=password<span class="w">
</span><span class="w">        </span>-<span class="w"> </span>POSTGRES_DB=database<span class="w">
</span><span class="w">    </span>depends_on<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>registrator</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-compose.yml" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/registro-y-descubrimiento-de-servicios-en-contenedores-de-docker-con-consul-y-registrator/code/docker-compose.yml" target="_blank">docker-compose.yml</a>
    </div>
</div>

<p>El proyecto de <a href="https://projects.spring.io/spring-cloud/">Spring Cloud</a> ofrece soporte para ambas tareas de registrar y descubrir servicios, aunque perfectamente la tarea de registro se puede delegar como en este caso a Registrator y utilizar en los servicios de Spring Boot únicamente la parte de descubrimiento.</p>

<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Registrator">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>./docker-compose-up.sh</code>. 
</p>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/</id><title>Crear de forma sencilla y rápida máquinas virtuales de VirtualBox con Vagrant</title><updated>2019-05-10T17:00:00+02:00</updated><published>2019-05-10T17:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/vagrant.svg" class="right " width="200" alt="Vagrant" title="Vagrant"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/hashicorp.svg" class="right " width="200" alt="HashiCorp" title="HashiCorp"/>
</div>

<p><a href="https://www.virtualbox.org/">VirtualBox</a> es una de las herramientas que permiten virtualizar un sistema operativo completo y sus aplicaciones dentro de otra máquina. Como es un sistema operativo completo requiere que el sistema que la alberga tenga RAM suficiente para sí mismo y RAM suficiente para el sistema virtualizado, se puede configurar la cantidad de RAM y almacenamiento persistente de la máquina virtual. En el proceso de virtualización se pierde algo de rendimiento por la sobrecarga que añade virtualizar un sistema operativo completo, los procesadores modernos ofrecen soporte para que el rendimiento sea lo mayor posible pero no es igual a ejecutar el sistema de forma nativa en el sistema, sobre todo en el aspecto de interfaces gráficas y aceleración 2D y 3D.</p>

<p>La virtualización es una buena forma de probar una distribución <a href="https://www.gnu.org/">GNU</a>/<a href="https://www.linux.com/">Linux</a> para evaluarla o ejecutar <a href="https://www.microsoft.com/es-es/windows/">Windows</a> en un Linux. Hay otras herramientas de virtualización como <a href="https://www.qemu.org/">QEMU</a> y <a href="https://www.linux-kvm.org/page/Main_Page">KVM</a> pero la virtud de VirtualBox es que es muy sencilla y está disponible para Windows, GNU/Linux y <a href="https://www.apple.com/macos/">macOS</a>.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  















<figure>
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/virtualbox_hu714198bdeca98f2fa85206e0a2e30ff9_109657_2560x1440_fit_box_2.png" title="VirtualBox" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/virtualbox_hu714198bdeca98f2fa85206e0a2e30ff9_109657_300x200_fit_box_2.png" width="300"/></a>
  
  
  
  
  <figcaption>VirtualBox</figcaption>
  
</figure>


</div>

<p>Para tener una máquina virtual el proceso se puede hacer desde el principio desde el medio de instalación ofrecido siguiendo los de su instalador. Pero para hacer alguna prueba de desarrollo y si se necesitan virtualizar varias máquinas el proceso manual es incómodo además de repetitivo. <a href="https://www.vagrantup.com/">Vagrant</a> es una de las herramientas ofrecidas por <a href="https://www.hashicorp.com/">HashiCorp</a> que permite automatizar la creación y aprovisionamiento de máquinas virtuales en VirtualBox mediante la especificación de un archivo de configuración. Permite replicar entornos y crear un cluster de máquinas que resulta muy útil al desarrollar o probar cierto software.</p>

<p>En este ejemplo se configura una máquina virtual usando como sistema operativo base Ubuntu 18.04, y se aprovisiona configurando ella <a href="https://www.docker.com/">Docker</a>. El aprovisionamiento se realiza mediante una serie de comandos y archivos que se añaden del <em>host</em> al sistema virtualizado tal como se hace en un sistema Ubuntu desde su estado de instalación inicial. Entre las opciones de configuración permitidas están el nombre de la máquina virtual, su sistema operativo, la cantidad de memoria que se le asigna, propiedades de red, asignar direcciones IP estáticas, &hellip;</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="err">#</span> <span class="o">-</span><span class="o">*</span><span class="o">-</span> <span class="n">mode</span><span class="o">:</span> <span class="n">ruby</span> <span class="o">-</span><span class="o">*</span><span class="o">-</span>
<span class="err">#</span> <span class="n">vi</span><span class="o">:</span> <span class="n">set</span> <span class="n">ft</span><span class="o">=</span><span class="n">ruby</span> <span class="o">:</span>

<span class="n">Vagrant</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>

  <span class="n">config</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">define</span> <span class="s">&#34;ubuntu-docker&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">instance</span><span class="o">|</span>
    <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">box</span> <span class="o">=</span> <span class="s">&#34;ubuntu/bionic64&#34;</span>

    <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">provider</span> <span class="o">:</span><span class="n">virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
      <span class="n">vb</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&#34;Ubuntu Docker (Vagrant)&#34;</span>
    <span class="n">end</span>

    <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">network</span> <span class="s">&#34;private_network&#34;</span><span class="o">,</span> <span class="n">ip</span><span class="o">:</span> <span class="s">&#34;192.168.33.10&#34;</span>

    <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">provider</span> <span class="s">&#34;virtualbox&#34;</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
      <span class="n">vb</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="s">&#34;1024&#34;</span>

      <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">provision</span> <span class="s">&#34;file&#34;</span><span class="o">,</span> <span class="n">source</span><span class="o">:</span> <span class="s">&#34;docker-compose.yml&#34;</span><span class="o">,</span> <span class="n">destination</span><span class="o">:</span> <span class="s">&#34;/home/vagrant/docker-compose.yml&#34;</span>
      <span class="n">instance</span><span class="o">.</span><span class="na">vm</span><span class="o">.</span><span class="na">provision</span> <span class="s">&#34;shell&#34;</span><span class="o">,</span> <span class="n">inline</span><span class="o">:</span> <span class="n">$docker_role_script</span>
    <span class="n">end</span>
  <span class="n">end</span>

  <span class="n">$docker_role_script</span> <span class="o">=</span> <span class="o">&lt;</span><span class="o">&lt;</span><span class="o">-</span><span class="n">SCRIPT</span>
    <span class="n">echo</span> <span class="s">&#34;Updating...&#34;</span>
    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>

    <span class="n">echo</span> <span class="s">&#34;Installing docker...&#34;</span>
    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">apt</span><span class="o">-</span><span class="n">transport</span><span class="o">-</span><span class="n">https</span> <span class="n">ca</span><span class="o">-</span><span class="n">certificates</span> <span class="n">curl</span> <span class="n">gnupg</span><span class="o">-</span><span class="n">agent</span> <span class="n">software</span><span class="o">-</span><span class="n">properties</span><span class="o">-</span><span class="n">common</span>
    <span class="n">curl</span> <span class="o">-</span><span class="n">fsSL</span> <span class="n">https</span><span class="o">:</span><span class="c1">//download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</span><span class="c1"></span>    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">fingerprint</span> <span class="n">0EBFCD88</span>
    <span class="n">sudo</span> <span class="n">add</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">repository</span> <span class="s">&#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&#34;</span>

    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
    <span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="o">-</span><span class="n">y</span> <span class="n">docker</span><span class="o">-</span><span class="n">ce</span> <span class="n">docker</span><span class="o">-</span><span class="n">ce</span><span class="o">-</span><span class="n">cli</span> <span class="n">containerd</span><span class="o">.</span><span class="na">io</span>
    <span class="n">sudo</span> <span class="n">usermod</span> <span class="o">-</span><span class="n">aG</span> <span class="n">docker</span> <span class="n">vagrant</span>

    <span class="n">sudo</span> <span class="n">curl</span> <span class="o">-</span><span class="n">L</span> <span class="s">&#34;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&#34;</span> <span class="o">-</span><span class="n">o</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span>
    <span class="n">sudo</span> <span class="n">chmod</span> <span class="o">+</span><span class="n">x</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">docker</span><span class="o">-</span><span class="n">compose</span>

    <span class="n">echo</span> <span class="s">&#34;Starting Docker service...&#34;</span>
    <span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">daemon</span><span class="o">-</span><span class="n">reload</span>
    <span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">enable</span> <span class="n">docker</span><span class="o">.</span><span class="na">service</span>
    <span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">start</span> <span class="n">docker</span><span class="o">.</span><span class="na">service</span>
  <span class="n">SCRIPT</span>
<span class="n">end</span>
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/Vagrantfile" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/Vagrantfile" target="_blank">Vagrantfile</a>
    </div>
</div>

<p>Se puede crear un archivo inicia con comentarios para empezar a configurar la máquina virtual.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vagrant init ubuntu/bionic64
 </code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-init.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-init.sh" target="_blank">vagrant-init.sh</a>
    </div>
</div>

<p>Definido el archivo de configuración para Vagrant se inician las máquina virtual con un comando. Y se detienen con otro. Si hay necesidad en el mismo archivo se pueden definir varias máquinas virtuales.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vagrant up
$ vagrant halt</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-up.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-up.sh" target="_blank">vagrant-up.sh</a>
    </div>
</div>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  















<figure>
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/virtualbox-vagrant-vm_hu714198bdeca98f2fa85206e0a2e30ff9_116254_2560x1440_fit_box_2.png" title="VirtualBox Vagrant VM" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/virtualbox-vagrant-vm_hu714198bdeca98f2fa85206e0a2e30ff9_116254_300x200_fit_box_2.png" width="300"/></a>
  
  
  
  
  <figcaption>VirtualBox Vagrant VM</figcaption>
  
</figure>


</div>

<p>Una vez iniciada la máquina virtual Vagrant configura SSH para tener acceso a su terminal, hay que especificar el nombre de la máquina virtual.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ vagrant ssh ubuntu-docker
 </code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-ssh.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/code/vagrant-ssh.sh" target="_blank">vagrant-ssh.sh</a>
    </div>
</div>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  















<figure>
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/vagrant-ssh_huf84e0a9edfdc6e443883ef5a755439df_64066_2560x1440_fit_box_2.png" title="Vagrant SSH" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/vagrant-ssh_huf84e0a9edfdc6e443883ef5a755439df_64066_300x200_fit_box_2.png" width="244"/></a>
  
  
  
  
  <figcaption>Vagrant SSH</figcaption>
  
</figure>


</div>

<p>La máquina en el ejemplo ha sido aprovisionada con Docker mediante un <em>script</em> con los comandos para instalarlo y un archivo de <a href="https://docs.docker.com/compose/">Docker Compose</a> con un servicio del servidor web <a href="https://nginx.org/">nginx</a>. Desde la terminal de la máquina virtual se inicia el servicio con Docker que queda accesible tanto desde la pripia máquina virtual como desde el <em>host</em> indicando la dirección IP que se le ha asignado.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  











<figure>
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/docker-compose-up_huee84648a7050cd57115fd67bb683562f_66997_2560x1440_fit_box_2.png" title="docker-compose up y curl (desde la MV)" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/docker-compose-up_huee84648a7050cd57115fd67bb683562f_66997_300x200_fit_box_2.png" width="281"/></a>
  
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/curl_hu26f710045e8e9b42060c9d2ccd60a851_58845_2560x1440_fit_box_2.png" title="curl (desde el host)" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/curl_hu26f710045e8e9b42060c9d2ccd60a851_58845_300x200_fit_box_2.png" width="244"/></a>
  
  
  <a href="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/firefox_hue938310a76fc8e72c31d7b54d72579d5_35132_2560x1440_fit_box_2.png" title="Página devuelta por nginx" data-gallery="data-gallery"><img src="/blog-bitix/2019/05/crear-de-forma-sencilla-y-rapida-maquinas-virtuales-de-virtualbox-con-vagrant/images/firefox_hue938310a76fc8e72c31d7b54d72579d5_35132_300x200_fit_box_2.png" width="300"/></a>
  
  
  <figcaption>docker-compose up y curl desde la MV y desde el host</figcaption>
  
</figure>


</div>

<p>Vagrant tiene un <a href="https://app.vagrantup.com/boxes/search">repositorio de imágenes</a> entre las que elegir para el sistema, están las más populares como <a href="https://www.ubuntu.com/">Ubuntu</a>, <a href="https://fedoraproject.org/">Fedora</a>, <a href="https://www.debian.org/">Debian</a> y <a href="https://www.centos.org/">CentOS</a>. Es un repositorio en donde los usuarios pueden subir sus propias imágenes aunque por defecto es mejor usar las oficiales de cada sistema.</p>

<p>Posee varias <a href="https://www.vagrantup.com/docs/index.html">páginas de documentación</a> bastante completas donde conocer los todos los detalles de uso de Vagrant.</p>

<ul>
<li><a href="https://www.vagrantup.com/docs/vagrantfile/">Vagrantfile</a></li>
<li><a href="https://www.vagrantup.com/docs/cli/">Commands</a></li>
<li><a href="https://www.vagrantup.com/docs/networking/">Networking</a></li>
<li><a href="https://www.vagrantup.com/docs/provisioning/">Provisioning</a></li>
<li><a href="https://www.vagrantup.com/docs/multi-machine/">Multi-machine</a></li>
<li><a href="https://www.vagrantup.com/docs/providers/">Providers</a></li>
<li><a href="https://www.vagrantup.com/docs/synced-folders/">Synced folders</a></li>
</ul>

<p>
    El <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Vagrant">código fuente completo del ejemplo</a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en <a href="https://github.com/">GitHub</a> y probarlo en tu equipo ejecutando el comando <code>vagrant up</code>. 
</p>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/</id><title>Servicios con persistencia en el orquestador de microservicos Nomad</title><updated>2019-04-26T20:00:00+02:00</updated><published>2019-04-26T19:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Los servicios que necesitan almacenar datos como las bases de datos o un sistema de archivos tienen más restricciones que los servicios sin estado por la necesidad de tener acceso a esos datos. Esto hace que los contenedores puedan no tener tantan libertad para iniciarse en cualquier nodo. En Nomad una estategia es imponer ciertas restricciones a los servicios que almacenen estado para que solo se puedan iniciar en el nodo que donde estén almacenados.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/nomad.svg" class="right " width="200" alt="Nomad" title="Nomad"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/hashicorp.svg" class="right " width="200" alt="HashiCorp" title="HashiCorp"/>
</div>

<p>Algunos servicios no necesitan almacenar ningún estado porque no lo necesitan o porque el estado se mantiene en otro servicio. Que un servicio no necesite mantener estado es bueno porque de esta manera el servicio se puede escalar al número de instancias adecuadas para prestar el servicio, también porque si falla una instancia la petición puede ser reenviada a otra instancia, una instancia que falla puede ser reemplazada sin problema en otro <em>host</em>. Sin embargo, hay otro tipo de instancias que si almacenan estado como las bases de datos ya sea <a href="https://www.postgresql.org/">PostgreSQL</a>, <a href="https://www.mysql.com/">MySQL</a>, <a href="https://redis.io/">Redis</a>, <a href="https://www.mongodb.com/">MongoDB</a>, otra o simplemente archivos en el sistema de archivos.</p>

<p>Las instancias que tienen estado no son tan fáciles de reemplazar dado que los datos son necesarios para su funcionamiento, una instancia de un servicio con estado como no puede iniciarse en otro nodo libremente solo se puede iniciar en el nodo que contenga los datos. Eso o cuando el servicio se inicia en otro nodo los datos son trasladados o por algún mechanismo transparente a los servicios están disponibles en el nuevo nodo.</p>

<p>En <a href="https://docs.docker.com/swarm/">Docker Swarm</a> ciertos <em>drivers</em> de volúmenes pueden proporcionar volúmenes accesibles desde cualquier <em>host</em> del <em>cluster</em> pero por defecto <em>Swarm</em> no lo ofrece. En <a href="https://kubernetes.io/">Kubernetes</a> los volúmenes pueden ser dispositivos de almacenamiento provenientes de <a href="https://aws.amazon.com/es/ebs/">EBS</a> de modo que si un <em>pod</em> es movido a otro <em>host</em> basta con que el <em>pod</em> sea conectado de nuevo al EBS anterior y los datos están accesibles en el nuevo nodo.</p>

<p><a href="https://www.nomadproject.io/">Nomad</a> no proporciona soporte para que el almacenamiento persistente sea migrado a un nuevo nodo de Nomad si el servicio cambiado de ubicación. Para solventar esta limitación en el caso de los servicios con estado estos pueden ser tratados en cierta forma como animales de compañía o <em>pets</em> haciendo que siempre se ubiquen en el mismo nodo, una vez tiene siempre la misma ubicación basta con proporcionar el almacenamiento en el <em>host</em> ya sea en su sistema de archivos o para externalizarlo montando un almacenamiento <em>EBS</em>.</p>

<p>Para conseguir que un <em>job</em> de Nomad se ubique siempre en un mismo nodo hay que usar <a href="https://www.nomadproject.io/docs/job-specification/constraint.html">restricciones o <em>costraints</em> en la especificación del <em>job</em></a>. Las restricciones son las reglas que utiliza Nomad para elegir como candidatos los posibles nodos en los que ubicar el <em>job</em>, <em>task group</em> o <em>task</em>. Se pueden utilizar varios operadores entre los que está el de igualdad utilizado en el ejemplo. Una de las variables utilizables es el identificativo del nodo de Nomad, con él es posible conseguir que el <em>job</em> se ubique siempre en el mismo nodo. Los identificativos de los nodos son asignados por Nomad cuando se unen al <em>cluster</em>.</p>

<p>Con los siguientes comandos se inspecciona los nodos que forman parte del cluster de Nomad, entre sus datos está el identificativo de cada nodo formado por una cadena de 36 caracteres. En el modo verboso se emite el identificativo completo y una lista de propiedades del nodo entre los que están detalles de Consul, la CPU, <em>driver</em> que soporta, kernel, sistema operativo, &hellip; En documentación sobre <a href="https://www.nomadproject.io/docs/runtime/interpolation.html">interpolación de variables</a> hay una lista de variables disponibles.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad node status
ID        DC         Name       Class   Drain  Eligibility  Status
44511e01  localhost  archlinux  &lt;none&gt;  <span class="nb">false</span>  eligible     ready

$ nomad node status 44511e01
<span class="nv">ID</span>            <span class="o">=</span> 44511e01
<span class="nv">Name</span>          <span class="o">=</span> archlinux
<span class="nv">Class</span>         <span class="o">=</span> &lt;none&gt;
<span class="nv">DC</span>            <span class="o">=</span> localhost
<span class="nv">Drain</span>         <span class="o">=</span> <span class="nb">false</span>
<span class="nv">Eligibility</span>   <span class="o">=</span> eligible
<span class="nv">Status</span>        <span class="o">=</span> ready
<span class="nv">Uptime</span>        <span class="o">=</span> 1h40m31s
Driver <span class="nv">Status</span> <span class="o">=</span> docker,exec,java,qemu,raw_exec

Node Events
Time                       Subsystem  Message
2019-04-26T17:57:41+02:00  Cluster    Node registered

Allocated Resources
CPU          Memory      Disk
0/30400 MHz  <span class="m">0</span> B/31 GiB  <span class="m">0</span> B/16 GiB

Allocation Resource Utilization
CPU          Memory
0/30400 MHz  <span class="m">0</span> B/31 GiB

Host Resource Utilization
CPU             Memory          Disk
3288/30400 MHz  5.2 GiB/31 GiB  <span class="o">(</span>tmpfs<span class="o">)</span>

Allocations
No allocations placed

$ nomad node status -verbose 44511e01
<span class="nv">ID</span>          <span class="o">=</span> 44511e01-34b8-c1e6-7fe5-60be0ff35d0e
<span class="nv">Name</span>        <span class="o">=</span> archlinux
<span class="nv">Class</span>       <span class="o">=</span> &lt;none&gt;
<span class="nv">DC</span>          <span class="o">=</span> localhost
<span class="nv">Drain</span>       <span class="o">=</span> <span class="nb">false</span>
<span class="nv">Eligibility</span> <span class="o">=</span> eligible
<span class="nv">Status</span>      <span class="o">=</span> ready
<span class="nv">Uptime</span>      <span class="o">=</span> 1h44m39s

Drivers
Driver    Detected  Healthy  Message                                                                         Time
docker    <span class="nb">true</span>      <span class="nb">true</span>     Healthy                                                                         2019-04-26T17:57:41+02:00
<span class="nb">exec</span>      <span class="nb">true</span>      <span class="nb">true</span>     Healthy                                                                         2019-04-26T17:57:41+02:00
java      <span class="nb">true</span>      <span class="nb">true</span>     Healthy                                                                         2019-04-26T17:57:41+02:00
qemu      <span class="nb">true</span>      <span class="nb">true</span>     Healthy                                                                         2019-04-26T17:57:41+02:00
raw_exec  <span class="nb">true</span>      <span class="nb">true</span>     Healthy                                                                         2019-04-26T17:57:41+02:00
rkt       <span class="nb">false</span>     <span class="nb">false</span>    Failed to execute rkt version: exec: <span class="s2">&#34;rkt&#34;</span>: executable file not found in <span class="nv">$PATH</span>  2019-04-26T17:57:41+02:00

Node Events
Time                       Subsystem  Message          Details
2019-04-26T17:57:41+02:00  Cluster    Node registered  &lt;none&gt;

Allocated Resources
CPU            Memory          Disk
100/30400 MHz  1.0 GiB/31 GiB  <span class="m">300</span> MiB/16 GiB

Allocation Resource Utilization
CPU           Memory
19/30400 MHz  <span class="m">38</span> MiB/31 GiB

Host Resource Utilization
CPU             Memory          Disk
4564/30400 MHz  5.5 GiB/31 GiB  <span class="o">(</span>tmpfs<span class="o">)</span>

Allocations
ID                                    Eval ID                               Node ID                               Task Group  Version  Desired  Status   Created                    Modified
cd45371d-501a-1373-dfde-bb16c4ff20d3  ab9f5675-b5cb-9e5f-8e20-cb308dbfba32  44511e01-34b8-c1e6-7fe5-60be0ff35d0e  services    <span class="m">3</span>        run      running  2019-04-26T18:14:28+02:00  2019-04-26T18:16:32+02:00

Attributes
consul.datacenter             <span class="o">=</span> localhost
consul.revision               <span class="o">=</span> ea5210a30
consul.server                 <span class="o">=</span> <span class="nb">true</span>
consul.version                <span class="o">=</span> 1.4.4
cpu.arch                      <span class="o">=</span> amd64
cpu.frequency                 <span class="o">=</span> <span class="m">3800</span>
cpu.modelname                 <span class="o">=</span> Intel<span class="o">(</span>R<span class="o">)</span> Core<span class="o">(</span>TM<span class="o">)</span> i5-8259U CPU @ 2.30GHz
cpu.numcores                  <span class="o">=</span> <span class="m">8</span>
cpu.totalcompute              <span class="o">=</span> <span class="m">30400</span>
driver.docker                 <span class="o">=</span> <span class="m">1</span>
driver.docker.bridge_ip       <span class="o">=</span> 172.17.0.1
driver.docker.os_type         <span class="o">=</span> linux
driver.docker.runtimes        <span class="o">=</span> runc
driver.docker.version         <span class="o">=</span> 18.09.4-ce
driver.docker.volumes.enabled <span class="o">=</span> <span class="nb">true</span>
driver.exec                   <span class="o">=</span> <span class="m">1</span>
driver.java                   <span class="o">=</span> <span class="m">1</span>
driver.java.runtime           <span class="o">=</span> OpenJDK Runtime Environment <span class="o">(</span>build 1.8.0_212-b01<span class="o">)</span>
driver.java.version           <span class="o">=</span> 1.8.0_212
driver.java.vm                <span class="o">=</span> OpenJDK 64-Bit Server VM <span class="o">(</span>build 25.212-b01, mixed mode<span class="o">)</span>
driver.qemu                   <span class="o">=</span> <span class="m">1</span>
driver.qemu.version           <span class="o">=</span> 3.1.0
driver.raw_exec               <span class="o">=</span> <span class="m">1</span>
kernel.name                   <span class="o">=</span> linux
kernel.version                <span class="o">=</span> 5.0.7-arch1-1-ARCH
memory.totalbytes             <span class="o">=</span> <span class="m">33592107008</span>
nomad.advertise.address       <span class="o">=</span> 127.0.0.1:4646
nomad.revision                <span class="o">=</span> 18dd59056ee1d7b2df51256fe900a98460d3d6b9
nomad.version                 <span class="o">=</span> 0.9.0
os.name                       <span class="o">=</span> arch
os.signals                    <span class="o">=</span> SIGQUIT,SIGTTOU,SIGFPE,SIGTRAP,SIGTSTP,SIGINT,SIGURG,SIGTTIN,SIGUSR1,SIGIO,SIGIOT,SIGKILL,SIGSTOP,SIGCONT,SIGILL,SIGPROF,SIGSEGV,SIGSYS,SIGTERM,SIGXFSZ,SIGHUP,SIGWINCH,SIGABRT,SIGBUS,SIGCHLD,SIGPIPE,SIGUSR2,SIGXCPU,SIGALRM
unique.cgroup.mountpoint      <span class="o">=</span> /sys/fs/cgroup
unique.consul.name            <span class="o">=</span> archlinux
unique.hostname               <span class="o">=</span> archlinux
unique.network.ip-address     <span class="o">=</span> 127.0.0.1
unique.storage.bytesfree      <span class="o">=</span> <span class="m">16795955200</span>
unique.storage.bytestotal     <span class="o">=</span> <span class="m">16796053504</span>
unique.storage.volume         <span class="o">=</span> tmpfs

Meta</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-status.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-status.sh" target="_blank">nomad-status.sh</a>
    </div>
</div>

<p>En este caso solo hay un nodo registrado en Nomad, la siguiente definición de <em>job</em> en el fragmento <em>constraint</em> hace que Nomad lo ubique siempre en él.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">job &#34;mongodb&#34; {
  datacenters = [&#34;localhost&#34;]

  type = &#34;service&#34;

  constraint {
    attribute = &#34;${node.unique.id}&#34;
    value     = &#34;44511e01-34b8-c1e6-7fe5-60be0ff35d0e&#34;
  }

  group &#34;services&#34; {
    count = 1

    task &#34;mongodb&#34; {
      driver = &#34;docker&#34;

      config {
        image = &#34;mongo:latest&#34;

        port_map {
          port = 27017
        }
        volumes = [
          &#34;/home/picodotdev/Software/nomad/mongodb:/data/db/&#34;
        ]
      }

      resources {
        memory = 1024 # MB

        network {
          port &#34;port&#34; {}
        }
      }
    }
  }
}
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/mongodb.nomad" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/mongodb.nomad" target="_blank">mongodb.nomad</a>
    </div>
</div>

<p>Como el <em>job</em> se ubica en el mismo nodo siempre montando un directorio del nodo como un volumen de datos en el <em>job</em> y contenedor de <a href="https://www.docker.com/">Docker</a>, los datos se persisten en el sistema de archivos y transcienden al tiempo de vida del <em>job</em>, se puede iniciar el <em>job</em>, insertar datos en la base de datos en este caso de MongoDB, eliminar el <em>job</em>, volverlo a iniciar y los mismos datos están presentes en MongoDB.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job run mongodb.nomad

</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-job-run.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-job-run.sh" target="_blank">nomad-job-run.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                    NAMES
b0d3f42c92fc        mongo:latest        <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">3</span> minutes ago       Up <span class="m">3</span> minutes        127.0.0.1:20180-&gt;27017/tcp, 127.0.0.1:20180-&gt;27017/udp   mongodb-ea10d440-1176-3bfb-5301-7ccd17af0281
$ docker <span class="nb">exec</span> -it b0d3f42c92fc bash
root@b0d3f42c92fc:/# mongo
MongoDB shell version v4.0.9
connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName<span class="o">=</span>mongodb
Implicit session: session <span class="o">{</span> <span class="s2">&#34;id&#34;</span> : UUID<span class="o">(</span><span class="s2">&#34;ba120679-b965-49d0-a774-dff39d6b630a&#34;</span><span class="o">)</span> <span class="o">}</span>
MongoDB server version: 4.0.9
Server has startup warnings: 
2019-04-26T16:47:49.308+0000 I STORAGE  <span class="o">[</span>initandlisten<span class="o">]</span> 
2019-04-26T16:47:49.308+0000 I STORAGE  <span class="o">[</span>initandlisten<span class="o">]</span> ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-04-26T16:47:49.308+0000 I STORAGE  <span class="o">[</span>initandlisten<span class="o">]</span> **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-04-26T16:47:50.133+0000 I CONTROL  <span class="o">[</span>initandlisten<span class="o">]</span> 
2019-04-26T16:47:50.133+0000 I CONTROL  <span class="o">[</span>initandlisten<span class="o">]</span> ** WARNING: Access control is not enabled <span class="k">for</span> the database.
2019-04-26T16:47:50.133+0000 I CONTROL  <span class="o">[</span>initandlisten<span class="o">]</span> **          Read and write access to data and configuration is unrestricted.
2019-04-26T16:47:50.133+0000 I CONTROL  <span class="o">[</span>initandlisten<span class="o">]</span> 
---
Enable MongoDB<span class="s1">&#39;s free cloud-based monitoring service, which will then receive and display
</span><span class="s1">metrics about your deployment (disk utilization, CPU, operation statistics, etc).
</span><span class="s1">
</span><span class="s1">The monitoring data will be available on a MongoDB website with a unique URL accessible to you
</span><span class="s1">and anyone you share the URL with. MongoDB may use this information to make product
</span><span class="s1">improvements and to suggest MongoDB products and deployment options to you.
</span><span class="s1">
</span><span class="s1">To enable free monitoring, run the following command: db.enableFreeMonitoring()
</span><span class="s1">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
</span><span class="s1">---
</span><span class="s1">
</span><span class="s1">&gt; db.articles.insert({title: &#34;Introducción a la base de datos NoSQL MongoDB&#34;, author: &#34;picodotdev&#34;, date: new Date(2017,05,18,12,30), tags: [&#39;</span>mongodb<span class="s1">&#39;, &#39;</span>database<span class="s1">&#39;, &#39;</span>NoSQL<span class="s1">&#39;], comments: [{user: &#34;jones&#34;, message: &#34;MongoDB is great!&#34;}, {user: &#34;lina&#34;, message: &#34;MongoDB is great!&#34;}]})
</span><span class="s1">WriteResult({ &#34;nInserted&#34; : 1 })
</span><span class="s1">&gt; db.articles.insert({title: &#34;Introducción a la base de datos relacional PostgreSQL&#34;, author: &#34;picodotdev&#34;, date: new Date(2017,05,17,12,00), likes: 100, tags: [&#39;</span>postgresql<span class="s1">&#39;, &#39;</span>database<span class="s1">&#39;, &#39;</span>SQL<span class="err">&#39;</span><span class="o">]</span>, comments: <span class="o">[</span><span class="o">{</span>user: <span class="s2">&#34;katy&#34;</span>, message: <span class="s2">&#34;PostgreSQL rocks!&#34;</span><span class="o">}</span>, <span class="o">{</span>user: <span class="s2">&#34;smith&#34;</span>, message: <span class="s2">&#34;SQL language is powerful!&#34;</span><span class="o">}</span><span class="o">]</span><span class="o">}</span><span class="o">)</span>
WriteResult<span class="o">(</span><span class="o">{</span> <span class="s2">&#34;nInserted&#34;</span> : <span class="m">1</span> <span class="o">}</span><span class="o">)</span>
&gt; db.articles.find<span class="o">(</span><span class="o">)</span>
<span class="o">{</span> <span class="s2">&#34;_id&#34;</span> : ObjectId<span class="o">(</span><span class="s2">&#34;5cc335873b17081f2ca1d4d5&#34;</span><span class="o">)</span>, <span class="s2">&#34;title&#34;</span> : <span class="s2">&#34;Introducción a la base de datos NoSQL MongoDB&#34;</span>, <span class="s2">&#34;author&#34;</span> : <span class="s2">&#34;picodotdev&#34;</span>, <span class="s2">&#34;date&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2017-06-18T12:30:00Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;tags&#34;</span> : <span class="o">[</span> <span class="s2">&#34;mongodb&#34;</span>, <span class="s2">&#34;database&#34;</span>, <span class="s2">&#34;NoSQL&#34;</span> <span class="o">]</span>, <span class="s2">&#34;comments&#34;</span> : <span class="o">[</span> <span class="o">{</span> <span class="s2">&#34;user&#34;</span> : <span class="s2">&#34;jones&#34;</span>, <span class="s2">&#34;message&#34;</span> : <span class="s2">&#34;MongoDB is great!&#34;</span> <span class="o">}</span>, <span class="o">{</span> <span class="s2">&#34;user&#34;</span> : <span class="s2">&#34;lina&#34;</span>, <span class="s2">&#34;message&#34;</span> : <span class="s2">&#34;MongoDB is great!&#34;</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span>
<span class="o">{</span> <span class="s2">&#34;_id&#34;</span> : ObjectId<span class="o">(</span><span class="s2">&#34;5cc335993b17081f2ca1d4d6&#34;</span><span class="o">)</span>, <span class="s2">&#34;title&#34;</span> : <span class="s2">&#34;Introducción a la base de datos relacional PostgreSQL&#34;</span>, <span class="s2">&#34;author&#34;</span> : <span class="s2">&#34;picodotdev&#34;</span>, <span class="s2">&#34;date&#34;</span> : ISODate<span class="o">(</span><span class="s2">&#34;2017-06-17T12:00:00Z&#34;</span><span class="o">)</span>, <span class="s2">&#34;likes&#34;</span> : 100, <span class="s2">&#34;tags&#34;</span> : <span class="o">[</span> <span class="s2">&#34;postgresql&#34;</span>, <span class="s2">&#34;database&#34;</span>, <span class="s2">&#34;SQL&#34;</span> <span class="o">]</span>, <span class="s2">&#34;comments&#34;</span> : <span class="o">[</span> <span class="o">{</span> <span class="s2">&#34;user&#34;</span> : <span class="s2">&#34;katy&#34;</span>, <span class="s2">&#34;message&#34;</span> : <span class="s2">&#34;PostgreSQL rocks!&#34;</span> <span class="o">}</span>, <span class="o">{</span> <span class="s2">&#34;user&#34;</span> : <span class="s2">&#34;smith&#34;</span>, <span class="s2">&#34;message&#34;</span> : <span class="s2">&#34;SQL language is powerful!&#34;</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span>
&gt; db.articles.count<span class="o">(</span><span class="o">)</span>
<span class="m">2</span>
&gt; <span class="nb">exit</span>
bye
root@b0d3f42c92fc:/# <span class="nb">exit</span>
<span class="nb">exit</span>
$ nomad job stop --purge <span class="nv">mongodb</span>
<span class="o">=</span><span class="o">=</span>&gt; Monitoring evaluation <span class="s2">&#34;f10589c6&#34;</span>
    Evaluation triggered by job <span class="s2">&#34;mongodb&#34;</span>
    Evaluation status changed: <span class="s2">&#34;pending&#34;</span> -&gt; <span class="s2">&#34;complete&#34;</span>
<span class="o">=</span><span class="o">=</span>&gt; Evaluation <span class="s2">&#34;f10589c6&#34;</span> finished with status <span class="s2">&#34;complete&#34;</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/mongodb.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/mongodb.sh" target="_blank">mongodb.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job stop --prune mongodb

</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-job-stop.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/nomad-job-stop.sh" target="_blank">nomad-job-stop.sh</a>
    </div>
</div>

<p>Para iniciar <a href="https://www.consul.io/">Consul</a> y Nomad hay que utilizar los siguientes comandos y para el ejecutar <em>job</em> es requisito haber instalado Docker dado que en este ejemplo lo utiliza.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev -datacenter <span class="nv">localhost</span>
<span class="o">=</span><span class="o">=</span>&gt; Starting Consul agent...
<span class="o">=</span><span class="o">=</span>&gt; Consul agent running!
           Version: <span class="s1">&#39;v1.4.4&#39;</span>
           Node ID: <span class="s1">&#39;34294bf0-5802-0d94-4acd-cf8c9d090205&#39;</span>
         Node name: <span class="s1">&#39;archlinux&#39;</span>
        Datacenter: <span class="s1">&#39;localhost&#39;</span> <span class="o">(</span>Segment: <span class="s1">&#39;&lt;all&gt;&#39;</span><span class="o">)</span>
            Server: <span class="nb">true</span> <span class="o">(</span>Bootstrap: <span class="nb">false</span><span class="o">)</span>
       Client Addr: <span class="o">[</span>127.0.0.1<span class="o">]</span> <span class="o">(</span>HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600<span class="o">)</span>
      Cluster Addr: 127.0.0.1 <span class="o">(</span>LAN: 8301, WAN: 8302<span class="o">)</span>
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: <span class="nb">false</span>

$ sudo nomad agent -dev -dc localhost
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> picodotdev: 
<span class="o">=</span><span class="o">=</span>&gt; No configuration files <span class="nv">loaded</span>
<span class="o">=</span><span class="o">=</span>&gt; Starting Nomad agent...
<span class="o">=</span><span class="o">=</span>&gt; Nomad agent configuration:

       Advertise Addrs: HTTP: 127.0.0.1:4646<span class="p">;</span> RPC: 127.0.0.1:4647<span class="p">;</span> Serf: 127.0.0.1:4648
            Bind Addrs: HTTP: 127.0.0.1:4646<span class="p">;</span> RPC: 127.0.0.1:4647<span class="p">;</span> Serf: 127.0.0.1:4648
                Client: <span class="nb">true</span>
             Log Level: DEBUG
                Region: global <span class="o">(</span>DC: localhost<span class="o">)</span>
                Server: <span class="nb">true</span>
               Version: 0.9.0</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/consul-nomad.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/code/consul-nomad.sh" target="_blank">consul-nomad.sh</a>
    </div>
</div>

<p>Las restricciones se han de cumplir para elegir un nodo, por otro lado está también la afinidad. La <a href="https://www.nomadproject.io/docs/job-specification/affinity.html">afinidad</a> es una preferencia utilizada por Nomad al seleccionar los nodos que tratará de cumplir si hay algún nodo disponible con las propiedades de afinidad deseadas pero si no hay un nodo disponible se elige algún otro.</p>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">Estrategias de despliegue para microservicios con Nomad</a></li>
<li><a href="https://www.nomadproject.io/guides/stateful-workloads/portworx.html">Portworx</a></li>
<li><a href="https://www.nomadproject.io/docs/job-specification/ephemeral_disk.html">Ephemeral Disk</a></li>
<li><a href="https://tech.trivago.com/2019/01/25/nomad-our-experiences-and-best-practices/">Nomad - our experiences and best practices</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker</a></li>
</ul>

</div>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/</id><title>Estrategias de despliegue para microservicios con Nomad</title><updated>2019-04-18T11:30:00+02:00</updated><published>2019-04-18T10:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/"/><author><name>picodotdev</name></author><content type="html">
<![CDATA[<p><strong>Ciertos servicios requieren que al hacer un despliegue el servicio continue funcionando. Para esto no es posible parar todas las instancias de un servicio a la vez, actualizarlar y volverlas a iniciar porque durante este proceso se dejaría de prestar el servicio durante un corto periodo de tiempo en el mejor de los casos. Hay que hacer el despliegue de forma progresiva en las instancias. Algunas estrategias son <em>Rolling Update</em>, <em>Blue/Green</em> y <em>Canary</em>, el orquestador de servicios Nomad soporta y realiza de forma automatizada los despliegues usando una de estas estrategias.</strong></p>]]><![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/nomad.svg" class="right " width="200" alt="Nomad" title="Nomad"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/hashicorp.svg" class="right " width="200" alt="HashiCorp" title="HashiCorp"/>
</div>

<p>El ciclo de vida de una aplicación no consiste solo en desarrollarla, incluye también su puesta en producción o despliegue en un entorno de pruebas, pero también una vez la aplicación está desplegada en algún momento será necesario actualizarla con una nueva versión.</p>

<p>Las aplicaciones monolíticas tienen otros problemas pero en el aspecto de despliegue es sencillo ya que solo hay una aplicación, basta con desplegar la nueva versión. En una aplicación con arquitectura de microservicios es un reto mayor debido a que hay múltiples aplicaciones.</p>

<p>En cualquiera de ellas puede darse el caso de que para ganar en escalabilidad o para aumentar la disponibilidad o tolerancia a fallos es posible que haya varias instancias, las cuales han de ser actualizadas con el requisito si es necesario de que el servicio no deje de prestar su servicio, es decir que el despliegue no suponga una caída del servicio.</p>

<p>Hay varias estrategias para desplegar una nueva versión de una aplicación:</p>

<ul>
<li><em>Rolling update</em>: actualizar todas las instancias de forma progresiva. Una vez se termina de actualizar una se espera un tiempo y se actualiza la siguiente hasta que todas estén actualizadas.</li>
<li><em>Blue/Green</em>: manteniendo en funcionamiento las instancias con la versión antigua se crea el mismo número de instancias con la nueva versión y se redirige tráfico hacia ellas. Una vez se ha comprobado que la nueva versión funciona correctamente se promociona la nueva versión y se eliminan las instancias de con la versión antigua. Esta estrategia permite volver a la versión anterior rápidamente si se detecta algún problema.</li>
<li><em>Canary</em>: se siguen manteniendo las instancias con la versión antigua, a diferencia de la estrategia <em>blue/green</em> se crea un número menor de instancias con la versión nueva que el número de instancias con la versión antigua. Una vez comprobado que la nueva versión es correcta se promociona la nueva versión y se actualizan todas las instancias restantes mediante <em>rolling update</em> a la nueva versión. También permite volver a la versión antigua si se detecta algún problema.</li>
</ul>

<p><a href="https://docs.docker.com/swarm/">Docker Swarm</a> permite la estrategia de despliegue <em>rolling update</em> sin embargo las estrategias <em>blue/green</em> y <em>canary</em> son interesante para tratar de que un error en una versión nueva no afecte al funcionamiento de la aplicación y obligue hacer un <em>rollback</em> que posiblemente tarde más tiempo durante el cual el servicio funcionará con el defecto descubierto. <a href="https://www.nomadproject.io/">Nomad</a> permite despliegues con las estrategias <em>blue/gree</em> y <em>canary</em>.</p>

<p>Para actualizar un servicio en Nomad basta con modificar la definición del <em>job</em> y enviarlo a <em>Nomad</em>, y este se encarga de orquestar la actualización en las instancias según la estrategia de despliegue
configurada. En este caso se actualiza la versión de <em>nginx</em> de la versión <em>nginx:stable-alpine</em> a <em>nginx:alpine</em> usando una estrategia <em>rolling update</em> para las cinco instancias del servicio.</p>

<p>La estrategia de despliegue en <em>Nomad</em> se define en la <a href="https://www.nomadproject.io/docs/job-specification/update.html">sección de configuración <em>update</em></a>. El parámetro <em>min_healthy_time</em> es el tiempo que se espera cuando se hace un <em>rolling update</em> para considerar una instancia como sana y continuar la actualización con la siguiente, <em>max_parallel</em> indica el número de instancias que se migran al mismo tiempo. El parámetro <em>canary</em> indica el número de instancias que se crean en las estrategias <em>blue/green</em> y <em>canary</em>, en la primera el número de instancias coincidirá con el parámetro <em>canary</em> que indica el número de instancias de un servicio. Nomad con los parámetros <em>health_check</em>, <em>min_healthy_time</em>, <em>healthy_deadline</em>, <em>progress_deadline</em>, <em>stagger</em> y <em>auto_revert</em> se puede poner unos límites para considerar válido un despliegue y en caso de no serlo realizar un <em>rollback</em> de forma autmática.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">job &#34;nginx&#34; {
  datacenters = [&#34;localhost&#34;]

  type = &#34;service&#34;

  update {
    min_healthy_time = &#34;15s&#34;
    max_parallel = 1
  }

  group &#34;services&#34; {
    count = 5

    task &#34;nginx&#34; {
      driver = &#34;docker&#34;

      config {
        image = &#34;nginx:stable-alpine&#34;
        port_map {
          http = 80
        }
      }

      resources {
        memory = 1024 # MB

        network {
          port &#34;http&#34; {}
        }
      }
    }
  }
}
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nginx.nomad" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nginx.nomad" target="_blank">nginx.nomad</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job run nginx.nomad

</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-job-run.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-job-run.sh" target="_blank">nomad-job-run.sh</a>
    </div>
</div>

<p>En el caso de los despliegues <em>blue/green</em> y <em>canary</em> una vez comprobado que la versión de los nuevos servicios funcionan correctamente se promocionan y actualizan el resto de instancias en el caso de <em>canary</em> o se detienen las instancias antiguas en el caso de <em>blue/green</em>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job promote nginx

</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-promote.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-promote.sh" target="_blank">nomad-promote.sh</a>
    </div>
</div>

<p>Desde la línea de comandos se puede observar el estado del servicio y el proceso de actualización, el primero es el estado previo a realizar el despliegue, el segundo durante el proceso de actualización con <em>rolling update</em> y el tercero una vez finalizado el proceso de despliegue y marcado como exitoso en el que todas las instancias han pasado de la versión 0 a la 1.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job status nginx
<span class="nv">ID</span>            <span class="o">=</span> nginx
<span class="nv">Name</span>          <span class="o">=</span> nginx
Submit <span class="nv">Date</span>   <span class="o">=</span> 2019-04-18T19:13:07+02:00
<span class="nv">Type</span>          <span class="o">=</span> service
<span class="nv">Priority</span>      <span class="o">=</span> <span class="m">50</span>
<span class="nv">Datacenters</span>   <span class="o">=</span> localhost
<span class="nv">Status</span>        <span class="o">=</span> running
<span class="nv">Periodic</span>      <span class="o">=</span> <span class="nb">false</span>
<span class="nv">Parameterized</span> <span class="o">=</span> <span class="nb">false</span>

Summary
Task Group  Queued  Starting  Running  Failed  Complete  Lost
services    <span class="m">0</span>       <span class="m">0</span>         <span class="m">5</span>        <span class="m">0</span>       <span class="m">0</span>         <span class="m">0</span>

Latest Deployment
<span class="nv">ID</span>          <span class="o">=</span> 81f57b6d
<span class="nv">Status</span>      <span class="o">=</span> successful
<span class="nv">Description</span> <span class="o">=</span> Deployment completed successfully

Deployed
Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline
services    <span class="m">5</span>        <span class="m">5</span>       <span class="m">5</span>        <span class="m">0</span>          2019-04-18T19:23:23+02:00

Allocations
ID        Node ID   Task Group  Version  Desired  Status   Created  Modified
3747eb07  d18851d5  services    <span class="m">0</span>        run      running  29s ago  13s ago
500575e9  d18851d5  services    <span class="m">0</span>        run      running  29s ago  13s ago
c8094cf3  d18851d5  services    <span class="m">0</span>        run      running  29s ago  13s ago
ea58300c  d18851d5  services    <span class="m">0</span>        run      running  29s ago  13s ago
ead6d23f  d18851d5  services    <span class="m">0</span>        run      running  29s ago  13s ago

$ nomad alloc status 3747eb07
<span class="nv">ID</span>                  <span class="o">=</span> 3747eb07
Eval <span class="nv">ID</span>             <span class="o">=</span> 781fb5f2
<span class="nv">Name</span>                <span class="o">=</span> nginx.services<span class="o">[</span>3<span class="o">]</span>
Node <span class="nv">ID</span>             <span class="o">=</span> d18851d5
Job <span class="nv">ID</span>              <span class="o">=</span> nginx
Job <span class="nv">Version</span>         <span class="o">=</span> <span class="m">0</span>
Client <span class="nv">Status</span>       <span class="o">=</span> running
Client <span class="nv">Description</span>  <span class="o">=</span> Tasks are running
Desired <span class="nv">Status</span>      <span class="o">=</span> run
Desired <span class="nv">Description</span> <span class="o">=</span> &lt;none&gt;
<span class="nv">Created</span>             <span class="o">=</span> 56s ago
<span class="nv">Modified</span>            <span class="o">=</span> 40s ago
Deployment <span class="nv">ID</span>       <span class="o">=</span> 81f57b6d
Deployment <span class="nv">Health</span>   <span class="o">=</span> healthy

Task <span class="s2">&#34;nginx&#34;</span> is <span class="s2">&#34;running&#34;</span>
Task Resources
CPU        Memory           Disk     Addresses
0/100 MHz  <span class="m">788</span> KiB/1.0 GiB  <span class="m">300</span> MiB  http: 127.0.0.1:29939

Task Events:
Started <span class="nv">At</span>     <span class="o">=</span> 2019-04-18T17:13:08Z
Finished <span class="nv">At</span>    <span class="o">=</span> N/A
Total <span class="nv">Restarts</span> <span class="o">=</span> <span class="m">0</span>
Last <span class="nv">Restart</span>   <span class="o">=</span> N/A

Recent Events:
Time                       Type        Description
2019-04-18T19:13:08+02:00  Started     Task started by client
2019-04-18T19:13:07+02:00  Task Setup  Building Task Directory
2019-04-18T19:13:07+02:00  Received    Task received by client</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-status-before.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-status-before.sh" target="_blank">nomad-status-before.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job status nginx
<span class="nv">ID</span>            <span class="o">=</span> nginx
<span class="nv">Name</span>          <span class="o">=</span> nginx
Submit <span class="nv">Date</span>   <span class="o">=</span> 2019-04-18T19:17:54+02:00
<span class="nv">Type</span>          <span class="o">=</span> service
<span class="nv">Priority</span>      <span class="o">=</span> <span class="m">50</span>
<span class="nv">Datacenters</span>   <span class="o">=</span> localhost
<span class="nv">Status</span>        <span class="o">=</span> running
<span class="nv">Periodic</span>      <span class="o">=</span> <span class="nb">false</span>
<span class="nv">Parameterized</span> <span class="o">=</span> <span class="nb">false</span>

Summary
Task Group  Queued  Starting  Running  Failed  Complete  Lost
services    <span class="m">0</span>       <span class="m">0</span>         <span class="m">5</span>        <span class="m">0</span>       <span class="m">5</span>         <span class="m">0</span>

Latest Deployment
<span class="nv">ID</span>          <span class="o">=</span> ba20066a
<span class="nv">Status</span>      <span class="o">=</span> successful
<span class="nv">Description</span> <span class="o">=</span> Deployment completed successfully

Deployed
Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline
services    <span class="m">5</span>        <span class="m">5</span>       <span class="m">5</span>        <span class="m">0</span>          2019-04-18T19:29:19+02:00

Allocations
ID        Node ID   Task Group  Version  Desired  Status    Created    Modified
fabcf384  d18851d5  services    <span class="m">1</span>        run      running   2m36s ago  2m20s ago
ccb57008  d18851d5  services    <span class="m">1</span>        run      running   2m53s ago  2m37s ago
b06c743d  d18851d5  services    <span class="m">1</span>        run      running   3m10s ago  2m54s ago
<span class="m">56733896</span>  d18851d5  services    <span class="m">1</span>        run      running   3m28s ago  3m12s ago
71c8bb5b  d18851d5  services    <span class="m">1</span>        run      running   3m45s ago  3m29s ago
500575e9  d18851d5  services    <span class="m">0</span>        stop     <span class="nb">complete</span>  8m31s ago  3m44s ago
c8094cf3  d18851d5  services    <span class="m">0</span>        stop     <span class="nb">complete</span>  8m31s ago  3m10s ago
3747eb07  d18851d5  services    <span class="m">0</span>        stop     <span class="nb">complete</span>  8m31s ago  2m53s ago
ea58300c  d18851d5  services    <span class="m">0</span>        stop     <span class="nb">complete</span>  8m31s ago  3m27s ago
ead6d23f  d18851d5  services    <span class="m">0</span>        stop     <span class="nb">complete</span>  8m31s ago  2m35s ago</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-status-after.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/nomad-status-after.sh" target="_blank">nomad-status-after.sh</a>
    </div>
</div>

<div class="media" style="text-align: center;">
    <figure>
        <script type="text/javascript" src="https://asciinema.org/a/241669.js" id="asciicast-241669" async></script>
        <noscript><a href="https://asciinema.org/a/241669" target="_blank"><img src="https://asciinema.org/a/241669.png" width="734"/></a></noscript>
        
        <figcaption>Progreso del despliegue rolling update en Nomad</figcaption>
        
    </figure>
</div>

<p>El proceso de despliegue también se puede monitorizar desde la interfaz web que ofrece Nomad.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  











<figure>
  
  <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-before_hu67a332684efae6ed992319050f36f296_119290_2560x1440_fit_box_2.png" title="Antes del proceso de despliegue rolling update en Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-before_hu67a332684efae6ed992319050f36f296_119290_300x200_fit_box_2.png" width="197"/></a>
  
  
  <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-while_hu1bb43ff17075cacd6588f52ea91a2b44_119731_2560x1440_fit_box_2.png" title="Durante el proceso de despliegue rolling update en Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-while_hu1bb43ff17075cacd6588f52ea91a2b44_119731_300x200_fit_box_2.png" width="197"/></a>
  
  
  <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-after_hu07bde1516a5a8318da3a99b05cb30d02_122603_2560x1440_fit_box_2.png" title="Después del proceso de despliegue rolling update en Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/images/nomad-rolling-update-after_hu07bde1516a5a8318da3a99b05cb30d02_122603_300x200_fit_box_2.png" width="197"/></a>
  
  
  <figcaption>Progreso del despliegue rolling update en Nomad</figcaption>
  
</figure>


</div>

<p>En este ejemplo los servicios están en contenedores docker, también se observa que la versión de los contenedores en ejecución pasan de la versión <em>stable-alpine</em> a <em>alpine</em>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE                 COMMAND                  CREATED              STATUS              PORTS                                              NAMES
476d2063b64b        nginx:stable-alpine   <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:29939-&gt;80/tcp, 127.0.0.1:29939-&gt;80/udp   nginx-3747eb07-f9da-a9f5-0720-1b2314baac12
e0a533348f44        nginx:stable-alpine   <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:21085-&gt;80/tcp, 127.0.0.1:21085-&gt;80/udp   nginx-ea58300c-c4a1-cc3d-46a0-d5b30c276ede
4da9babdd549        nginx:stable-alpine   <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:30061-&gt;80/tcp, 127.0.0.1:30061-&gt;80/udp   nginx-c8094cf3-5c3c-eaaa-1bcf-9368100bb0ef
068c6db6a86c        nginx:stable-alpine   <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:26606-&gt;80/tcp, 127.0.0.1:26606-&gt;80/udp   nginx-ead6d23f-abdd-8b33-7b61-c2ad64dede5c
19190e778a5a        nginx:stable-alpine   <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:29835-&gt;80/tcp, 127.0.0.1:29835-&gt;80/udp   nginx-500575e9-62ce-868a-f142-869475aacde5</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/docker-ps-before.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/docker-ps-before.sh" target="_blank">docker-ps-before.sh</a>
    </div>
</div>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                              NAMES
03faf7ed4467        nginx:alpine        <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up About a minute   127.0.0.1:27212-&gt;80/tcp, 127.0.0.1:27212-&gt;80/udp   nginx-fabcf384-5675-fe7f-4c61-5fa7385c54d2
4185977fbddb        nginx:alpine        <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   <span class="m">2</span> minutes ago        Up <span class="m">2</span> minutes        127.0.0.1:26686-&gt;80/tcp, 127.0.0.1:26686-&gt;80/udp   nginx-ccb57008-e426-1684-fd39-97cb0f3b51f7
c6586d22406e        nginx:alpine        <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   <span class="m">2</span> minutes ago        Up <span class="m">2</span> minutes        127.0.0.1:23508-&gt;80/tcp, 127.0.0.1:23508-&gt;80/udp   nginx-b06c743d-d2b3-0be3-d82b-762184dda4ec
046253c1972b        nginx:alpine        <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   <span class="m">2</span> minutes ago        Up <span class="m">2</span> minutes        127.0.0.1:31800-&gt;80/tcp, 127.0.0.1:31800-&gt;80/udp   nginx-56733896-ab20-ab8f-36c9-ac1d13b0f1a2
88788b4133ea        nginx:alpine        <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   <span class="m">3</span> minutes ago        Up <span class="m">3</span> minutes        127.0.0.1:30844-&gt;80/tcp, 127.0.0.1:30844-&gt;80/udp   nginx-71c8bb5b-a23b-7edc-cbb3-f9d0b6bdffe6</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/docker-ps-after.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/docker-ps-after.sh" target="_blank">docker-ps-after.sh</a>
    </div>
</div>

<p>Nomad y <a href="https://www.consul.io/">Consul</a> se inician con los siguientes comandos en modo desarrollo comentados en el artículo <a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev -datacenter localhost
$ sudo nomad agent -dev -dc localhost</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/consul-nomad.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/code/consul-nomad.sh" target="_blank">consul-nomad.sh</a>
    </div>
</div>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/">Introducción a Nomad para gestionar aplicaciones y microservicios</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/">Servicios con persistencia en el orquestador Nomad</a></li>
</ul>

</div>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/</id><title>Introducción a Nomad para gestionar aplicaciones y microservicios</title><updated>2019-04-17T23:00:00+02:00</updated><published>2019-04-14T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>En las aplicaciones basadas en microservicios dado el número de ellos y de instancias tienen han de gestionarse como si fuesen ganado en vez como si fuesen animales de compañía. Nomad es un orquestador de servicios que a diferencia de Docker Swarm permite gestionar servicios con otros sistemas de ejecución además de contenedores docker y a diferencia de Kubernetes es más sencillo.&lt;/strong>&lt;/p>
<![CDATA[<div class="logotypes" style="float: right;">
    <img src="/blog-bitix/assets/images/logotipos/nomad.svg" class="right " width="200" alt="Nomad" title="Nomad"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/consul.svg" class="right " width="200" alt="Consul" title="Consul"/>
</div>

<div class="logotypes" style="float: right; clear: right;">
    <img src="/blog-bitix/assets/images/logotipos/hashicorp.svg" class="right " width="200" alt="HashiCorp" title="HashiCorp"/>
</div>

<p>En las arquitecturas de aplicaciones basadas en microservicios cada microservicio o simplemente servicio es una aplicación distinta e independiente, son varias aplicaciones que hay que gestionar y desplegar de forma individual o de forma coordinada.</p>

<p>Dado su número hay que automatizar todas las tareas para tratar de conseguir la menor intervención manual, ningún proceso manual si es posible. Para que no sean inmanejables han de tratarse como ganado de forma masiva en vez de como animales de compañía que requieran atención individual para continuar generando valor en un proyecto con el tiempo disponible en vez de dedicarlo a tareas que no lo aportan.</p>

<p>Dado que cada microservicio puede emplear una tecnología diferente es necesario algo que permita tratarlos a todos por igual, esta tecnología son los contenedores que hacen un papel similar al que hacen en el transporte de mercancías en barcos.</p>

<p>Hay varias tecnologías para orquestar o gestionar los microservicios y crear <em>clusters</em> de máquinas en las que desplegarlos, una de ellas es <a href="https://docs.docker.com/swarm/">Docker Swarm</a> sencilla e integrada con <a href="https://www.docker.com/">Docker</a> pero no con tantas funcionalidades como otra de las populares que es <a href="https://kubernetes.io/">Kubernetes</a> y para usarlo en una máquina local <a href="https://kubernetes.io/docs/setup/minikube/">minikube</a>, ofrece mas funcionalidad pero añade una complejidad significativa que para algunos casos de uso no compensa además requiere mas tiempo para dominarla. Una solución intermedia conservando la sencillez pero con mas funcionalidad es <a href="https://www.nomadproject.io/">Nomad</a> de <a href="https://www.hashicorp.com/">HashiCorp</a>. Otra de sus características destacadas es que el <em>cluster</em> de Nomad puede estar formado en diferentes centros de datos y proveedores de la nube al mismo tiempo, por ejemplo en <a href="https://aws.amazon.com/es/">AWS</a>, <a href="https://cloud.google.com/">GCP</a> entre otros o centros de datos híbridos en la nube y propios. En la sección <a href="https://www.nomadproject.io/intro/vs/index.html">Nomad vs. Other Software</a> de su documentación se compara con otras opciones.</p>

<p>Nomad es distribuido, con alta disponibilidad y escalable a cientos de nodos en múltiples centros de datos y regiones. No es una solución completa por si sola pero se integra con otras. No ofrece descubrimiento de servicios pero se integra muy bien con <a href="https://www.consul.io/">Consul</a>. No es un balanceador de carga pero se integra con <a href="https://nginx.org/">Nginx</a>, <a href="https://fabiolb.net/">Fabio</a>, <a href="https://traefik.io/">Traefik</a> y <a href="https://www.haproxy.org/">HAproxy</a> automatizando su configuración desde Consul. No integra un gestor de secretos pero se integra con <a href="https://www.vaultproject.io/">Vault</a>. No soporta escalado y no integra de por sí varias de estas funcionalidades como Kubernetes pero es más simple.</p>

<p>Nomad a diferencia Docker no solo puede gestionar contenedores docker sino también tareas del sistema y otras como máquinas virtuales <a href="https://www.qemu.org/">qemu</a> o contenedores con <a href="https://coreos.com/rkt/">rkt</a>, a diferencia de Kubernetes es mucho mas sencilla pero conservando funcionalidad suficiente para muchos casos de uso. Nomad requiere de otra de las herramientas de HashiCorp que es Consul para el registro y descubrimiento y para la configuración del <em>cluster</em>, también se integra con otras de sus herramientas como Vault para guardar cifrados datos sensibles como contraseñas y certificados. Con <a href="https://www.consul.io/docs/connect/platform/nomad.html">Connect</a> es capaz de proporcionar conexión TLS con autenticación mutua de forma transparente para los servicios.</p>

<p>Los <em>jobs</em> son la unidad de trabajo que contienen la definición de los servicios, se definen en un <a href="https://www.nomadproject.io/docs/job-specification/index.html">archivo de configuración</a> donde los elementos son el nombre, los grupos de tareas, las tareas y en cada tarea el <em>driver</em> que usa dependiendo del cual se proporciona la configuración apropiada. El <em>driver</em> determina como es gestionada el tipo de tarea puede ser un conteendor de docker, un proceso del sistema, una máquina virtual de <em>qemu</em> o un contenedor <em>rkt</em>, a diferencia de Docker Swarm que solo puede gestionar contenedores docker. Se pueden configurar variables de entorno, memoria asignada a cada tarea, propiedades de red y CPU.</p>

<p>Nomad y Nomad cada uno son un binario ejecutable sin ninguna otra dependencia. Basta con descargarlos e incluirlos en el <em>path</em> del sistema. En este ejemplo hay definido un <em>job</em> compuesto por una tarea de un contenedor docker de <a href="https://nginx.org/">nginx</a> configurado en un puerto aleatorio y con 1 GB de memoria para cada una de las dos instancias del servicio. Dado que lo usa es necesario <a href="https://picodotdev.github.io/blog-bitix/2014/11/inicio-basico-de-docker/">instalar Docker</a>.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-plaintext" data-lang="plaintext">job &#34;nginx&#34; {
  datacenters = [&#34;localhost&#34;]

  type = &#34;service&#34;

  update {
    stagger      = &#34;30s&#34;
    canary       = 2
    max_parallel = 2
  }

  group &#34;services&#34; {
    count = 2

    task &#34;nginx&#34; {
      driver = &#34;docker&#34;

      config {
        image = &#34;nginx:alpine&#34;
        port_map {
          http = 80
        }
      }

      resources {
        memory = 1024 # MB

        network {
          port &#34;http&#34; {}
        }
      }
    }
  }
}
</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nginx.nomad" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nginx.nomad" target="_blank">nginx.nomad</a>
    </div>
</div>

<p>Nomad y Nomad se ejecutan con los siguientes comandos en modo desarrollo.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ consul agent -dev -datacenter <span class="nv">localhost</span>
<span class="o">=</span><span class="o">=</span>&gt; Starting Consul agent...
<span class="o">=</span><span class="o">=</span>&gt; Consul agent running!
           Version: <span class="s1">&#39;v1.4.4&#39;</span>
           Node ID: <span class="s1">&#39;1934d5b2-0f3f-ffdd-8378-7ab8a6207bb1&#39;</span>
         Node name: <span class="s1">&#39;archlinux&#39;</span>
        Datacenter: <span class="s1">&#39;localhost&#39;</span> <span class="o">(</span>Segment: <span class="s1">&#39;&lt;all&gt;&#39;</span><span class="o">)</span>
            Server: <span class="nb">true</span> <span class="o">(</span>Bootstrap: <span class="nb">false</span><span class="o">)</span>
       Client Addr: <span class="o">[</span>127.0.0.1<span class="o">]</span> <span class="o">(</span>HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600<span class="o">)</span>
      Cluster Addr: 127.0.0.1 <span class="o">(</span>LAN: 8301, WAN: 8302<span class="o">)</span>
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: <span class="nb">false</span>

$ sudo nomad agent -dev -dc localhost
<span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> picodotdev: 
<span class="o">=</span><span class="o">=</span>&gt; No configuration files <span class="nv">loaded</span>
<span class="o">=</span><span class="o">=</span>&gt; Starting Nomad agent...
<span class="o">=</span><span class="o">=</span>&gt; Nomad agent configuration:

       Advertise Addrs: HTTP: 127.0.0.1:4646<span class="p">;</span> RPC: 127.0.0.1:4647<span class="p">;</span> Serf: 127.0.0.1:4648
            Bind Addrs: HTTP: 127.0.0.1:4646<span class="p">;</span> RPC: 127.0.0.1:4647<span class="p">;</span> Serf: 127.0.0.1:4648
                Client: <span class="nb">true</span>
             Log Level: DEBUG
                Region: global <span class="o">(</span>DC: localhost<span class="o">)</span>
                Server: <span class="nb">true</span>
               Version: 0.9.0</code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nomad-consul.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nomad-consul.sh" target="_blank">nomad-consul.sh</a>
    </div>
</div>

<p>Iniciados se pueden enviar <em>jobs</em> y ver su estado, dirección y puerto asignado así como los <em>logs</em> generados.</p>

<div class="code">
    <div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ nomad job plan nginx.nomad
$ nomad job run nginx.nomad
<span class="o">=</span><span class="o">=</span>&gt; Monitoring evaluation <span class="s2">&#34;b2b07746&#34;</span>
    Evaluation triggered by job <span class="s2">&#34;nginx&#34;</span>
    Allocation <span class="s2">&#34;60f3d102&#34;</span> created: node <span class="s2">&#34;58823be1&#34;</span>, group <span class="s2">&#34;services&#34;</span>
    Allocation <span class="s2">&#34;6e12ae8f&#34;</span> created: node <span class="s2">&#34;58823be1&#34;</span>, group <span class="s2">&#34;services&#34;</span>
    Evaluation within deployment: <span class="s2">&#34;0dddab79&#34;</span>
    Allocation <span class="s2">&#34;6e12ae8f&#34;</span> status changed: <span class="s2">&#34;pending&#34;</span> -&gt; <span class="s2">&#34;running&#34;</span> <span class="o">(</span>Tasks are running<span class="o">)</span>
    Allocation <span class="s2">&#34;60f3d102&#34;</span> status changed: <span class="s2">&#34;pending&#34;</span> -&gt; <span class="s2">&#34;running&#34;</span> <span class="o">(</span>Tasks are running<span class="o">)</span>
    Evaluation status changed: <span class="s2">&#34;pending&#34;</span> -&gt; <span class="s2">&#34;complete&#34;</span>
<span class="o">=</span><span class="o">=</span>&gt; Evaluation <span class="s2">&#34;b2b07746&#34;</span> finished with status <span class="s2">&#34;complete&#34;</span>

$ nomad job status nginx
<span class="nv">ID</span>            <span class="o">=</span> nginx
<span class="nv">Name</span>          <span class="o">=</span> nginx
Submit <span class="nv">Date</span>   <span class="o">=</span> 2019-04-14T13:31:53+02:00
<span class="nv">Type</span>          <span class="o">=</span> service
<span class="nv">Priority</span>      <span class="o">=</span> <span class="m">50</span>
<span class="nv">Datacenters</span>   <span class="o">=</span> localhost
<span class="nv">Status</span>        <span class="o">=</span> running
<span class="nv">Periodic</span>      <span class="o">=</span> <span class="nb">false</span>
<span class="nv">Parameterized</span> <span class="o">=</span> <span class="nb">false</span>

Summary
Task Group  Queued  Starting  Running  Failed  Complete  Lost
services    <span class="m">0</span>       <span class="m">0</span>         <span class="m">2</span>        <span class="m">0</span>       <span class="m">0</span>         <span class="m">0</span>

Latest Deployment
<span class="nv">ID</span>          <span class="o">=</span> 0dddab79
<span class="nv">Status</span>      <span class="o">=</span> running
<span class="nv">Description</span> <span class="o">=</span> Deployment is running

Deployed
Task Group  Desired  Placed  Healthy  Unhealthy  Progress Deadline
services    <span class="m">2</span>        <span class="m">2</span>       <span class="m">2</span>        <span class="m">0</span>          2019-04-14T13:42:04+02:00

Allocations
ID        Node ID   Task Group  Version  Desired  Status   Created  Modified
60f3d102  58823be1  services    <span class="m">0</span>        run      running  12s ago  1s ago
6e12ae8f  58823be1  services    <span class="m">0</span>        run      running  12s ago  1s ago

$ nomad alloc status 60f3d102
<span class="nv">ID</span>                  <span class="o">=</span> 60f3d102
Eval <span class="nv">ID</span>             <span class="o">=</span> b2b07746
<span class="nv">Name</span>                <span class="o">=</span> nginx.services<span class="o">[</span>1<span class="o">]</span>
Node <span class="nv">ID</span>             <span class="o">=</span> 58823be1
Job <span class="nv">ID</span>              <span class="o">=</span> nginx
Job <span class="nv">Version</span>         <span class="o">=</span> <span class="m">0</span>
Client <span class="nv">Status</span>       <span class="o">=</span> running
Client <span class="nv">Description</span>  <span class="o">=</span> Tasks are running
Desired <span class="nv">Status</span>      <span class="o">=</span> run
Desired <span class="nv">Description</span> <span class="o">=</span> &lt;none&gt;
<span class="nv">Created</span>             <span class="o">=</span> 56s ago
<span class="nv">Modified</span>            <span class="o">=</span> 45s ago
Deployment <span class="nv">ID</span>       <span class="o">=</span> 0dddab79
Deployment <span class="nv">Health</span>   <span class="o">=</span> healthy

Task <span class="s2">&#34;nginx&#34;</span> is <span class="s2">&#34;running&#34;</span>
Task Resources
CPU        Memory           Disk     Addresses
0/100 MHz  <span class="m">820</span> KiB/1.0 GiB  <span class="m">300</span> MiB  http: 127.0.0.1:28421

Task Events:
Started <span class="nv">At</span>     <span class="o">=</span> 2019-04-14T11:31:54Z
Finished <span class="nv">At</span>    <span class="o">=</span> N/A
Total <span class="nv">Restarts</span> <span class="o">=</span> <span class="m">0</span>
Last <span class="nv">Restart</span>   <span class="o">=</span> N/A

Recent Events:
Time                       Type        Description
2019-04-14T13:31:54+02:00  Started     Task started by client
2019-04-14T13:31:53+02:00  Task Setup  Building Task Directory
2019-04-14T13:31:53+02:00  Received    Task received by client

$ nomad alloc logs 60f3d102
172.17.0.1 - - <span class="o">[</span>14/Apr/2019:11:33:17 +0000<span class="o">]</span> <span class="s2">&#34;GET / HTTP/1.1&#34;</span> <span class="m">200</span> <span class="m">612</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0&#34;</span> <span class="s2">&#34;-&#34;</span>
172.17.0.1 - - <span class="o">[</span>14/Apr/2019:11:33:17 +0000<span class="o">]</span> <span class="s2">&#34;GET /favicon.ico HTTP/1.1&#34;</span> <span class="m">404</span> <span class="m">154</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;Mozilla/5.0 (X11; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0&#34;</span> <span class="s2">&#34;-&#34;</span></code></pre></td></tr></table>
</div>
</div>
    <div class="highlight-meta">
            <span class="raw"><a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nomad.sh" target="_blank">view raw</a></span>
            <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/code/nomad.sh" target="_blank">nomad.sh</a>
    </div>
</div>

<p>También poseen una interfaz web integrada en la que consultar la misma información, la de Consul está en el puerto <em>8500</em> y la de Nomad en el <em>4646</em> donde ver el estado de los <em>jobs</em> y el progreso de los despliegues.</p>

<div class="media">
    
  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  



  
  
  
  
  
  

  
    
  

  
    
  











<figure>
  
  <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/consul_hu04dfd0a784258ffab8de29ae08a6fa53_49981_2560x1440_fit_box_2.png" title="Consul" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/consul_hu04dfd0a784258ffab8de29ae08a6fa53_49981_200x150_fit_box_2.png" width="200"/></a>
  
  
  <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/nomad-1_hu543e80f6165a80d0eda612b240feaa6b_34563_2560x1440_fit_box_2.png" title="Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/nomad-1_hu543e80f6165a80d0eda612b240feaa6b_34563_200x150_fit_box_2.png" width="200"/></a>
  
  
  <a href="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/nomad-2_hu78cafc3dc4ae78de08bf9c5133a990a6_67847_2560x1440_fit_box_2.png" title="Nomad" data-gallery="data-gallery"><img src="/blog-bitix/2019/04/introduccion-a-nomad-para-gestionar-aplicaciones-y-microservicios/images/nomad-2_hu78cafc3dc4ae78de08bf9c5133a990a6_67847_200x150_fit_box_2.png" width="200"/></a>
  
  
  <figcaption>Interfaces web de Consul y Nomad</figcaption>
  
</figure>


</div>

<p>Nomad permite varias estrategias para actualizar los <em>jobs</em> a una nueva versión de un servicio, basta modificar la configuración del <em>job</em>, volverlo a enviar a Nomad y este se encarga de <a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">actualizar las instancias siguiendo la estrategia <em>rolling</em>, <em>blue/green</em> o <em>canary</em></a> definida en el <em>job</em>, pero eso lo muestro mas detalladamente en otro artículo.</p>

<p>La <a href="https://www.nomadproject.io/docs/index.html">documentación de Nomad</a>, Nomad y otros productos de HashiCorp dedicados a la infraestructura en la nube esta muy bien explicada y detallada, este artículo solo es un resumen de las partes básicas para conocer como empezar a usarlo. En el siguiente vídeo se hace una pequeña explicación y demostración.</p>

<div class="media media-video">
    <iframe width="640" height="360" src="https://www.youtube.com/embed/A6CuZUoINX0?rel=0" frameborder="0" allowfullscreen></iframe>
</div>

<div class="reference">
    Referencia:<br>
    <ul>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/estrategias-de-despliegue-para-microservicios-con-nomad/">Estrategias de despliegue para microservicios con Nomad</a></li>
<li><a href="https://picodotdev.github.io/blog-bitix/2019/04/servicios-con-persistencia-en-el-orquestador-de-microservicos-nomad/">Servicios con persistencia en el orquestador Nomad</a></li>
<li><a href="http://targetveb.com/nomad-simple-deployment-monitoring-applications.html">Nomad – Simple deployment and monitoring of applications</a></li>
</ul>

</div>
]]></content><category term="planeta-codigo"/><category term="programacion"/><category term="software"/></entry></feed>