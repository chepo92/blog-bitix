<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/java/index.xml</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>0001-01-01T00:00:00+00:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/</id>
        <title>Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</title>        
        <updated>2016-10-15T23:00:00+02:00</updated>
        <published>2016-10-15T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El selector de opciones implementado en los navegadores es muy simple pudiendo seleccionar un elemento de una lista, mostrar los elementos agrupados por categorías o seleccionar múltiples elementos pero mostrándolos en formato de una lista en vez de como un desplegable. &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; es una librería que utiliza los estilos de &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; y que añade algunas funcionalidades más a los componentes de selección de opciones de los formularios de una página web.&lt;/p&gt;

&lt;p&gt;Algunas de estas funcionalidades adicionales está explicadas más detalladamente en los &lt;a href=&#34;(https://silviomoreto.github.io/bootstrap-select/examples/)&#34;&gt;ejemplos&lt;/a&gt;, que son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuadro de búsqueda&lt;/li&gt;
&lt;li&gt;Búsqueda por palabras clave&lt;/li&gt;
&lt;li&gt;Limitar el número de opciones seleccionables&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción no seleccionada&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción seleccionada (distinto al texto de la opción)&lt;/li&gt;
&lt;li&gt;Texto de opciones seleccionadas personalizado&lt;/li&gt;
&lt;li&gt;Estilos personalizados&lt;/li&gt;
&lt;li&gt;Marca en la opción seleccionada&lt;/li&gt;
&lt;li&gt;Flecha hacia el campo del formulario en el desplegable&lt;/li&gt;
&lt;li&gt;Estilos  personalizados en opciones individuales&lt;/li&gt;
&lt;li&gt;Anchuras personalizables&lt;/li&gt;
&lt;li&gt;Iconos en las opciones&lt;/li&gt;
&lt;li&gt;Contenido personalizado en las opciones&lt;/li&gt;
&lt;li&gt;Subtextos&lt;/li&gt;
&lt;li&gt;Tamaño de menú personalizado&lt;/li&gt;
&lt;li&gt;Opciones de selección y deselección&lt;/li&gt;
&lt;li&gt;Divisores&lt;/li&gt;
&lt;li&gt;Cabecera&lt;/li&gt;
&lt;li&gt;Posición desplegable&lt;/li&gt;
&lt;li&gt;Deshabilitar &lt;em&gt;select&lt;/em&gt;, opción o grupo de opciones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todas estas capacidades de personalización se consiguen bien añadiendo atributos a las etiquetas HTML &lt;em&gt;select&lt;/em&gt; o a las etiquetas &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt; con lo que usar el componente &lt;em&gt;bootstrap-select&lt;/em&gt; consiste básicamente generar el marcado HTML adecuado. Con JavaScript se puede construir el componente donde podemos indicar las mismas &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/options/&#34;&gt;opciones adicionales&lt;/a&gt; que con los atributos &lt;em&gt;data-&lt;/em&gt;, también tiene &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;métodos&lt;/a&gt; para manipular su comportamiento de forma programática como por ejemplo recibir eventos cuando cambia la selección.&lt;/p&gt;

&lt;p&gt;Usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; con su concepto de parámetros informales añadiremos las atributos necesarios en la etiqueta &lt;em&gt;select&lt;/em&gt; y con el modelo de datos proporcionado en &lt;a href=&#34;https://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/SelectModel.html&#34;&gt;SelectModel&lt;/a&gt;, &lt;a href=&#34;https://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/OptionGroupModel.html&#34;&gt;OptionGroupModel&lt;/a&gt; y &lt;a href=&#34;https://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/OptionModel.html&#34;&gt;OptionModel&lt;/a&gt; podremos proporcionar los atributos adicionales para las etiquetas de los &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt;. El modelo de datos de una etiqueta &lt;em&gt;select&lt;/em&gt; es una lista de opciones y grupos de opciones, cada opción tiene una etiqueta que se le mostrará al usuario, si está habilitada o no, el valor que se enviará al servidor cuando esté seleccionada y un mapa de atributos a añadir en la etiqueta de la opción.&lt;/p&gt;

&lt;p&gt;Este sería el código para crear una instancia de &lt;em&gt;SelectModel&lt;/em&gt; para un componente &lt;a href=&#34;https://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt; de Tapestry para un ficticio selector de país. En el ejemplo en vez de usar un mapa vacío con &lt;em&gt;Collections.EMPTY_MAP&lt;/em&gt; se podría sustituir por un mapa con atributos que se añadirían a la opción para usar alguna otra funcionalidad de &lt;em&gt;bootstrap-select&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionGroupModel.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionModel.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-1.png&#34; title=&#34;Componente selector con bootstrap-select&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-2.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/187/select-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componente selector con bootstrap-select&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Al ser enviado el formulario que contiene el &lt;em&gt;select&lt;/em&gt; el valor seleccionado los tendremos en la propiedad que hayamos indicado en el parámetro &lt;em&gt;value&lt;/em&gt; del componente &lt;em&gt;Select&lt;/em&gt;, este caso en la propiedad &lt;em&gt;pais&lt;/em&gt; de la clase &lt;em&gt;Index&lt;/em&gt; que representa la página.&lt;/p&gt;

&lt;p&gt;En la clase &lt;em&gt;PlugInStack&lt;/em&gt; hay que especificar los recursos CSS y de JavaScript necesarios para usar &lt;em&gt;bootstrap-select&lt;/em&gt;, además de iniciarlizar los selectores con JavaScript.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=PlugInStack.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=index.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/Qv1Ym&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;Bootstrap Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/examples/&#34;&gt;Bootstrap Select Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;Bootstrap Select Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/</id>
        <title>Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot</title>        
        <updated>2016-10-08T00:30:00+02:00</updated>
        <published>2016-10-07T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;OAuth es un protocolo usado para permitir a una aplicación acceder a los recursos de un usuario sin que este proporcione a la aplicación cliente sus credenciales y manteniendo el control de revocar los permisos concedidos. Es ampliamente usado por los servicios de redes sociales de las empresas más conocidas, también lo podemos usar en nuestras aplicaciones. En el ejemplo usaré Keycloak y una aplicación Java con Spring Boot, Apache Shiro y Apache Tapestry.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El protocolo &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; permite a una aplicación cliente acceder a los recursos de un usuario almacenados en otra aplicación sin que el usuario proporcione a la aplicación cliente sus credenciales, además el usuario tiene la capacidad de revocar en caulquier momento los permisos concedidos a la aplicación cliente. El protocolo OAuth es ampliamente usado por empresas como &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.facebook.com/&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; en sus aplicaciones y servicios. También aplicando una arquitectura de microservicios, al dividir una aplicación en varios módulos o simplemente varias aplicaciones independientes pero que son usadas al mismo tiempo por el mismo usuario para evitar que el usuario se autentique en cada aplicación individualmente y que cada aplicación implemente la funcionalidad de autenticación podemos centralizarla usando OAuth a modo de autenticación única o &lt;a href=&#34;https://es.wikipedia.org/wiki/Single_Sign-On&#34;&gt;&lt;abbr title=&#34;Single Sign-On&#34;&gt;SSO&lt;/abbr&gt;&lt;/a&gt;. Usando &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; como servidor de OAuth podemos integrarlo en una aplicación Java que use &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt; para la autorización, &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; para iniciar la aplicación y &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; como &lt;em&gt;framework&lt;/em&gt; web.&lt;/p&gt;

&lt;p&gt;En el protocolo OAuth se diferencia las aplicaciones cliente que son capaces de mantener seguras sus credenciales como es el caso de una aplicación web ejecutada en el servidor o las aplicaciones que no son capaces de mantener sus credenciales seguras como es el caso de una aplicación cliente ejecutada en el navegador o en algunos casos nativa en el móvil. Independientemente de la aplicación cliente o de los &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#page-8&#34;&gt;varios flujos de autenticación&lt;/a&gt; el acceso a los recursos del usuario se hace mediante la obtención de un &lt;em&gt;token&lt;/em&gt; que es una cadena de caracteres opaca de cierta longitud pero que descifrada contiene información del usuario autenticado también está firmada digitalmente por el servidor de OAuth para evitar alteraciones. El protocolo define varios flujos para obtener un &lt;em&gt;token&lt;/em&gt;, obtenido el &lt;em&gt;token&lt;/em&gt; con cualquiera de ellos el acceso a los recursos es indiferente del flujo que haya sido empleado.&lt;/p&gt;

&lt;p&gt;En una aplicación segura con el &lt;em&gt;grant&lt;/em&gt; de tipo &lt;em&gt;authorization code&lt;/em&gt; los pasos que se siguen son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El servidor redirige al usuario al servidor de OAuth cuando intenta acceder a una URL protegida.&lt;/li&gt;
&lt;li&gt;El usuario introduce sus credenciales en una página de inicio de sesión proporcionada por el servidor OAuth, normalmente un usuario y contraseña.&lt;/li&gt;
&lt;li&gt;El servidor OAuth envía al navegador una redirección hacia la aplicación proporcionado un código de autorización en la URL que puede intercambiarse por un &lt;em&gt;token&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El navegador con la redirección envía el código de autorización al servidor, el servidor obtiene de la URL, obtiene el código de autorización y lo usa para intercambiarlo por un &lt;em&gt;token&lt;/em&gt; del servidor OAuth proporcionado además las credenciales del cliente.&lt;/li&gt;
&lt;li&gt;Obtenido el &lt;em&gt;token&lt;/em&gt; con los permisos adecuados la aplicación ya puede permitir acceso o acceder a los recursos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener el &lt;em&gt;token&lt;/em&gt; el servidor mantiene seguras sus credenciales como cliente OAuth. Nótese también que con el &lt;em&gt;token&lt;/em&gt; el servidor (cliente OAuth) no necesita comunicarse con el servidor OAuth para validar el &lt;em&gt;token&lt;/em&gt; ya que está firmado digitalmente, cifrado y tiene concecido un periodo de validadez.&lt;/p&gt;

&lt;p&gt;Un cliente se considera inseguro si la aplicación cliente no puede mantener seguras sus credenciales, si las credenciales de la aplicación están en el navegador o en una aplicación nativa del móvil se considera que las credenciales podrían obtenerse. En una aplicación web en un servidor las credenciales de la aplicación se mantienen seguras en el servidor.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo muestra como autenticar con Keycloak como proveedor de OAuth una aplicación Java que usa Shiro para la autorización, Spring Boot y el &lt;em&gt;framework&lt;/em&gt; web Apache Tapestry. OAuth y Keycloak también puede usarse para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;securizar con OAuth un servicio REST con JAX-RS&lt;/a&gt; y crear un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente Java para acceder al servicio REST securizado con OAuth&lt;/a&gt; emplenado el flujo &lt;em&gt;client credentials&lt;/em&gt;. Lo mostrado en este artículo solo es una pequeña parte de las opciones y posibilidades que ofrece Keycloak, en las capturas de pantalla mostradas hay muchas pestañas, opciones y campos con funcionalidades adicionales.&lt;/p&gt;

&lt;p&gt;Iniciar el servidor OAuth de Keycloak usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; es muy sencillo con el siguiente comando y archivo de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, en el primer acceso se nos solicitará una clave y contraseña de administración:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para el ejemplo crearé un nuevo &lt;em&gt;realm&lt;/em&gt; que contendrá los usuarios y en el que registraremos la aplicación cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-realm.png&#34; title=&#34;Keycloak realm&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-realm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client.png&#34; title=&#34;Keycloak client&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-roles.png&#34; title=&#34;Keycloak client roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-client-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-roles.png&#34; title=&#34;Keycloak roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users.png&#34; title=&#34;Keycloak users&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-role-mappings.png&#34; title=&#34;Keycloak users role mappings&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/keycloak-users-role-mappings-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Usando uno de los &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/overview/supported-platforms.html&#34;&gt;adaptadores proporcionados por Keycloak&lt;/a&gt; para la integración en servidores y aplicaciones su uso no es complicado, en este caso usaré el adaptador para Spring Boot. Usándolo básicamente deberemos proporcionar en la configuración las credenciales de la aplicación cliente que hemos registrado previamente en Keycloak. Además indicaremos que URLs de la aplicación requiere autenticación y que roles han de poseer los usuarios autenticados. Al acceder a estas URLs el adaptador de Keycloak redirigirá al servidor para que el usuario se autentique, una vez autenticado se redirigirá a la aplicación de nuevo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=application.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Autenticado el usuario podemos obtener la instancia de &lt;a href=&#34;http://www.keycloak.org/docs/javadocs/org/keycloak/representations/AccessToken.html&#34;&gt;AccessToken&lt;/a&gt; que representa el &lt;em&gt;token&lt;/em&gt; de OAuth, para la autorización podemos usar Apache Shiro y para ellos deberemos implementar un Realm de tipo &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html&#34;&gt;AuthorizingRealm&lt;/a&gt;. Tiene dos métodos que deberemos implementar &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthenticatingRealm.html#doGetAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-&#34;&gt;doGetAuthenticationInfo&lt;/a&gt; y &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html#doGetAuthorizationInfo-org.apache.shiro.subject.PrincipalCollection-&#34;&gt;doGetAuthorizationInfo&lt;/a&gt;, el primero lo usaremos para autenticar al usuario que en este caso teniendo el &lt;em&gt;AccessToken&lt;/em&gt; ya estará autenticado con Keycloak y el segundo método nos permitirá obtener los roles y permisos asociados al usuario que podríamos obtenerlos de una base de datos relacional, en el ejemplo los roles también se obtienen del token. Con un filtro realizaremos el inicio de sesión de forma programática del usuario representado por el &lt;em&gt;AccessToken&lt;/em&gt; cuando esté presente en la petición.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=KeycloakFilter.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=AppRealm.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Apache Tapestry el filtro se registra en el módulo de la aplicación y con Shiro podemos realizar la autorización necesaria en las páginas u acciones de la aplicación usando anotaciones. En este caso una página pública que no requiere estar autenticado, una página accesible por un usuario autenticado y con rol &lt;em&gt;user&lt;/em&gt; y finalmente una página de administración que requiere rol &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como la página de inicio no requiere autenticación es accesible por cualquier usuario. Al navegar a la página de usuario o administrador se iniciará el proceso de autenticación primeramente redirigiéndonos al servidor Keycloak para que introduzcamos las credenciales.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-index.png&#34; title=&#34;Index&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-index-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-keycloak-login.png&#34; title=&#34;Login&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-user.png&#34; title=&#34;User&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-user-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si intentamos acceder a la página de usuario o administrador sin estar autenticados se nos mostrará la página de error 403 y al acceder a la página de administración con un usuario sin rol &lt;em&gt;admin&lt;/em&gt; se nos mostrará la página de error 401.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-error403.png&#34; title=&#34;Error 403&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/185/tapestry-error403-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Este artículo solo es introductorio a las posibilidades de OAuth y Keycloak, entre otras posibilidades que ofrece Keycloak creo que está permitir registrarse a los usuarios o personalizar los estilos y páginas de autenticación.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Keycloak&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/Qv1Ym&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oauth.net/getting-started/&#34;&gt;OAuth Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oauth.net/documentation/&#34;&gt;OAuth Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z-sUzl9eG6M&#34;&gt;Keycloak Basics Tutorial Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CXDrGJoCVhc&#34;&gt;Keycloak Basics Tutorial Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B-qIkB9lsLs&#34;&gt;Keycloak Demo Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QgWgUg5F_JQ&#34;&gt;Keycloak Demo Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/</id>
        <title>Generación de código en tiempo de ejecución con Byte Buddy</title>        
        <updated>2016-10-07T09:15:00+02:00</updated>
        <published>2016-10-02T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El tipado seguro y el sistema de tipos es sin duda una de las características más importante del lenguaje de programación Java que han contribuido a su éxito. Cuando no conocemos los tipos en tiempo de compilación el sistema de tipos es una limitación donde los lenguajes dinámicos son capaces de resolver el problema sin necesidad de los tipos pero perdiendo la ayuda del compilador. Usando una librería de generación de código en tiempo de compilación o ejecución tenemos la posibilidad en Java de realizar algunas tareas que los lenguajes dinámicos permiten.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/bytebuddy.png&#34; class=&#34;right&#34; alt=&#34;Byte Buddy&#34; title=&#34;Byte Buddy&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java posee un sistema de tipos estricto con el que detectar errores de compilación y hace que el código sea más legible, con un &lt;abbr title=&#34;Integrated Development Environment&#34;&gt;IDE&lt;/abbr&gt; los errores de compilación los detectaremos inmediatamente según escribimos código. Este sistema de tipos estricto es deseable en aplicaciones de negocio y empresariales ya que ayuda a que las aplicaciones tengan menos errores o errores de compilación pasen inadvertidos y ser descubiertos incluso semanas después de haber sido desplegados en producción. Su sistema de tipos es uno de los responsables del éxito de Java. Sin embargo, el sistema de tipos estricto impone restricciones en otro tipo de ámbitos como en una biblioteca de propósito general ya que no se conocerán los tipos en tiempo de compilación y no podrán por tanto ser referenciados o alternativamente hayan ser definidos como interfaces o clases abstractas que posteriormente son implementadas o extendidas.&lt;/p&gt;

&lt;p&gt;Para acceder a propiedades e invocar métodos de tipos desconocidos en tiempo de compilación en Java disponemos de la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&#34;&gt;reflection API&lt;/a&gt; o API de introspección aunque tiene los siguientes inconvenientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es lenta: más que la invocación directa de un método. La API de introspección usa &lt;abbr title=&#34;Java Native Interface&#34;&gt;JNI&lt;/abbr&gt; y requiere hacer un análisis del objeto costosa para invocar el método del objeto.&lt;/li&gt;
&lt;li&gt;Inutiliza el tipado seguro: la API de introspección no es &lt;em&gt;type-safe&lt;/em&gt;. La comprobación de los tipos de los argumentos en la invocación de un método es retrasada hasta el momento de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando la  API de introspección perdemos una de las grandes características de Java, el tipado seguro, adicionalmente el rendimiento será menor. Conocidas estas limitaciones hay varias librerías que las palían generando código en tiempo de ejecución, algunas de las más conocidas son &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&#34;&gt;Java Proxy&lt;/a&gt; que está incluida en el propio JDK, &lt;a href=&#34;https://github.com/cglib/cglib&#34;&gt;cglib&lt;/a&gt;, &lt;a href=&#34;https://jboss-javassist.github.io/javassist/&#34;&gt;Javassists&lt;/a&gt; o &lt;a href=&#34;http://asm.ow2.org/index.html&#34;&gt;ASM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leyendo uno de los artículos de la publicación gratuita &lt;a href=&#34;http://www.oracle.com/technetwork/java/javamagazine/index.html&#34;&gt;Java Magazine&lt;/a&gt; de &lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Nov/Dic 2015&lt;/a&gt; conocí otra alternativa llamada &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt; con la que al contrario de otras posibilidades no estamos limitados a generar clases que implementen interfaces conocidas (como en Java proxies), tiene un mantenimiento activo y soporta las nuevas características de las últimas versiones del lenguaje (al contrario de cglib), no está tan limitada (como Javassists) y no hay que tener conocimientos de &lt;em&gt;byte code&lt;/em&gt; (como con ASM).&lt;/p&gt;

&lt;p&gt;La generación de código se ha vuelto ubicua en muchas de las librerías más populares de Java y se usa profusamente en &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;http://hibernate.org/&#34;&gt;Hibernate&lt;/a&gt; o &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; para aplicar seguridad, gestión de transacciones, mapeo modelo relacional-objeto o pruebas unitarias o de integración (&lt;em&gt;mocking&lt;/em&gt;, &amp;hellip;) y de manera similar a lo ofrecido por los &lt;a href=&#34;http://groovy-lang.org/metaprogramming.html&#34;&gt;&lt;abbr title=&#34;Abstract Syntax Tree&#34;&gt;AST&lt;/abbr&gt;&lt;/a&gt; de &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt;. Permite emular algunas propiedades que solo están accesibles al programar con lenguajes dinámicos sin perder las comprobaciones de tipos. Las clases generadas por Byte Buddy no se distinguen de las clases generadas por el compilador.&lt;/p&gt;

&lt;p&gt;Un ejemplo sencillo de la definición de una nueva clase en tiempo de ejecución con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toString--&#34;&gt;String.toString&lt;/a&gt; que devuelve un valor fijo sería la siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con los métodos &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#saveIn-java.io.File-&#34;&gt;saveIn&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#inject-java.io.File-&#34;&gt;inject&lt;/a&gt; y &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#toJar-java.io.File-&#34;&gt;toJar&lt;/a&gt; de &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.Unloaded.html&#34;&gt;DynamicType.Unloaded&lt;/a&gt; podemos generar las clases en el momento de construcción de la aplicación previo a que sea desplegada y guardarlas en archivos &lt;em&gt;.class&lt;/em&gt; o en librerías &lt;em&gt;.jar&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando los selectores adecuados como &lt;em&gt;method&lt;/em&gt;, &lt;em&gt;field&lt;/em&gt;, &lt;em&gt;constructor&lt;/em&gt;, &lt;em&gt;named&lt;/em&gt; entre muchos otros de la clase &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/matcher/ElementMatchers.html&#34;&gt;ElementMatchers&lt;/a&gt; seremos capaces de interceptar las llamadas a los métodos y establecerles el comportamiento que deseemos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-3.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Foo.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Byte Buddy permite tres tipos de extensiones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;subclass&lt;/em&gt;: crea un nuevo tipo subclase de otro.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;redefine&lt;/em&gt;: redefine el comportamiento de un tipo existente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rebase&lt;/em&gt;: redefine el comportamiento de un tipo existente y renombra los métodos redefinidos de modo que siguen estando disponibles internamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devolver valores fijos en un método seguramente no será lo que deseemos en muchos casos pero podemos delegar el comportamiento de un método en otro y esta es una forma muy sencilla de manipular el comportamiento de un método sin conocer absolutamente nada de &lt;em&gt;bytecode&lt;/em&gt; ya que todo el código que proporcionamos es código Java. En el método en que se delega la llamada de uno interceptado es posible usar varias anotaciones para obtener diversos parámetros adicionales, &lt;em&gt;@Argument(n)&lt;/em&gt;, &lt;em&gt;@AllArguments&lt;/em&gt;, &lt;em&gt;@This&lt;/em&gt;, &lt;em&gt;@Super&lt;/em&gt;, &lt;em&gt;@Origin&lt;/em&gt; (Method, Constructor, Executable, Class, MethodHandle, MethodType, String o int), &lt;em&gt;@SuperCall&lt;/em&gt;, &lt;em&gt;@RuntimeType&lt;/em&gt;, &lt;em&gt;@DefaultCall&lt;/em&gt;, &lt;em&gt;@Default&lt;/em&gt;. El &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/implementation/bind/annotation/package-summary.html&#34;&gt;listado completo de anotaciones&lt;/a&gt; está disponible en la API Javadoc.&lt;/p&gt;

&lt;p&gt;Podemos proporcionar implementaciones de métodos de la siguiente forma, suponiendo que queremos redefinir el método &lt;em&gt;hello&lt;/em&gt; de la clase &lt;em&gt;Source&lt;/em&gt; con el comportamiento implementado en la clase &lt;em&gt;Target&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-4.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Source.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Target.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dicho esto, la generación de código en tiempo de ejecución o compilación nos permite nuevas posibilidades que solo ofrecían lenguajes dinámicos o de resolver problemas con &lt;a href=&#34;https://en.wikipedia.org/wiki/Aspect-oriented_programming&#34;&gt;programación orientada a aspectos&lt;/a&gt;. Aún así hay que tener en cuenta que las clases Java son elementos especiales para la la máquina virtual y nunca son recolectadas por el recolector de basura mientras su &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html&#34;&gt;ClassLoader&lt;/a&gt; este en uso por alguna de las clases que hay cargadas en la aplicación.&lt;/p&gt;

&lt;p&gt;Ejecutando esta pequeña aplicación obtenemos el siguiente resultado en la terminal.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el &lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;tutorial de Byte Buddy&lt;/a&gt; encontraremos más información y más detallada de las posibilidades que nos ofrece esta interesante librería en la plataforma &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; para manipular &lt;em&gt;bytecode&lt;/em&gt; y tipos con el lenguaje Java en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoByteBuddy&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;Tutorial de Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Java Magazine Nov/Dic 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/</id>
        <title>Cliente de un servicio REST autenticado con OAuth en Java</title>        
        <updated>2016-10-01T11:00:00+02:00</updated>
        <published>2016-10-01T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Teniendo un servicio REST securizado con OAuth2 al invocarlo deberemos realizar el flujo necesario para obtener un &lt;em&gt;access token&lt;/em&gt; y posteriormente enviarlo al servicio REST como forma de autenticación y autorización. Usando un cliente programado en el lenguaje Java y usando la librería HttpClient podemos hacer las peticiones HTTP necesarias para la invocación del servicio.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Explicaba como llamar a un servicio REST autenticado con OAuth2 en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;. Para ello usaba la utilidad &lt;em&gt;curl&lt;/em&gt; para hacer las peticiones HTTP &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; necesarias tanto para obtener el &lt;em&gt;access token&lt;/em&gt; usando el flujo &lt;em&gt;client_credentials&lt;/em&gt; como para una vez obtenido el &lt;em&gt;access token&lt;/em&gt; llamar al servicio REST. En una aplicación usaremos un lenguaje de programación para llmar al servicio, en este ejemplo mostraré como llamarlo usando un cliente programado en lenguaje Java que hará las mismas peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; pero usando la librería &lt;a href=&#34;https://hc.apache.org/&#34;&gt;HttComponents&lt;/a&gt; en vez de &lt;em&gt;curl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primero añadiremos como dependencia del proyecto la librería HttComponents. Como en las diferentes llamadas el intercambio de datos se realiza mediante el &lt;a href=&#34;http://json.org/&#34;&gt;formato JSON&lt;/a&gt; añadiremos otro par dependencias para procesar los datos en este formato, en este caso usando la API de &lt;a href=&#34;https://jsonp.java.net/&#34;&gt;JSON-P&lt;/a&gt; y una implementación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este sencillo cliente realiza varias peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt;. Una para obtener la configuración de los &lt;em&gt;endpoints&lt;/em&gt;, el que nos interesa es el de obtener un &lt;em&gt;access token&lt;/em&gt;, otra petición para obtener el &lt;em&gt;access token&lt;/em&gt; y finalmente con el &lt;em&gt;access token&lt;/em&gt; invocar al servicio mediante otra petición.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=ClientMain.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciado &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, configurado el &lt;em&gt;realm&lt;/em&gt; y creado un cliente junto con un rol e iniciado el servicio REST podemos ejecutar el cliente que invoque al servicio. El resultado de las trazas que obtendremos en la terminal será el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En las trazas vemos el &lt;em&gt;endpoint&lt;/em&gt; para obtener &lt;em&gt;access token&lt;/em&gt;, el &lt;em&gt;access token&lt;/em&gt; obtenido, &lt;em&gt;refresh token&lt;/em&gt; y tiempos de expiración de los mismos, finalmente los datos devueltos por el servicio. Como se observa los &lt;em&gt;access token&lt;/em&gt; son una cadena opaca bastante larga de caracteres, y es que está cifrada, firmada digitalmente y contiene información como el rol y tiempos de expiración. Enviado el &lt;em&gt;access token&lt;/em&gt; al servicio REST el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/oidc/java/java-adapters.html&#34;&gt;adaptador de Keycloak para Spring Boot&lt;/a&gt; validará la firma digital del &lt;em&gt;token&lt;/em&gt;, descifrará la información, validará su tiempo de expiración y se comprobará si tiene el rol necesario para acceder al &lt;em&gt;endpoint&lt;/em&gt; del servicio REST. Notar que con la información incluida en el token y el hecho de que está firmado digitalmente no es necesario que el servicio REST se comunique con el proveedor de OAuth para hacer la validación.&lt;/p&gt;

&lt;p&gt;El cliente no tiene más salvo que usando la clase &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; y haciendo una petición HTTPS con un certificado autofirmado en el servidor deberemos ignorar las comprobaciones de seguridad. Para ello se usan un &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html&#34;&gt;SSLConnectionSocketFactory&lt;/a&gt; que las ignore.&lt;/p&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/</id>
        <title>Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</title>        
        <updated>2016-10-07T09:00:00+02:00</updated>
        <published>2016-09-24T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Keycloak es un proveedor de OAuth que podemos usar en nuestras aplicaciones y servicios para proporcionar autenticación, autorización, SSO y también añadir seguridad a los servicios REST que desarrollemos como muestro en este artículo. OAuth tiene varias ventajas sobre usar autenticación &lt;em&gt;Basic&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una forma de autenticar a los clientes de un servicio REST es usar &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;autenticación Basic&lt;/a&gt; que se basa en añadir una cabecera en la petición en la que se incluye un usuario y contraseña. La autenticación Basic es sencilla pero para que sea segura ha de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;usar el protocolo seguro HTTPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, presenta otros inconvenientes y es que si al servicio van a acceder varios clientes y a uno queremos impedirle el acceso no podremos hacerlo sin cambiar el usuario y contraseña lo que obligará al resto de clientes actualizarse para usar las nuevas credenciales si las comparten, que no siempre es posible sobre todo si esos clientes están fuera de nuestro control. Para solventar el segundo problema tenemos la posibilidad de segurizar el servicio REST con el &lt;a href=&#34;https://oauth.net/&#34;&gt;protocolo OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Teniendo un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt; añadirle seguridad con OAuth mediante el proveedor &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; es lo que muestro en este artículo. En el servicio REST bastará que usemos el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/latest/topics/oidc/java/java-adapters.html&#34;&gt;adaptador para Spring Boot de Keycloak&lt;/a&gt; y añadamos en Keycloak cierta configuración que consistirá en un &lt;em&gt;realm&lt;/em&gt; y el registro de un cliente. Para acceder al servicio REST usaremos el flujo &lt;em&gt;client_credentials&lt;/em&gt; que nos permitirá obtener un &lt;em&gt;token&lt;/em&gt; usando las credenciales del cliente.&lt;/p&gt;

&lt;p&gt;Iniciado Keycloak con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; accedemos al panel de administración con el navegador, en mi caso en &lt;em&gt;&lt;a href=&#34;http://localhost:9080&#34;&gt;http://localhost:9080&lt;/a&gt;&lt;/em&gt; con el usuario &lt;em&gt;admin&lt;/em&gt; y contraseña &lt;em&gt;admin&lt;/em&gt; según lo indicado en el archivo &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose-up.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login.png&#34; title=&#34;Inicio de sesión de Keycloak&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Creamos un &lt;em&gt;realm&lt;/em&gt;, en el ejemplo llamado &lt;em&gt;springbootjaxrs&lt;/em&gt; y un cliente con id &lt;em&gt;client&lt;/em&gt;, además crearemos un rol &lt;em&gt;api&lt;/em&gt; y se lo asignaremos al cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client.png&#34; title=&#34;Registro del cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role.png&#34; title=&#34;Creación de rol&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles.png&#34; title=&#34;Asignación de roles al cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Una vez realizada la configuración en el servidor de OAuth/Keycloak obtendremos la configuración para el adaptador de Keycloak para el servicio REST desde la pestaña &lt;em&gt;Installation&lt;/em&gt; que añadiremos en el fichero de configuración de Spring Boot &lt;em&gt;application.yml&lt;/em&gt;. Además, indicaremos que el cliente solo aceptará &lt;em&gt;access tokens&lt;/em&gt; mediante la opción &lt;em&gt;bearer-only&lt;/em&gt; de modo que no hará redirecciones para autenticar.&lt;/p&gt;

&lt;p&gt;Indicaremos también el rol que deberá poseer el cliente para acceder al servicio REST junto que URLs del servicio estarán autenticadas por OAuth. Añadida la configuración al archivo &lt;em&gt;application.yml&lt;/em&gt; el servicio REST es totalmente inconsciente de la autenticación que se realizará con OAuth y Keycloak.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=application.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciado Keycloak y el servicio REST con el comando &lt;code&gt;./gradlew run&lt;/code&gt; podemos iniciar el proceso de obtención de un &lt;em&gt;access token&lt;/em&gt; y llamar al servicio proporcionando el &lt;em&gt;access token&lt;/em&gt; obtenido y ver que pasa si no proporcionamos &lt;em&gt;token&lt;/em&gt; o uno modificado o inválido. Para obtener el &lt;em&gt;access token&lt;/em&gt; podemos emplear &lt;em&gt;curl&lt;/em&gt; accediendo al &lt;em&gt;endpoint&lt;/em&gt; de Keycloak para obtenerlos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-token.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token.png&#34; title=&#34;Obtención de un token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Obtenido el _access token_ si no lo proporcionamos en la llamada al servicio REST observaremos que la respuesta que obtenemos es un [código de estado HTTP 401][wikipedia-http-status-codes] indicando que se necesitan proporcionar las credenciales que con OAuth es un _token_.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-401.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token.png&#34; title=&#34;Llamada al servicio REST sin token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Proporcionando el token mediante una cabecera de la petición el servicio nos devolverá los datos que proporciona. Si el _token_ no es válido obtendremos un error HTTP 401.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl.sh&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath.png&#34; title=&#34;Llamada al servicio REST con token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered.png&#34; title=&#34;Llamada al servicio REST con token inválido&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

Para usar Keycloak en una aplicación Java con Spring Boot deberemos añadir algunas dependencias al proyecto que usando [Gradle][gradle] como herramienta de construcción serían las siguientes.

&lt;script src=&#34;//gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En el siguiente artículo mostraré un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente del servicio REST autenticado con OAuth en Java&lt;/a&gt; que haga las mismas llamadas que con &lt;em&gt;curl&lt;/em&gt; pero usando código Java mediante la librería &lt;a href=&#34;http://hc.apache.org/&#34;&gt;HttpComponents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pivotal.io/pivotal-cloud-foundry/products/securing-restful-web-services-with-oauth2&#34;&gt;Securing RESTful Web Services with OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.apigee.com/api-services/content/oauth-20-client-credentials-grant-type&#34;&gt;Implementing the client credentials grant type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/28658735/what-are-keycloaks-oauth2-openid-connect-endpoints&#34;&gt;What are Keycloak&amp;rsquo;s OAuth2 / OpenID Connect endpoints?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/</id>
        <title>Ejemplo de API REST en Java con JAX-RS y Spring Boot</title>        
        <updated>2016-09-17T12:00:00+02:00</updated>
        <published>2016-09-17T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/spring.png&#34; class=&#34;right&#34; alt=&#34;Spring Framework&#34; title=&#34;Spring Framework&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En Java a través de JAX-RS, una de entre las varias &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;especificaciones de JavaEE&lt;/a&gt;, podemos desarrollar servicios web basados en &lt;a href=&#34;http://es.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;&lt;abbr title=&#34;Representational State Transfer&#34;&gt;REST&lt;/abbr&gt;&lt;/a&gt; y &lt;a href=&#34;http://json.org/&#34;&gt;&lt;abbr title=&#34;JavaScript Object Notation&#34;&gt;JSON&lt;/abbr&gt;&lt;/a&gt;. Estos servicios web al usar la infraestructura de la web y el protocolo HTTP podemos hacer uso de facilidades que proporciona como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;cacheo&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;protocolo seguro&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;HTTP/2&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/&#34;&gt;compresión&lt;/a&gt; o autenticación. Usando &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; podemos desarrollar servicios web autocontenidos al igual que podemos hacer con las aplicaciones web tradicionales.&lt;/p&gt;

&lt;p&gt;Para facilitar el inicio de los proyectos podemos usar &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; seleccionando los módulos web y JAX-RS con la implementación de referencia &lt;a href=&#34;https://jersey.java.net/&#34;&gt;Jersey&lt;/a&gt;. Al proyecto creado deberemos añadir los servicios que queramos proporcionar. En el ejemplo añadiré uno muy sencillo que devuelva un nuevo mensaje creado en un servicio inyectado en la clase del recurso del servicio REST.&lt;/p&gt;

&lt;p&gt;Esta es la definición del &lt;em&gt;bean&lt;/em&gt; del servicio que creará el mensaje para el contenedor de inversión de control, también definimos el recurso del servicio REST para Jersey.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=JerseyConfig.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El servicio lo definimos en una interfaz y una clase que la implementa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageService.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=DefaultMessageService.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Message.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Es habitual que los servicios REST produzca como resultado un JSON como formato para devolver los datos. No necesitaremos hacer nada especial para convertir el &lt;em&gt;Java Bean&lt;/em&gt; de la clase &lt;em&gt;Message&lt;/em&gt; a JSON, de ello se encargará automáticamente JAX-RS. Con anotaciones como &lt;a href=&#34;http://docs.oracle.com/javaee/7/api/javax/ws/rs/QueryParam.html&#34;&gt;@QueryParam&lt;/a&gt; podemos obtener los parámetros del &lt;em&gt;query string&lt;/em&gt;, de la URL o cabeceras enviadas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciada la aplicación con &lt;code&gt;./gradlew run&lt;/code&gt; y con la siguiente comando de &lt;code&gt;curl&lt;/code&gt; y URL obtendremos el mensaje en formato JSON en la salida.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=curl.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=out.txt&#34;&gt;&lt;/script&gt;

&lt;p&gt;Al diseñar APIs REST más complejas que este sencillo ejemplo conviene conocer el término &lt;a href=&#34;https://en.wikipedia.org/wiki/HATEOAS&#34;&gt;HATEOAS&lt;/a&gt;. Deberemos definir como organizar la información devuelta por los diferentes que los libros &lt;a href=&#34;http://amzn.to/2cxWMRo&#34;&gt;RESTful Web APIs&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2cEzQz5&#34;&gt;REST in Practice&lt;/a&gt; además de &lt;a href=&#34;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;artículos con consejos sobre como diseñar APIs RESTful&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1449358063&amp;linkId=e0cd589f357dfc1c77cfb004e6668fa5&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596805829&amp;linkId=3b1ee2b6ff595b6b3c2fd7c70eb35cc7&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Una vez que disponemos del servicio REST podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;añadir autenticación y autorización con Keycloak como proveedor de OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrs&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;Introducción y nuevas características de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/&#34;&gt;Aplicación de ejemplo usando varias especificaciones de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/buenas-practicas-para-el-diseno-de-una-api-restful-pragmatica/&#34;&gt;Buenas prácticas para el diseño de una API RESTful pragmática&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/</id>
        <title>Por qué guardar las fechas en UTC en la base de datos</title>        
        <updated>2016-08-14T02:30:00+02:00</updated>
        <published>2016-08-13T01:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/postgresql.png&#34; class=&#34;right&#34; alt=&#34;PostgreSQL&#34; title=&#34;PostgreSQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Es rara la aplicación que trabajado con bases de datos no maneje fechas, quizá es menos habitual aplicaciones que trabajan con fechas y diferentes horarias, esto es haciendo alguna conversión entre zonas horarias. Si se nos presenta el caso de trabajar con fechas y diferentes zonas horarias haremos bien en hacer que las fechas que guardemos en la base de datos estén en la misma zona horaria al menos y convertirla posteriormente a la zona horaria que necesite la aplicación. &lt;abbr title=&#34;Coordinated Universal Time&#34;&gt;UTC&lt;/abbr&gt; además de ser una zona horaria neutra evita el problema de que algunas bases de datos o lenguajes de programación para los campos fecha no guarda las zonas horarias con lo que puede ocurrirnos que guardemos la fecha en una zona horaria y la recuperemos en otra produciendo posiblemente incoherencias en las fechas por una hora.&lt;/p&gt;

&lt;h3 id=&#34;por-qué-elegir-utc&#34;&gt;¿Por qué elegir UTC?&lt;/h3&gt;

&lt;p&gt;Principalmente porque es una zona horaria neutra, universal y que elimina ambigüedades ya que que no tiene &lt;abbr title=&#34;Daily Saving Time&#34;&gt;DST&lt;/abbr&gt; o horario de verano y podremos guardar las fechas sin temor a que al recuperarlas estén en otra zona horaria si la base de datos o el lenguaje de programación para guardarlas no las soporta.&lt;/p&gt;

&lt;p&gt;Otros motivos que se mencionan en un comentario en inglés &lt;a href=&#34;http://ideas.kentico.com/forums/239189-kentico-product-ideas/suggestions/6825844-always-store-dates-times-in-utc-in-the-database&#34;&gt;Always store dates/times in UTC (in the database)&lt;/a&gt; y algún otro en &lt;a href=&#34;http://blog.abodit.com/2010/02/datetime-values-should-always-be-stored-in-utc/&#34;&gt;DateTime values should always be stored in UTC&lt;/a&gt; son que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calcular duraciones de tiempo es simple. El periodo de tiempo entre la 2:30 AM UTC y las 3:30 AM UTC es siempre una hora cosa que no ocurre en las horas que hay cambio de horario pudiendo ser el periodo entre cero y dos horas.&lt;/li&gt;
&lt;li&gt;No hay fechas inválidas cuando se adelanta la hora por ejemplo de las 2:00 AM a las 3:00 AM, pudiendo ser que las 2:30 AM en esa zona horaria no exista.&lt;/li&gt;
&lt;li&gt;Se evitan problemas al ordenar o agrupar fechas pudiendo ser el caso de que una fecha con tiempo 2:59 AM sea antes que las 2:01 AM por causa del cambio horario.&lt;/li&gt;
&lt;li&gt;Los cambios horarios están sujetos a cambios nada predecibles y varían a lo largo del tiempo con relativa frecuencia con lo para calcular de forma fiable cuantas horas hay entre dos fechas se necesita guardar las variaciones históricas de DST. Ni las fechas de cambios DST son constantes ni las zonas horarias se mantienen fijas para las localizaciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez recuperada la fecha en UTC podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/&#34;&gt;convertir de diferentes formas una fecha de una zona horaria a otra en Java&lt;/a&gt; y en cualquier otro lenguaje con las facilidades que proporcione según la zona horaria a visualizar la fecha.&lt;/p&gt;

&lt;h3 id=&#34;cúal-es-el-caso-que-puede-dar-problemas&#34;&gt;¿Cúal es el caso que puede dar problemas?&lt;/h3&gt;

&lt;p&gt;Uno en el que la hora a guardar coincida con un cambio de hora de la zona horaria en la que guardemos las fechas. Por ejemplo, en España el año 2016 el cambio de horario de verano (DST/CEST) a horario de invierno (CET) se hará el 30 de octubre momento en el que a las 3:00 (CEST) volverán a ser las 02:00 pero con diferente zona horaria (CET).&lt;/p&gt;

&lt;h3 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h3&gt;

&lt;p&gt;Supongamos que tenemos la fecha 30 de octubre a las 02:30 CEST y la guardamos en la base de datos pero sin la zona horaria pasando a estar implícita. En esta fecha y hora se produce un cambio horario de horario de verano a horario de invierno en España. Al recuperar la fecha será 30 de octubre a las 02:30 CET, la diferencia está entre el &lt;abbr title=&#34;Central European Summer Time&#34;&gt;CEST&lt;/abbr&gt; y &lt;abbr title=&#34;Central European Time&#34;&gt;CET&lt;/abbr&gt; o la diferencia horaria +02:00 y +01:00. Una hora de diferencia entre la original y la que recuperamos de la base de datos después de hacer la conversión.&lt;/p&gt;

&lt;p&gt;Esto puede probarse con el siguiente ejemplo de código de un programa Java que guarda y recupera de una base de datos &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; una fecha que está en el intervalo de cambio horario. En el ejemplo utilizaré &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=System.out&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Tabajar con fechas no es simple, es muy curioso y no debemos hacer &lt;a href=&#34;http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time&#34;&gt;suposiciones sobre las fechas que son incorrectas&lt;/a&gt; en las aplicaciones.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DateTimeDatabase&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;cd misc/docker/postgresql/ &amp;amp;&amp;amp; docker-compose up &amp;amp;&amp;amp; ./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/&#34;&gt;Convertir fechas y husos horarios en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ideas.kentico.com/forums/239189-kentico-product-ideas/suggestions/6825844-always-store-dates-times-in-utc-in-the-database&#34;&gt;Always store dates/times in UTC (in the database)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/</id>
        <title>No, un tag JSP o un tag de Grails no es equivalente a un componente de Tapestry</title>        
        <updated>2016-07-25T12:00:00+02:00</updated>
        <published>2016-07-25T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Alguna vez que he dado una presentación sobre Apache Tapestry después de la misma me comentaron que eso mismo que explicaba se podía hacer con el &lt;em&gt;framework&lt;/em&gt; que esa persona usaba. En un proyecto la tecnología no es es lo más importante pero es una herramienta que puede facilitar en gran medida el desarrollo. Respecto a los componentes de Tapestry alguien puede pensar que son iguales a los &lt;em&gt;tag&lt;/em&gt; que existen en las tecnologías de presentación como JSP o Grails. En este artículo comentaré algunas diferencias importantes que los hace más y muy interesantes junto con otras características de &lt;em&gt;framework&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Viendo el panel &lt;a href=&#34;https://es.wikipedia.org/wiki/Kanban_(desarrollo)&#34;&gt;Kanban&lt;/a&gt; de la herramienta de peticiones &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;JIRA&lt;/a&gt; que usamos para registrar y priorizar las siguiente tareas en la empresa que trabajo hay unas cuantas que consisten en dado un listado de compras poder realizar operaciones sobre múltiples filas sin salir de la pantalla del listado. La necesidad es evitar que los usuarios de la aplicación hagan las acciones de forma individual de forma repetitiva, evitarles esto harán que sean más productivos y podrán desarrollar su trabajo mejor y más rápido. Así de sencillo, aparentemente.&lt;/p&gt;

&lt;p&gt;Esta necesidad que en la realidad será implementada con &lt;a href=&#34;https://grails.org/&#34;&gt;Grails&lt;/a&gt; quería compararla con una implementación equivalente usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; porque como en muchas otras necesidades intuyo que con Tapestry implementarlas es significativamente más sencillo y con un resultado de implementación como en este caso con el que quedo más a gusto.&lt;/p&gt;

&lt;h3 id=&#34;la-necesidad&#34;&gt;La necesidad&lt;/h3&gt;

&lt;p&gt;Definiendo más la necesidad hasta ahora cada fila del listado tiene un conjunto de botones para realizar acciones individuales y ahora se quiere al final del listado otro conjunto de botones para realizar acciones sobre las compras que se seleccionen de forma múltiple. Para seleccionar las compras se usará un &lt;em&gt;checkbox&lt;/em&gt; colocado al inicio de cada fila. Para algunas acciones el usuario ha de introducir información adicional cosa que hará con un diálogo modal que ya existe pero que hasta ahora solo permitía hacer la acción de forma individual. Las mismas acciones se realizarán en varias páginas de la aplicación (después de la acción se deberá volver a la página en la que se estaba), solo se podrán hacer las acciones múltiples si en todas las compras seleccionadas es posible realizar esa acción y el contenido de los diálogos solicitando información adicional podrán depender de las compras seleccionadas. Las acciones en el ejemplo serán habilitar o deshabilitar. Determinar las acciones posibles de una compra es compleja y saber si una acción es posible no depende solo de información en la propia compra sino de otras entidades del sistema, en el ejemplo no será así pero se tendrá en cuenta en la implementación.&lt;/p&gt;

&lt;p&gt;Esta sería una imagen del prototipo de los botones para hacer acciones múltiples, seleccionar compras y el diálogo modal para introducir información adicional.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/listado.png&#34; title=&#34;Listado de productos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/listado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/modal.png&#34; title=&#34;Modal solicitando información adicional&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/modal-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Listado y modal de la necesidad expuesta&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En la necesidad real las filas son compras pero en el ejemplo usaré la entidad &lt;em&gt;Product&lt;/em&gt;. Las acciones en el ejemplo serán habilitar para la que no será necesaria información adicional, la otra acción será deshabilitar para la que se necesitará introducir una razón con un modal.&lt;/p&gt;

&lt;h3 id=&#34;las-posibilidades&#34;&gt;Las posibilidades&lt;/h3&gt;

&lt;p&gt;Para implementar técnicamente el que solo se puedan hacer las acciones múltiples según los productos seleccionadas se habilitarán o deshabilitarán los botones con JavaScript sin peticiones AJAX adicionales al servidor para ello toda la información necesaria deberá estar en el cliente. En este caso bastará habilitar o deshabilitar cada botón según si esa acción es posible en todas los productos seleccionadas pero eso podría no bastar ya que se podría requerir que productos fuesen del mismo vendedor. En el ejemplo con un atributo en un elemento HTML de la fila que contenga las acciones posibles separadas por comas bastará. De esta forma no habrá que hacer consultas adicionales al servidor mediante peticiones AJAX en cada nueva selección.&lt;/p&gt;

&lt;p&gt;Sin embargo, como el contenido de los diálogos depende del producto o productos seleccionadas se hará una petición AJAX para obtener su contenido. De esta forma el contenido de los diálogos no tendrá que estar precargado (el número de acciones podría ser una decena) en el cliente ni generarlo con JavaScript en cliente que sería algo más complicado que usar la propia tecnología para generar contenido que está presente en el servidor y posiblemente más propenso a errores por usar JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;la-implementación-con-apache-tapestry&#34;&gt;La implementación con Apache Tapestry&lt;/h3&gt;

&lt;p&gt;Definida la necesidad y unas pocas notas voy a poner el código de como con Apache Tapestry implementar la solución. La página del listado será la siguiente. En el &lt;em&gt;checkbox&lt;/em&gt; de selección se añade el atributo &lt;em&gt;data-product-actions&lt;/em&gt; con las acciones posibles que se obtienen del servicio &lt;em&gt;AppService&lt;/em&gt; con el método &lt;em&gt;getAvaliableActions&lt;/em&gt;. El componente de Tapestry &lt;em&gt;actions&lt;/em&gt; generará el código de los botones tanto para los individuales en su uso &lt;em&gt;&amp;lt;t:actions&amp;gt;&lt;/em&gt; con el parámetro &lt;em&gt;product&lt;/em&gt; como múltiples en su uso con el parámetro &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Index.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código para mostrar las acciones con botones para un determinado producto o para los productos es el siguiente. El mismo componente se encargará de realizar en el servidor la acción habilitar que no necesita modal. Con un poco de &lt;a href=&#34;http://es.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; y &lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore&lt;/a&gt; se habilitarán o deshabilitarán los botones y se mostrará el diálogo para la acción deshabilitar.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Actions.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Actions.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=actions.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código del modal para deshabilitar sería el siguiente. En el método &lt;em&gt;show&lt;/em&gt; recibe los &lt;em&gt;ids&lt;/em&gt; de los productos a deshabilitar y recupera del servidor el contenido de diálogo con una petición AJAX. El componente del modal se encargará de hacer el deshabilitado de los productos y la recarga de la página si finaliza correctamente o de mostar los errores de validación que se produzcan si no se ha introducido el motivo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=DisableProductsModal.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=DisableProductsModal.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=modals.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/TapestryMultipleActions&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;h3 id=&#34;algunas-diferencias-con-servlets-jsp-y-grails&#34;&gt;Algunas diferencias con Servlets/JSP y Grails&lt;/h3&gt;

&lt;p&gt;La tecnología de presentación de páginas web Java con &lt;em&gt;Java Server Pages&lt;/em&gt; o JSP permiten encapsular con un &lt;em&gt;tag&lt;/em&gt; la generación de un trozo de HTML no en el propio JSP sino en ese &lt;em&gt;tag&lt;/em&gt; que en código Java pudiendo incluir la llamada a un JSP. Los &lt;em&gt;tags&lt;/em&gt; y librerías de &lt;em&gt;tags&lt;/em&gt; son una forma de reutilizar esas partes de generación de código en el mismo proyecto y entre proyectos. Los &lt;em&gt;tags&lt;/em&gt; además son una forma de abstraernos del funcionamiento interno del &lt;em&gt;tag&lt;/em&gt; haciendo que solo necesitemos conocer sus parámetros.&lt;/p&gt;

&lt;p&gt;Si usamos JSP usar librerías de &lt;em&gt;tags&lt;/em&gt; es una buena idea, sin embargo, tiene algunas limitaciones como que requieren un archivo descriptor en formato XML que las defina y aunque pudiendo saber que parámetros definen y cuáles son requeridos no define el tipo de los parámetros que requiere. Los archivos XML en la época actual han caído en desuso porque son propensos a errores, errores que no son detectados hasta tiempo de ejecución, de los peores tipos de errores. Por otro lado, que los &lt;em&gt;tags&lt;/em&gt; no especifiquen el tipo de parámetro que requiere cada uno hace que debamos inspeccionar el código fuente del &lt;em&gt;tag&lt;/em&gt; con lo que la ventaja de abstraerse del funcionamiento no es del todo completa. Si por algún cambio el tipo de parámetro cambia hay que adaptar todos los usos del &lt;em&gt;tag&lt;/em&gt;, si alguno no se hace nuevamente se producirán errores en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;Grails usa GSP, una tecnología de presentación similar a los JSP. También dispone de &lt;em&gt;tags&lt;/em&gt; que no requieren definir los &lt;em&gt;tags&lt;/em&gt; en un archivo XML simplificando su uso pero que igualmente adolecen de algunos problemas como los JSP. Por un lado, los &lt;em&gt;tags&lt;/em&gt; de Grails no disponen un mecanismo para hacer requerido un determinado parámetro con lo que deberemos incluir la comprobación con código nosotros, tampoco define el tipo de parámetros que requiere. También aunque hacer más simple su desarrollo al no tener un descriptor XML como en los &lt;em&gt;tag&lt;/em&gt; JSP hace que haya que inspeccionar el código fuente para saber qué parámetros tiene, si son requeridos y cuál es el tipo del parámetro. Todo esto hace que puedan producirse errores en tiempo de ejecución y errores que no son producidos hasta que se ejercita el &lt;em&gt;tag&lt;/em&gt; con un mal uso o un uso desactualizado al igual que usando los &lt;em&gt;tag&lt;/em&gt; JSP.&lt;/p&gt;

&lt;p&gt;En Apache Tapestry todo son componentes, las páginas también son componentes con la característica de que no están embebidos en otro componente. Un componente de Apache Tapestry sería similar a un &lt;em&gt;tag&lt;/em&gt; de JSP o un &lt;em&gt;tag&lt;/em&gt; de Grails, con ciertas similitudes pero no iguales en aspectos importantes. De pronto, un componente de Tapestry define los parámetros que necesita y si son requeridos pero también define el tipo del parámetro. Como se aprecia en las páginas de documentación de los &lt;a href=&#34;http://tapestry.apache.org/component-reference.html&#34;&gt;componentes integrados de serie en Apache Tapestry&lt;/a&gt; se puede conocer esta información sin necesidad de conocer el código fuente del componente, documentación que podemos generar para los componentes que nosotros desarrollemos. Los parámetros, si son requeridos y sus tipos forman el contrato del componente y es lo único que deberemos conocer para usarlos, su funcionamiento interno nos es irrelevante que incluye el código JavaScript que necesite, podría que CSS y literales internacionalizados.&lt;/p&gt;

&lt;p&gt;Pero esas no son las únicas diferencias con los &lt;em&gt;tags&lt;/em&gt; de JSP o de Grails y es que estas son solo tecnologías de presentación, la V del &lt;a href=&#34;https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93controlador&#34;&gt;patrón MVC&lt;/a&gt;. Los componentes de Tapestry aparte de encapsular la lógica de presentación también pueden encapsular lógica de controlador, en el conocido patrón MVC además de V pueden ser C con lo que encapsulan aún más funcionalidad. La lógica de presentación y controlador en los JSP y Grails está separada pero ambas lógicas no son independientes, están relacionadas, en Tapestry está encapsulada en el mismo componente.&lt;/p&gt;

&lt;p&gt;Los componentes de Tapestry usan el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/&#34;&gt;modelo pull en vez del modelo push&lt;/a&gt; haciendo innecesario construir un objeto &lt;em&gt;Map&lt;/em&gt; que pasar a la vista, haciendo que sea la plantilla la que solicite al controlador los datos que necesita y haciendo que el controlador no sepa que datos necesita la vista. El controlador solo deberá tener las propiedades y métodos que necesite la vista. Dado que en las plantillas &lt;em&gt;tml&lt;/em&gt; de la vista no se pueden incluir expresiones complejas hace que no contengan lógica que estará en el controlador asociado que es código Java donde tendremos la ayuda del compilador para detectar errores.&lt;/p&gt;

&lt;p&gt;Para volver a la misma página en &lt;a href=&#34;https://spring.io/&#34;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Struts&lt;/a&gt; o &lt;a href=&#34;https://grails.org/&#34;&gt;Grails&lt;/a&gt; posiblemente deberíamos recibir además información para retornar a la misma página en la que estabamos cosa que es innecesaria en Tapestry por su &lt;a href=&#34;http://tapestry.apache.org/page-navigation.html&#34;&gt;concepto de contexto de activación de página&lt;/a&gt; y el patrón &lt;em&gt;Redirect-After-Post&lt;/em&gt; hará que al recargar la página por código con &lt;code&gt;window.localtion.reload();&lt;/code&gt; después de una petición POST el navegador no muestre un diálogo modal informando al usuario de que se reenviarán datos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/dialogo-recargar.png&#34; title=&#34;Diálogo recargar después de petición POST en Firefox&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/dialogo-recargar-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Diálogo recargar después de petición POST en Firefox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://www.polymer-project.org/1.0/&#34;&gt;Polymer&lt;/a&gt; son tecnologías de cliente en algunos aspectos similares a los componentes de Apache Tapestry pero con la diferencia de que unos son para el navegador del cliente y otros para el servidor, nada nos impide en la misma aplicación usar en el cliente React y Polymer y en el servidor Apache Tapestry. Nótese en el código del caso anterior que Tapestry ofrece integración con JavaScript de un modo que no existe ni en Spring MVC, Struts o Grails e incorpora de serie &lt;a href=&#34;http://requirejs.org/&#34;&gt;RequireJS&lt;/a&gt;, Undercore y jQuery, un componente de Tapestry puede requerir la cargar de un recurso de JavaScript y desde el componente es posible pasar datos al JavaScript usando el servicio &lt;a href=&#34;http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/services/javascript/JavaScriptSupport.html&#34;&gt;JavaScriptSupport&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esto es solo un pequeño ejemplo de las posibilidades de Apache Tapestry me dejo muchas otras como los eventos, &lt;em&gt;translators&lt;/em&gt;, &lt;em&gt;encoders&lt;/em&gt;, &lt;em&gt;coerces&lt;/em&gt;, librerías de componentes, &lt;em&gt;inversion of control&lt;/em&gt;, AJAX, validaciones de formularios, &amp;hellip; En un proyecto las herrramientas no son lo más importante pero &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/el-lenguaje-de-programacion-framework-y-librerias-importan/&#34;&gt;el lenguaje de programación, framework y librerías importan&lt;/a&gt;, hay &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/&#34;&gt;10 razones para seguir usando Java&lt;/a&gt; y varios &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html&#34;&gt;motivos para elegir Apache Tapestry&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h3&gt;

&lt;p&gt;Lamentablemente hasta el momento no he tenido una oportunidad laboral de comprobar y demostrar que como en este ejemplo pero basado en una necesidad real que con Tapestry la implementación de la solución es más sencilla, menos propensa a errores y que la productividad no está relacionado con escribir unas pocas líneas de código menos con un lenguaje menos verboso o dejar de escribir puntos y comas al final de las líneas, más aún con las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades de Java 8&lt;/a&gt;. Quizá un día llegue esa oportunidad :|.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/Qv1Ym&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="tapestry"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/hemeroteca-9/</id>
        <title>Hemeroteca #9</title>        
        <updated>2016-07-02T12:00:00+02:00</updated>
        <published>2016-07-01T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/hemeroteca-9/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;6 meses más y 35 nuevos artículos escritos sobre temas de programación, java, software libre y opinión. No son muchos artículos pero tampoco son artículos breves sobre noticias efímeras, en cada artículo trato de compartir no solo información sino conocimiento en los que además suelo incluir el código completo de un ejemplo totalmente funcional.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;Como cada seis meses en Blog Bitix hago una recopilación de los artículos que he publicado durante este tiempo, comento sobre que he escrito y comparto cómo ha evolucionado esta bitácora. Durante estas 26 primeras semanas del año he escrito 35 nuevos artículos siguiendo mi ritmo de publicación no muy prolífico pero muy constante al ritmo de uno por semana, algunas publicando dos artículos casi siempre durante el fin de semana.&lt;/p&gt;

&lt;p&gt;Los temas de los artículos han sido los habituales programación, GNU/Linux, Java, JavaScript, unos pocos de opinión y algún desempaquetado de producto que he comprado y he usado.&lt;/p&gt;

&lt;p&gt;En la categoría de programación están los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/introduccion-y-ejemplo-basico-sobre-vertx/&#34;&gt;Introducción y ejemplo básico sobre Vert.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/aplicacion-web-con-spark-framework-y-java/&#34;&gt;Aplicación web con Spark Framework y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;Introducción al protocolo HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;Configurar HTTP/2 en nginx, Apache HTTPD, WildFly o Jetty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;Introducción y nuevas características de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/&#34;&gt;Cómo ejecutar un proceso del sistema con Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/&#34;&gt;Cómo firmar correos electrónicos con GPG y JavaMail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/&#34;&gt;Aplicación de ejemplo usando varias especificaciones de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/usar-twitter-desde-java-con-twitter4j/&#34;&gt;Usar Twitter desde Java con twitter4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/el-componente-grid-de-apache-tapestry/&#34;&gt;El componente Grid de Apache Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/&#34;&gt;Extraer elementos de una cadena con una expresión regular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/que-es-el-concepto-de-heap-pollution-en-java/&#34;&gt;Qué es el concepto de Heap Pollution en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/la-clase-threadlocal-de-java-y-usos-practicos/&#34;&gt;La clase ThreadLocal de Java y usos prácticos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/&#34;&gt;Incluir información de la versión en el artefacto distribuible con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-en-java-con-apache-poi/&#34;&gt;Ejemplo sencillo de como crear un excel en Java con Apache POI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/ofrecer-contenido-personalizado-al-usuario-basado-en-su-ubicacion/&#34;&gt;Ofrecer contenido personalizado al usuario basado en su ubicación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/moment-js-libreria-javascript-para-fechas/&#34;&gt;Moment.js, librería JavaScript para fechas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;Cómo redirigir peticiones de HTTP a HTTPS en Nginx, Apache, Tomcat, Jetty y WildFly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la categoría de GNU/Linux y software libre están los siguientes artículos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/&#34;&gt;Cómo recuperar archivos eliminados o de una unidad corrupta en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/&#34;&gt;Cifrar unidad USB completamente con dm-crypt y LUKS en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/&#34;&gt;Cifrar archivos con EncFS en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/&#34;&gt;Cómo eliminar de forma segura archivos con wipe y dd en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/cambiar-el-formato-de-archivos-de-musica-o-audio-en-gnu-linux/&#34;&gt;Cambiar el formato de archivos de música o audio en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/cambiar-el-formato-de-archivos-de-video-o-peliculas-en-gnu-linux/&#34;&gt;Cambiar el formato de archivos de vídeo o películas en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/3-opciones-ofimaticas-alternativas-a-microsoft-office/&#34;&gt;3 opciones ofimáticas alternativas a Microsoft Office&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/como-realizar-copias-de-seguridad-en-windows-con-freefilesync/&#34;&gt;Cómo realizar copias de seguridad en Windows con FreeFileSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/atajos-de-teclado-basicos-de-la-terminal-en-gnu-linux/&#34;&gt;Atajos de teclado básicos de la terminal en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/combinacion-de-teclas-para-copiar-y-pegar-en-la-terminal/&#34;&gt;Combinación de teclas para copiar y pegar en la terminal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un trío de artículos de opinión:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/&#34;&gt;Windows 10 y Office 2016 tan fáciles de usar sin licencia como siempre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/la-siguiente-disrupcion-tecnologica-la-convergencia/&#34;&gt;La siguiente disrupción tecnológica, la convergencia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/el-lenguaje-de-programacion-framework-y-librerias-importan/&#34;&gt;El lenguaje de programación, framework y librerías importan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, un desempaquetado de una aspiradora que compré, un resumen de las presentaciones a las que asistí de la conferencia BilboStack y el sexto aniversario desde que empecé la bitácora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/desempaquetado-y-analisis-de-aspiradora-dyson-dc37c-advanced-allergy/&#34;&gt;Desempaquetado y análisis de aspiradora Dyson DC37c Advanced Allergy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/conferencia-bilbostack-2016/&#34;&gt;Conferencia BilboStack 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/6o-aniversario-del-blog/&#34;&gt;6º aniversario del blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acabo de empezar dos series de artículos una &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/terminal/&#34;&gt;serie sobre la terminal de GNU/Linux&lt;/a&gt; y completando con otros cuantos artículos otra serie sobre varios temas de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/web/&#34;&gt;servidores y desarrollo web&lt;/a&gt; que aún tengo pendiente de continuar con algunos más. Además y aunque no he escrito ningún artículo hablando sobre ellos publiqué una nueva actualización del &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;libro PlugIn Tapestry&lt;/a&gt; con nuevo contenido y otro tanto revisado y actualizado.&lt;/p&gt;

&lt;p&gt;Con algunos artículos he quedado bastante satisfecho como en los que he hablado de Microsoft Windows y Microsoft Office pero también varios sobre Java, Java EE y HTTP/2. Sin embargo, algo que no falla es escribir algo de JavaScript y recibir unos cuantos &lt;em&gt;retweets&lt;/em&gt; y favoritos cuando lo publico en Twitter aunque tenga la sensación de no ser lo de lo mejor que haya escrito parece que es lo que más llama la atención posiblemente ya que la mayoría de la gente lo usa de una u otra forma. Por otro lado tengo la sensación de que escribo para Google ya que recibo pocos comentarios seguramente por la forma en la que escribo ya que no suelo personalizar los artículos poniendo información personal o intercalando algunos chistes, más bien me centro en el aspecto técnico del que estoy escribiendo pero tampoco pasa nada, compartir el poco o más conocimiento que tengo y otro que voy aprendiendo ya es suficiente recompensa para mi si además veo que cuanto más tiempo pasa el número de visitas crecen algo me mantiene con motivación para seguir escribiendo y publicando contenido.&lt;/p&gt;

&lt;p&gt;En cuanto a como han evolucionado las visitas siempre es motivante ver que con el nuevo contenido añadido y poco a poco las visitas y número de páginas vistas aumentan algo, en cualquier caso siguen siendo pocas con las que seguramente tengan otras bitácoras de temática similar pero también seguramente más que otros cuantas. De casi aproximadamente 7000 sesiones al mes que tenía en enero ahora en junio Analytics me contabiliza unas 11000, en el mismo periodo de tiempo he pasado de 9000 páginas vistas a casi 13500. La mayor parte de esta mejora ha sido por unos pocos artículos que se habrán posicionado bien en los primeros meses del año en el buscador Google fuente de la que provienen la mayor parte de las visitas.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/154/analytics.png&#34; title=&#34;Evolución de sesiones mensuales en Blog Bitix&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/154/analytics-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Evolución de sesiones mensuales en Blog Bitix&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Durante este tiempo en la bitácora he realizado algunos cambios haciendo el tamaño de letra más pequeña de las secciones de referencia y series de artículos así como en las series de artículos numerar los artículos. He añadido publicidad a nivel de página para los dispositivos móviles soportados que desde no hace mucho ofrece Google AdSense. He añadido un buscador con la tecnología de Google para buscar contenido en Blog Bitix y he minimizado el HTML con la intención de que la cantidad de datos descargados al acceder al &lt;em&gt;blog&lt;/em&gt; sean unos cuantos kilobytes menos. También he añadido un mensaje para aquellos usuarios que usen AdBlock y lo tengan activado instándolos a considerar que lo desactiven en Blog Bitix ya que la publicidad que incluyo en el &lt;em&gt;blog&lt;/em&gt; es amable y poco intrusiva.&lt;/p&gt;

&lt;p&gt;Con la publicidad que incluyo y los enlaces de afiliación para Amazon de mayoritariamente libros haré alguna nueva donación a algún proyecto de software libre que use o me resulte de interés. Con las enlaces de Amazon recibí una nueva transferencia de unos 25€ y con la publicidad de AdSense estoy a punto de recibir la correspondiente transferencia de aproximadamente 70€ al superar el límite mínimo, cuando la reciba me plantearé hacer la o las donaciones. No serán muy elevadas pero con ellas espero contribuir y devolver algo al software libre que uso a diario tanto de forma personal como en el trabajo. La primera donación que hice fue &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/yo-apoyo-al-software-libre-tu-tambien/&#34;&gt;comprando una par de camisetas a la FSFE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tengo muchos artículos escritos pero pendientes de publicar y muchas ideas de artículos que me permitirían seguir escribiendo a mi ritmo de publicación durante más de un año o dos sin ocurrírseme ninguna nueva idea de artículo aunque algunas ideas que he apuntado más tarde las deseche. Más que tiempo para escribir me falta tiempo para editar y publicar los artículos, compaginarlo con el trabajo me absorbe gran parte del tiempo libre que me queda.&lt;/p&gt;

&lt;p&gt;Y por mi esto ha sido todo durante estos seis meses pasados. ¡A por los siguientes 6 meses con nuevos artículos!&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="hemeroteca"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-en-java-con-apache-poi/</id>
        <title>Ejemplo sencillo de como crear un excel en Java con Apache POI</title>        
        <updated>2016-05-29T13:00:00+01:00</updated>
        <published>2016-05-29T13:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/05/ejemplo-sencillo-de-como-crear-un-excel-en-java-con-apache-poi/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La librería &lt;a href=&#34;https://poi.apache.org/&#34;&gt;Apache POI&lt;/a&gt; nos permite acceder y crear documentos del producto ofimático &lt;a href=&#34;https://products.office.com/es-es/home&#34;&gt;Microsoft Office&lt;/a&gt; utilizando el lenguaje de programación Java y otros del ecosistema de la &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt;. Los archivos que podemos crear y leer son documentos Word, Excel y Powerpoint.&lt;/p&gt;

&lt;p&gt;En casi todas las aplicaciones hay necesidad de exportar los datos que maneja la aplicación a algún tipo de documento, un formato muy utilizado es el PDF sobre todo si el documento está destinado a imprimirse pero que no es el más adecuado si requiere modificaciones posteriores o contiene datos numéricos con cálculos. El formato de Excel también es muy utilizado por sus posibilidades para agrupar los datos, agregar, filtrar, hacer cálculos con funciones matemáticas, financieras o de otro tipo. Aunque si es posible es mejor utilizar un formato de documento abierto para no quitarle libertad al usuario para elegir el software que prefiera, el programa ofimático Microsoft Office sigue estando muy extendido con lo que puede que no tengamos otro remedio que utilizar como formato para exportar los datos uno propietario. En este artículo comentaré como crear un documento excel sencillo usando la librería Apache POI y el lenguaje Java.&lt;/p&gt;

&lt;p&gt;Para trabajar con archivos &lt;em&gt;xls&lt;/em&gt; de Excel debemos usar las clases &lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFWorkbook.html&#34;&gt;HSSFWorkbook&lt;/a&gt;, &lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFSheet.html&#34;&gt;HSSFSheet&lt;/a&gt;, &lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFRow.html&#34;&gt;HSSFRow&lt;/a&gt;, &lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html&#34;&gt;HSSFCell&lt;/a&gt; ofrecidas en la API de Apache PIO. Para crear el excel se crea una instancia de &lt;em&gt;HSSFWorkbook&lt;/em&gt;, una o varias hojas que se corresponden con las instancias de &lt;em&gt;HSSFSheet&lt;/em&gt; y en cada hoja se pueden acceder a las filas y celdas con [createRow](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFSheet.html#createRow(int)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFSheet.html#createRow(int)&lt;/a&gt;) en la hoja y con [createCell](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFRow.html#createCell(int)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFRow.html#createCell(int)&lt;/a&gt;) en la fila. Con el método [setCellValue](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellValue(java.lang.String)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellValue(java.lang.String)&lt;/a&gt;) establecemos el valor de la celda, este método está sobrecargado y podemos establecer valores &lt;em&gt;boolean&lt;/em&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html&#34;&gt;Calendar&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Date.html&#34;&gt;Date&lt;/a&gt;, &lt;em&gt;double&lt;/em&gt;, &lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/RichTextString.html&#34;&gt;RichTextString&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&#34;&gt;String&lt;/a&gt;. Hay otros métodos para cambiar los estilos de la celda con [setCellStyle](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellStyle(org.apache.poi.hssf.usermodel.HSSFCellStyle)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellStyle(org.apache.poi.hssf.usermodel.HSSFCellStyle)&lt;/a&gt;), [setHyperlink](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setHyperlink(org.apache.poi.ss.usermodel.Hyperlink)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setHyperlink(org.apache.poi.ss.usermodel.Hyperlink)&lt;/a&gt;) para insertar un enlace o [setCellFormula](&lt;a href=&#34;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellFormula(java.lang.String)&#34;&gt;https://poi.apache.org/apidocs/org/apache/poi/hssf/usermodel/HSSFCell.html#setCellFormula(java.lang.String)&lt;/a&gt;) para crear una fórmula que realice algún cálculo con los datos de las celdas.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo crea documento excel con varios datos, aplicando estilos a las cabeceras y una fórmula con el total de los precios de una lista de productos, al final escribe el excel en un archivo. En el archivo de construcción, en este caso de &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, debemos incluir la dependencia de la librería de Apache POI.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f9e91dfa722118ccff134d97273ba64e.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/f9e91dfa722118ccff134d97273ba64e.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;http://www.libreoffice.org/&#34;&gt;LibreOffice&lt;/a&gt; tiene la capacidad de abrir documentos excel, en la siguiente imagen se ve el documento abierto con LibreOffice Calc creado en el ejemplo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/146/libreoffice.png&#34; title=&#34;Excel generado con Apache POI abierto con LibreOffice&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/146/libreoffice-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Excel generado con Apache POI abierto con LibreOffice&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En la &lt;a href=&#34;http://poi.apache.org/spreadsheet/quick-guide.html&#34;&gt;guía de iniciación a las características de los documentos HSSF y XSSF&lt;/a&gt; hay ejemplos pequeños sobre varias de las funcionalidades más comunes que necesitaremos al generar documentos.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoApachePOI/&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://poi.apache.org/spreadsheet/quick-guide.html&#34;&gt;Busy Developers&amp;rsquo; Guide to HSSF and XSSF Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/</id>
        <title>Incluir información de la versión en el artefacto distribuible con Gradle</title>        
        <updated>2016-05-27T21:00:00+02:00</updated>
        <published>2016-05-27T18:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Tener trazabilidad entre el código fuente y el código que se está ejecutando en el entorno de producción es importante para saber cual es el origen de alguna excepción o error que se produzca. Con Gradle podemos conseguir esta trazabilidad haciendo unas pocas modificaciones al &lt;em&gt;script&lt;/em&gt; de construcción.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/gradle.png&#34; class=&#34;right&#34; alt=&#34;Gradle&#34; title=&#34;Gradle&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Toda aplicación en último término genera un artefacto destinado a ejecutarse en el entorno de producción o un entregable a su destinatario. En Java según el tipo de aplicación el artefacto es un archivo &lt;em&gt;jar&lt;/em&gt; ejecutable, un archivo &lt;em&gt;war&lt;/em&gt; si es una aplicación web, un archivo &lt;em&gt;zip&lt;/em&gt; si proporcionamos el código fuente o la documentación en formato Javadoc de las clases del proyecto. Un aspecto importante que tarde o temprano nos interesará conocer es que versión de la aplicación y por tanto que código está desplegada en el entorno de producción. Con &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; no es muy complicado añadir la suficiente información para conseguir esta trazabilidad.&lt;/p&gt;

&lt;p&gt;La forma tradicional es dar un número de versión al proyecto, hay diferentes nomenclaturas dependiendo del grado de precisión que necesitemos, suele bastar versión mayor, versión menor, y corrección de errores, los tres números que se van incrementando. Si usamos &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; para construir los artefactos nos puede interesar conocer el número de &lt;em&gt;build&lt;/em&gt; que lo produjo o la fecha de creación. También nos puede interesar conocer el &lt;em&gt;hash&lt;/em&gt; del último &lt;em&gt;commit&lt;/em&gt; del código fuente del artefacto. Por otro lado puede que queramos que la aplicación nos informe de la versión que se está ejecutando ya que en algunas corporaciones el acesso al entorno de producción está restringido a sus administradores.&lt;/p&gt;

&lt;p&gt;Para conseguir esta trazabilidad haremos dos modificaciones al archivo de construcción de Gradle, modificar el nombre del artefacto con el nombre de la &lt;em&gt;build&lt;/em&gt; y el &lt;em&gt;hash&lt;/em&gt; del &lt;em&gt;commit&lt;/em&gt; e incluir en él un archivo &lt;em&gt;properties&lt;/em&gt; con la información de la versión con el que la aplicación sea capaz de informar que versión es la que se está ejecutando. El &lt;em&gt;hash&lt;/em&gt; del &lt;em&gt;commit&lt;/em&gt; de &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; se obtiene con el comando &lt;code&gt;git log -n 1 &amp;ndash;format=%h&lt;/code&gt; ejecutando con las facilidades que proporciona &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El nombre del artefacto se modifica con una clase cuyo método &lt;em&gt;toString()&lt;/em&gt; proporciona la versión que podemos asignar a la propiedad &lt;em&gt;version&lt;/em&gt; de la clase &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html&#34;&gt;Project&lt;/a&gt; definida con el archivo de construcción Gradle. Para proporcionar la información de la versión en la aplicación se incluye un archivo al construir el artefacto modificando la tarea &lt;em&gt;jar&lt;/em&gt; y generando el archivo con la tarea &lt;em&gt;createBuildInfoFile&lt;/em&gt;. Este es el archivo de construcción de Gradle y la clase que contiene la información de la versión que se coloca en el directorio &lt;em&gt;buildSrc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/32f538f675ec91a88dac1178ab20c402.js?file=build.gradle&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/32f538f675ec91a88dac1178ab20c402.js?file=ProjectVersion.groovy&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el caso de un artefacto &lt;em&gt;jar&lt;/em&gt; Gradle lo genera en &lt;em&gt;build/libs/GradleVersion-1.0.b42.fea4d2f.jar&lt;/em&gt;. Ejecutando el &lt;em&gt;jar&lt;/em&gt; con &lt;code&gt;java -jar build/libs/GradleVersion-1.0.b42.77c083e.jar&lt;/code&gt; cuya clase con el método &lt;em&gt;main&lt;/em&gt; informa de la versión leyendo el archivo &lt;em&gt;properties&lt;/em&gt; incluído en el &lt;em&gt;jar&lt;/em&gt; obtenemos la siguiente salida en la terminal.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/32f538f675ec91a88dac1178ab20c402.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/145/gradle-version.png&#34; title=&#34;Artefacto distribuible con información de versión&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/145/gradle-version-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En este caso el artefacto que he usado ha sido un archivo &lt;em&gt;jar&lt;/em&gt; si se tratase de una aplicación web y de un archivo &lt;em&gt;war&lt;/em&gt; en el archivo de construcción de Grade se puede aplicar esto de forma similar. La aplicación podría devolver la versión como una cabecera &lt;abbr title=&#34;HyperText Transfer Protocol&#34;&gt;HTTP&lt;/abbr&gt; o el en código fuente de &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; como un comentario que genere sus páginas web.&lt;/p&gt;

&lt;p&gt;El libro &lt;a rel=&#34;nofollow&#34; href=&#34;https://www.amazon.es/gp/product/1617291307/ref=as_li_ss_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=1617291307&amp;linkCode=as2&amp;tag=blobit-21&#34;&gt;Gradle in Action&lt;/a&gt;&lt;img src=&#34;https://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&amp;l=as2&amp;o=30&amp;a=1617291307&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; proporciona una aplicación más detallada de muchos conceptos de Gradle, otro buen punto de partida es la propia &lt;a href=&#34;https://docs.gradle.org/current/userguide/userguide.html&#34;&gt;documentación de Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe src=&#34;https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=1617291307&amp;internal=1&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GradleVersion/&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;export BUILD_NUMBER=42 &amp;amp;&amp;amp; ./gradlew build&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html&#34;&gt;Herramienta de construcción Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/04/usar-gradle-mediante-gradle-wrapper.html&#34;&gt;Usar Gradle mediante Gradle wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;Ejemplo de multiproyecto con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/05/la-clase-threadlocal-de-java-y-usos-practicos/</id>
        <title>La clase ThreadLocal de Java y usos prácticos</title>        
        <updated>2016-05-14T13:00:00+02:00</updated>
        <published>2016-05-13T17:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/05/la-clase-threadlocal-de-java-y-usos-practicos/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;En Java existe una clase con la que podemos asociar un dato al hilo o &lt;em&gt;thread&lt;/em&gt; que ejecuta el código. Podemos usar esta clase para evitar incluir en cada método el parámetro de ese dato si es usado en multitud de métodos simplificando en gran medida el código. En las aplicaciones web este dato puede ser el usuario que se ha autenticado, el dominio por el que se ha accedido a la aplicación, el dispositivo móvil, el idioma del usuario o cualquier otra información que queramos esté disponible de forma global en el hilo de ejecución.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En algunos casos nos encontramos con que un determinado dato lo pasamos como parámetro en sucesivas llamadas a métodos, obligándonos a declararlo en cada uno de ellos. En una aplicación web el dato podría ser el usuario autenticado, el dominio por el que se ha accedido a la aplicación, el dispositivo móvil, el idioma del usuario, su preferencia de divisa o cualquier otra información no relativa al usuario pero que igualmente la aplicación necesita en muchos sitios y usa esta información contextual para variar su funcionalidad. En una aplicación web podemos obtener el dominio por el que es accedido la aplicación con la clase &lt;a href=&#34;http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html&#34;&gt;Request&lt;/a&gt;, asociando el dato como un atributo de la petición lo tendremos disponible de forma global en la capa de presentación. Sin embargo, este objeto &lt;em&gt;request&lt;/em&gt; solo estará disponible en la capa de presentación de la aplicación con la intención de que la capa de lógica de negocio sea independiente de la tecnología o &lt;em&gt;framework&lt;/em&gt; web. Para hacer que algún dato global también esté disponible en la capa de lógica de negocio podemos usar la clase &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html&#34;&gt;ThreadLocal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La clase &lt;em&gt;ThreadLocal&lt;/em&gt; básicamente asocia un dato con el &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&#34;&gt;Thread&lt;/a&gt; que ejecuta el código, teniendo una variable global en la aplicación con la referencia a la clase &lt;em&gt;ThreadLocal&lt;/em&gt; podemos acceder al dato desde cualquier punto de la aplicación. Si necesitásemos varios datos tendríamos varias instancias globales de &lt;em&gt;ThreadLocal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Las variables globales es algo a evitar pero para algunos datos podemos hacer una excepción ya que entendemos que las ventajas son mayores que las desventajas, uno de los mayores peligros de las variables globales es la concurrencia si varios hilos modifican el dato global, como el dato asociado a &lt;em&gt;ThreadLocal&lt;/em&gt; es local al hilo no hay peligro, simplemente deberemos asegurarnos de que una vez el hilo de ejecución termine limpiar el dato para que la siguiente petición en una aplicación web que procese ese hilo no use una dato anterior de otra petición.&lt;/p&gt;

&lt;p&gt;La clase &lt;em&gt;ThreadLocal&lt;/em&gt; es bastante simple tiene un método para establecer el dato con &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#set-T-&#34;&gt;set&lt;/a&gt;, para obtenerlo con &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#get--&#34;&gt;&lt;em&gt;get&lt;/em&gt;&lt;/a&gt;, para eliminarlo con &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#remove--&#34;&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/a&gt; y desde Java 8 para establecer el valor inicial con una interfaz funcional &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html&#34;&gt;Supplier&lt;/a&gt; con el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html#withInitial-java.util.function.Supplier-&#34;&gt;withInitial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo en el que crearemos un filtro que detecte el dominio por el que se accede a la aplicación y lo deje disponible en una variable &lt;em&gt;ThreadLocal&lt;/em&gt; de modo que la aplicación lo tenga disponible desde cualquier capa de la aplicación. Primero crearemos una clase con variables estáticas globales que contendrá la referencia a la instancia &lt;em&gt;ThreadLocal&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c8af01d1fb19ee3b266c01e0256ff3bc.js?file=Globals.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;A continuación el filtro que obtiene el dominio de la &lt;em&gt;request&lt;/em&gt; y lo deja en el &lt;em&gt;ThreadLocal&lt;/em&gt; de forma global. Al usar una clase &lt;em&gt;ThreadLocal&lt;/em&gt; es importante limpiar el dato correctamente, en este caso usando un bloque &lt;em&gt;try&lt;/em&gt; con su &lt;em&gt;finally&lt;/em&gt; para que aunque se produzca una excepción el dato acabe desasociado del &lt;em&gt;thread&lt;/em&gt; al finalizar la petición, de lo contrario tendremos una fuga de memoria.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c8af01d1fb19ee3b266c01e0256ff3bc.js?file=AppFilter.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Finalmente, podemos acceder al dato desde cualquier punto de la aplicación, en este caso desde la capa de presentación en la página &lt;em&gt;Index&lt;/em&gt; de una aplicación usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; y desde la capa de lógica de negocio o servicios que es independiente de la capa de presentación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c8af01d1fb19ee3b266c01e0256ff3bc.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c8af01d1fb19ee3b266c01e0256ff3bc.js?file=DefaultJooqProductoDAO.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con el filtro y las anteriores clases en la consola se imprimirán los mensajes con el dominio por el que ha sido accedida la aplicación, en este caso &lt;em&gt;localhost&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c8af01d1fb19ee3b266c01e0256ff3bc.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En definitiva, en ciertos casos el uso selectivo de &lt;em&gt;ThreadLocal&lt;/em&gt; simplifica el código evitando incluir un parámetro en multitud de métodos y si el dato ha de recuperarse de la base de datos evita realizar la misma consulta varias veces haciendo el programa más eficiente.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry/&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/alternatives-to-global-variables&#34;&gt;Alternatives to Global Variables &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/05/que-es-el-concepto-de-heap-pollution-en-java/</id>
        <title>Qué es el concepto de Heap Pollution en Java</title>        
        <updated>2016-05-14T13:15:00+02:00</updated>
        <published>2016-05-07T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/05/que-es-el-concepto-de-heap-pollution-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Al trabajar con referencias de tipos genéricos, &lt;em&gt;raw&lt;/em&gt; y arrays debemos conocer el concepto de &lt;em&gt;Heap Pollution&lt;/em&gt; si no queremos que en algún punto del programa Java se produzca una excepción no esperada del tipo &lt;em&gt;ClassCastException&lt;/em&gt;. No teniéndolo en cuenta nos encontraremos con un error de los más difíciles de depurar ya que la excepción solo nos dirá donde se produjo no donde se encuentra el código erróneo que lo provocó.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La introducción de los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/&#34;&gt;tipos genéricos al lenguaje Java&lt;/a&gt; en la versión 5 hizo posible que pudiesemos parametrizar los tipos y que el compilador hiciese validaciones sobre ellos, también se permitieron eliminar muchos &lt;em&gt;cast&lt;/em&gt; que hasta entonces eran necesarios al usar el &lt;em&gt;framework&lt;/em&gt; de colecciones. Los tipos genéricos permiten evitar errores en tiempo de compilación, al mismo tiempo la eliminación de los &lt;em&gt;cast&lt;/em&gt; hace el código más legible y más fácilmente refactorizable. Sin embargo, para mantener la compatibilidad con versiones anteriores se optó por hacer algunos sacrificios en la implementación de genéricos en pos de otros beneficios. Una situación potencialmente problemática es el denominado &lt;a href=&#34;https://en.wikipedia.org/wiki/Heap_pollution&#34;&gt;Heap Pollution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El concepto de &lt;em&gt;Heap Pollution&lt;/em&gt; consiste de forma breve (quizá inexacta) en que un tipo genérico contiene un objeto con un tipo que no le corresponde según su tipo genérico, con un ejemplo, que una lista del tipo &lt;em&gt;List&amp;lt;String&amp;gt;&lt;/em&gt; contenga un &lt;em&gt;Number&lt;/em&gt; entre sus elementos. Que un tipo genérico pueda contener un objeto que no sea de su tipo genérico es detectado en tiempo de compilación con los &lt;em&gt;unchecked warning&lt;/em&gt; pero bajo algunas circunstancias se produce en tiempo de ejecución una excepción de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassCastException.html&#34;&gt;ClassCastException&lt;/a&gt;, si ignoramos las advertencias y nuestro código no es cuidadoso. Esto es posible porque en Java el tipado de los genéricos sólo está disponible en tiempo de compilación lo que significa que no son &lt;em&gt;reified&lt;/em&gt;, el tipado genérico no está disponible en tiempo de ejecución como consecuencia del proceso conocido como &lt;em&gt;erasure&lt;/em&gt;, al trabajar con referencias de tipo &lt;em&gt;raw&lt;/em&gt; y genéricas hay que tener cuidado en las asignaciones y las advertencias del compilador.&lt;/p&gt;

&lt;p&gt;Veamos en código las circunstancias bajo las cuales se pueden producir &lt;em&gt;Heap Pollution&lt;/em&gt;. Un tipo &lt;em&gt;List&amp;lt;String&amp;gt;&lt;/em&gt; puede asignarse a un &lt;em&gt;List&lt;/em&gt; y luego añadir a esa &lt;em&gt;List&lt;/em&gt; un &lt;em&gt;Integer&lt;/em&gt; momento en el que el compilador nos avisa con un &lt;em&gt;unchecked warning&lt;/em&gt; indicando que no puede validar que la lista &lt;em&gt;raw&lt;/em&gt; siendo &lt;em&gt;List&lt;/em&gt; un tipo genérico se le está añadiendo una referencia del tipo que debería tener, el compilador nos informa de que esa responsabilidad la tenemos nosotros. También podemos asignar un &lt;em&gt;List&lt;/em&gt; a un &lt;em&gt;List&amp;lt;Number&amp;gt;&lt;/em&gt;, en este caso el compilador tampoco puede validar que la &lt;em&gt;List&lt;/em&gt; sea realmente un &lt;em&gt;List&amp;lt;Number&amp;gt;&lt;/em&gt; y lo indica también con un &lt;em&gt;unchecked warning&lt;/em&gt;. Ignorando estas adevertencias se produce un &lt;em&gt;ClassCastException&lt;/em&gt; al acceder al elemento &lt;em&gt;Integer&lt;/em&gt; que contiene la &lt;em&gt;List&amp;lt;String&amp;gt;&lt;/em&gt; como se comprueba en los teses.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/51c3db8facfc286f2e87d908caf018d8.js?file=MainTest-generics.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Por otra parte en Java los arrays en tiempo de ejecución necesitan conocer el tipo &lt;em&gt;reified&lt;/em&gt; que contendrá. Esto unido a que los &lt;em&gt;varargs&lt;/em&gt; realmente se transforman en un array, el posible &lt;em&gt;Heap Pollution&lt;/em&gt; se da también en los métodos que soportan &lt;em&gt;varargs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El compilador convierte los &lt;em&gt;varargs&lt;/em&gt; de tipos genéricos de la siguiente forma:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/51c3db8facfc286f2e87d908caf018d8.js?file=Erasure-varargs.txt&#34;&gt;&lt;/script&gt;

&lt;p&gt;En un método cuyo último argumento es un &lt;em&gt;vararg&lt;/em&gt; y de tipo genérico puede producirse &lt;em&gt;Heap Pollution&lt;/em&gt; como indica el compilaror, si estamos seguros de que no se puede dar este caso en el código del método podemos eliminar la advertencia del compilador añadiendo la anotación &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/SafeVarargs.html&#34;&gt;@SafeVarargs&lt;/a&gt; en el método. Añadir la anotación solo implica que el compilador eliminará la advertencia pero aún con ella puede seguir produciéndose la excepción &lt;em&gt;ClassCastException&lt;/em&gt; si el método no ha sido cuidadoso.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/51c3db8facfc286f2e87d908caf018d8.js?file=MainTest-varargs.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Tener en cuenta el &lt;em&gt;Heap Pollution&lt;/em&gt; es importante ya que la excepción &lt;em&gt;ClassCastException&lt;/em&gt; se produce más tarde y en un punto diferente de donde realmente está el error, mucho más tarde si el tipo genérico es serializado e incluso en otra &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; diferente. Estos errores son de los peores de depurar por la poca información que proporcionan ya que la traza de la excepción solo dice quien la lanzó no donde se introdujo el fallo.&lt;/p&gt;

&lt;p&gt;La implementación de los &lt;em&gt;generics&lt;/em&gt; en Java viene con la garantía conocida como &lt;em&gt;cast-iron&lt;/em&gt; que consiste en que mientras el compilador no produzca una &lt;em&gt;unchecked warning&lt;/em&gt; en tiempo de compilación se garantiza que en tiempo de ejecución no se producirá una &lt;em&gt;ClassCastException&lt;/em&gt; por los &lt;em&gt;cast&lt;/em&gt; introducidos en el proceso de &lt;em&gt;erasure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si nos encontramos con una de estas excepciones con los genéricos en una colección una buena alternativa es hacer uso de los métodos &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-&#34;&gt;Collections.checkedCollection&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedSet-java.util.Set-java.lang.Class-&#34;&gt;Collections.checkedSet&lt;/a&gt;,  &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedMap-java.util.Map-java.lang.Class-java.lang.Class-&#34;&gt;Collections.checkedMap&lt;/a&gt; y alguno más similar que evitará que en una colección se produzca &lt;em&gt;Heap Pollution&lt;/em&gt;, la excepción &lt;em&gt;ClassCastException&lt;/em&gt; se lanzará en el momento de añadir a la colección la referencia que provocaría el &lt;em&gt;Heap Pollution&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Relacionados con casos de combinar genéricos y arrays y &lt;em&gt;ClassCastException&lt;/em&gt; en el libro &lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.es/gp/product/0596527756/ref=as_li_ss_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=0596527756&amp;linkCode=as2&amp;tag=blobit-21&#34;&gt;Java Generics and Collections&lt;/a&gt;&lt;img src=&#34;https://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&amp;l=as2&amp;o=30&amp;a=0596527756&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; se definen dos principios a seguir para evitar excepciones: &lt;em&gt;The Principle of Truth in Advertising&lt;/em&gt; y &lt;em&gt;The Principle of Indecent Exposure&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
        &lt;iframe src=&#34;https://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0596527756&amp;internal=1&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Salvo que hagamos operaciones complicadas entre genéricos de diferentes tipos no será muy habitual que nos encontremos &lt;em&gt;ClassCastException&lt;/em&gt; por &lt;em&gt;Heap Pollution&lt;/em&gt;, pero es un concepto interesante conocer, en cualquier caso el compilador nos informará con los &lt;em&gt;unchecked warnings&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHeapPollution&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew test&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/&#34;&gt;Tutorial sobre los tipos genéricos de Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Novedades y nuevas características de Java 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;Introducción y nuevas características de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Heap_pollution&#34;&gt;Heap Pollution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/</id>
        <title>Extraer elementos de una cadena con una expresión regular</title>        
        <updated>2016-05-06T18:00:00+02:00</updated>
        <published>2016-05-06T18:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las expresiones regulares son muy útiles para comprobar si una cadena de texto o un subconjunto de ella cumple un determinado patrón. Un uso común de las expresiones regulares es para validar cadenas de texto pero también pueden usarse para obtener coincidencias de la cadena, esto se hace con los grupos de captura.&lt;/p&gt;

&lt;p&gt;Por ejemplo, supongamos que tenemos un código de un producto formateado de la siguiente forma &lt;em&gt;123-123456&amp;#47;1&lt;/em&gt;, usando guiones y una barra para separar tres grupos de números. Y ahora aparte de validar el formato correcto del código del producto nos interesa obtener los tres grupos de números. En vez de separar la cadena con un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-&#34;&gt;split&lt;/a&gt; por el caracter guión y barra de una forma que sería más laboriosa y difícil de mantener si hay algún cambio, vamos a usar los grupos de captura para obtener los tres grupos de números que forman el código.&lt;/p&gt;

&lt;p&gt;Los grupos de captura se especifican mediante paréntesis, «(» y «)», en la expresión regular. En el caso del código usaremos la siguiente expresión regular:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/fa0408b7ffbddc8cd3c93725db845cf6.js?file=regex.txt&#34;&gt;&lt;/script&gt;

&lt;p&gt;En Java con la clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html&#34;&gt;Pattern&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html&#34;&gt;Matcher&lt;/a&gt; podemos hacer las validaciones y obtener los grupos de captura de la usando el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#group-int-&#34;&gt;group&lt;/a&gt; de la clase Matcher:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/fa0408b7ffbddc8cd3c93725db845cf6.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/140/java-regex.png&#34; title=&#34;Extracción de valores de una cadena usando una expresión regular&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/140/java-regex-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Extracción de valores de una cadena usando una expresión regular&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Esto simplifica el extraer los valores de un cadena, de una manera menos frágil y más fácil de leer posteriormente el código fuente que usar la función &lt;em&gt;split&lt;/em&gt; por uno o varios determinados caracteres, esta es una cadena bastante sencilla si el patrón es más complejo el código usando &lt;em&gt;split&lt;/em&gt; puede complicarse notablemente.&lt;/p&gt;

&lt;p&gt;La clase Matcher contiene más métodos útiles, por ejemplo, con los métodos &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#start-int-&#34;&gt;start&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#end-int-&#34;&gt;end&lt;/a&gt; nos es posible conocer la posición inicial y final de cada grupo de captura. En el caso del código de este ejemplo ya los conocemos de antemano pero usando alguna expresión que capture un número varible de caracteres como «X+», «X*», «X{n,}» o «{X{n,m}}» nos permitirá conocer las posiciones inicial y final.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRegex&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/237061/using-regular-expressions-to-extract-a-value-in-java&#34;&gt;Using Regular Expressions to Extract a Value in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/04/el-componente-grid-de-apache-tapestry/</id>
        <title>El componente Grid de Apache Tapestry</title>        
        <updated>2016-04-30T12:00:00+02:00</updated>
        <published>2016-04-30T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/04/el-componente-grid-de-apache-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;En la mayoría de aplicaciones no solo es habitual sino algo muy usado el mostrar listados de elementos de forma tabular con paginación y columnas ordenables. En estos listados el complejo componente internamente &lt;em&gt;Grid&lt;/em&gt; de Apache Tapestry pero a la vez muy sencillo de usar puede marcar una diferencia significativa en el número de líneas de código necesarias a escribir, la flexibilidad, funcionalidad ofrecida, la productividad al hacer la implementación o modificarla comparándolo con lo necesario en otros &lt;em&gt;frameworks&lt;/em&gt; web en los que no hay nada comparable de serie.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapstry&#34; title=&#34;Apache Tapstry&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; es uno de los muchos &lt;em&gt;frameworks&lt;/em&gt; disponibles en Java para el desarrollo de aplicaciones y páginas web. A diferencia de la mayoría se basa en componentes y proporciona una larga lista de ellos listos para usar de serie, pero también se pueden crear componentes nuevos basados en los propios de Tapestry o los que desarrollemos nosotros muy fácilmente. Los componentes son piezas reusables de código que se pueden reutilizar bien directamente o para formar nuevos componentes y es uno de los motivos por los que en Tapestry se consigue una alta productividad además de otros beneficios como la encapsulación.&lt;/p&gt;

&lt;p&gt;Uno de los componentes más complejos pero al mismo tiempo muy simple de usar ofrecidos por el &lt;em&gt;framework&lt;/em&gt; es el &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Grid.html&#34;&gt;componente Grid&lt;/a&gt;. El componente &lt;em&gt;Grid&lt;/em&gt; muestra en una tabla un listado de datos ofreciendo las funcionalidades de paginación, ordenación, personalización de columnas, filtrado de columnas, personalización en caso de estar vacío y algunas cosas más. Lo único que debemos tener en cuenta para aprovechar al máximo el componente &lt;em&gt;Grid&lt;/em&gt; son los parámetros que declara en su documentación su funcionamiento interno nos es irrelevante, será de los componentes más complejos y no por ello no es más difícil de utilizar basta decir que solo tiene un parámetro requerido y que es lo único imprescindible que es la lista de datos a mostrar.&lt;/p&gt;

&lt;p&gt;Aunque el componente tiene un buen número de parámetros para personalizar según queramos su comportamiento basta que hagamos uso únicamente del parámetro &lt;em&gt;source&lt;/em&gt; que es la fuente de datos del &lt;em&gt;Grid&lt;/em&gt;, puede ser un objeto de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&#34;&gt;Collection&lt;/a&gt; o un &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/grid/GridDataSource.html&#34;&gt;GridDataSource&lt;/a&gt; que proporciona métodos para hacer la paginación y ordenación eficientemente recuperando de la base de datos o fuente de datos únicamente los registros a mostrar realizando paginación.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/cddb3bbca6ad09c4d602b7b252ef0e35.js?file=ProductoAdmin.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/cddb3bbca6ad09c4d602b7b252ef0e35.js?file=ProductoAdmin.java&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/139/grid.png&#34; title=&#34;Componente Grid de Tapestry&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/139/grid-thumb.png&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;figcaption&gt;Componente Grid de Tapestry&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;source&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con los parámetros &lt;em&gt;include&lt;/em&gt; y &lt;em&gt;exclude&lt;/em&gt; podemos determinar que propiedades de los objetos o &lt;em&gt;beans&lt;/em&gt; de la fuente de datos se incluyen en el Grid, con el parámetro &lt;em&gt;add&lt;/em&gt; podemos añadir nuevas columnas y personalizarlas con los datos que necesitemos como sería el caso de añadir una columna con un &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Checkbox.html&#34;&gt;Checkbox&lt;/a&gt; por fila para realizar una selección múltiple o de una columna con botones para realizar acciones. Para ambas cosas en el cuerpo del componente_Grid_definimos subcomponentes con la siguiente nomenclatura &lt;em&gt;&amp;lt;p:[nombreColumna]Cell&amp;gt;&lt;/em&gt;, en en ejemplo usando &lt;em&gt;&amp;lt;p:nombreCell&amp;gt;&lt;/em&gt; y &lt;em&gt;&amp;lt;p:actionCell&amp;gt;&lt;/em&gt;. Las celdas de las columnas por defecto hacen un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--&#34;&gt;toString()&lt;/a&gt; de la propiedad del &lt;em&gt;bean&lt;/em&gt; de la fila a mostrar, si queremos cambiar este comportamiento como en la columna nombre definimos la etiqueta &lt;em&gt;&amp;lt;p:nombreCell&amp;gt;&lt;/em&gt; y dentro incluimos el contenido que deseemos que puede contener otros componentes en este caso el nombre con un enlace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;include&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exclude&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;add&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;lt;p:[nombreColumna]Cell&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con el parámetro &lt;em&gt;rowsPerPage&lt;/em&gt; podemos cambiar el número de filas por página del &lt;em&gt;Grid&lt;/em&gt;, en el ejemplo son 2 pero puede ser la cifra que deseemos y tampoco tiene por que ser una constante, el número de filas a mostrar puede provenir de una expresión y cambiar según alguna lógica. Los parámetros &lt;em&gt;columnIndex&lt;/em&gt;, &lt;em&gt;rowIndex&lt;/em&gt; y &lt;em&gt;row&lt;/em&gt; nos proporcionan información del índice de la columna actual, índice de la fila actual y el objeto actual de la fila respectivamente que podemos usar al personalizar las celdas del &lt;em&gt;Grid&lt;/em&gt;. Son parámetros de salida que el &lt;em&gt;Grid&lt;/em&gt; se encarga de proporcionarnos según procesa las filas y celdas, en base a ellos podremos implementar alguna funcionalidad.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;rowsPerPage&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;columnIndex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rowIndex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;row&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los parámetros informales (denominados así para aquellos que le pasamos al &lt;em&gt;Grid&lt;/em&gt; que no están declarados explícitamente en su interfaz o contrato y que no proporcionan alguna funcionalidad) son incluidos en la etiqueta &lt;em&gt;table&lt;/em&gt; del &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; que genera el &lt;em&gt;Grid&lt;/em&gt;. Igualmente el parámetro informal &lt;em&gt;class&lt;/em&gt; se incluye tal cual se indica en el atributo en &lt;em&gt;class&lt;/em&gt; de la tabla para personalizar los estilos y usando el parámetro &lt;em&gt;rowClass&lt;/em&gt; se incluye en cada fila en su etiqueta &lt;em&gt;tr&lt;/em&gt; de HTML. Además de estas clases que podemos el componente añade algunas clases más a ciertas filas: &lt;em&gt;t-first&lt;/em&gt; para la primera fila, &lt;em&gt;t-last&lt;/em&gt; para la última, &lt;em&gt;t-sort-column-ascending&lt;/em&gt; y &lt;em&gt;t-sort-column-descending&lt;/em&gt; para las columnas que estén ordenadas ascendentemente y descendentemente de forma que con &lt;abbr title=&#34;&#34;&gt;CSS&lt;/abbr&gt; tengamos la posibilidad de cambiar sus estilos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;class&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rowClass&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con el parámetro &lt;em&gt;empty&lt;/em&gt; definimos un componente &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/Block.html&#34;&gt;Block&lt;/a&gt; que se usará cuando el &lt;em&gt;Grid&lt;/em&gt; no tenga filas que mostrar, lo que es útil para mostrar un mensaje indicando que la tabla no tiene filas como cuando no hay elementos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/139/grid-sin-elementos.png&#34; title=&#34;Mensaje de un Grid sin elementos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/139/grid-sin-elementos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Mensaje de un Grid sin elementos&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;empty&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con &lt;em&gt;pagerPosition&lt;/em&gt; indicaremos si queremos la barra de paginación situada encima de la tabla, abajo, en ambas posiciones o no queremos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pagerPosition&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por si fuera poco con el parámetro &lt;em&gt;inPlace&lt;/em&gt; podemos hacer que la paginación y ordenación funcione usando &lt;abbr title=&#34;Asynchronous JavaScript And XML&#34;&gt;AJAX&lt;/abbr&gt; de modo que no se recargue toda la página en cada pulsación de un enlace. No será necesario que añadamos nada de JavaScript, el componente se encargará de hacer la petición AJAX y con el resultado que sea devuelto actualizar la tabla.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;inPlace&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, comentaré el parámetro &lt;em&gt;encoder&lt;/em&gt; con el que podemos hacer que el componente &lt;em&gt;Grid&lt;/em&gt; funcione cuando se usa dentro de un componente &lt;em&gt;Form&lt;/em&gt;. La clase &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/ValueEncoder.html&#34;&gt;ValueEncoder&lt;/a&gt; transforma un objeto a un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html&#34;&gt;String&lt;/a&gt; que lo identifique en el cliente y a partir del identificador del cliente los transforme al objeto cuando se envíe de nuevo al servidor. Podemos indicar el &lt;em&gt;ValueEncoder&lt;/em&gt; en cada &lt;em&gt;Grid&lt;/em&gt; o definirlo como una configuración del contenedor &lt;abbr title=&#34;Inversion of Control&#34;&gt;IoC&lt;/abbr&gt;.&lt;/p&gt;

&lt;p&gt;Hay algún parámetro más como &lt;em&gt;sortModel&lt;/em&gt; y &lt;em&gt;paginationModel&lt;/em&gt; para mantener la información de ordenación y paginación pero los anteriores son los que más habitualmente usaremos y probablemente con &lt;em&gt;source&lt;/em&gt;, &lt;em&gt;include&lt;/em&gt;, &lt;em&gt;exclude&lt;/em&gt; y &lt;em&gt;add&lt;/em&gt; tengamos suficiente para muchos casos.&lt;/p&gt;

&lt;p&gt;Es sorprendentemente lo sencillo que es usar el componente &lt;em&gt;Grid&lt;/em&gt; para toda la funcionalidad que proporciona. En ciertos casos este componente por si solo puede reducir drásticamente la cantidad de código necesario a escribir en las plantillas que producen HTML y aumentar notablemente la productividad al crear o modificar páginas con listados de elementos. En el artículo &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2013/06/mantenimiento-crud-en-apache-tapestry.html&#34;&gt;Mantenimiento CRUD en Apache Tapestry&lt;/a&gt; comento como conseguir un &lt;abbr title=&#34;Create, Read, Update and Delete&#34;&gt;CRUD&lt;/abbr&gt; completo usando el componente &lt;em&gt;Grid&lt;/em&gt; entre otras cosas.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/Qv1Ym&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2013/06/mantenimiento-crud-en-apache-tapestry.html&#34;&gt;Mantenimiento CRUD en Apache Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/tags/tapestry/&#34;&gt;Artículos sobre Tapestry en Blog Bitix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/search/label/tapestry&#34;&gt;Artículos sobre Tapestry en El blog de pico.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="tapestry"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>