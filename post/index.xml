<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/post/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-11-06T20:00:00+01:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/me-cambio-a-la-electrica-holaluz/</id>
        <title>Me cambio a la eléctrica HolaLuz</title>        
        <updated>2017-11-06T20:00:00+01:00</updated>
        <published>2017-11-06T20:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/me-cambio-a-la-electrica-holaluz/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Como consumidor y como todo el mundo trato de elegir compañías que ofrezcan buen precio en sus servicios pero también que me traten con respeto, no me hacen falta descuentos promocionales ni regalos. Este fue el caso de elegir Pepephone como proveedor de internet y en este artículo el caso de elegir HolaLuz como compañía eléctrica.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;Hace tiempo que quería cambiarme de compañía eléctrica. No es que estuviese excesivamente descontento con la que ya estaba salvo por las continuas subidas de precio en cada factura pero quería pasarme a una compañía que ofreciese energía 100% renovable. Después de dar de baja el suministro de gas por &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/sustituir-caldera-de-gas-por-un-termo-electrico-fleck-duo-7-50/&#34;&gt;cambiar la caldera por un termo eléctrico&lt;/a&gt; ya tenía más claro el hacer el cambio, ya he notado unos cuantos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/comparando-la-factura-entre-caldera-de-gas-y-termo-electrico/&#34;&gt;euros de ahorro al mes dando de baja el gas&lt;/a&gt; que al año son una buena cantidad. Utilizar una energía limpia y elaborada, como la eléctrica, para calentar una casa con calefacción u obtener agua caliente no es tan eficiente, es mejor convertir el gas que llega a casa directamente en calor, que no tener que procesar la energía dos veces (de una fuente a electricidad y la electricidad a calor en el domicilio) para conseguir el mismo resultado pero si no haces cierto consumo de gas disponer del servicio no compensa económicamente.&lt;/p&gt;

&lt;p&gt;Entre las compañías eléctricas que empecé a barajar como posibles candidatas estaban &lt;a href=&#34;https://www.holaluz.com/&#34;&gt;HolaLuz&lt;/a&gt;, &lt;a href=&#34;https://www.pepeenergy.com/&#34;&gt;Pepeenergy&lt;/a&gt; y algunas otras menos conocidas entre las alternativas a las tradicionales grandes como &lt;a href=&#34;https://www.iberdrola.es/&#34;&gt;Iberdrola&lt;/a&gt;, &lt;a href=&#34;http://www.edpenergia.es/es/&#34;&gt;EDP&lt;/a&gt; o &lt;a href=&#34;https://www.endesaclientes.com/&#34;&gt;Endesa&lt;/a&gt;. Una de las ventajas de HolaLuz es que además de electricidad ofrece gas que aunque no es una energía renovable es algo más eficiente que usar electricidad para generar calor y algo más barata si haces cierta cantidad de consumo que compense el importe del alquiler de contador del gas y el importe de la disponibilidad del servicio. Pepeenergy solo ofrece electricidad. Ambas tienen unos precios por kWh más baratos que cualquiera de las tradicionales grandes y además siendo energía 100% renovable. Por ejemplo, en mi anterior compañía el kWh me costaba 0,133115 y en HolaLuz 0,123000 con la tarifa un precio y la forma de pago sin sorpresas, no parece mucha la diferencia y por mi consumo no sería demasiado al mes pero  al año y después de unos cuantos el ahorro será de unas decenas de euros. Con un consumo de 150 kWh al mes el ahorro es de 1,5 € o 18 € al año. Pero el ahorro puede ser mayor como en el caso de Endesa que el coste del kWh en el mismo momento era significativamente más caro 0,141806. Dependiendo del consumo que haya en una casa el ahorro será mayor o menor.&lt;/p&gt;

&lt;p&gt;No me queda claro la diferencia entre energía 100% verde, que según indica incluye &lt;a href=&#34;http://www.plantasdecogeneracion.com/index.php/las-plantas-de-cogeneracion&#34;&gt;cogeneración de alta eficiancia&lt;/a&gt; ¿a partir de qué materia?, y energía renovable viendo la definición de estos términos en el &lt;a href=&#34;https://www.holaluz.com/glosario/&#34;&gt;glosario&lt;/a&gt;. Además en la página &lt;a href=&#34;https://www.holaluz.com/energia-verde/&#34;&gt;energía verde&lt;/a&gt; donde se detalla de donde se obtiene la energía se incluye el termino valorización energética que representa un 48% pero su descripción me suena a incineradora. En la sección &lt;a href=&#34;https://www.holaluz.com/conocenos/&#34;&gt;Conócenos&lt;/a&gt; incluyen la siguiente frase: &lt;em&gt;Por eso toda la energía que comercializamos es de origen renovable: solar, hidráulica, eólica, biomasa y biogás&lt;/em&gt;. Me queda alguna duda entre todas estas páginas.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/278/holaluz.svg&#34; width=&#34;300&#34; alt=&#34;HolaLuz&#34; title=&#34;HolaLuz&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/278/pepeenergy.png&#34; width=&#34;300&#34; alt=&#34;Pepeenergy&#34; title=&#34;Pepeenergy&#34;&gt;
&lt;/div&gt;

&lt;p&gt;El ahorro según mi consumo de aproximadamente unos 75 kWh mensuales con mi anterior compañía eléctrica es de 0,75 € y con respecto al precio que tiene Endesa de 1,41 €. No parece mucho pero la electricidad es un servicio indispensable, de uso prolongado en una vivienda y es raro cambiar de compañía cada poco tiempo, eligiendo bien la compañía al cabo de los años el ahorro es apreciable, nadie va a salir de pobre pero con lo ahorrado algo ya se puede comprar.&lt;/p&gt;

&lt;p&gt;Otro de los motivos de cambiarme a HolaLuz es que me daba la sensación de tratar a los clientes mejor, sin cometer los abusos que a veces hacen las grandes compañías tradicionales que forman el oligopolio energético en España enviando comerciales importunando a puerta fría y ofreciendo regalos envenenados en forma de caros servicios de mantenimiento con cierto descuento durante un año pasado el cual el sablazo es grande. Este mismo motivo es el que utilicé para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/asi-trata-pepephone-a-sus-clientes/&#34;&gt;elegir proveedor de internet&lt;/a&gt; cuando opté por Pepephone. En ambos casos no es solo que estas empresas traten mejor a sus clientes sino que también sus precios son mejores y en el caso de HolaLuz por si fuera poco ofreciendo energía verde.&lt;/p&gt;

&lt;p&gt;En realidad aunque HolaLuz indique que la energía que ofrece es 100% renovable dado el mix energético que se inyecta en la red uno no sabe cual es el origen de la electricidad que está consumiendo pero el caso es que lo que uno paga en la factura por la electricidad en HolaLuz está destinado a compañías que generan electricidad renovable. Es decir, uno no contribuye con su factura a costear la peligrosa energía nuclear además de cara si se tiene en cuenta el coste de almacenamiento de los residuos radioactivos que genera y perduran durante miles de años o la contaminante energía generada con carbón o combustibles fósiles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/conocenos/&#34;&gt;Conócemos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/luz-justa/&#34;&gt;Luz justa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/energia-verde/&#34;&gt;Energía verde&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Otra ventaja de HolaLuz es que factura mensualmente y no bimensualmente o facturando periodos de tiempo distintos cada vez según a la compañía eléctrica le viene en gana por que el distribuidor haya pasado a leer los contadores. HolaLuz con la forma de pago &lt;em&gt;Sin sorpresas&lt;/em&gt; permite pagar cada mes lo mismo por la electricidad y al terminar el año ajustar según haya sido el consumo real, si al final del año se ha pagado de más según lo consumido lo devuelve y si se ha pagado de menos se factura la diferencia. Pero si se prefiere disponen del tradicional método de pago &lt;em&gt;Clásico&lt;/em&gt; que se paga mensualmente según lo consumido. Con tu dirección puedes conocer el precio aproximado que pagarías con HolaLuz ya sea con la tarifa un precio o dos precios según el horario y la forma de pago clásica o sin sorpresas. En el modo sin sorpresas el precio del kWh es algo más barato de 0,123000 € y en el modo clásico de 0,129000 €. En cualquier momento se puede ver en la zona de usuario lo que estás consumiendo y ajustar la cuota mensual del modo de pago sin sorpresas. Desde la misma zona de usuario es posible cambiar la potencia contratada que ajustándola es posible conseguir un ahorro de unos 3 € al mes por cada tramo de potencia reducido y no necesario.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/tarifas-luz-un-precio-20/&#34;&gt;Tarifas luz un precio&lt;/a&gt; independientemente de la hora de consumo.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/tarifas-luz-dos-precios-20/&#34;&gt;Tarifas luz dos precios&lt;/a&gt; según hora de consumo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez reciba la primera factura de un mes completo de HolaLuz y vea el consumo real que he realizado actualizaré este artículo para comparar aunque con el modo de pago que he elegido, sin sorpresas, tendré todos los meses el mismo importe en la factura veré al menos el importe de precio del kWh que debería ser de 0,123000, comprobaré la diferencia real con el precio de mi anterior compañía.&lt;/p&gt;

&lt;p&gt;No hay ninguna diferencia entre la electricidad de cualquier compañía, la diferencia entre las empresas está en el precio, el origen de la electricidad que ofrecen, el servicio de atención al cliente y el trato que ofrecen a sus clientes. Compañías como HolaLuz tienen un precio mejor que las grandes tradicionales, ofrecen energía 100% de origen renovable, el servicio de atención al cliente es bueno y el trato significativamente mejor.&lt;/p&gt;

&lt;p&gt;En el caso de HolaLuz del cambio de compañía eléctrica se encarga totalmente ellos una vez realizada la solicitud y no tarda mucho, en una semana o dos puede estar realizado, basta con indicar nombre y apellido, dirección y el CUPS que identifica el punto de suministro de la vivienda y que está indicado en cada factura, finalmente la potencia, la tarifa, el modo de pago (clásico o sin sorpresas) y la cuenta bancaria para domiciliar los pagos.&lt;/p&gt;

&lt;p&gt;Mucha gente se queja de los abusos que cometen las tradicionales compañías eléctricas y del oligopolio que forman en España además de algunas de ellas ser productores de energía nuclear o con carbón, si esas mismas personas que se quejan y muchas otras se cambiasen a una compañía como HolaLuz, Pepeenergy u otras similares las cosas cambiarían antes, bueno ya están cambiando. Como consumidores tenemos la capacidad de elegir ser clientes de aquellas compañías no solo que ofrezcan buen trato y buen precio sino que como en este caso sea con energía 100% renovable.&lt;/p&gt;

&lt;p&gt;En el blog de HolaLuz escriben artículos muy buenos sobre el funcionamiento de todo lo que rodea mercado eléctrico o de sus tarifas que son de interés para cualquier usuario ya sea cliente de ellos o no y esté un poco atraído en información sobre este tema, leyendo sus artículos es posible aclarar muchas dudas junto con la sección de &lt;em&gt;Preguntas frecuentes&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.holaluz.com&#34;&gt;Blog HolaLuz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.holaluz.com/preguntas/&#34;&gt;Preguntas frecuentes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HolaLuz a modo de promoción ofrece un descuento si al hacer la contratación te lo ha recomendado un amigo. Al hacer la contratación introduciendo el código del amigo HolaLuz ofrece un descuento de 20€ a cada uno una vez se completa el alta. Si tienes un amigo con HolaLuz al que aprecias pídele su código e introdúcelo al darte de alta y hazle un regalo y a ti otro, si no tienes un conocido que te ofrezca un código puedes usar el mío si este artículo te ha resultado de interés, mi código de amigo es &lt;strong&gt;3R9L6I&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/278/contratacion-holaluz-paso-1.png&#34; title=&#34;Contratación HolaLuz&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/278/contratacion-holaluz-paso-1-thumb.png&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;figcaption&gt;Contratación HolaLuz&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;



        </content>
        
            
                <category term="desempaquetado"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/comparando-la-factura-entre-caldera-de-gas-y-termo-electrico/</id>
        <title>Comparando la factura entre caldera de gas y termo eléctrico</title>        
        <updated>2017-11-05T23:00:00+01:00</updated>
        <published>2017-11-05T09:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/comparando-la-factura-entre-caldera-de-gas-y-termo-electrico/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Cambié una caldera por un termo eléctrico. Haciendo unas estimaciones previas pensaba que si pero ahora que tengo una factura con el importe completo teniendo la cadera de gas y habiendo llegado otra con un periodo completo con termo eléctrico puedo comparar y comprobar cuales son los importes reales de cada una de las opciones, ¿el importe que pago en la factura con el termo eléctrico será menor?.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;Hace unos meses &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/sustituir-caldera-de-gas-por-un-termo-electrico-fleck-duo-7-50/&#34;&gt;sustituí la caldera de gas por un termo eléctrico&lt;/a&gt; dado que me tocaba hacer la versión de la instalación del gas y de la caldera, dos revisiones independientes que tiene un coste de unos 60€ y 90€ respectivamente que hay que realizar obligatoriamente por normativa cada 5 y 2 años y en las que hay que estar presente para permitir el acceso a la vivienda al técnico para que pueda hacer la inspección. Dado que en invierno no usaba la calefacción, me basta con ponerme más ropa o usar alguna manta, al hacer la sustitución no me importaba perder esa característica. Por otro lado si me tocase sustituir la caldera por otra la salida de humos debería ir a la calle en vez de la chimenea del edificio con lo que habría que picar la fechada para hacer el agujero del tubo para la salida de humos. Además, las calderas de gas son mucho más caras, sobre unos 900€ una de gama baja, mucho más caras que los termos más caros, un termo de gama alta de lo más caro está sobre unos 300€ de 50 litros, casi tres veces menos que una caldera.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/caldera.jpg&#34; title=&#34;Caldera de gas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/caldera-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/termo.jpg&#34; title=&#34;Termo eléctrico&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/termo-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Caldera de gas y termo eléctrico&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;He estado esperando a la factura en la que venga un periodo completo con el termo para comparar con un periodo con caldera estando en la misma compañía. Lógicamente el termo al ser eléctrico me subirá el consumo de luz pero a cambio no tendré que pagar el coste fijo de la disponibilidad del gas y su alquiler del contador. En estos periodos de tiempo hay que tener en cuenta que no he usado la caldera ni para la ducha ni para la calefacción y con el termo si lo he usado para el agua caliente de la ducha, también es que en la factura con el termo el precio del kWh es un poco más caro por lo que la diferencia de ahorro serían aún mayor en igualdad de condiciones.&lt;/p&gt;

&lt;p&gt;En las factura con la caldera de gas en un periodo de tiempo de 63 días para el gas y 60 para la electricidad se aprecia que el coste total fue de 47,37€ IVA incuído divididos en 10,62€ para el gas y 28,53€ para la luz o electricidad con un consumo de 84 kWh de electricidad, con una potencia contratada de 2,2 kW y un precio 0,126215 €/kWh en la factura de junio-julio del 2017. Por el contrario con el termo eléctrico en un periodo de tiempo de 61 días el importe total de la factura fue de 43,51€ (con IVA) con un consumo de 132 kWh a un coste de 0,133115 €/kWh. En la factura con el termo el importe de la electricidad es mayor por ser lógicamente el consumo de electricidad mayor pero el coste de la factura total menor por no tener un coste fijo de disponibilidad de gas y alquiler de su contador, el aumento en consumo de electricidad es menor que los 10,62 € de menos del gas. De potencia de electricidad tengo contratada una de las más bajas solo de 2,2kw y no he tenido problema de que salte el diferencial, el termo tiene un consumo de 1500W máximo en pleno funcionamiento aunque por el modelo que puse que tiene dos depósitos y dos resistencias solo usa una de ellas aún después de ducharme con lo que en realidad consumirán encendido unos 750W, margen suficiente hasta los 2,2 kW para usar sin problema otros electrodomésticos al mismo tiempo.&lt;/p&gt;

&lt;p&gt;El gas es más eficiente y más barato que usar electricidad para transformar energía en calor para el agua caliente de agua sanitaria o calefacción pero los costes del servicio hace que si no consumes una cantidad suficiente no sea más barato que un termo eléctrico como es mi caso.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/factura-caldera.png&#34; title=&#34;Factura con caldera de gas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/factura-caldera-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/factura-termo.png&#34; title=&#34;factura con termo eléctrico&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/277/factura-termo-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Factura con caldera de gas y termo eléctrico&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Aproximadamente una diferencia de 4€ cada dos meses o de 2€ cada mes y teniendo en cuenta el coste mensual de las revisiones de la instalación y de la caldera (aunque se pague integro en el momento de hacer la revisión) una diferencia de 6,75€ al mes (revisión caldera: &lt;sup&gt;90&lt;/sup&gt;&amp;frasl;&lt;sub&gt;24&lt;/sub&gt; meses = 3,75€/mes y revisión instalación gas: &lt;sup&gt;60&lt;/sup&gt;&amp;frasl;&lt;sub&gt;60&lt;/sub&gt; = 1€/mes, total revisiones: 4,75€/mes). Con esa diferencia de costes en unos 3-4 años ya me habrá salido rentable haber hecho la sustitución de la caldera de gas por el termo eléctrico que me costó 315€ sin ser el sitio donde lo compré el más barato. Es un termo de gama alta de los más caros que había en el mercado, pero los hay mucho más baratos, por 90€ ya se encuentran algunos de 30 y 50 litros aunque posiblemente no tan eficientes energéticamente.&lt;/p&gt;

&lt;p&gt;3-4 años no es un periodo corto de tiempo para rentabilizar la sustitución pero tampoco largo para un servicio continuo y de esencial contratación. Si tuviese que sustituir la caldera de gas por otra la rentabilidad sería inmediata. Otra de las motivaciones que tenía para dejar de usar el gas es que la electricidad es un elemento menos peligroso y cambiarme a una compañía que ofrezca energía eléctrica de fuentes 100% renovables y que además tienen unos precios de kw/h algo mejores que los que estoy pagando ahora de 0,133115€ kw/h.&lt;/p&gt;

&lt;p&gt;Aunque como se ve con estas facturas el importe con el termo y solo electricidad es menor si me costase ligeramente algo más también estaría contento por poder usar energía eléctrica de fuentes 100% renovables. Y ahora que tengo dos facturas en las que he comparado el importe de las facturas entre tener caldera y termo el siguiente paso es cambiar a una compañía como HolaLuz o Pepenergy que se que tienen el precio de la energía a 0,123 €/kWh y además con energía 100% verde. Una diferencia de precio entre 0,133115 €/kWh y 0,123 €/kW no parece mucho, un céntimo, pero si lo multiplicas por los kW consumidos que en mi caso son 132 la diferencia es de 1,33518 € cada dos meses, de 0,66759 € cada mes o 8,01108 € al año.&lt;/p&gt;

&lt;p&gt;No parece mucho pero es todos los meses, el ahorro por el cambio de caldera a termo en total son unos 6,75€ al mes, que al año son unos 81€, ya no son tan poco.&lt;/p&gt;



        </content>
        
            
                <category term="desempaquetado"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/ordenar-alfabeticamente-cadenas-con-la-clase-collator-en-java/</id>
        <title>Ordenar alfabéticamente cadenas con la clase Collator en Java</title>        
        <updated>2017-11-04T11:00:00+01:00</updated>
        <published>2017-11-04T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/ordenar-alfabeticamente-cadenas-con-la-clase-collator-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Sin usar la clase &lt;em&gt;Collator&lt;/em&gt; incluida en el JDK al ordenar alfabéticamente una lista de palabras obtendremos en algún caso un resultado que nos extrañará y seguramente no sea lo que esperamos. La clase &lt;em&gt;String&lt;/em&gt; implementa la interfaz Comprable pero esta ordenación es en base al valor del código &lt;em&gt;unicode&lt;/em&gt; sin tener en cuenta los diferentes niveles de diferencias que se pueden usar según el &lt;em&gt;Locale&lt;/em&gt; y la clase &lt;em&gt;Collator&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Quizá algunos digan que la aparentemente sencilla tarea de ordenar una lista de palabras es algo fácil de hacer con cualquier lenguaje de programación. La realidad es que puede complicarse en una buena cantidad si se ha de realizar con los caracteres del alfabeto de algunos lenguajes. La ordenación no es tan simple como realizar lo siguiente en código Java:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Sort.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Primeramente nos daremos cuenta de que la siguiente lista de nombres de provincias las ordena de una forma que quizá no es la que esperamos. En algunas páginas web se puede observar este error en algunos elementos de selección de opciones de nombres de paises, ciudades, provincias u otro conjunto de elementos que suelen estar ordenados alfabéticamente para facilitar el encontrar el elemento a seleccionar pero que si se da el caso de que hay variación de palabras con tildes y sin ellas y minúsculas y mayúsculas se presenta la ordenación incorrecta.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Sort.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como se observa las palabras con letras mayúsculas se ordenan antes que las palabras con letras en minúscula independientemente de la letra del alfabeto, seguramente esta no es la ordenación deseada. En algunos lenguajes como el español algo similar ocurre con las palabras que llevan tilde en alguna letra. Convertir las palabras a mayúsculas o minúsculas o eliminar las tildes por los mismos sin tilde previamente a hacer la ordenación además de no ser una buena solución no sirve para otros lenguajes con diferentes formas de tilde y marcas en las letras.&lt;/p&gt;

&lt;p&gt;En Java la solución es utilizar la clase &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/java/text/Collator.html&#34;&gt;Collator&lt;/a&gt;, esta clase establece varios niveles en las que las letras se consideran diferentes. Por ejemplo, en español las letras &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;f&lt;/em&gt; se consideran diferencias primarias (diferentes letras), &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;é&lt;/em&gt; son diferencias secundarias (diferentes tildes) y &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;E&lt;/em&gt; son diferencias terciarias (diferencias entre mayúsculas y minúsculas). Las diferencias entre caracteres dependen del &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Locale.html&#34;&gt;Locale&lt;/a&gt; y un &lt;em&gt;Collator&lt;/em&gt; se obtiene en base a él con el método estático &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/text/Collator.html#getInstance-java.util.Locale-&#34;&gt;getInstance​(Locale)&lt;/a&gt;. Con el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/text/Collator.html#setStrength-int-&#34;&gt;setStrength(int)&lt;/a&gt; se establece el nivel de diferencias deseadas.&lt;/p&gt;

&lt;p&gt;Usando la clase &lt;em&gt;Collator&lt;/em&gt; y realizando la ordenación de la misma lista anterior el resultado es diferente y seguramente más apropiado. Como la clase &lt;em&gt;Collator&lt;/em&gt; implementa la interfaz &lt;em&gt;Comparable&lt;/em&gt; podemos usarla como el comparador aplicar en el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#sort-T:A-java.util.Comparator-&#34;&gt;Arrays.sort(T[], Comparator&amp;lt;? super T&amp;gt;)&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/List.html#sort-java.util.Comparator-&#34;&gt;List.sort(Comparator&amp;lt;? super E&amp;gt;)&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Utilizando el &lt;em&gt;Collator&lt;/em&gt; con solo diferencias primarias &lt;em&gt;Cantabria&lt;/em&gt; se ordena al final de la lista por tener las letras &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;Á&lt;/em&gt; una diferencia primaria con &lt;em&gt;C&lt;/em&gt;. Con diferencias secundarias las letras &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;a&lt;/em&gt; se ordenan antes que &lt;em&gt;Á&lt;/em&gt; por tener diferencias secundarias. Finalmente, con diferencias terciarias &lt;em&gt;a&lt;/em&gt; se ordena antes que &lt;em&gt;A&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaCollator&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/ejemplo-de-graphql-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/</id>
        <title>Ejemplo de GraphQL para una interfaz de un servicio con Spring Boot y Java</title>        
        <updated>2017-11-07T19:00:00+01:00</updated>
        <published>2017-11-01T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/ejemplo-de-graphql-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;GraphQL es una alternativa a una interfaz REST con las ventajas de poder realizar varias consultas en una misma petición y devolviendo únicamente los datos que requiera el cliente. Es una especificación y hay una implementación para los lenguajes de programación más populares entre ellos Java. Este artículo es una introducción con un ejemplo completo que muestra cómo se hacen consultas y modificaciones en los datos.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Con anterioridad las aplicaciones que lo necesitaban ofrecían una interfaz como un servicio mediante &lt;em&gt;web services&lt;/em&gt;, sin embargo, esta tecnología era complicada por usar XML y no de fácil utilización en clientes JavaScript. La evolución que a día de hoy sigue siendo mayoritaria son las interfaces &lt;a href=&#34;https://es.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;REST&lt;/a&gt; que emplean la semántica de los verbos del protocolo HTTP para realizar operaciones de búsqueda, creación, modificación y eliminación y normalmente empleando JSON como formato para intercambiar los datos. Sin embargo, REST no está exento de algunos problemas como la necesidad de realizar varias peticiones a cada uno de los recursos que ofrece si se necesitan datos de varios de ellos, otro es que los datos ofrecidos por los servicios REST está prefijados en tiempo de desarrollo no adaptándose a lo que necesita el cliente. En cierta medida estas dos cosas se pueden implementar en la interfaz REST con algunos parámetros pero requiere codificarlo explícitamente.&lt;/p&gt;

&lt;p&gt;Más recientemente ha aparecido otra forma de implementar una interfaz de un servicio con &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; considerándose una &lt;a href=&#34;https://www.howtographql.com/basics/1-graphql-is-the-better-rest/&#34;&gt;alternativa mejor a REST&lt;/a&gt; que solventa los dos problemas de las interfaces REST anteriores. REST ofrece en varios &lt;em&gt;endpoints&lt;/em&gt; los recursos que pueden ser accedidos mediante los verbos HTTP (&lt;em&gt;GET&lt;/em&gt;, &lt;em&gt;PUT&lt;/em&gt;, &lt;em&gt;POST&lt;/em&gt;, &lt;em&gt;DELETE&lt;/em&gt;), en GraphQL por el contrario hay un único &lt;em&gt;endpoint&lt;/em&gt;, los puntos de entrada al grafo y los tipos que se relacionan entre si que son consultados para obtener los datos con el lenguaje de consulta que ofrece GraphQL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/0-introduction/&#34;&gt;Basics Tutorial - Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/1-graphql-is-the-better-rest/&#34;&gt;GraphQL is the better REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/2-core-concepts/&#34;&gt;Core Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/3-big-picture/&#34;&gt;Big Picture (Architecture)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En GraphQL se define un &lt;a href=&#34;http://graphql.org/learn/schema/&#34;&gt;esquema&lt;/a&gt; con la definición de los tipos en la API, se diferencia la obtención de los datos que es realizada por las &lt;a href=&#34;http://graphql.org/learn/queries/&#34;&gt;&lt;em&gt;queries&lt;/em&gt;&lt;/a&gt; y de las modificaciones que es realizada por los &lt;a href=&#34;http://graphql.org/learn/queries/#mutations&#34;&gt;&lt;em&gt;mutators&lt;/em&gt;&lt;/a&gt;, el esquema se puede definir en un archivo de texto como en este ejemplo o de forma programática con código que es necesario para algunas personalizaciones. Otras tareas que pueden ser necesarias en una API son &lt;a href=&#34;https://www.howtographql.com/graphql-java/5-authentication/&#34;&gt;autenticación&lt;/a&gt; que es posible capturando los datos del contexto provenientes en los datos o como cabeceras de la petición posiblemente en forma de &lt;em&gt;token&lt;/em&gt; de &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; y la autorización en la lógica del servicio en base al sujeto autenticado. Se puede &lt;a href=&#34;http://graphql.org/learn/schema/#scalar-types&#34;&gt;usar datos propios con &lt;em&gt;scalar&lt;/em&gt;&lt;/a&gt; para los cuales se ha de proporcionar una clase que realice la transformación implementando una clase GraphQLScalarType. Posee &lt;a href=&#34;http://graphql.org/learn/introspection/&#34;&gt;funcionalidades de introspección&lt;/a&gt; y también &lt;a href=&#34;https://www.howtographql.com/graphql-java/9-filtering/&#34;&gt;filtrado&lt;/a&gt;, &lt;a href=&#34;https://www.howtographql.com/graphql-java/10-pagination/&#34;&gt;paginación&lt;/a&gt;, &lt;a href=&#34;https://www.howtographql.com/graphql-java/7-error-handling/&#34;&gt;gestión de errores&lt;/a&gt; y &lt;a href=&#34;http://graphql.org/learn/caching/&#34;&gt;cacheo&lt;/a&gt; aunque esto último es menos efectivo en GraphQL al depender de los datos a devolver que solicite el cliente.&lt;/p&gt;

&lt;p&gt;Para usar GraphQL hay que definir un &lt;em&gt;schema&lt;/em&gt; que incluye los tipos, sus propiedades y tipos. También se pueden usar &lt;a href=&#34;http://graphql.org/learn/caching/&#34;&gt;fragmentos&lt;/a&gt; para reutilizar partes de la definición de los tipos. Cada &lt;em&gt;type&lt;/em&gt; representa una entidad que definen las propiedades que posee ya sean datos escalares o referencias a otras entidades formando de esta manera grafos de objetos, los tipos de las variables que poseen una exclamación al final quiere decir que son opcionales, por defecto todos los datos son distinto de nulo. Las listas se definen con corchetes y el tipo entre ellos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=library.graphqls&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una definido el esquema hay que desarrollar los &lt;em&gt;resolvers&lt;/em&gt; que son encargados de obtener los datos seguramente de una base de datos externa ya sea una base de datos SQL o NoSQL en este caso utilizando una clase que implementa el patrón repositorio y que abstrae del sistema de persistencia donde se almacenan los datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Query.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=LibraryRepository.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Book.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Author.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los &lt;em&gt;mutators&lt;/em&gt; son los encargados de procesar las peticiones de modificación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Mutation.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando una aplicación de &lt;a href=&#34;https://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; para ofrecer el servicio hay que realizar la contribución adecuada al contenedor de dependencias, en Java GraphQL se define como un &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&#34;&gt;&lt;em&gt;servlet&lt;/em&gt;&lt;/a&gt; al cual hay que proporcionarle la configuración de los &lt;em&gt;resolvers&lt;/em&gt;, &lt;em&gt;mutators&lt;/em&gt;, procesador de contexto que en este caso se utiliza para la autenticación y definición del esquema entre otras posibles cosas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=AuthContext.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El lenguaje de consulta GraphQL permite consultar el grafo de objetos y recuperar los datos deseados. En el siguiente ejemplo se obtienen los libros, los autores y los libros con los datos de sus autores de una clase que implementa el patrón &lt;em&gt;repository&lt;/em&gt;. En el ejemplo los datos del repositorio están definidos en la propia clase de forma estática pero como su función es abstraer de donde se obtienen los datos el cambio sería sencillo para que los obtuviese de una base de datos SQL o NoSQL ya que los cambios estarían encapsulados principalmente en esa clase. Los datos son devueltos en formato JSON.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-1.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una de las ventajas de GraphQL sobre REST es que es posible realizar una única petición lo que en REST podrían ser varias. Por ejemplo, la siguiente consulta obtiene en una única consulta todos los libros, todos los autores y el autor con identificativo 1 de la biblioteca, esto mejora el rendimiento ya que en REST se hubiesen requerido varias peticiones una para obtener libros, otra para los autores y otra para el autor 1. La otra ventaja sobre REST es que se devuelven únicamente los datos que el cliente solicita y no una lista prefijada por el desarrollador de la interfaz.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-2.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las consultas puede hacerse mediante una petición &lt;em&gt;GET&lt;/em&gt; o &lt;em&gt;POST&lt;/em&gt; de HTTP.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-3.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las peticiones de modificación se envían mediante &lt;em&gt;POST&lt;/em&gt;. Este es el caso para añadir un libro a la biblioteca y los casos de que el autor del libro no sea válido o que el usuario que añade el libro no tenga permisos. En el ejemplo los errores no son descriptivos de lo que realmente ha sucedido, habría que hacer el tratamiento de errores adecuado para que los mensajes fuesen más descriptivos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-4.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=PermissionException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=ValidationException.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;La forma explicada en las guías de GraphQL para Java es que el &lt;em&gt;mutator&lt;/em&gt; reciba los datos y este delegue la funcionalidad en una clase que implemente el patrón &lt;em&gt;repository&lt;/em&gt; que abstrae del sistema de almacenamiento (base de datos SQL, NoSQL o cualquier otro), además, este patrón &lt;em&gt;repository&lt;/em&gt; o clase de lógica de negocio se recomienda que implemente la funcionalidad necesaria para aplicar la autorización. En el ejemplo aunque de forma sencilla solo en usuario &lt;em&gt;admin&lt;/em&gt; tiene permitido añadir libros, en un proyecto es posible realizar la autenticación usando &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; como sistema de OAuth, usar el &lt;em&gt;token&lt;/em&gt; de OAuth para implementar la autorización y un &lt;em&gt;framework&lt;/em&gt; de seguridad como &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt; para aplicar los permisos a las funcionalidades.&lt;/p&gt;

&lt;p&gt;Los artículos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&lt;/a&gt; pueden servir como base para añadir autenticación OAuth a un servicio GraphQL con Keycloak.&lt;/p&gt;

&lt;p&gt;Finalmente, el archivo de construcción de &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; del ejemplo con las dependencias necesarias.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql-java.readthedocs.io/en/v5/&#34;&gt;Welcome to graphql-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java&#34;&gt;GraphQL Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/graphql-java/2-queries/&#34;&gt;Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java-tools&#34;&gt;A schema-first tool for graphql-java inspired by graphql-tools for JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graph.cool&#34;&gt;GraphQL Backend Development Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genbetadev.com/desarrollo-aplicaciones-moviles/por-que-deberiamos-abandonar-rest-y-empezar-a-usar-graphql-en-nuestras-apis&#34;&gt;¿Por qué deberíamos abandonar REST y empezar a usar GraphQL en nuestras APIs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paradigmadigital.com/dev/graphql-todos-uno-uno-todos/&#34;&gt;GraphQL: ¡todos para uno y uno para todos!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adictosaltrabajo.com/tutoriales/introduccion-a-graphql/&#34;&gt;Introducción a GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/consejos-para-empresas-y-gente-de-recursos-humanos-que-busquen-talento/</id>
        <title>Consejos para empresas y gente de recursos humanos que busquen talento</title>        
        <updated>2017-10-29T14:00:00+01:00</updated>
        <published>2017-10-28T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/consejos-para-empresas-y-gente-de-recursos-humanos-que-busquen-talento/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;En multitud de ocasiones habrás oído consejos a seguir para como candidato a una oferta de trabajo. Desde informarte previamente a la entrevista de trabajo sobre el puesto y la empresa, ser puntual, revisar el &lt;em&gt;curriculum vitae&lt;/em&gt; y la carta de presentación para enviarlos sin faltas de ortografía, sobre actitud en la entrevista, &amp;hellip; en &lt;a href=&#34;http://orientacion-laboral.infojobs.net/&#34;&gt;Infojobs&lt;/a&gt; se ofrecen cantidad de ellos. La mayoría son consejos para los aspirantes a un puesto de trabajo y al igual que hay consejos para los candidatos también se me ocurren algunos para las empresas. Aquí algunos que yo sigo para archivar empresas candidatas interesantes para un futurible aún en un momento determinado no estando buscando activamente un nuevo puesto de trabajo.&lt;/p&gt;

&lt;p&gt;Cualquier empresa grande, pequeña, &lt;em&gt;outsourcing&lt;/em&gt; o de reciente creación para cualquier trabajo tratará de contratar a la persona más talentosa según sus preferencias y que pueda alcanzar. De entre las muchas ofertas que se publican a la semana en los portales de empleo como &lt;a href=&#34;https://www.infojobs.net/&#34;&gt;Infojobs&lt;/a&gt;, &lt;a href=&#34;https://www.tecnoempleo.com/&#34;&gt;Tecnoempleo&lt;/a&gt;, &lt;a href=&#34;https://www.trabajos.com/&#34;&gt;Trabajos.com&lt;/a&gt; y similares de las que serían adecuadas para mi perfil como desarrollador web Java pocas me llaman la atención como para presentarme como candidato a no ser que tuviese necesidad.&lt;/p&gt;

&lt;p&gt;Estos son algunos consejos para las empresas y personas del ámbito de recursos humanos para que a algunos les es ajeno en cierta medida la tecnología sobre la que está buscando candidatos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sin faltas de ortografía: en la tecnología hay muchas siglas y se usan muchos nombres que para alguien de recursos humanos les dirá poco. Una sigla o nombre mal puesto puede indicar que la empresa desconoce la tecnología o que no le da importancia. Para un candidato que si se la dé restará puntos la oferta. Por ejemplo, en el ámbito Java en casi todas las ofertas se sigue poniendo J2EE, este término está obsoleto desde el año 2006 momento a partir del cual se renombró a Java EE y en un futuro quizá hablemos de EE4J.&lt;/li&gt;
&lt;li&gt;Salario: a nadie le gusta que le hagan perder el tiempo, ni al candidato ni al reclutador, se más honesto e indica el rango salarial ofrecido. Si realmente quieres contratar talento trata de que los conocimientos y experiencia solicitada estén acordes con el salario ofrecido, de otra forma lo probable es no encontrar a los mejores candidatos.&lt;/li&gt;
&lt;li&gt;Programadores: si estás ofreciendo un puesto para un programador indica las tecnologías con las que se trabajará los más detalladamente posible. Versión del lenguaje, servidor web, librerías, control de versiones, ¿Windows o Linux?. También indica el ámbito de trabajo. Indicar &lt;em&gt;Programador Java&lt;/em&gt; no es suficiente y cualquier candidato se preguntará para que ámbito de la tecnología del amplio abanico se estará refiriendo la oferta ¿aplicación web?, ¿de escritorio?, ¿android?, ¿embebido?, ¿sistemas?, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Sector: indica a que sector se dedica la empresa principalmente o el de la empresa en la que se prestará servicio. Consultoría, &lt;em&gt;outsourcing&lt;/em&gt;, comercio electrónico, desarrollo a medida, ámbito financiero, administración pública, ingeniería, telecomunicaciones, energía, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Tipología aplicación: indica si se trata de mantener una aplicación existente, añadirle nuevas funcionalidades, desarrollar aplicaciones desde cero, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Líderes e importantes: muchas consultorías se autodefinen como líderes y ofrecen trabajar con importante proyecto o cliente de primer nivel. Alguien que lleve algo de tiempo en el sector de la tecnología y lo conozca le dará poca importancia a frases como esas que no tienen mucho contenido. Exaspera que las varias consultorías con más presencia en los portales de empleo se autodenominen líderes y ofrezcan importantes proyectos, no hay tantos líderes más cuando en muchos casos se trata de empresas cuyo principal negocio es como seleccionadores de personal y &lt;em&gt;outsouring&lt;/em&gt;, la importancia del proyecto también corresponde valorarlo al candidato.&lt;/li&gt;
&lt;li&gt;Horario: indica cual será el horario y si es flexible.&lt;/li&gt;
&lt;li&gt;Lugar de trabajo: para conocer el medio de transporte a utilizar, la distancia que ha de realizar y el tiempo que ha de emplear una persona hasta el centro de trabajo.&lt;/li&gt;
&lt;li&gt;Tamaño de la empresa: algunas personas prefieren trabajar en empresas pequeñas y otras de mayor tamaño, es otro dato.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No indicar suficiente información o algo tan importante como el salario puede generar incertidumbre y algunos quizá no se postulen como candidatos por ello, también puede suceder con dar poca información sobre la tecnología o sector.&lt;/p&gt;

&lt;p&gt;¿Que puede hacer una empresa si no puede competir en salario? Podría ser el caso de una empresa de reciente creación o pequeña que podría compensar un sueldo menor al ofertado por otras empresas de la zona ofreciendo otros beneficios con un coste no muy elevado pero con buenas posibilidades de ser valorado:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jornada intensiva: todo el año o los meses de verano, por ejemplo de 8am a 3pm con 35 horas semanales. A partir de cierta cantidad el sueldo deja de ser un factor que algunos tengamos en cuenta y la jornada intensiva podría ser algo muy bien visto. Además, de otros motivos como una mayor productividad y permitir la conciliación familiar. Aún con la proporcional reducción de sueldo en base a la menor jornada no es solo un factor para atraer talento sino para retenerlo ya que son mucho más habituales los exigentes horarios partidos de mañana y tarde.&lt;/li&gt;
&lt;li&gt;Teletrabajo y horario flexible: ofrecer la posibilidad de trabajar desde casa, hacerlo ocasionalmente o cierta flexibilidad en el horario permite conciliar el trabajo y los asuntos personales que algunas personas pueden valorar.&lt;/li&gt;
&lt;li&gt;Certificaciones: que la empresa ofrezca la oportunidad de obtener certificaciones oficiales como Java, Java EE, RedHat, Liferay o Alfresco.&lt;/li&gt;
&lt;li&gt;Formación: el sector de la tecnología avanza rápido y en un lustro o década aparecen nuevas tecnologías. Disponer de cierto presupuesto para adquirir libros de texto o tiempo en horario laboral para la asistencia a eventos o cursos de formación no solo los valoramos los trabajadores sino que también es beneficioso para la empresa invertir en la capacitación de sus propios empleados.&lt;/li&gt;
&lt;li&gt;Evolución profesional: en muchas ofertas se menciona pero debe ser acorde a la que desee el trabajador y la empresa pueda ofrecer. En el mundo de la consultoría la evolución es pasar por programador (en ocasiones poco tiempo), analista programador, jefe de proyecto, consultor y &lt;em&gt;manager&lt;/em&gt; y a veces saltándose algún eslabón de la cadena, esto es la carrera profesional que desean algunas personas, otros consideramos importantes todos los otros aspectos de un proyecto que manejan los demás roles pero a algunos nos gusta programar, estar en contacto con la tecnología, construir, materializar las soluciones que otros analizan y otros cuantos necesitan y no por ello nadie debe considerar nuestro trabajo menos importante (haría mal).&lt;/li&gt;
&lt;li&gt;Conocimiento y proyecto: quizá no ofrezcas el mejor sueldo pero el proyecto y el conocimiento que se puede aprender de él puede ser un punto apetecible sobre todo si las herramientas con las que se trabajará son modernas, adecuadas y no han caído en desuso siendo superadas por otras de nueva generación.&lt;/li&gt;
&lt;li&gt;Equipo y licencias: como incentivo puedes ofrecer adquirir el equipo con el que más a gusto se encuentre el candidato y con el sistema operativo que desee si es posible (Mac, Windows, Linux, &amp;hellip;). También puedes ofrecer comprar las licencias del software con las que más productivo se sea. El candidato estará a gusto con las herramientas que prefiere y la empresa obtendrá mayor productividad, beneficioso para ambos y valorable por el primero.&lt;/li&gt;
&lt;li&gt;Abono transporte y comida: es otra forma de remuneración valorada que puede ser tenida en cuenta como parte o complemento al salario. El abono de comida quita una preocupación y proporciona más tiempo libre al trabajador que si tuviese que preparar a la noche todos los días entre semana la comida para el día siguiente o incluso el fin de semana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero conocer la respuesta a una pregunta tanto en una entrevista de trabajo como en una evaluación sino fundamental si muy importante es ¿qué deseas? ¿qué valoras? ¿qué buscas? Para conocer si los objetivos de la empresa y esa persona están alineados. Cada persona puede priorizar de forma diferente y evaluar en diferente grado cada una de las cosas de las listas anteriores, unas quizá valoren un buen salario, otras un buen ambiente de trabajo y buenos compañeros, otros poder conciliar la vida laboral y la profesional, distancia al puesto de trabajo, otros tener oportunidades de seguir aprendiendo sobre los temas de su interés, otros la tecnología que se usa, &amp;hellip; Se pueden cumplir muchos pero fallar en alguno o algunos que una persona considere importantes durante un periodo de tiempo prolongado y es probable que al final no esté a gusto y acabe buscando nuevos horizontes, por eso considero importantes las tres preguntas anteriores.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="opinion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/</id>
        <title>Visualizar datos y generar gráficas en Java con JFreeChart</title>        
        <updated>2017-10-22T12:00:00+02:00</updated>
        <published>2017-10-22T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Visualizar datos de forma gŕafica ayuda a comprender un conjunto de datos grande mucho mejor que leyendo los valores en una tabla con varias columnas. En Java con la librería JFreeChart podemos generar gráficas de diferentes tipos que podremos incluir en los archivos &lt;em&gt;pdf&lt;/em&gt; que generemos en un aplicación o podremos mostrar en forma de imagen en el navegador si se trata de una aplicación web.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las principales tareas de las aplicaciones informáticas es manejar información, almacenar y recuperar datos de diversos tipos según sea el ámbito de la información tratada. Ejemplos podrían ser datos meteorológicos como temperatura, presión, velocidad y dirección del viento o datos poblacionales como número de personas, hombres y mujeres, nativos y extranjeros, &amp;hellip; todos estos datos se pueden recoger a lo largo del tiempo. Al recuperar los datos y presentarlos los datos se pueden presentar de forma tabular con las cifras tal y como están guardadas, sin embargo, esta forma hace difícil comprender los datos ¿si queremos ver como han evolucionado los datos meteorológicos durante un periodo de tiempo? ¿si queremos ver el porcentaje de población que le corresponde a cada comunidad autónoma respecto al total o como ha variado en varios años? Visualizar la información de forma gráfica nos ayuda a visualizar y comprender mejor un gran volumen de datos en mucho menos tiempo. Una vez comprendida la información se extraen tendencias de algunos datos e información útil que ayuden a tomar decisiones.&lt;/p&gt;

&lt;p&gt;Estos son los datos de la evolución de cuota de uso entre los usuarios de tres de los principales navegadores desde el 2007 hasta el 2017. Viendo la tabla es más difícil observar la tendencia de cada uno de ellos y como se relacionan los datos con el resto navegadores. En una gráfica se observaría que Internet Explorer tiene una tendencia descendente, Firefox ascendente hasta el nacimiento de Chrome y este continuamente ascendente mientras las otras opciones pierden usuarios&lt;/p&gt;

&lt;table cellpadding=&#34;3&#34; cellspacing=&#34;3&#34;&gt;
    &lt;tr&gt;
        &lt;th&gt;Browser&lt;/th&gt;
        &lt;th&gt;2007&lt;/th&gt;
        &lt;th&gt;2008&lt;/th&gt;
        &lt;th&gt;2009&lt;/th&gt;
        &lt;th&gt;2010&lt;/th&gt;
        &lt;th&gt;2011&lt;/th&gt;
        &lt;th&gt;2012&lt;/th&gt;
        &lt;th&gt;2013&lt;/th&gt;
        &lt;th&gt;2014&lt;/th&gt;
        &lt;th&gt;2015&lt;/th&gt;
        &lt;th&gt;2016&lt;/th&gt;
        &lt;th&gt;2017&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Internet Explorer&lt;/td&gt;
        &lt;td&gt;67.7&lt;/td&gt;
        &lt;td&gt;63.1&lt;/td&gt;
        &lt;td&gt;60.2&lt;/td&gt;
        &lt;td&gt;50.6&lt;/td&gt;
        &lt;td&gt;41.1&lt;/td&gt;
        &lt;td&gt;31.8&lt;/td&gt;
        &lt;td&gt;27.6&lt;/td&gt;
        &lt;td&gt;20.4&lt;/td&gt;
        &lt;td&gt;17.3&lt;/td&gt;
        &lt;td&gt;12.3&lt;/td&gt;
        &lt;td&gt;8.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Firefox&lt;/td&gt;
        &lt;td&gt;25&lt;/td&gt;
        &lt;td&gt;29.1&lt;/td&gt;
        &lt;td&gt;32.1&lt;/td&gt;
        &lt;td&gt;32.9&lt;/td&gt;
        &lt;td&gt;31.9&lt;/td&gt;
        &lt;td&gt;25.5&lt;/td&gt;
        &lt;td&gt;20.1&lt;/td&gt;
        &lt;td&gt;18.4&lt;/td&gt;
        &lt;td&gt;15.3&lt;/td&gt;
        &lt;td&gt;11.4&lt;/td&gt;
        &lt;td&gt;9.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Chrome&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;0.2&lt;/td&gt;
        &lt;td&gt;6.4&lt;/td&gt;
        &lt;td&gt;14.6&lt;/td&gt;
        &lt;td&gt;25.3&lt;/td&gt;
        &lt;td&gt;30.1&lt;/td&gt;
        &lt;td&gt;34.3&lt;/td&gt;
        &lt;td&gt;43.2&lt;/td&gt;
        &lt;td&gt;47.3&lt;/td&gt;
        &lt;td&gt;58.4&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;En Java, existe una librería que permite generar gráficas de diferentes tipos con la que visualizar datos, &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;. Con esta librería de software libre que tiene una &lt;a href=&#34;http://www.gnu.org/licenses/lgpl.html&#34;&gt;licencia LGPL&lt;/a&gt; es posible generar gráficas de área, de barras, de barras apiladas, con ejes combinados, financieras, de Gantt, de líneas, diales, con múltiples ejes, sobrepuestas, tartas, estadísticas, de series temporales, xy y otros tipos, a algunas es posible darles un aspecto en tres dimensiones. Las gráficas las podemos exportar a archivos de imagen &lt;em&gt;png&lt;/em&gt;, &lt;em&gt;jpg&lt;/em&gt; o formatos escalares como &lt;em&gt;svg&lt;/em&gt; con lo que serán utilizables de múltiples formas, por ejemplo, incluyendo las gráficas en archivos PDF o si la aplicación es una aplicación web devolver las imágenes al navegador para que las visualice, usando &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; para generar informes es posible incluir las imágenes generadas por JFreeChart.&lt;/p&gt;

&lt;p&gt;Desde la propia página web de JFreeChart es posible ejecutar una &lt;a href=&#34;http://www.jfree.org/jfreechart/jfreechart-1.0.16-demo.jnlp&#34;&gt;aplicación Java Web Start de demostración&lt;/a&gt; que contiene múltiples ejemplos con datos para ver como son los diferentes tipos de gráficas, en la librería hay un archivo &lt;em&gt;jar&lt;/em&gt; con la misma aplicación de demostración junto con el código fuente de algunos ejemplos. En el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/overview-summary.html&#34;&gt;Javadoc&lt;/a&gt; está la documentación con la API ofrecida por la librería. El autor de la librería ofrece una &lt;a href=&#34;http://object-refinery.com/jfreechart/guide.html&#34;&gt;guía en formato PDF y el código fuente de los ejemplos&lt;/a&gt; pero estos son de pago. La última versión tiene unos años pero es compatible con Java 1.6.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=demo.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart.png&#34; title=&#34;Gráfica de tarta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart.png&#34; title=&#34;Gráfica de coordenadas polares&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar.png&#34; title=&#34;Gráfica de barras apiladas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Ejemplos de gráficas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Este sería el código fuente de un ejemplo sencillo para una gráfica varias series datos. En el ejemplo primeramente se crear el conjunto de datos, el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/Dataset.html&#34;&gt;Dataset&lt;/a&gt; de la gráfica, se establecen algunos estilos de visualización con &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.html&#34;&gt;XYLineAndShapeRenderer&lt;/a&gt;, con la clase factoría &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/ChartFactory.html&#34;&gt;ChartFactory&lt;/a&gt; se obtiene la gráfica proporcionándole los datos y finalmente generan un archivo en formato &lt;em&gt;png&lt;/em&gt; en un archivo, también se podría generar en un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/OutputStream.html&#34;&gt;OutputStream&lt;/a&gt; si fuese el caso de una aplicación web que quisiera enviar la imagen al navegador del cliente o también para incluir la imagen en un archivo PDF.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Gráfica de series&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En JavaScript también hay librerías para generar gráficas pero para casos complejos y con muchos datos probablemente sea mejor idea generar las gráficas en el lado del servidor que enviar todos los datos que necesite la gráfica al cliente. En GNU/Linux disponemos del programa &lt;a href=&#34;http://gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt; usable desde la línea de comandos y por tanto desde cualquier lenguaje que tenga la capacidad de ejecutar comandos del sistema, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/&#34;&gt;ejecutar un comando del sistema con Java&lt;/a&gt; de gnuplot para que nos generase la gráfica. Hay varias posibilidades para visualizar de forma gráfica la información.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JFreeChart&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javascan.com/chapter/jfreechart&#34;&gt;JFreeChart Program Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/jfreechart/index.htm&#34;&gt;JFreeChart Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/</id>
        <title>Implementar funcionalidades comunes en Java con la librería Lombok</title>        
        <updated>2017-10-21T11:00:00+02:00</updated>
        <published>2017-10-21T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java es un lenguaje verboso además requerir realizar las definiciones de forma explícita y con poco azúcar sintáctico (o como diría algún otro, poco veneno para ratas), esto hace que el número de líneas de código necesarias sea mayor que en otros lenguajes. Que Java sea verboso, explícito y con poco azúcar sintáctico no es necesariamente un inconveniente ya que la mayor parte del tiempo los programadores la dedicamos a leer código ya escrito sin embargo a mayor número de líneas mayor tiempo se requiere en mantenerlas. Un ejemplo claro está en los &lt;em&gt;beans&lt;/em&gt; con múltiples propiedades donde por cada propiedad es necesario definir un método &lt;em&gt;get&lt;/em&gt; y un método &lt;em&gt;set&lt;/em&gt; además &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/&#34;&gt;implementar de forma correcta los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;&lt;/a&gt;, el método &lt;em&gt;toString&lt;/em&gt;, utilizar el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/&#34;&gt;patrón builder&lt;/a&gt;, múltiples constructores con combinaciones de propiedades o comprobaciones para valores no nulos en parámetros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; es una pequeña librería Java que hace posible eliminar todo ese código repetitivo necesario en cada &lt;em&gt;bean&lt;/em&gt; o clase Java utilizando varias anotaciones. Usarla no requiere ninguna complicación basta añadirla a la lista de dependencias de compilación y las anotaciones serán procesadas. Los IDEs serán conscientes de los métodos implementados por las anotaciones instalando un complemento.&lt;/p&gt;

&lt;p&gt;Las anotaciones proporcionadas por Lombok son las siguientes, en la documentación se explica detalladamente que hace cada una de ellas y un ejemplo de código bastante ilustrativo comparando el código usando las anotaciones y el código Java equivalente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34;&gt;@Getter/@Setter&lt;/a&gt;: proporciona una implementación de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/ToString&#34;&gt;@ToString&lt;/a&gt;: proporciona una implementación del método &lt;em&gt;toString&lt;/em&gt; generando una cadena con información de las propiedades.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/EqualsAndHashCode&#34;&gt;@EqualsAndHashCode&lt;/a&gt;: proporciona una implementación correcta de los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/constructor&#34;&gt;@NoArgsConstructor, @RequiredArgsConstructor y @AllArgsConstructor&lt;/a&gt;: implementan varios métodos de constructores.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/NonNull&#34;&gt;@NonNull&lt;/a&gt;: valida que un argumento no es nulo lanzando una excepción &lt;em&gt;NullPointerException&lt;/em&gt; o &lt;em&gt;IllegalArgumentException&lt;/em&gt; en caso de que lo sea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Data&#34;&gt;@Data&lt;/a&gt;: es una combinación de varias anotaciones, &lt;em&gt;@ToString&lt;/em&gt;, &lt;em&gt;@EqualsAndHashCode&lt;/em&gt;, &lt;em&gt;@Getter&lt;/em&gt; en todos las propiedades y &lt;em&gt;@Setter&lt;/em&gt; en todas las propiedades no finales y &lt;em&gt;@RequiredArgsConstructor&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Value&#34;&gt;@Value&lt;/a&gt;: hace una clase inmutable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Builder&#34;&gt;@Builder&lt;/a&gt;: una API para la creación de objetos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Cleanup&#34;&gt;@Cleanup&lt;/a&gt;: facilita la gestión de recursos de forma automática.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/SneakyThrows&#34;&gt;@SneakyThrows&lt;/a&gt;: posibilita lanzar excepciones sin declararlas en los métodos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Synchronized&#34;&gt;@Synchronized&lt;/a&gt;: otra forma de implementar la sincronización&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterLazy&#34;&gt;@Getter(lazy=true)&lt;/a&gt;: calcula el valor de una propiedad la primera vez que se llama y la cachea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/log&#34;&gt;@Log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando algunas de estas anotaciones en una clase Java y su uso en un programa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Car.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; hay que añadir en el archivo de construcción del proyecto &lt;em&gt;build.gradle&lt;/em&gt; la dependencia en el ámbito de &lt;em&gt;compileOnly&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando un IDE, su complemento para Lombok y añadida la dependencia los métodos que implementa Lombok con las anotaciones son visualizados con el asistente de código.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij.png&#34; title=&#34;Soporte de Lombok en IntelliJ&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok.png&#34; title=&#34;Ejecución del ejemplo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Soporte de Lombok en IntelliJ y ejecución del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Las anotaciones de Lombok permiten escribir menos código repetitivo en &lt;em&gt;beans&lt;/em&gt; o objetos de transferencia de datos o DTO pero conviene conocer lo que hacen esas anotaciones. Una de las características por las que algunas personas usan otros lenguajes más recientes como &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; es que en estos requieren menos líneas código para hacer lo mismo que en Java como el caso de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt; de las propiedades que en Groovy se proporcionan de forma implícita y en Java de forma explícita, con Lombok en Java estos métodos también se pueden proporcionar con anotaciones sin tener que codificarlos.&lt;/p&gt;

&lt;p&gt;En el momento de escribir este artículo Lombok no es compatible con Java 9 aunque ya se está trabajando en su soporte y en algún momento lo será.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Lombok&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/</id>
        <title>Obtener información de la pila de las excepciones</title>        
        <updated>2017-10-15T12:15:00+02:00</updated>
        <published>2017-10-15T12:15:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo incorporado en algunos lenguajes como Java para el manejo de errores y condiciones de error. En la implementación de las excepciones en los lenguajes hay diferencias, por ejemplo, en Java hay &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;excepciones checked y uncheked&lt;/a&gt; y en lenguajes como &lt;a href=&#34;http://www.microsoft.com/net&#34;&gt;C#&lt;/a&gt; o &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; todas las excepciones son consideradas &lt;em&gt;unchecked&lt;/em&gt;. En cualquier caso son una mejor forma de forzar a gestionar las condiciones de error que se producen que el comprobar no obligatoriamente el valor de retorno de una función, incluso JavaScript incorpora excepciones.&lt;/p&gt;

&lt;p&gt;Las palabras reservadas en Java para el manejo de excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt; , &lt;em&gt;finally&lt;/em&gt;, &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt;. El manejo de algunas excepciones consiste en emitir su pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt; en la terminal o en el sistema de &lt;em&gt;logging&lt;/em&gt;. El &lt;em&gt;stacktrace&lt;/em&gt; contiene un mensaje de error, los métodos de la pila de llamadas del &lt;em&gt;thread&lt;/em&gt; que la causó junto con el número de la línea. Además, las excepciones puede tener asociada una excepción causa por ejemplo un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/sql/SQLException.html&#34;&gt;SQLException&lt;/a&gt; puede ser causado por un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/IOException.html&#34;&gt;IOException&lt;/a&gt; por fallo de comunicación con el servidor de base de datos.&lt;/p&gt;

&lt;p&gt;Todas las excepciones en Java heredan de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; y entre los métodos que tiene esta clase está &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#getStackTrace--&#34;&gt;getStackTrace()&lt;/a&gt; que devuelve un &lt;em&gt;array&lt;/em&gt; de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackTraceElement.html&#34;&gt;StackTraceElement&lt;/a&gt; ordenado del último método llamado al primero. Con los métodos de la clase &lt;em&gt;StackTraceElement&lt;/em&gt; obtenemos el nombre de la clase, el archivo, el nombre del método y la linea de código de esa llamada.&lt;/p&gt;

&lt;p&gt;Con esta información podemos imprimir en la terminal un informe de excepción diferente del que genera el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--&#34;&gt;printStackTrace()&lt;/a&gt;. En el ejemplo limitando el informe de la pila de llamadas a los tres últimos métodos del &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=Throwable.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si en una aplicación manejamos varios hilos con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getAllStackTraces--&#34;&gt;Thread.getAllStackTraces()&lt;/a&gt; obtenemos las pilas de llamadas de todos los hilos y con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getStackTrace--&#34;&gt;Thread.getStackTrace()&lt;/a&gt; el del hilo en concreto que con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#currentThread--&#34;&gt;Thread.currentThread()&lt;/a&gt; sería el actual. Con el &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;StackTraceElement&lt;/em&gt; obtenidos de los hilos podemos obtener un informe personalizado y la situación de cada uno, el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#dumpStack--&#34;&gt;dumpStack()&lt;/a&gt; genera el &lt;em&gt;stacktrace&lt;/em&gt; en la salida de error.&lt;/p&gt;

&lt;p&gt;Entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;las novedades de Java 9&lt;/a&gt; está la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; para procesar los elementos de la pila del &lt;em&gt;thread&lt;/em&gt; actual usando &lt;em&gt;streams&lt;/em&gt; y funciones &lt;em&gt;lambda&lt;/em&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/</id>
        <title>Las excepciones del lenguaje Java</title>        
        <updated>2017-10-15T11:30:00+02:00</updated>
        <published>2017-10-15T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo para capturar y producir condiciones de error en un programa. Es una alternativa al retorno de valores especiales que indique errores y que en estos no son obligatorios su correcta comprobación.&lt;/p&gt;

&lt;p&gt;En Java las excepciones están incorporadas en el lenguaje desde la primera versión y que en posteriores se han mejorado. Las palabras reservadas del lenguaje para las excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt;, &lt;em&gt;finally&lt;/em&gt; para la captura y &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt; para lanzar excepciones en los métodos.&lt;/p&gt;

&lt;p&gt;Las excepciones son objetos que extienden la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; de la que en el JDK es extendida por la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Error.html&#34;&gt;Error&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Exception.html&#34;&gt;Exception&lt;/a&gt; de la que de esta última a su vez hereda &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/RuntimeException.html&#34;&gt;RuntimeException&lt;/a&gt;. Entre las comprobaciones que realiza el compilador está que las excepciones &lt;em&gt;checked&lt;/em&gt; lanzadas por un método son capturadas por el código que lo llama.&lt;/p&gt;

&lt;p&gt;Solo los objetos que hereden de &lt;em&gt;Throwable&lt;/em&gt; pueden ser lanzados y capturados en los bloques &lt;em&gt;try-catch&lt;/em&gt;. Las excepciones que heredan de &lt;em&gt;Error&lt;/em&gt; son empleadas para casos en los que se han agotado recursos del sistema como la memoria o condiciones de error en el sistema que generalmente impiden el correcto funcionamiento del programa y de difícil tratamiento salvo terminar la ejecución. Las excepciones que heredan de &lt;em&gt;RuntimeExcepcion&lt;/em&gt; también se les conoce como &lt;em&gt;uncheked exception&lt;/em&gt; y no necesitan declararse en los métodos para ser lanzadas, son empleadas para advertir de errores de programación como dividir por cero produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArithmeticException.html&#34;&gt;ArithmeticException&lt;/a&gt;, desreferenciar un puntero nulo produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerException&lt;/a&gt; o acceder a una posición inválida de una array produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&#34;&gt;ArrayIndexOutOfBoundsException&lt;/a&gt;. Las excepciones que heredan de &lt;em&gt;Exception&lt;/em&gt; pero no de &lt;em&gt;RuntimeException&lt;/em&gt; se denominan &lt;em&gt;cheked exceptions&lt;/em&gt; y han declararse en los métodos siendo de obligada captura o relanzado para su tratamiento en el método anterior en la pila de llamadas.&lt;/p&gt;

&lt;p&gt;Este sería un ejemplo de código que hace uso de una excepción propia para detectar una condición de error mostrando una excepción &lt;em&gt;checked&lt;/em&gt; y &lt;em&gt;unchecked&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=Account.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidAmountException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidOperationException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Aunque las excepciones son un buen mecanismo para el tratamiento de errores se les critica que rompen el flujo de ejecución de un programa y tienen un coste en rendimiento, aunque esta penalización de rendimiento en la mayoría de programas es irrelevante. Algunas recomendaciones que se hace para usar de forma efectiva las excepciones son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Las excepciones no deben reemplazar comprobaciones simples con sentencias &lt;em&gt;if&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben microgestionar las excepciones. Los bloques &lt;em&gt;try-catch&lt;/em&gt; deben contener bloques de código de varias líneas de código en vez una única sentencia por cada bloque &lt;em&gt;try-catch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Se debe hacer un buen uso de la jerarquía de excepciones y capturar la excepción que se vaya a tratar en el bloque &lt;em&gt;catch&lt;/em&gt;. Una excepción se puede convertir en otra por ejemplo convertir un &lt;em&gt;NumberFormatException&lt;/em&gt; a &lt;em&gt;IOException&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben capturar excepciones para no hacer nada con ellas, esto es no debe haber bloques &lt;em&gt;catch&lt;/em&gt; vacíos.&lt;/li&gt;
&lt;li&gt;En algunos casos es mejor lanzar una excepción que un valor &lt;em&gt;null&lt;/em&gt; que posiblemente produzca un &lt;em&gt;NullPointerException&lt;/em&gt; en otra parte distante del código de dónde se devolvió el valor &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Propagar excepciones no es un signo de poca sabiduría, puede haber motivos para ello sobre todo si no se le puede dar un tratamiento adecuado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando se produce una excepción la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; posee métodos para emitir en la salida un informe de la pila de llamadas, también se puede personalizar la salida. Esta información es esencial y muy útil para conocer la causa de un error ya que indica entre otras cosas cada uno de los métodos, línea en el código fuente y clases donde se ha producido la excepción.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/</id>
        <title>Obtener el mínimo o máximo de dos, una lista o stream de valores en Java</title>        
        <updated>2017-10-12T11:00:00+02:00</updated>
        <published>2017-10-12T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Si tenemos dos valores y queremos obtener el menor con una línea de código, podemos obtenerlo con un a sentencia &lt;em&gt;if&lt;/em&gt; o con el operador condicional &lt;em&gt;? :&lt;/em&gt;. Si queremos obtener el menor de tres valores con sentencias &lt;em&gt;if&lt;/em&gt; o el operador &lt;em&gt;? :&lt;/em&gt;  el problema aparentemente sencillo se complica y si optamos por usar una lista de valores tratándola como si el tamaño fuese desconocido quizá usemos un bucle &lt;em&gt;for&lt;/em&gt; junto con una variable que mantenga el menor valor encontrado hasta el momento usando un &lt;em&gt;if&lt;/em&gt; que compare el valor menor encontrado con el valor actual de la lista.&lt;/p&gt;

&lt;p&gt;Sin embargo, en la API de Java hay dos métodos que permiten simplificar esta tarea, para dos valores podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#min-int-int-&#34;&gt;Math.min()&lt;/a&gt; y para una lista de valores de tamaño desconocido podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#min-java.util.Collection-&#34;&gt;Collections.min()&lt;/a&gt;. Usando un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; aún es más sencillo ya que estos poseen un método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-&#34;&gt;Stream.min()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt; que devuelven el valor mínimo y máximo.&lt;/p&gt;

&lt;p&gt;Este sería el código para los casos de comparar dos elementos, una lista y un stream de valores. Se que se puede probar con &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; incluída entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;otras novedades de Java 9&lt;/a&gt;. En la lista de 20 valores aleatorios el menor es el 2 y entre la variable &lt;em&gt;a&lt;/em&gt; y &lt;em&gt;b&lt;/em&gt; el valor mínimo es 19.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/82b8c88dc3d00080eb6087d9af481ec9.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max.png&#34; title=&#34;Diferentes formas de obtener el valor mínimo y máximo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Diferentes formas de obtener el valor mínimo y máximo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para obtener el máximo sería similar pero usando el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#max-int-int-&#34;&gt;Math.max()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#max-java.util.Collection-&#34;&gt;Collections.max()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/</id>
        <title>Ejemplo con el cliente HTTP/2 de Java</title>        
        <updated>2017-10-08T12:00:00+02:00</updated>
        <published>2017-10-08T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otra de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;nuevas funcionalidades incluidas en Java 9&lt;/a&gt; aunque en modo incubación es el cliente con soporte para HTTP/2 para realizar peticiones a recursos usando este protocolo más eficiente y rápido. Al mismo tiempo se ha simplificado el código necesario para realizar una petición y obtener el resultado de una URL. También se ha añadido la funcionalidad de realizar peticiones asíncronas y creación de conexiones de &lt;em&gt;WebSockets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Las clases importantes de esta nueva API con &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpRequest.html&#34;&gt;HttpRequest&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.html&#34;&gt;HttpResponse&lt;/a&gt;. Estas clases se encuentran en el módulo de incubación &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk.incubator.httpclient-summary.html&#34;&gt;jdk.incubator.httpclient&lt;/a&gt;, una vez que sea definitiva la API se renombrará el módulo.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo realiza una petición a la página del buscador Google con unas cabeceras y obtiene el código de estado, las cabeceras devueltas y el cuerpo de la página de resultado. En la declaración del módulo para usar el cliente hay que indicar que tiene como requerimiento su módulo de &lt;em&gt;jdk.incubator.httpclient&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=module-info.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2.png&#34; title=&#34;Petición con el cliente de Java para HTTP/2&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Petición con el cliente de Java para HTTP/2&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Otras fomas de manejadores del resultado de la petición son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asString--&#34;&gt;BodyHandler.asString()&lt;/a&gt;: almacena el resultado de la petición en un String&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asByteArray--&#34;&gt;BodyHandler.asByteArray()&lt;/a&gt;: almacena el resultado de la petición en un array de bytes como sería el caso de obtener una imagen o un archivo PDF&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asFile-java.nio.file.Path-&#34;&gt;BodyHandler.asFile(Path)&lt;/a&gt;: almacena el resultado en un archivo del disco&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#discard-U-&#34;&gt;BodyHandler.discard()&lt;/a&gt;: descarta la respuesta y devuelve el valor indicado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se puede definir la política de cómo procesar las redirecciones para seguirlas, no seguirlas o solo si son seguras o utilizan el mismo protocolo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#ALWAYS&#34;&gt;HttpClient.Redirect.ALWAYS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#NEVER&#34;&gt;HttpClient.Redirect.NEVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SAME_PROTOCOL&#34;&gt;HttpClient.Redirect.SAME_PROTOCOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SECURE&#34;&gt;HttpClient.Redirect.SECURE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con la clase &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/javax/net/ssl/SSLContext.html&#34;&gt;SSLContext&lt;/a&gt; es posible establecer autenticación para el cliente usando un certificado como muestro en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/&#34;&gt;Autenticación mutua de cliente y servidor con certificados&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para ejecutar el ejemplo usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; y Java 9 hay que añadir un poco de configuración al &lt;em&gt;script&lt;/em&gt; de construcción que posiblemente en un futuro no será necesaria cuando se mejore el soporte.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/</id>
        <title>Evitar niveles de anidación de sentencias condicionales con guard clauses</title>        
        <updated>2017-10-07T12:00:00+02:00</updated>
        <published>2017-10-07T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Al escribir el código de un método es habitual hacer algunas comprobaciones sobre los parámetros, por ejemplo, para comprobar que el parámetro tiene una referencia, si es nulo o cumple alguna condición, si es una lista que no esté vacía o para validar mediante alguna otra regla. Estas validaciones o aserciones se realizan al inicio del método con sentencias &lt;em&gt;if&lt;/em&gt; que añaden un nivel de tabulación al código si se anidan. Estos niveles de tabulación con sentencias &lt;em&gt;if&lt;/em&gt; anidadas hacen poco legible el código.&lt;/p&gt;

&lt;p&gt;Este código que comprueba algunos parámetros no es tan sencillo de entender por los varios niveles de anidación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=NestedIf.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En vez de crear este nivel de anidación y crear varios flujos distintos por donde se bifurca el código, con aserciones, sentencias &lt;em&gt;if&lt;/em&gt; o &lt;em&gt;guard clauses&lt;/em&gt;  el código queda más legible. Después de cada cláusula &lt;em&gt;if&lt;/em&gt; es seguro que la aserción que realiza se cumple.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=GuardClauses.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;También es una recomendación que los métodos solo tengan una sentencia &lt;em&gt;return&lt;/em&gt;, de hecho en la enseñanza de programación se explica pero para estos casos de comprobaciones la ventaja de no tener varios &lt;em&gt;if&lt;/em&gt; anidados es justificable tener varios &lt;em&gt;return&lt;/em&gt;, el código queda más legible.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html&#34;&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/</id>
        <title>La triste realidad de Java, versiones antiguas</title>        
        <updated>2017-10-04T19:30:00+02:00</updated>
        <published>2017-10-01T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Algunos desarrolladores que utilizan el lenguaje de programación Java desearían que el tiempo que pasa entre publicación de una nueva versión y la siguiente fuese menor. Las nuevas versiones incorporan modificaciones en el lenguaje y en la API que facilitan el trabajo de los desarrolladores haciendo que escriban menos líneas de código, haciendo que el código fuente sea más legible que al final redunda en software con menos &lt;em&gt;bugs&lt;/em&gt;, con más funcionalidades, un tiempo de desarrollo menor y con menos costes.&lt;/p&gt;

&lt;p&gt;La versión de Java 9 fue publicada en septiembre de 2017 con algunos aplazamientos hasta estar todas las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; listas, principalmente la nueva modularidad. La versión de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 también con importantes novedades&lt;/a&gt; fue publicada con tres años de anterioridad, en marzo de 2014. En las últimas versiones entre cada una han pasado algunos años.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.0 (Enero 23, 1996)&lt;/li&gt;
&lt;li&gt;JDK 1.1 (Febrero 19, 1997)&lt;/li&gt;
&lt;li&gt;J2SE 1.2 (Diciembre 8, 1998)&lt;/li&gt;
&lt;li&gt;J2SE 1.3 (Mayo 8, 2000)&lt;/li&gt;
&lt;li&gt;J2SE 1.4 (Febrero 6, 2002)&lt;/li&gt;
&lt;li&gt;J2SE 5.0 (Septiembre 30, 2004)&lt;/li&gt;
&lt;li&gt;Java SE 6 (Diciembre 11, 2006)&lt;/li&gt;
&lt;li&gt;Java SE 7 (Julio 28, 2011)&lt;/li&gt;
&lt;li&gt;Java SE 8 (Marzo 18, 2014)&lt;/li&gt;
&lt;li&gt;Java SE 9 (Septiembre 21, 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y de otros de los populares &lt;em&gt;frameworks&lt;/em&gt; para programación de aplicaciones web de servidor como &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Apache Struts&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring Framework&lt;/a&gt; que aún se siguen utilizando en versiones como 1 y 3 respectivamente en algunos casos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Struts 1.1 (2003)&lt;/li&gt;
&lt;li&gt;Struts 1.2 (2004)&lt;/li&gt;
&lt;li&gt;Struts 1.3 (2008)&lt;/li&gt;
&lt;li&gt;Struts 2 (2007)&lt;/li&gt;
&lt;li&gt;Struts 2.1 (2009)&lt;/li&gt;
&lt;li&gt;Struts 2.2 (2010)&lt;/li&gt;
&lt;li&gt;Struts 2.3 (2011)&lt;/li&gt;
&lt;li&gt;Struts 2.5 (2016)&lt;/li&gt;
&lt;li&gt;Spring Framework 1 (2004)&lt;/li&gt;
&lt;li&gt;Spring Framework 2 (2006)&lt;/li&gt;
&lt;li&gt;Spring Framework 2.5 (2007)&lt;/li&gt;
&lt;li&gt;Spring Framework 3 (2009)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.1 (2011)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.2.5 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4.2 (2015)&lt;/li&gt;
&lt;li&gt;Spring Framework 5 (2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En Java 9 el calendario de publicaciones va a cambiar optando por un modelo basado en fechas fijas cada seis meses y cada tres años para las versiones con soporte de largo plazo. Cada una de estas nuevas versiones incorporará las características que estén listas para ser publicadas lo que evitará que si una novedad se retrasa no retrase al resto de novedades que ya estén listas, simplemente se publicará en la siguiente versión al cabo de unos meses. Esto va a hacer que el número de versiones aumente significativamente a lo que hasta ahora ha ocurrido.&lt;/p&gt;

&lt;p&gt;Sin embargo, y a pesar de que algunos desarrolladores se han quejado de el tiempo que pasa entre versión y versión y que ahora con el nuevo calendario se le dará solución, ¿en algunos entornos va a cambiar algo? Si resulta que algunas organizaciones ya sean entes públicos o empresas privadas siguen utilizando versiones de Java como la 6 e incluso la 5 que fueron publicadas hace ya más de una década. Una década en el ámbito tecnológico es una eternidad. O de Spring como la 3 del 2009 o incluso de Struts como la 1 en el mejor de los casos del 2008 que ya incluso ni siquiera tiene soporte ni se siguen desarrollando lo que implica falta de soporte de seguridad. Y no es por que cada nueva versión de Java sea incompatible con la anterior, precisamente lo contrario, la compatibilidad hacia atrás es una de las cosas que siempre se le da una gran importancia en la plataforma a veces incluso por encima de nuevas características, tanto que aún código compilado a &lt;em&gt;bytecode&lt;/em&gt; en las versiones 1.0, 1.1 y 1.2 funcionaría perfectamente con la JVM de Java 9.&lt;/p&gt;

&lt;p&gt;Algunas de estas organizaciones pueden tener necesidad de utilizar versiones durante un periodo de tiempo largo ya sea por el número y tamaño de las aplicaciones que manejan pudiendo ser de un servicio crítico o por el coste que supone reemplazarlas o adaptarlas a tiempos más modernos. Pero usar software de hace una década parece algo excesivo para las aplicaciones nuevas que se desarrollan hoy, aún así si siguen usando versiones antiguas seguro que tendrán motivos. Versiones antiguas de librerías y sin posibilidad de usar las que no estén homologadas en la organización que por desgracia la lista es muy limitada. Generar gráficas con &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;, PDF con &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; o &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;, Excel con &lt;a href=&#34;https://poi.apache.org/&#34;&gt;Apache POI&lt;/a&gt; son solo algunas de las necesidades habituales pero para otras es raro no encontrar alguna librería que lo facilite en gran medida.&lt;/p&gt;

&lt;p&gt;O usan &lt;em&gt;frameworks&lt;/em&gt; propios que a mi no me interesa aprender porque además de usar librerías ya antiguas fuera de esa organizaciones no tienen ninguna validez con lo que uno queda encadenado profesionalmente al menos en parte a esa organización y no me parece recomendable para un futuro profesional.&lt;/p&gt;

&lt;p&gt;El resultado es que aún celebrando la publicación de una nueva versión de Java en muchas organizaciones pasarán muchos años, quizá algún lustro o una ¡década! antes de que la utilicen como ya pasa ahora. Y esta es la triste realidad de Java en algunos sitios. Posiblemente solo en algunas &lt;em&gt;startups&lt;/em&gt; que no tienen una carga tan grande puedan utilizar la última versión de Java al contrario de lo ocurre en otras organizaciones y entornos corporativos mayores.&lt;/p&gt;

&lt;p&gt;Algunas empresas se quejan de que faltan trabajadores para cubrir puestos técnicos pero para completar el asunto digamos también que faltan salarios, condiciones laborales dignas, menos subcontratación o externalización u &lt;em&gt;outsourcing&lt;/em&gt; y proyectos interesantes en algún aspecto como podría ser el tecnológico que a uno le motive a postular a un puesto de trabajo. Yo al menos aparte del sueldo también valoro en buena medida la tecnología que se vaya a usar en el proyecto buscando que no esté obsoleta y que me permita seguir aprendiendo, al menos con la posibilidad de elegir trabajo.&lt;/p&gt;

&lt;p&gt;Y como escuché en cierta charla en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/conferencia-bilbostack-2016/&#34;&gt;una de las BilboStack&lt;/a&gt;, luego dirán que Java es una mierda, ya, una mierda, ¿del 2006?, ¿hablamos de Java 9, &lt;a href=&#34;https://www.jooq.org/&#34;&gt;jOOQ&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;, &lt;a href=&#34;http://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt;, &lt;a href=&#34;https://spring.io/&#34;&gt;Spring 5&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE 8&lt;/a&gt;, &lt;a href=&#34;https://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&#34;http://wildfly.org/&#34;&gt;WildFly&lt;/a&gt;, &lt;em&gt;frameworks&lt;/em&gt; de servidor basados en componentes desde hace años con similitudes con los que ahora a la gente se le &lt;em&gt;hace el culo pepsi-cola&lt;/em&gt; en JavaScript con &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt;?&amp;hellip; por mencionar algunas pocas.&lt;/p&gt;

&lt;p&gt;Quizá en la capital del reino de súbditos o en la capital de la nación que quiere votar sí o no a su independencia haya más posibilidades de encontrar un trabajo más interesante tecnológicamente pero en el páramo de la periferia no hay tantas posibilidades o de incluso crearlas&amp;hellip; quizá algún día.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="opinion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/</id>
        <title>JShell la herramienta REPL incorporada en Java 9</title>        
        <updated>2017-09-29T22:00:00+02:00</updated>
        <published>2017-09-29T21:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; es la incorporación de una herramienta &lt;em&gt;Read-Evaluation-Print-Loop&lt;/em&gt; o REPL similar a las disponibles en otros lenguajes dinámicos para permitir evaluar pequeños ejemplos de código, hacer pruebas o como herramienta para alguien que esté aprendiendo a programar sin la necesidad de utilizar un entorno integrado de desarrollo, una herramienta de construcción y los varios archivos y comandos necesarios para compilar y ejecutar el código Java.&lt;/p&gt;

&lt;p&gt;El comando de la herramienta &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell&lt;/a&gt; es &lt;em&gt;jshell&lt;/em&gt; que inicia un símbolo del sistema donde empezar a introducir las expresiones, se sale de &lt;em&gt;jshell&lt;/em&gt; con el comando &lt;code&gt;/exit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Se pueden crear variables, crear y modificar definiciones de métodos y clases. Cada una de estas expresiones crea un &lt;em&gt;snippet&lt;/em&gt; de código que pueden listarse con el comando &lt;code&gt;/list&lt;/code&gt;. Al introducir las expresiones se soporta completado y asistencia de código con la tecla tabulador como ayuda para saber que métodos tiene un objeto.&lt;/p&gt;

&lt;p&gt;Se pueden crear clases y métodos como en el ejemplo de la serie de Fibonacci implementada con un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; de la cual se muestran los elementos de la serie menores que el número 100.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions.png&#34; title=&#34;Expresiones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion.png&#34; title=&#34;Asistencia de código&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Expresiones y asistencia de código&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods.png&#34; title=&#34;Serie de Fibonacci con un Stream en un método&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Serie de Fibonacci con un Stream en un método&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para diferenciar las expresiones de código de los comandos estos últimos son precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Hay varios como los ya citados para listar los &lt;em&gt;snippets&lt;/em&gt; de código y salir de &lt;em&gt;jshell&lt;/em&gt;, otros son para listar las definiciones de variables con &lt;code&gt;/vars&lt;/code&gt;, métodos con &lt;code&gt;/methods&lt;/code&gt;, tipos con &lt;code&gt;/types&lt;/code&gt; e &lt;em&gt;imports&lt;/em&gt; con &lt;code&gt;/imports&lt;/code&gt;. La lista completa de comandos puede obtenerse pulsando la tecla tabulador después de la barra de comando.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands.png&#34; title=&#34;Comandos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Comandos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para los &lt;em&gt;snippets&lt;/em&gt; multilínea o algo complejos puede utilizarse un editor externo con el comando &lt;code&gt;/edit&lt;/code&gt;. El editor de nuestra preferencia se establece con el comando &lt;code&gt;/set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;También se pueden &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/external-code.htm&#34;&gt;añadir módulos o librerías&lt;/a&gt; para usar las clases y tipos que contengan con el comando &lt;code&gt;/env&lt;/code&gt; y las opciones &lt;code&gt;&amp;ndash;add-modules&lt;/code&gt;  &lt;code&gt;&amp;ndash;module-path&lt;/code&gt; y &lt;code&gt;&amp;ndash;class-path&lt;/code&gt;. Los &lt;em&gt;snippets&lt;/em&gt; creados en una sesión pueden guardarse en un archivo con el comando &lt;code&gt;/save&lt;/code&gt; y ser cargados al inicio de JShell o con el comando &lt;code&gt;/open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/toc.htm&#34;&gt;guía oficial de JShell&lt;/a&gt; se comenta algunas opciones más de esta nueva herramienta.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/guides/java-and-j2ee/getting-started-with-jshell&#34;&gt;Getting Started with JShell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/</id>
        <title>Novedades de Java 9, más allá de la modularidad</title>        
        <updated>2017-10-07T12:15:00+02:00</updated>
        <published>2017-09-24T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La modularidad introducida en Java 9 no es la única novedad incorporada en esta nueva versión. Aunque haya llegado a eclipsar al resto hay otra buena colección de mejoras que sin duda facilitarán la programación con uno de los lenguajes más empleados por los programadores aún después de más de 20 años.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La última versión mayor de Java fue publicada en el año 2014, hace ya mucho tiempo para la época actual donde las cosas avanzan a un ritmo muy rápido. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 introdujo en el lenguaje notables cambios&lt;/a&gt; como las expresiones &lt;em&gt;lambda&lt;/em&gt; dotándolo de capacidades funcionales y mayor expresividad en menos líneas de código junto con referencias a métodos e interfaces funcionales que permite crear implementaciones anónimas de interfaces con una &lt;em&gt;lambda&lt;/em&gt;, se añaden los &lt;em&gt;streams&lt;/em&gt; como nueva forma de iterar sobre las colecciones, interfaces con métodos por defecto o estáticos que aumentan la compatibilidad hacia atrás que siempre se le ha dado gran importancia en la plataforma o una nueva API para fechas que solventa las deficiencias de la anterior. Grandes cambios en el lenguaje tan importantes como los que supusieron Java 5.&lt;/p&gt;

&lt;p&gt;Después de algunos aplazamientos principalmente por implementar la modularización de la forma correcta sin que en un futuro suponga un problema ha sido publicada en septiembre de 2017 la versión de Java 9. La característica más llamativa es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;la modularización de la plataforma con Java 9&lt;/a&gt; que supone grandes mejoras como una mejor encapsulación de los paquetes, interfaces entre módulos bien definidas y dependencias explícitas que proporcionan optimización al usarse sólo los módulos que se necesitan, mayor seguridad al ser menor la superficie de ataque y configuración confiable al comprobar las dependencias al compilar o iniciarse la máquina virtual.&lt;/p&gt;

&lt;p&gt;Pero Java 9 además de los módulos incorpora en la plataforma otros cambios destacables. Esta no es una lista exhaustiva pero si contiene muchas de ellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/index.html&#34;&gt;Oracle JDK 9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What’s New in Oracle JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/javase-docs.htm&#34;&gt;Guías descargables con documentación del JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Varios &lt;em&gt;screencasts&lt;/em&gt; sobre varias de las novedades de Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/SeptOct2017&#34;&gt;Java Magazine Sep/Oct 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/tabla-novedades-java-9.jpg&#34; title=&#34;Tabla de novedades de Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/tabla-novedades-java-9-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Tabla de novedades de Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/duke-java-9.png&#34; width=&#34;300&#34; alt=&#34;Duke Java 9&#34; title=&#34;Duke Java 9&#34;&gt;
&lt;/div&gt;

&lt;h3 id=&#34;métodos-factoría-para-colecciones&#34;&gt;Métodos factoría para colecciones&lt;/h3&gt;

&lt;p&gt;Aún Java no incorpora en el lenguaje una forma de definir como literales elementos tan comunes como listas, conjuntos o mapas. Como alternativa se proporcionan métodos factoría estáticos para crear este tipo de estructuras de datos usando métodos por defecto en sus respectivas interfaces. Además, estos métodos crean colecciones inmutables.&lt;/p&gt;

&lt;p&gt;Aparte de definir este tipo de colecciones de una forma mucho más sencilla que hasta Java 8, las colecciones además son significativamente más eficientes. En el caso de Java 8 un &lt;em&gt;Set&lt;/em&gt; con dos elementos de capacidad 3 requiere un objeto &lt;em&gt;wrapper&lt;/em&gt; para la colección inmodificable, 1 &lt;em&gt;HashSet&lt;/em&gt;, 1 &lt;em&gt;HashMap&lt;/em&gt;, 1 Object[] de longitud 3, 2 dos nodos uno para cada elemento requiriendo en total unos 152 bytes. En el caso de Set creado con Java 9 requiere solo 20 bytes que comparados con los 152 es una mejora significativa más al tener en cuenta que este tipo de estructuras de datos son utilizadas de forma numerosa en cualquier programa. Aún estando hablando de bytes multiplicado por cada uso en algunos casos la reducción de memoria puede ser apreciable.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Collections.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582422289001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;mejoras-en-la-clase-optional&#34;&gt;Mejoras en la clase &lt;em&gt;Optional&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or-java.util.function.Supplier-&#34;&gt;or()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse-java.util.function.Consumer-java.lang.Runnable-&#34;&gt;ifPresentOrElse()&lt;/a&gt; así como &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream--&#34;&gt;stream()&lt;/a&gt; mejoran la experiencia de uso en esta clase que contiene o no un objeto. El método &lt;em&gt;or()&lt;/em&gt; en caso de no contener el &lt;em&gt;Optional&lt;/em&gt; un objeto permite proporcionar un &lt;em&gt;Optional&lt;/em&gt; alternativo. Los métodos &lt;em&gt;ifPresent()&lt;/em&gt; y &lt;em&gt;ifPresentOrElse()&lt;/em&gt; permiten realizar una acción con el objeto del opcional si está presente u otra acción con un valor vacío si no está presente. El método &lt;em&gt;stream()&lt;/em&gt; convierte el &lt;em&gt;Optional&lt;/em&gt; en un &lt;em&gt;stream&lt;/em&gt; de cero o un elemento.&lt;/p&gt;

&lt;h3 id=&#34;mejoras-en-la-api-de-streams&#34;&gt;Mejoras en la API de &lt;em&gt;streams&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los nuevos métodos de los &lt;em&gt;streams&lt;/em&gt; &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#dropWhile-java.util.function.Predicate-&#34;&gt;dropWhile()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#takeWhile-java.util.function.Predicate-&#34;&gt;takeWhile()&lt;/a&gt; permiten descartar o tomar elementos del &lt;em&gt;stream&lt;/em&gt; mientras se comprueba una condición. El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#ofNullable-T-&#34;&gt;ofNullable()&lt;/a&gt; devuelve un &lt;em&gt;stream&lt;/em&gt; de un elemento o vacío dependiendo de si el objeto es &lt;em&gt;null&lt;/em&gt; o no. Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-&#34;&gt;iterate()&lt;/a&gt; permiten generar un secuencia de valores similar a un bucle &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;repl-con-jshell&#34;&gt;REPL con jshell&lt;/h3&gt;

&lt;p&gt;Otra de las características destacables es la incorporación de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; para evaluar código siguiendo el patrón &lt;em&gt;Read-Evaluate-Print-Loop&lt;/em&gt; o REPL para hacer pruebas de código sin la necesidad de un IDE, una herramienta de construcción o toda la infraestructura de un proyecto. Esta herramienta es el comando &lt;em&gt;jshell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se pueden introducir expresiones que son evaluadas y comandos precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Soporta asistencia de código con la tecla tabulador.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8&#34;&gt;Guía de usuario de jshell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell.png&#34; title=&#34;jshell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;jshell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429016001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;jlink-para-generar-runtimes-mínimos&#34;&gt;jlink para generar &lt;em&gt;runtimes&lt;/em&gt; mínimos&lt;/h3&gt;

&lt;p&gt;Java 8 proporciona varios &lt;em&gt;runtimes&lt;/em&gt; reducidos con los &lt;em&gt;compact profiles&lt;/em&gt; que contienen algunas clases menos de las que incluye el JDK completo. Sin embargo, estos &lt;em&gt;runtimes&lt;/em&gt; están preconfigurados y las aplicaciones deben optar por el que ofrezca todas las clases que necesita.&lt;/p&gt;

&lt;p&gt;En Java 9 se proporciona &lt;a href=&#34;http://openjdk.java.net/jeps/282&#34;&gt;jlink&lt;/a&gt; que un sustituto más capaz que los &lt;em&gt;compact profiles&lt;/em&gt;. Permite generar &lt;em&gt;runtimes&lt;/em&gt; aprovechando la nueva modularidad del JDK con únicamente los módulos que necesite la aplicación.&lt;/p&gt;

&lt;p&gt;Esto es especialmente útil para los contenedores de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y los entornos &lt;em&gt;cloud&lt;/em&gt; ya que permite generar imágenes de contenedores con un tamaño significativamente menor. Por ejemplo, una imagen de Docker basada en la distribución &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; con el JDK completo ocupa unos 360 MiB, con &lt;em&gt;jlink&lt;/em&gt; si una aplicación solo necesita del módulo &lt;em&gt;java.base&lt;/em&gt; se puede generar un &lt;em&gt;runtime&lt;/em&gt; con únicamente ese módulo, con este &lt;em&gt;runtime&lt;/em&gt; adaptado la imagen del contenedor tiene un tamaño mucho menor, en este caso de únicamente de unos 40 MiB.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582437011001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;concurrencia&#34;&gt;Concurrencia&lt;/h3&gt;

&lt;p&gt;Se añade un &lt;em&gt;framework&lt;/em&gt; con un conjunto de clases para programación reactiva de publicación-subscripción con las clases &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html&#34;&gt;Flow&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Processor&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html&#34;&gt;Flow.Subscriber&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Publisher&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Subscription&lt;/a&gt;. La clase &lt;em&gt;Subsription&lt;/em&gt; posee dos métodos: &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#cancel--&#34;&gt;cancel()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#request-long-&#34;&gt;request()&lt;/a&gt; para dejar de recibir mensajes y solicitar recibir &lt;em&gt;n&lt;/em&gt; mensajes en la siguientes llamadas de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html#onNext-T-&#34;&gt;onNext​()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#copy--&#34;&gt;copy()&lt;/a&gt; de la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html&#34;&gt;CompletableFuture&lt;/a&gt; permite obtener un copia completándose con el mismo valor cuando la operación se completa normalmente.&lt;/p&gt;

&lt;h3 id=&#34;variable-handles&#34;&gt;Variable Handles&lt;/h3&gt;

&lt;p&gt;Una de las justificaciones de la modularidad es el uso que hasta ahora se le ha dado a la famosa clase interna del JDK &lt;em&gt;sun.misc.Unsafe&lt;/em&gt;. Para proporcionar parte de la funcionalidad de esta clase en una API pública se introduce la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html&#34;&gt;VarHandle&lt;/a&gt; para referenciar a variables estáticas y no estáticas así como a &lt;em&gt;arrays&lt;/em&gt;. Estas instancias se obtienen mediante la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/MethodHandles.Lookup.html&#34;&gt;MethodHandle.Lookup&lt;/a&gt;. Una vez obtenida una instancia de &lt;em&gt;VarHandle&lt;/em&gt; se pueden realizar operaciones de bajo nivel sobre la variable que referencia como operaciones atómicas comparar y establecer pero sin la sobrecarga de rendimiento con las clases equivalentes del paquete &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/atomic/package-summary.html&#34;&gt;java.util.concurrent.atomic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para la mayoría de los programadores esto no les afectará directamente pero sí será una mejora para los desarrolladores de librerías importantes muy populares que si usan la clase &lt;em&gt;Unsafe&lt;/em&gt; y deberían aprovechar estas nuevas capacidades para dejar de usar la clase interna del JDK en la medida de lo posible.&lt;/p&gt;

&lt;h3 id=&#34;actualizaciones-en-la-api-para-procesos&#34;&gt;Actualizaciones en la API para procesos&lt;/h3&gt;

&lt;p&gt;Ahora es posible obtener el identificador del proceso o &lt;em&gt;pid&lt;/em&gt; con el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#pid--&#34;&gt;pid()&lt;/a&gt; y los procesos hijos y descendientes con los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#children--&#34;&gt;children​()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#descendants--&#34;&gt;descendants​()&lt;/a&gt; respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;stackwalker&#34;&gt;StackWalker&lt;/h3&gt;

&lt;p&gt;La clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; permite obtener un &lt;em&gt;stream&lt;/em&gt; secuencial de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.StackFrame.html&#34;&gt;StackWalker.StackFrames&lt;/a&gt; del &lt;em&gt;thread&lt;/em&gt; actual para procesar la pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=StackWalker.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;strings-compactos&#34;&gt;Strings compactos&lt;/h3&gt;

&lt;p&gt;Internamente los la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/String.html&#34;&gt;String&lt;/a&gt; contiene un array de &lt;em&gt;char&lt;/em&gt;, cada &lt;em&gt;char&lt;/em&gt; se representa en formato con la codificación UTF-8 ocupando 16 bits o 2 bytes por cada caracter. Para cadenas en aquellos lenguajes como inglés los caracteres pueden ser representados usando un único &lt;em&gt;byte&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una buena parte de la memoria ocupada en la JVM por cualquier aplicación es debido a las cadenas de modo que tiene sentido compactar aquellas cadenas en las que sea posible representándolas con un único &lt;em&gt;byte&lt;/em&gt; por caracter.&lt;/p&gt;

&lt;p&gt;Lo mejor de todo es que esta optimización será transparente para los programadores y para las aplicaciones proporcionando una reducción en el uso de la memoria y aumento del rendimiento, también en el recolector de basura.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javagists.com/compact-strings-java-9&#34;&gt;Compact Strings In Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recolector-de-basura-g1-por-defecto&#34;&gt;Recolector de basura G1 por defecto&lt;/h3&gt;

&lt;p&gt;Se cambia el recolector de basura por defecto al llamado &lt;em&gt;G1&lt;/em&gt; optimizado para una balance adecuado entre alto rendimiento y baja latencia. En los siguientes artículos se explica de forma más detallada. Al igual que los &lt;em&gt;string&lt;/em&gt; compactos para la mayoría de los programadores será un cambio transparente que no tenga repercusión en la forma de programar las aplicaciones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html&#34;&gt;Getting Started with the G1 Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Make-G1-Default-Garbage-Collector-in-Java-9&#34;&gt;Case for Defaulting to G1 Garbage Collector in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582428191001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;identificador-para-variables&#34;&gt;Identificador para variables _&lt;/h3&gt;

&lt;p&gt;El identificador &lt;em&gt;_&lt;/em&gt; queda reservado para en un futuro usarlo en parámetros a los que no se les dé un uso y no sean relevantes como por ejemplo en las &lt;em&gt;lambdas&lt;/em&gt;. También se evaluará en el &lt;a href=&#34;http://openjdk.java.net/projects/amber/&#34;&gt;proyecto Amber&lt;/a&gt; usar este identificador para tipos diamante parciales como &lt;em&gt;Foo&amp;lt;String, _&amp;gt;&lt;/em&gt; o en referencias a métodos &lt;em&gt;foo.&amp;lt;String, _&amp;gt;bar()&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.takipi.com/project-amber-the-future-of-java-exposed/&#34;&gt;Project Amber: The Future of Java Exposed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;métodos-privados-en-interfaces&#34;&gt;Métodos privados en interfaces&lt;/h3&gt;

&lt;p&gt;Ahora se pueden crear métodos privados en interfaces como utilidad a las implementaciones de los métodos por defecto.&lt;/p&gt;

&lt;h3 id=&#34;mejor-try-with-resource&#34;&gt;Mejor &lt;em&gt;try-with-resource&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Ahora las variables finales o efectivamente finales pueden ser colocadas en los bloques &lt;em&gt;try-with-resource&lt;/em&gt; simplificando  algunos usos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=TryWithResources.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;javadoc&#34;&gt;Javadoc&lt;/h3&gt;

&lt;p&gt;Ahora la documentación Javadoc se genera con marcado de HTML 5 e incluye un cuadro de búsqueda para encontrar más fácilmente tipos y métodos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc.png&#34; title=&#34;Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;archivos-jar-multiversión&#34;&gt;Archivos Jar multiversión&lt;/h3&gt;

&lt;p&gt;Los desarrolladores de librerías para dar soporte a varias versiones de Java debían optar entre generar un artefacto para cada versión o un único archivo &lt;em&gt;jar&lt;/em&gt; limitándose a usar la mínima versión soportada y sin aprovechar las nuevas capacidades de siguientes versiones. Esto es un impedimento para el uso de nuevas versiones.&lt;/p&gt;

&lt;p&gt;Con Java 9 se puede generar un único archivo &lt;em&gt;jar&lt;/em&gt; con algunas clases para una o varias versiones de Java. Por ejemplo, en un archivo &lt;em&gt;jar&lt;/em&gt; con las clases &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; y &lt;em&gt;D&lt;/em&gt; compatibles con Java 6 el desarrollador ahora puede decidir que para la versión 9 la clase &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;B&lt;/em&gt; sean unas optimizadas para esta versión. Esto se consigue con una estructura específica de directorios en el archivo &lt;em&gt;jar&lt;/em&gt;, ubicándose la clase optimizada para Java 9 &lt;em&gt;A&lt;/em&gt; en &lt;em&gt;META-INF/versions/9/A.class&lt;/em&gt; y para Java 10 en &lt;em&gt;META-INF/versions/10/A.class&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Multirelease.out&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238: Multi-Release JAR Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nuevo-modelo-de-publicación&#34;&gt;Nuevo modelo de publicación&lt;/h3&gt;

&lt;p&gt;A partir de la publicación de Java 9 se cambia el modelo de publicación de nuevas versiones optando por una basada en calendario en vez de una por características a incluir. El caso de versiones que han de incluir las características previstas ocasiona el problema que si una se retrasa provoca un retraso en la versión. Con el modelo basado en fechas fijas preestablecidas la versión se liberará con aquellas características que estén listas en la fecha planificada de publicación sin ser retrasadas por aquellas que no.&lt;/p&gt;

&lt;p&gt;Se ha optado por producir una nueva versión cada seis meses con el &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; y &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;licencia GPL&lt;/a&gt; para satisfacer las necesidades de los desarrolladores y una versión con soporte de largo plazo cada tres años para satisfacer las necesidades de tiempo de soporte prolongado de las empresas, &lt;em&gt;Oracle JDK&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582439790001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar un par de libros, &lt;a href=&#34;http://amzn.to/2g0qu6t&#34;&gt;Java 9 Revealed&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2fY3wwT&#34;&gt;Java 9 Modularity Revealed&lt;/a&gt; que explican detalladamente las novedades de la modularidad, las novedades incluídas en este artículo y algunas otras más.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484225910&amp;linkId=9c7874501bb32fa3318e285022e0207a&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484227123&amp;linkId=59d96101c25f9c16c4427b8ee9daef1a&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Y unos buenos vídeos sobre las nuevas características de Java 9, uno en español y otro en inglés.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/CkmB86pCV6A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/9EiLRD95zDg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/the-best-java-9-language-and-api-improvements/&#34;&gt;The best Java 9 Language and API improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/new-features-in-java-9-137344.html&#34;&gt;New Java 9 features at a glance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2ylsidI&#34;&gt;Modern Java Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/try-with-resources-enhancement-in-java-9&#34;&gt;Try-With-Resource Enhancements in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2017&#34;&gt;Revista Java Magazine Jul/Aug 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-9-and-intellij-idea&#34;&gt;Java 9 and IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.autentia.com/2017/09/13/java-9-mas-alla-de-la-modularidad/&#34;&gt;Java 9 más allá de la modularidad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;JShell la herramienta REPL incorporada en Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>