<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-11-26T10:30:00+01:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/paginacion-usando-cursores-en-graphql-y-java/</id>
        <title>Paginación usando cursores en GraphQL y Java</title>        
        <updated>2017-11-26T14:30:00+01:00</updated>
        <published>2017-11-26T10:30:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/paginacion-usando-cursores-en-graphql-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El conjunto de datos de una entidad en algunos casos será grande, miles o cientos de miles de registros, y por tanto no es viable devolverlos todos en una misma consulta por lo que es necesario realizar paginación devolviéndolos en pequeños grupos. La paginación se puede implementar de varias formas, habitualmente con un parámetro que limite el número de elementos a incluir en la página y otro parámetro &lt;em&gt;offset&lt;/em&gt; que deseche los primeros elementos hasta el primero deseado. Sin embargo, utilizar los parámetros &lt;em&gt;limit&lt;/em&gt; y &lt;em&gt;offset&lt;/em&gt; puede producir resultados inesperados si mientras la obtención de una página y la siguiente se insertan nuevos elementos anteriores al &lt;em&gt;offset&lt;/em&gt; ocasionando que lo que sería por ejemplo el décimo elemento pase a ser el undécimo.&lt;/p&gt;

&lt;p&gt;Si esta situación es importante se suelen utilizar cursores que utilizan un parámetro para indicar el número de elementos a incluir en la página pero en vez de un &lt;em&gt;offset&lt;/em&gt; utilizan el identificativo de un registro a partir del cual devolver registros de modo que aunque se inserten registros el primer elemento de la página no cambiará.&lt;/p&gt;

&lt;p&gt;En el caso de la &lt;a href=&#34;http://graphql.org/learn/pagination/&#34;&gt;paginación en GraphQL&lt;/a&gt; se proponen varias formas de implementar la paginación, una de ellas los cursores. En la documentación se explica la teoría, para implementarla es necesario &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/usar-un-resolver-para-recuperar-propiedades-en-GraphQL/&#34;&gt;crear un &lt;em&gt;data fetcher&lt;/em&gt; o &lt;em&gt;resolver&lt;/em&gt;&lt;/a&gt; que reciba los parámetros de &lt;em&gt;limit&lt;/em&gt; para indicar el número de elementos a devolver en la página y &lt;em&gt;after&lt;/em&gt; para indicar a partir de que elemento devolver elementos. También es necesario modificar el esquema de la API para tener en cuenta las nuevas estructuras de datos en las que se devuelven los resultados.&lt;/p&gt;

&lt;p&gt;En este ejemplo de una librería para mostrar la paginación he añadido a los libros una lista de comentarios que será en la que soporte paginación. La definición del esquema queda de la siguiente forma siguiendo la &lt;a href=&#34;(https://facebook.github.io/relay/graphql/connections.htm#)&#34;&gt;especificación de Relay&lt;/a&gt; para lo cual se definen los tipos &lt;em&gt;CommentsConnection&lt;/em&gt;, &lt;em&gt;CommentEdge&lt;/em&gt; (usando &lt;em&gt;generics&lt;/em&gt; no sería necesario implementar unas de estas clases por cada entidad paginable) y &lt;em&gt;PageInfo&lt;/em&gt;. Los cursores son un dato opaco para el cliente pero que decodificado incluye el identificativo del comentario. La propiedad &lt;em&gt;comments&lt;/em&gt; utiliza un &lt;em&gt;resolver&lt;/em&gt; con parámetros que se usa para realizar la búsqueda y recuperar los elementos solicitados en la consulta.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=library.graphqls&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=CommentsConnection.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=CommentEdge.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=PageInfo.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el caso del ejemplo los datos se almacenan en unas listas creadas al iniciar la aplicación y la paginación y la obtención de los datos de la página se realiza usando &lt;em&gt;streams&lt;/em&gt; y con código Java para implementar la lógica según los parámetros de la paginación en el método &lt;em&gt;findComments&lt;/em&gt;. Si los datos estuvieran almacenados en una base de datos relacional o NoSQL se usarían las facilidades de sus lenguajes u operaciones de consulta como sería generar la sentencia SQL apropiada.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=LibraryRepository.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los comentarios se obtienen usando un &lt;em&gt;data fetcher&lt;/em&gt; o &lt;em&gt;resolver&lt;/em&gt; que si existe para una determinada propiedad tiene precedencia sobre el &lt;em&gt;data fetcher&lt;/em&gt; por defecto que en Java obtiene el dato usando la convención de los &lt;em&gt;java beans&lt;/em&gt;. En este caso es el &lt;em&gt;resolver&lt;/em&gt; &lt;em&gt;BookResolver&lt;/em&gt; siendo el método &lt;em&gt;getComments&lt;/em&gt; el encargado de recuperar los datos de la propiedad &lt;em&gt;comments&lt;/em&gt; cuando se solicite en una consulta de GraphQL, recibe los datos de paginación y delega la búsqueda en el repositorio para que haga la consulta apropiada.&lt;/p&gt;

&lt;p&gt;La clase repositorio abstrae al &lt;em&gt;resolver&lt;/em&gt; de como o donde están guardados los datos, de esta forma se podría pasar de guardarlos en una base de datos &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; a una base de datos &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; sin que el &lt;em&gt;resolver&lt;/em&gt; necesite ninguna modificación, también se podría optar por guardar los libros en una base de datos relacional y los comentarios en una base de datos MongoDB. El &lt;em&gt;resolver&lt;/em&gt; se encarga de crear las instancias de objetos necesarios de los tipos &lt;em&gt;CommentsConnection&lt;/em&gt;, &lt;em&gt;CommentEdge&lt;/em&gt; y &lt;em&gt;PageInfo&lt;/em&gt; para adaptarlos a las estructuras de datos apropiadas según la especificación de Relay en el servicio de GraphQL.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=BookResolver.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez implementada la paginación en los comentarios con la siguientes consultas se obtiene un libro usando una &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/consultas-con-parametros-para-filtrar-datos-en-graphql/&#34;&gt;consulta con un filtro&lt;/a&gt; todos sus comentarios, los 3 primeros comentarios usando el parámetro &lt;em&gt;limit&lt;/em&gt; y los siguientes tres comentarios a partir del tercero usando los parámetros &lt;em&gt;limit&lt;/em&gt; y &lt;em&gt;after&lt;/em&gt;. Obteniendo como respuesta un libro con únicamente los comentarios deseados. Cada elemento en el resultado contiene los datos solicitados junto con el valor del cursor que identifica al comentario además de incluir una estructura de datos &lt;em&gt;pageInfo&lt;/em&gt; con información sobre la paginación.&lt;/p&gt;

&lt;p&gt;Con el valor del cursor indicado en &lt;em&gt;pageInfo&lt;/em&gt; en la propiedad &lt;em&gt;endCursor&lt;/em&gt; se podría obtener la siguiente página de comentarios realizando otra consulta e indicándolo en el parámetro &lt;em&gt;after&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=curl-1.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=curl-2.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/27db805fa81666ce6ca248c4e7409021.js?file=curl-3.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los cursores tiene la ventaja de que son opacos por lo que se evita que los clientes dependan de identificativos y podrían cambiarse sin que los clientes necesitasen modificaciones. Otra ventaja es que la especificación de Relay propone un marco y unas convenciones para estandarizar la paginación. Sin embargo, esta solo es una forma de hacer paginación y es perfectamente posible usar cualquier otra para adaptarla a las necesidades que haya por ejemplo añadiendo más datos a &lt;em&gt;pageInfo&lt;/em&gt; o con más u otros parámetros para realizar la consulta de paginación.&lt;/p&gt;

&lt;p&gt;Pero&amp;hellip; en este ejemplo por cada libro que se devuelve como resultado en la consulta se realiza una búsqueda de los comentarios ya que las propiedades de resultado en la consulta se recuperan una a una. Para la mayoría de propiedades esto no es problema ya que son propiedades que están en un objeto que no realizan consultas a una base de datos pero en el caso de los comentarios sí. Si se devolviesen muchos libros se realizaría una consulta para cada uno de ellos lo que no es eficiente. Si se devolviesen 500 libros y sus comentarios se realizarían 500 consultas para obtener los comentarios de cada libro, usando una base de datos relacional serían 1+500 consultas SQL por cada petición a GraphQL, 1 para obtener los libros y 500 para los comentarios. Como solución a este problema está la funcionalidad de &lt;em&gt;batching&lt;/em&gt; de GraphQL que permite obtener todos los comentarios de los libros en una única consulta, será tema para otro de los siguientes artículos de esta serie sobre GraphQL.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/consultas-con-parametros-para-filtrar-datos-en-graphql/</id>
        <title>Consultas con parámetros para filtrar datos en GraphQL</title>        
        <updated>2017-11-25T10:00:00+01:00</updated>
        <published>2017-11-25T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/consultas-con-parametros-para-filtrar-datos-en-graphql/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;No será extraño que en una API para obtener datos esté la necesidad de realizar algún tipo de filtrado para recuperar únicamente la colección de datos deseados de todos los existentes en un repositorio. A las consultas de &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; se les pueden pasar argumentos que son recibidos por los métodos que actúan como punto de entrada de las consultas. Con los argumentos es posible implementar cualquier funcionalidad que se necesite, entre ellas el filtrado. Los argumentos pueden ser datos escalares o más complejos que se definen con la palabra reservada &lt;em&gt;input&lt;/em&gt; en el esquema.&lt;/p&gt;

&lt;p&gt;Usando el mismo ejemplo que he utilizado en artículos anteriores ahora en este caso implemento la funcionalidad de poder filtrar los libros de una biblioteca utilizando una expresión regular que el título del libro debe cumplir para obtenerse como resultado. El esquema del &lt;em&gt;enpoint&lt;/em&gt; de GraphQL queda de la siguiente forma para implementar el filtrado, usando el tipo definido con &lt;em&gt;input&lt;/em&gt; es posible pasar como argumentos datos complejos o agrupaciones de datos escalares.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/58fe2f31ef8b580d1f171baf615729b5.js?file=library.graphqls&#34;&gt;&lt;/script&gt;

&lt;p&gt;La implementación del tipo &lt;em&gt;BookFilter&lt;/em&gt; en la implementación de Java de GraphQL es una &lt;em&gt;Java Bean&lt;/em&gt; con una propiedad por cada argumento y sus correspondientes métodos &lt;em&gt;set&lt;/em&gt; y &lt;em&gt;get&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/58fe2f31ef8b580d1f171baf615729b5.js?file=BookFilter.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;La clase &lt;em&gt;Query&lt;/em&gt; es el punto de entrada a las consultas raíz y posee un método con el mimo nombre que la consulta solicitada en GraphQL y que en este caso es &lt;em&gt;findBooks&lt;/em&gt; que recibe como argumento una instancia del objeto &lt;em&gt;BookFilter&lt;/em&gt; que a su vez se lo proporciona al servicio de repositorio independiente de GraphQL para que haga la búsqueda adecuada según corresponda en el sistema de persistencia empleado. En el caso que los datos se guarden en una base de datos relacional posiblemente el filtrado se realiza ejecutando una sentencia SQL. En el caso del ejemplo como los datos están en una colección de una estructura de datos Java el filtrado se realiza usando los &lt;em&gt;streams&lt;/em&gt;, expresiones regulares y código Java.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/58fe2f31ef8b580d1f171baf615729b5.js?file=Query.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/58fe2f31ef8b580d1f171baf615729b5.js?file=LibraryRepository.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Siguiendo la idea del ejemplo es posible realizar el filtrado de los datos con los argumentos que sean necesarios y la lógica adecuada según el repositorio donde estén almacenados los datos ya sea en un sistema con una base de datos relacional como &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; o NoSQL como &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;. Se podrían añadir más datos por ejemplo para filtrar por otros criterios como el número de páginas, autor o incluir otros parámetros para realizar otras funciones como especificar criterios de ordenación.&lt;/p&gt;

&lt;p&gt;Esta petición busca los libros que su título comience por las letras &lt;em&gt;O&lt;/em&gt; o &lt;em&gt;R&lt;/em&gt; obteniendo dos coincidencias como resultado. En este caso entre los datos solo se devuelve el título del libro pero perfectamente podrían haber sido cualesquiera otros de entre los que posee el tipo &lt;em&gt;Book&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/58fe2f31ef8b580d1f171baf615729b5.js?file=curl.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Pero&amp;hellip; ¿que ocurre si aún con el filtrado o en una consulta el número de coincidencias son unos cuantos miles? Seguramente sean demasiadas coincidencias para devolver en una única petición y por ello es habitual &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/paginacion-usando-cursores-en-graphql-y-java/&#34;&gt;realizar paginación en GraphQL&lt;/a&gt;. Eso será tema para otro de los siguientes artículos de esta serie sobre GraphQL.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/usar-un-resolver-para-recuperar-propiedades-en-graphql/</id>
        <title>Usar un resolver para recuperar propiedades en GraphQL</title>        
        <updated>2017-11-18T10:00:00+01:00</updated>
        <published>2017-11-18T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/usar-un-resolver-para-recuperar-propiedades-en-graphql/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Cuando en una consulta de &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; se indican las propiedades a devolver GraphQL usa para cada una de ellas lo que en la implementación de Java se llama un &lt;em&gt;resolver&lt;/em&gt; y en otras implementaciones &lt;em&gt;data fetcher&lt;/em&gt;. En la mayoría de casos las propiedades serán propiedades de un objeto y en estos casos se usará un &lt;em&gt;PropertyDataFetcher&lt;/em&gt; usando en Java la convención de los &lt;em&gt;java beans&lt;/em&gt; o la clave de un mapa. En el caso de que cierto dato no esté almacenado en el objeto sino en un repositorio externo es necesario usar un &lt;em&gt;resolver&lt;/em&gt; para devolver esa propiedad en la consulta.&lt;/p&gt;

&lt;p&gt;Por ejemplo, supongamos que en el ejemplo de la librería en el caso de los libros le añadimos un nuevo dato para el ISBN que está almacenado en un sistema externo, en otro repositorio. La nueva definición del esquema quedaría de la siguiente forma, basta con añadir la nueva propiedad al tipo &lt;em&gt;Book&lt;/em&gt; y su tipo que será &lt;em&gt;String&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/34760803d8daad87514b967a6de0cf0c.js?file=library.graphqls&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para que una consulta que recupere el ISBN funcione correctamente es necesario implementar un &lt;em&gt;resolver&lt;/em&gt; creando una clase que implemente la interfaz &lt;em&gt;GraphQLResolver&amp;lt;Book&amp;gt;&lt;/em&gt; en la que se incluya un método &lt;em&gt;get&lt;/em&gt; por cada propiedad del tipo &lt;em&gt;Book&lt;/em&gt; que esté alamcenada en otro repositorio. Estos métodos &lt;em&gt;get&lt;/em&gt; reciben como parámetro el objeto &lt;em&gt;Book&lt;/em&gt; a partir del cual como contexto es posible tener los datos del libro del que hay que recuperar el ISBN, posiblemente utilizando su identificativo. En el ejemplo simplemente se devuelve un dato aleatorio pero perfectamente en caso necesario se podría usar un repositorio que lo recupere del sistema de información que lo almacena.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/34760803d8daad87514b967a6de0cf0c.js?file=BookResolver.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/34760803d8daad87514b967a6de0cf0c.js?file=curl.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;A la hora de definir el servicio de GraphQL hay que proporcionar el &lt;em&gt;resolver&lt;/em&gt; personalizado.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/34760803d8daad87514b967a6de0cf0c.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los &lt;em&gt;resolvers&lt;/em&gt; permiten almacenar la información en dos bases de datos distintas, una podría ser almacenar una información una base de datos relacional, otra información en una base de datos NoSQL, dos bases de datos relacionales distintas o inlcuso proporcionado por una API distinta. En cualquier caso para el usuario de la API y del servicio es transparente como esté almacenada la información.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-java.readthedocs.io/en/v5/schema.html&#34;&gt;Creating a schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/DataFetchingEnvironment.java&#34;&gt;DataFetchingEnvironment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/DataFetcher.java&#34;&gt;DataFetcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/devolver-mensajes-de-error-descriptivos-en-graphql/</id>
        <title>Devolver mensajes de error descriptivos en GraphQL</title>        
        <updated>2017-11-12T11:30:00+01:00</updated>
        <published>2017-11-12T11:30:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/devolver-mensajes-de-error-descriptivos-en-graphql/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Por defecto &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; devuelve errores con mensajes descriptivos para los errores del cliente como son los errores de sintaxis en la sentencia de consulta o mutación, en el caso de que el campo solicitado no exista o no se ha indicado ninguno. En el caso de Java si se lanza una excepción en la clase repositorio que guarda los datos o en la lógica de negocio y no se captura GraphQL indicará que se ha producido un error interno en el servidor. Esto no es muy descriptivo y es mejor indicar errores más útiles para el usuario de la API como podría ser que no se tienen permisos para realizar la modificación o el error que se ha producido al validar los datos y por los que la operación no se ha completado.&lt;/p&gt;

&lt;p&gt;Los errores en GraphQL usando el lenguaje Java se gestionan implementando en una clase la interfaz &lt;a href=&#34;https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/GraphQLError.java&#34;&gt;GrapQLError&lt;/a&gt;, este podría ser en caso de una excepción que además de heredar de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Exception.html&#34;&gt;Exception&lt;/a&gt; implemente la interfaz &lt;em&gt;GraphQLError&lt;/em&gt;. Sin embargo, GraphQL cuando una clase hereda de &lt;em&gt;Exception&lt;/em&gt; lo considera un error interno del servidor y para no dar información interna del servicio a los clientes como mensaje indica únicamente &lt;em&gt;Internal Server Error(s) while executing query&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=curl-default-errors.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para que GraphQL muestre el error personalizado deseado lanzando excepciones hay que adaptar esa excepción y que implementa &lt;em&gt;GraphQLError&lt;/em&gt; con una clase que únicamente implemente la interfaz &lt;em&gt;GraphQLError&lt;/em&gt; pero no herede de &lt;em&gt;Exception&lt;/em&gt;. Esta sería una clase adaptador necesaria.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=GraphQLErrorAdapter.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para adaptar las clases excepción hay que cambiar el comportamiento de la clase &lt;em&gt;GraphQLErrorHandler&lt;/em&gt; de modo que transforme las excepciones a la clase &lt;em&gt;GraphQLError&lt;/em&gt; propia. Esta clase se indica al construir el objeto &lt;em&gt;SimpleGraphQLServlet&lt;/em&gt; y &lt;em&gt;ServletRegistrationBean&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el caso de este ejemplo solo un usuario de nombre &lt;em&gt;admin&lt;/em&gt; tiene permitido hacer modificaciones en la colección de libros guardados en la clase repositorio &lt;em&gt;LibraryRepository&lt;/em&gt;. Por otro lado, cuando se añade un libro se hace una validación de los datos comprobando que el autor del libro a añadir exista en la librería. Estos son las peticiones válidas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=curl.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Y estas las inválidas que devuelve los mensajes propios más descriptivos de los errores o validaciones realizadas en el servidor de más utilidad para un usuario del servicio.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=curl-custom-errors.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;La interfaz &lt;em&gt;GraphQLError&lt;/em&gt; posee el método &lt;em&gt;getMessage()&lt;/em&gt; para devolver la descripción del mensaje pero con el método &lt;em&gt;getExtensions()&lt;/em&gt; es posible incluir cualquier dato en forma de clave-valor que deseemos como un código de error o cualquier otra información deseada. El caso de la excepción &lt;em&gt;PermissionException&lt;/em&gt; devuelve dos datos adicionales &lt;em&gt;foo&lt;/em&gt; y &lt;em&gt;fizz&lt;/em&gt;, en un caso real se implementaría una lógica más útil para devolver estos datos adicionales posiblemente proporcionándolos en el constructor u obteniéndolos con la referencia a algún objeto.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/403fbd324011c33f4e53a0b6b4992950.js?file=PermissionException.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/ejemplo-de-graphql-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/&#34;&gt;Ejemplo de GraphQL para una interfaz de un servicio con Spring Boot y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-java.readthedocs.io/en/v5/execution.html&#34;&gt;Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/GraphQLError.java&#34;&gt;GraphQLError.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/ordenar-alfabeticamente-cadenas-con-la-clase-collator-en-java/</id>
        <title>Ordenar alfabéticamente cadenas con la clase Collator en Java</title>        
        <updated>2017-11-04T11:00:00+01:00</updated>
        <published>2017-11-04T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/ordenar-alfabeticamente-cadenas-con-la-clase-collator-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Sin usar la clase &lt;em&gt;Collator&lt;/em&gt; incluida en el JDK al ordenar alfabéticamente una lista de palabras obtendremos en algún caso un resultado que nos extrañará y seguramente no sea lo que esperamos. La clase &lt;em&gt;String&lt;/em&gt; implementa la interfaz Comprable pero esta ordenación es en base al valor del código &lt;em&gt;unicode&lt;/em&gt; sin tener en cuenta los diferentes niveles de diferencias que se pueden usar según el &lt;em&gt;Locale&lt;/em&gt; y la clase &lt;em&gt;Collator&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Quizá algunos digan que la aparentemente sencilla tarea de ordenar una lista de palabras es algo fácil de hacer con cualquier lenguaje de programación. La realidad es que puede complicarse en una buena cantidad si se ha de realizar con los caracteres del alfabeto de algunos lenguajes. La ordenación no es tan simple como realizar lo siguiente en código Java:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Sort.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Primeramente nos daremos cuenta de que la siguiente lista de nombres de provincias las ordena de una forma que quizá no es la que esperamos. En algunas páginas web se puede observar este error en algunos elementos de selección de opciones de nombres de paises, ciudades, provincias u otro conjunto de elementos que suelen estar ordenados alfabéticamente para facilitar el encontrar el elemento a seleccionar pero que si se da el caso de que hay variación de palabras con tildes y sin ellas y minúsculas y mayúsculas se presenta la ordenación incorrecta.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Sort.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como se observa las palabras con letras mayúsculas se ordenan antes que las palabras con letras en minúscula independientemente de la letra del alfabeto, seguramente esta no es la ordenación deseada. En algunos lenguajes como el español algo similar ocurre con las palabras que llevan tilde en alguna letra. Convertir las palabras a mayúsculas o minúsculas o eliminar las tildes por los mismos sin tilde previamente a hacer la ordenación además de no ser una buena solución no sirve para otros lenguajes con diferentes formas de tilde y marcas en las letras.&lt;/p&gt;

&lt;p&gt;En Java la solución es utilizar la clase &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/java/text/Collator.html&#34;&gt;Collator&lt;/a&gt;, esta clase establece varios niveles en las que las letras se consideran diferentes. Por ejemplo, en español las letras &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;f&lt;/em&gt; se consideran diferencias primarias (diferentes letras), &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;é&lt;/em&gt; son diferencias secundarias (diferentes tildes) y &lt;em&gt;e&lt;/em&gt; y &lt;em&gt;E&lt;/em&gt; son diferencias terciarias (diferencias entre mayúsculas y minúsculas). Las diferencias entre caracteres dependen del &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Locale.html&#34;&gt;Locale&lt;/a&gt; y un &lt;em&gt;Collator&lt;/em&gt; se obtiene en base a él con el método estático &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/text/Collator.html#getInstance-java.util.Locale-&#34;&gt;getInstance​(Locale)&lt;/a&gt;. Con el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/text/Collator.html#setStrength-int-&#34;&gt;setStrength(int)&lt;/a&gt; se establece el nivel de diferencias deseadas.&lt;/p&gt;

&lt;p&gt;Usando la clase &lt;em&gt;Collator&lt;/em&gt; y realizando la ordenación de la misma lista anterior el resultado es diferente y seguramente más apropiado. Como la clase &lt;em&gt;Collator&lt;/em&gt; implementa la interfaz &lt;em&gt;Comparable&lt;/em&gt; podemos usarla como el comparador aplicar en el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#sort-T:A-java.util.Comparator-&#34;&gt;Arrays.sort(T[], Comparator&amp;lt;? super T&amp;gt;)&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/List.html#sort-java.util.Comparator-&#34;&gt;List.sort(Comparator&amp;lt;? super E&amp;gt;)&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/8869db9cbeebe22feb98d1bdab87d386.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Utilizando el &lt;em&gt;Collator&lt;/em&gt; con solo diferencias primarias &lt;em&gt;Cantabria&lt;/em&gt; se ordena al final de la lista por tener las letras &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;Á&lt;/em&gt; una diferencia primaria con &lt;em&gt;C&lt;/em&gt;. Con diferencias secundarias las letras &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;a&lt;/em&gt; se ordenan antes que &lt;em&gt;Á&lt;/em&gt; por tener diferencias secundarias. Finalmente, con diferencias terciarias &lt;em&gt;a&lt;/em&gt; se ordena antes que &lt;em&gt;A&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaCollator&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/11/ejemplo-de-graphql-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/</id>
        <title>Ejemplo de GraphQL para una interfaz de un servicio con Spring Boot y Java</title>        
        <updated>2017-11-07T19:00:00+01:00</updated>
        <published>2017-11-01T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/11/ejemplo-de-graphql-para-una-interfaz-de-un-servicio-con-spring-boot-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;GraphQL es una alternativa a una interfaz REST con las ventajas de poder realizar varias consultas en una misma petición y devolviendo únicamente los datos que requiera el cliente. Es una especificación y hay una implementación para los lenguajes de programación más populares entre ellos Java. Este artículo es una introducción con un ejemplo completo que muestra cómo se hacen consultas y modificaciones en los datos.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Con anterioridad las aplicaciones que lo necesitaban ofrecían una interfaz como un servicio mediante &lt;em&gt;web services&lt;/em&gt;, sin embargo, esta tecnología era complicada por usar XML y no de fácil utilización en clientes JavaScript. La evolución que a día de hoy sigue siendo mayoritaria son las interfaces &lt;a href=&#34;https://es.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;REST&lt;/a&gt; que emplean la semántica de los verbos del protocolo HTTP para realizar operaciones de búsqueda, creación, modificación y eliminación y normalmente empleando JSON como formato para intercambiar los datos. Sin embargo, REST no está exento de algunos problemas como la necesidad de realizar varias peticiones a cada uno de los recursos que ofrece si se necesitan datos de varios de ellos, otro es que los datos ofrecidos por los servicios REST está prefijados en tiempo de desarrollo no adaptándose a lo que necesita el cliente. En cierta medida estas dos cosas se pueden implementar en la interfaz REST con algunos parámetros pero requiere codificarlo explícitamente.&lt;/p&gt;

&lt;p&gt;Más recientemente ha aparecido otra forma de implementar una interfaz de un servicio con &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; considerándose una &lt;a href=&#34;https://www.howtographql.com/basics/1-graphql-is-the-better-rest/&#34;&gt;alternativa mejor a REST&lt;/a&gt; que solventa los dos problemas de las interfaces REST anteriores. REST ofrece en varios &lt;em&gt;endpoints&lt;/em&gt; los recursos que pueden ser accedidos mediante los verbos HTTP (&lt;em&gt;GET&lt;/em&gt;, &lt;em&gt;PUT&lt;/em&gt;, &lt;em&gt;POST&lt;/em&gt;, &lt;em&gt;DELETE&lt;/em&gt;), en GraphQL por el contrario hay un único &lt;em&gt;endpoint&lt;/em&gt;, los puntos de entrada al grafo y los tipos que se relacionan entre si que son consultados para obtener los datos con el lenguaje de consulta que ofrece GraphQL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/0-introduction/&#34;&gt;Basics Tutorial - Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/1-graphql-is-the-better-rest/&#34;&gt;GraphQL is the better REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/2-core-concepts/&#34;&gt;Core Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/basics/3-big-picture/&#34;&gt;Big Picture (Architecture)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En GraphQL se define un &lt;a href=&#34;http://graphql.org/learn/schema/&#34;&gt;esquema&lt;/a&gt; con la definición de los tipos en la API, se diferencia la obtención de los datos que es realizada por las &lt;a href=&#34;http://graphql.org/learn/queries/&#34;&gt;&lt;em&gt;queries&lt;/em&gt;&lt;/a&gt; y de las modificaciones que es realizada por los &lt;a href=&#34;http://graphql.org/learn/queries/#mutations&#34;&gt;&lt;em&gt;mutators&lt;/em&gt;&lt;/a&gt;, el esquema se puede definir en un archivo de texto como en este ejemplo o de forma programática con código que es necesario para algunas personalizaciones. Otras tareas que pueden ser necesarias en una API son &lt;a href=&#34;https://www.howtographql.com/graphql-java/5-authentication/&#34;&gt;autenticación&lt;/a&gt; que es posible capturando los datos del contexto provenientes en los datos o como cabeceras de la petición posiblemente en forma de &lt;em&gt;token&lt;/em&gt; de &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; y la autorización en la lógica del servicio en base al sujeto autenticado. Se puede &lt;a href=&#34;http://graphql.org/learn/schema/#scalar-types&#34;&gt;usar datos propios con &lt;em&gt;scalar&lt;/em&gt;&lt;/a&gt; para los cuales se ha de proporcionar una clase que realice la transformación implementando una clase GraphQLScalarType. Posee &lt;a href=&#34;http://graphql.org/learn/introspection/&#34;&gt;funcionalidades de introspección&lt;/a&gt; y también &lt;a href=&#34;https://www.howtographql.com/graphql-java/9-filtering/&#34;&gt;filtrado&lt;/a&gt;, &lt;a href=&#34;https://www.howtographql.com/graphql-java/10-pagination/&#34;&gt;paginación&lt;/a&gt;, &lt;a href=&#34;https://www.howtographql.com/graphql-java/7-error-handling/&#34;&gt;gestión de errores&lt;/a&gt; y &lt;a href=&#34;http://graphql.org/learn/caching/&#34;&gt;cacheo&lt;/a&gt; aunque esto último es menos efectivo en GraphQL al depender de los datos a devolver que solicite el cliente.&lt;/p&gt;

&lt;p&gt;Para usar GraphQL hay que definir un &lt;em&gt;schema&lt;/em&gt; que incluye los tipos, sus propiedades y tipos. También se pueden usar &lt;a href=&#34;http://graphql.org/learn/caching/&#34;&gt;fragmentos&lt;/a&gt; para reutilizar partes de la definición de los tipos. Cada &lt;em&gt;type&lt;/em&gt; representa una entidad que definen las propiedades que posee ya sean datos escalares o referencias a otras entidades formando de esta manera grafos de objetos, los tipos de las variables que poseen una exclamación al final quiere decir que son opcionales, por defecto todos los datos son distinto de nulo. Las listas se definen con corchetes y el tipo entre ellos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=library.graphqls&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una definido el esquema hay que desarrollar los &lt;em&gt;resolvers&lt;/em&gt; que son encargados de obtener los datos seguramente de una base de datos externa ya sea una base de datos SQL o NoSQL en este caso utilizando una clase que implementa el patrón repositorio y que abstrae del sistema de persistencia donde se almacenan los datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Query.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=LibraryRepository.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Book.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Author.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los &lt;em&gt;mutators&lt;/em&gt; son los encargados de procesar las peticiones de modificación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Mutation.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando una aplicación de &lt;a href=&#34;https://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; para ofrecer el servicio hay que realizar la contribución adecuada al contenedor de dependencias, en Java GraphQL se define como un &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html&#34;&gt;&lt;em&gt;servlet&lt;/em&gt;&lt;/a&gt; al cual hay que proporcionarle la configuración de los &lt;em&gt;resolvers&lt;/em&gt;, &lt;em&gt;mutators&lt;/em&gt;, procesador de contexto que en este caso se utiliza para la autenticación y definición del esquema entre otras posibles cosas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=AuthContext.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El lenguaje de consulta GraphQL permite consultar el grafo de objetos y recuperar los datos deseados. En el siguiente ejemplo se obtienen los libros, los autores y los libros con los datos de sus autores de una clase que implementa el patrón &lt;em&gt;repository&lt;/em&gt;. En el ejemplo los datos del repositorio están definidos en la propia clase de forma estática pero como su función es abstraer de donde se obtienen los datos el cambio sería sencillo para que los obtuviese de una base de datos SQL o NoSQL ya que los cambios estarían encapsulados principalmente en esa clase. Los datos son devueltos en formato JSON.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-1.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una de las ventajas de GraphQL sobre REST es que es posible realizar una única petición lo que en REST podrían ser varias. Por ejemplo, la siguiente consulta obtiene en una única consulta todos los libros, todos los autores y el autor con identificativo 1 de la biblioteca, esto mejora el rendimiento ya que en REST se hubiesen requerido varias peticiones una para obtener libros, otra para los autores y otra para el autor 1. La otra ventaja sobre REST es que se devuelven únicamente los datos que el cliente solicita y no una lista prefijada por el desarrollador de la interfaz.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-2.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las consultas puede hacerse mediante una petición &lt;em&gt;GET&lt;/em&gt; o &lt;em&gt;POST&lt;/em&gt; de HTTP.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-3.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las peticiones de modificación se envían mediante &lt;em&gt;POST&lt;/em&gt;. Este es el caso para añadir un libro a la biblioteca y los casos de que el autor del libro no sea válido o que el usuario que añade el libro no tenga permisos. En el ejemplo los errores no son descriptivos de lo que realmente ha sucedido, habría que hacer el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/11/devolver-mensajes-de-error-descriptivos-en-graphql/&#34;&gt;tratamiento de errores adecuado para que los mensajes fuesen más descriptivos&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=curl-4.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=PermissionException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=ValidationException.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;La forma explicada en las guías de GraphQL para Java es que el &lt;em&gt;mutator&lt;/em&gt; reciba los datos y este delegue la funcionalidad en una clase que implemente el patrón &lt;em&gt;repository&lt;/em&gt; que abstrae del sistema de almacenamiento (base de datos SQL, NoSQL o cualquier otro), además, este patrón &lt;em&gt;repository&lt;/em&gt; o clase de lógica de negocio se recomienda que implemente la funcionalidad necesaria para aplicar la autorización. En el ejemplo aunque de forma sencilla solo en usuario &lt;em&gt;admin&lt;/em&gt; tiene permitido añadir libros, en un proyecto es posible realizar la autenticación usando &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; como sistema de OAuth, usar el &lt;em&gt;token&lt;/em&gt; de OAuth para implementar la autorización y un &lt;em&gt;framework&lt;/em&gt; de seguridad como &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt; para aplicar los permisos a las funcionalidades.&lt;/p&gt;

&lt;p&gt;Los artículos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&lt;/a&gt; pueden servir como base para añadir autenticación OAuth a un servicio GraphQL con Keycloak.&lt;/p&gt;

&lt;p&gt;Finalmente, el archivo de construcción de &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; del ejemplo con las dependencias necesarias.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/4276fa433729ff8187219939d3218a00.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-java.readthedocs.io/en/v5/&#34;&gt;Welcome to graphql-java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java&#34;&gt;GraphQL Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/graphql-java/2-queries/&#34;&gt;Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-java/graphql-java-tools&#34;&gt;A schema-first tool for graphql-java inspired by graphql-tools for JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graph.cool&#34;&gt;GraphQL Backend Development Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genbetadev.com/desarrollo-aplicaciones-moviles/por-que-deberiamos-abandonar-rest-y-empezar-a-usar-graphql-en-nuestras-apis&#34;&gt;¿Por qué deberíamos abandonar REST y empezar a usar GraphQL en nuestras APIs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paradigmadigital.com/dev/graphql-todos-uno-uno-todos/&#34;&gt;GraphQL: ¡todos para uno y uno para todos!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.adictosaltrabajo.com/tutoriales/introduccion-a-graphql/&#34;&gt;Introducción a GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/</id>
        <title>Visualizar datos y generar gráficas en Java con JFreeChart</title>        
        <updated>2017-10-22T12:00:00+02:00</updated>
        <published>2017-10-22T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Visualizar datos de forma gŕafica ayuda a comprender un conjunto de datos grande mucho mejor que leyendo los valores en una tabla con varias columnas. En Java con la librería JFreeChart podemos generar gráficas de diferentes tipos que podremos incluir en los archivos &lt;em&gt;pdf&lt;/em&gt; que generemos en un aplicación o podremos mostrar en forma de imagen en el navegador si se trata de una aplicación web.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las principales tareas de las aplicaciones informáticas es manejar información, almacenar y recuperar datos de diversos tipos según sea el ámbito de la información tratada. Ejemplos podrían ser datos meteorológicos como temperatura, presión, velocidad y dirección del viento o datos poblacionales como número de personas, hombres y mujeres, nativos y extranjeros, &amp;hellip; todos estos datos se pueden recoger a lo largo del tiempo. Al recuperar los datos y presentarlos los datos se pueden presentar de forma tabular con las cifras tal y como están guardadas, sin embargo, esta forma hace difícil comprender los datos ¿si queremos ver como han evolucionado los datos meteorológicos durante un periodo de tiempo? ¿si queremos ver el porcentaje de población que le corresponde a cada comunidad autónoma respecto al total o como ha variado en varios años? Visualizar la información de forma gráfica nos ayuda a visualizar y comprender mejor un gran volumen de datos en mucho menos tiempo. Una vez comprendida la información se extraen tendencias de algunos datos e información útil que ayuden a tomar decisiones.&lt;/p&gt;

&lt;p&gt;Estos son los datos de la evolución de cuota de uso entre los usuarios de tres de los principales navegadores desde el 2007 hasta el 2017. Viendo la tabla es más difícil observar la tendencia de cada uno de ellos y como se relacionan los datos con el resto navegadores. En una gráfica se observaría que Internet Explorer tiene una tendencia descendente, Firefox ascendente hasta el nacimiento de Chrome y este continuamente ascendente mientras las otras opciones pierden usuarios&lt;/p&gt;

&lt;table cellpadding=&#34;3&#34; cellspacing=&#34;3&#34;&gt;
    &lt;tr&gt;
        &lt;th&gt;Browser&lt;/th&gt;
        &lt;th&gt;2007&lt;/th&gt;
        &lt;th&gt;2008&lt;/th&gt;
        &lt;th&gt;2009&lt;/th&gt;
        &lt;th&gt;2010&lt;/th&gt;
        &lt;th&gt;2011&lt;/th&gt;
        &lt;th&gt;2012&lt;/th&gt;
        &lt;th&gt;2013&lt;/th&gt;
        &lt;th&gt;2014&lt;/th&gt;
        &lt;th&gt;2015&lt;/th&gt;
        &lt;th&gt;2016&lt;/th&gt;
        &lt;th&gt;2017&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Internet Explorer&lt;/td&gt;
        &lt;td&gt;67.7&lt;/td&gt;
        &lt;td&gt;63.1&lt;/td&gt;
        &lt;td&gt;60.2&lt;/td&gt;
        &lt;td&gt;50.6&lt;/td&gt;
        &lt;td&gt;41.1&lt;/td&gt;
        &lt;td&gt;31.8&lt;/td&gt;
        &lt;td&gt;27.6&lt;/td&gt;
        &lt;td&gt;20.4&lt;/td&gt;
        &lt;td&gt;17.3&lt;/td&gt;
        &lt;td&gt;12.3&lt;/td&gt;
        &lt;td&gt;8.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Firefox&lt;/td&gt;
        &lt;td&gt;25&lt;/td&gt;
        &lt;td&gt;29.1&lt;/td&gt;
        &lt;td&gt;32.1&lt;/td&gt;
        &lt;td&gt;32.9&lt;/td&gt;
        &lt;td&gt;31.9&lt;/td&gt;
        &lt;td&gt;25.5&lt;/td&gt;
        &lt;td&gt;20.1&lt;/td&gt;
        &lt;td&gt;18.4&lt;/td&gt;
        &lt;td&gt;15.3&lt;/td&gt;
        &lt;td&gt;11.4&lt;/td&gt;
        &lt;td&gt;9.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Chrome&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;0.2&lt;/td&gt;
        &lt;td&gt;6.4&lt;/td&gt;
        &lt;td&gt;14.6&lt;/td&gt;
        &lt;td&gt;25.3&lt;/td&gt;
        &lt;td&gt;30.1&lt;/td&gt;
        &lt;td&gt;34.3&lt;/td&gt;
        &lt;td&gt;43.2&lt;/td&gt;
        &lt;td&gt;47.3&lt;/td&gt;
        &lt;td&gt;58.4&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;En Java, existe una librería que permite generar gráficas de diferentes tipos con la que visualizar datos, &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;. Con esta librería de software libre que tiene una &lt;a href=&#34;http://www.gnu.org/licenses/lgpl.html&#34;&gt;licencia LGPL&lt;/a&gt; es posible generar gráficas de área, de barras, de barras apiladas, con ejes combinados, financieras, de Gantt, de líneas, diales, con múltiples ejes, sobrepuestas, tartas, estadísticas, de series temporales, xy y otros tipos, a algunas es posible darles un aspecto en tres dimensiones. Las gráficas las podemos exportar a archivos de imagen &lt;em&gt;png&lt;/em&gt;, &lt;em&gt;jpg&lt;/em&gt; o formatos escalares como &lt;em&gt;svg&lt;/em&gt; con lo que serán utilizables de múltiples formas, por ejemplo, incluyendo las gráficas en archivos PDF o si la aplicación es una aplicación web devolver las imágenes al navegador para que las visualice, usando &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; para generar informes es posible incluir las imágenes generadas por JFreeChart.&lt;/p&gt;

&lt;p&gt;Desde la propia página web de JFreeChart es posible ejecutar una &lt;a href=&#34;http://www.jfree.org/jfreechart/jfreechart-1.0.16-demo.jnlp&#34;&gt;aplicación Java Web Start de demostración&lt;/a&gt; que contiene múltiples ejemplos con datos para ver como son los diferentes tipos de gráficas, en la librería hay un archivo &lt;em&gt;jar&lt;/em&gt; con la misma aplicación de demostración junto con el código fuente de algunos ejemplos. En el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/overview-summary.html&#34;&gt;Javadoc&lt;/a&gt; está la documentación con la API ofrecida por la librería. El autor de la librería ofrece una &lt;a href=&#34;http://object-refinery.com/jfreechart/guide.html&#34;&gt;guía en formato PDF y el código fuente de los ejemplos&lt;/a&gt; pero estos son de pago. La última versión tiene unos años pero es compatible con Java 1.6.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=demo.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart.png&#34; title=&#34;Gráfica de tarta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart.png&#34; title=&#34;Gráfica de coordenadas polares&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar.png&#34; title=&#34;Gráfica de barras apiladas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Ejemplos de gráficas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Este sería el código fuente de un ejemplo sencillo para una gráfica varias series datos. En el ejemplo primeramente se crear el conjunto de datos, el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/Dataset.html&#34;&gt;Dataset&lt;/a&gt; de la gráfica, se establecen algunos estilos de visualización con &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.html&#34;&gt;XYLineAndShapeRenderer&lt;/a&gt;, con la clase factoría &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/ChartFactory.html&#34;&gt;ChartFactory&lt;/a&gt; se obtiene la gráfica proporcionándole los datos y finalmente generan un archivo en formato &lt;em&gt;png&lt;/em&gt; en un archivo, también se podría generar en un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/OutputStream.html&#34;&gt;OutputStream&lt;/a&gt; si fuese el caso de una aplicación web que quisiera enviar la imagen al navegador del cliente o también para incluir la imagen en un archivo PDF.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Gráfica de series&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En JavaScript también hay librerías para generar gráficas pero para casos complejos y con muchos datos probablemente sea mejor idea generar las gráficas en el lado del servidor que enviar todos los datos que necesite la gráfica al cliente. En GNU/Linux disponemos del programa &lt;a href=&#34;http://gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt; usable desde la línea de comandos y por tanto desde cualquier lenguaje que tenga la capacidad de ejecutar comandos del sistema, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/&#34;&gt;ejecutar un comando del sistema con Java&lt;/a&gt; de gnuplot para que nos generase la gráfica. Hay varias posibilidades para visualizar de forma gráfica la información.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JFreeChart&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javascan.com/chapter/jfreechart&#34;&gt;JFreeChart Program Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/jfreechart/index.htm&#34;&gt;JFreeChart Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/</id>
        <title>Implementar funcionalidades comunes en Java con la librería Lombok</title>        
        <updated>2017-10-21T11:00:00+02:00</updated>
        <published>2017-10-21T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java es un lenguaje verboso además requerir realizar las definiciones de forma explícita y con poco azúcar sintáctico (o como diría algún otro, poco veneno para ratas), esto hace que el número de líneas de código necesarias sea mayor que en otros lenguajes. Que Java sea verboso, explícito y con poco azúcar sintáctico no es necesariamente un inconveniente ya que la mayor parte del tiempo los programadores la dedicamos a leer código ya escrito sin embargo a mayor número de líneas mayor tiempo se requiere en mantenerlas. Un ejemplo claro está en los &lt;em&gt;beans&lt;/em&gt; con múltiples propiedades donde por cada propiedad es necesario definir un método &lt;em&gt;get&lt;/em&gt; y un método &lt;em&gt;set&lt;/em&gt; además &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/&#34;&gt;implementar de forma correcta los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;&lt;/a&gt;, el método &lt;em&gt;toString&lt;/em&gt;, utilizar el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/&#34;&gt;patrón builder&lt;/a&gt;, múltiples constructores con combinaciones de propiedades o comprobaciones para valores no nulos en parámetros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; es una pequeña librería Java que hace posible eliminar todo ese código repetitivo necesario en cada &lt;em&gt;bean&lt;/em&gt; o clase Java utilizando varias anotaciones. Usarla no requiere ninguna complicación basta añadirla a la lista de dependencias de compilación y las anotaciones serán procesadas. Los IDEs serán conscientes de los métodos implementados por las anotaciones instalando un complemento.&lt;/p&gt;

&lt;p&gt;Las anotaciones proporcionadas por Lombok son las siguientes, en la documentación se explica detalladamente que hace cada una de ellas y un ejemplo de código bastante ilustrativo comparando el código usando las anotaciones y el código Java equivalente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34;&gt;@Getter/@Setter&lt;/a&gt;: proporciona una implementación de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/ToString&#34;&gt;@ToString&lt;/a&gt;: proporciona una implementación del método &lt;em&gt;toString&lt;/em&gt; generando una cadena con información de las propiedades.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/EqualsAndHashCode&#34;&gt;@EqualsAndHashCode&lt;/a&gt;: proporciona una implementación correcta de los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/constructor&#34;&gt;@NoArgsConstructor, @RequiredArgsConstructor y @AllArgsConstructor&lt;/a&gt;: implementan varios métodos de constructores.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/NonNull&#34;&gt;@NonNull&lt;/a&gt;: valida que un argumento no es nulo lanzando una excepción &lt;em&gt;NullPointerException&lt;/em&gt; o &lt;em&gt;IllegalArgumentException&lt;/em&gt; en caso de que lo sea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Data&#34;&gt;@Data&lt;/a&gt;: es una combinación de varias anotaciones, &lt;em&gt;@ToString&lt;/em&gt;, &lt;em&gt;@EqualsAndHashCode&lt;/em&gt;, &lt;em&gt;@Getter&lt;/em&gt; en todos las propiedades y &lt;em&gt;@Setter&lt;/em&gt; en todas las propiedades no finales y &lt;em&gt;@RequiredArgsConstructor&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Value&#34;&gt;@Value&lt;/a&gt;: hace una clase inmutable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Builder&#34;&gt;@Builder&lt;/a&gt;: una API para la creación de objetos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Cleanup&#34;&gt;@Cleanup&lt;/a&gt;: facilita la gestión de recursos de forma automática.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/SneakyThrows&#34;&gt;@SneakyThrows&lt;/a&gt;: posibilita lanzar excepciones sin declararlas en los métodos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Synchronized&#34;&gt;@Synchronized&lt;/a&gt;: otra forma de implementar la sincronización&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterLazy&#34;&gt;@Getter(lazy=true)&lt;/a&gt;: calcula el valor de una propiedad la primera vez que se llama y la cachea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/log&#34;&gt;@Log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando algunas de estas anotaciones en una clase Java y su uso en un programa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Car.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; hay que añadir en el archivo de construcción del proyecto &lt;em&gt;build.gradle&lt;/em&gt; la dependencia en el ámbito de &lt;em&gt;compileOnly&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando un IDE, su complemento para Lombok y añadida la dependencia los métodos que implementa Lombok con las anotaciones son visualizados con el asistente de código.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij.png&#34; title=&#34;Soporte de Lombok en IntelliJ&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok.png&#34; title=&#34;Ejecución del ejemplo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Soporte de Lombok en IntelliJ y ejecución del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Las anotaciones de Lombok permiten escribir menos código repetitivo en &lt;em&gt;beans&lt;/em&gt; o objetos de transferencia de datos o DTO pero conviene conocer lo que hacen esas anotaciones. Una de las características por las que algunas personas usan otros lenguajes más recientes como &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; es que en estos requieren menos líneas código para hacer lo mismo que en Java como el caso de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt; de las propiedades que en Groovy se proporcionan de forma implícita y en Java de forma explícita, con Lombok en Java estos métodos también se pueden proporcionar con anotaciones sin tener que codificarlos.&lt;/p&gt;

&lt;p&gt;En el momento de escribir este artículo Lombok no es compatible con Java 9 aunque ya se está trabajando en su soporte y en algún momento lo será.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Lombok&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/</id>
        <title>Obtener información de la pila de las excepciones</title>        
        <updated>2017-10-15T12:15:00+02:00</updated>
        <published>2017-10-15T12:15:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo incorporado en algunos lenguajes como Java para el manejo de errores y condiciones de error. En la implementación de las excepciones en los lenguajes hay diferencias, por ejemplo, en Java hay &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;excepciones checked y uncheked&lt;/a&gt; y en lenguajes como &lt;a href=&#34;http://www.microsoft.com/net&#34;&gt;C#&lt;/a&gt; o &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; todas las excepciones son consideradas &lt;em&gt;unchecked&lt;/em&gt;. En cualquier caso son una mejor forma de forzar a gestionar las condiciones de error que se producen que el comprobar no obligatoriamente el valor de retorno de una función, incluso JavaScript incorpora excepciones.&lt;/p&gt;

&lt;p&gt;Las palabras reservadas en Java para el manejo de excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt; , &lt;em&gt;finally&lt;/em&gt;, &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt;. El manejo de algunas excepciones consiste en emitir su pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt; en la terminal o en el sistema de &lt;em&gt;logging&lt;/em&gt;. El &lt;em&gt;stacktrace&lt;/em&gt; contiene un mensaje de error, los métodos de la pila de llamadas del &lt;em&gt;thread&lt;/em&gt; que la causó junto con el número de la línea. Además, las excepciones puede tener asociada una excepción causa por ejemplo un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/sql/SQLException.html&#34;&gt;SQLException&lt;/a&gt; puede ser causado por un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/IOException.html&#34;&gt;IOException&lt;/a&gt; por fallo de comunicación con el servidor de base de datos.&lt;/p&gt;

&lt;p&gt;Todas las excepciones en Java heredan de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; y entre los métodos que tiene esta clase está &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#getStackTrace--&#34;&gt;getStackTrace()&lt;/a&gt; que devuelve un &lt;em&gt;array&lt;/em&gt; de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackTraceElement.html&#34;&gt;StackTraceElement&lt;/a&gt; ordenado del último método llamado al primero. Con los métodos de la clase &lt;em&gt;StackTraceElement&lt;/em&gt; obtenemos el nombre de la clase, el archivo, el nombre del método y la linea de código de esa llamada.&lt;/p&gt;

&lt;p&gt;Con esta información podemos imprimir en la terminal un informe de excepción diferente del que genera el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--&#34;&gt;printStackTrace()&lt;/a&gt;. En el ejemplo limitando el informe de la pila de llamadas a los tres últimos métodos del &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=Throwable.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si en una aplicación manejamos varios hilos con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getAllStackTraces--&#34;&gt;Thread.getAllStackTraces()&lt;/a&gt; obtenemos las pilas de llamadas de todos los hilos y con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getStackTrace--&#34;&gt;Thread.getStackTrace()&lt;/a&gt; el del hilo en concreto que con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#currentThread--&#34;&gt;Thread.currentThread()&lt;/a&gt; sería el actual. Con el &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;StackTraceElement&lt;/em&gt; obtenidos de los hilos podemos obtener un informe personalizado y la situación de cada uno, el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#dumpStack--&#34;&gt;dumpStack()&lt;/a&gt; genera el &lt;em&gt;stacktrace&lt;/em&gt; en la salida de error.&lt;/p&gt;

&lt;p&gt;Entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;las novedades de Java 9&lt;/a&gt; está la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; para procesar los elementos de la pila del &lt;em&gt;thread&lt;/em&gt; actual usando &lt;em&gt;streams&lt;/em&gt; y funciones &lt;em&gt;lambda&lt;/em&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/</id>
        <title>Las excepciones del lenguaje Java</title>        
        <updated>2017-10-15T11:30:00+02:00</updated>
        <published>2017-10-15T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo para capturar y producir condiciones de error en un programa. Es una alternativa al retorno de valores especiales que indique errores y que en estos no son obligatorios su correcta comprobación.&lt;/p&gt;

&lt;p&gt;En Java las excepciones están incorporadas en el lenguaje desde la primera versión y que en posteriores se han mejorado. Las palabras reservadas del lenguaje para las excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt;, &lt;em&gt;finally&lt;/em&gt; para la captura y &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt; para lanzar excepciones en los métodos.&lt;/p&gt;

&lt;p&gt;Las excepciones son objetos que extienden la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; de la que en el JDK es extendida por la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Error.html&#34;&gt;Error&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Exception.html&#34;&gt;Exception&lt;/a&gt; de la que de esta última a su vez hereda &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/RuntimeException.html&#34;&gt;RuntimeException&lt;/a&gt;. Entre las comprobaciones que realiza el compilador está que las excepciones &lt;em&gt;checked&lt;/em&gt; lanzadas por un método son capturadas por el código que lo llama.&lt;/p&gt;

&lt;p&gt;Solo los objetos que hereden de &lt;em&gt;Throwable&lt;/em&gt; pueden ser lanzados y capturados en los bloques &lt;em&gt;try-catch&lt;/em&gt;. Las excepciones que heredan de &lt;em&gt;Error&lt;/em&gt; son empleadas para casos en los que se han agotado recursos del sistema como la memoria o condiciones de error en el sistema que generalmente impiden el correcto funcionamiento del programa y de difícil tratamiento salvo terminar la ejecución. Las excepciones que heredan de &lt;em&gt;RuntimeExcepcion&lt;/em&gt; también se les conoce como &lt;em&gt;uncheked exception&lt;/em&gt; y no necesitan declararse en los métodos para ser lanzadas, son empleadas para advertir de errores de programación como dividir por cero produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArithmeticException.html&#34;&gt;ArithmeticException&lt;/a&gt;, desreferenciar un puntero nulo produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerException&lt;/a&gt; o acceder a una posición inválida de una array produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&#34;&gt;ArrayIndexOutOfBoundsException&lt;/a&gt;. Las excepciones que heredan de &lt;em&gt;Exception&lt;/em&gt; pero no de &lt;em&gt;RuntimeException&lt;/em&gt; se denominan &lt;em&gt;cheked exceptions&lt;/em&gt; y han declararse en los métodos siendo de obligada captura o relanzado para su tratamiento en el método anterior en la pila de llamadas.&lt;/p&gt;

&lt;p&gt;Este sería un ejemplo de código que hace uso de una excepción propia para detectar una condición de error mostrando una excepción &lt;em&gt;checked&lt;/em&gt; y &lt;em&gt;unchecked&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=Account.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidAmountException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidOperationException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Aunque las excepciones son un buen mecanismo para el tratamiento de errores se les critica que rompen el flujo de ejecución de un programa y tienen un coste en rendimiento, aunque esta penalización de rendimiento en la mayoría de programas es irrelevante. Algunas recomendaciones que se hace para usar de forma efectiva las excepciones son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Las excepciones no deben reemplazar comprobaciones simples con sentencias &lt;em&gt;if&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben microgestionar las excepciones. Los bloques &lt;em&gt;try-catch&lt;/em&gt; deben contener bloques de código de varias líneas de código en vez una única sentencia por cada bloque &lt;em&gt;try-catch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Se debe hacer un buen uso de la jerarquía de excepciones y capturar la excepción que se vaya a tratar en el bloque &lt;em&gt;catch&lt;/em&gt;. Una excepción se puede convertir en otra por ejemplo convertir un &lt;em&gt;NumberFormatException&lt;/em&gt; a &lt;em&gt;IOException&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben capturar excepciones para no hacer nada con ellas, esto es no debe haber bloques &lt;em&gt;catch&lt;/em&gt; vacíos.&lt;/li&gt;
&lt;li&gt;En algunos casos es mejor lanzar una excepción que un valor &lt;em&gt;null&lt;/em&gt; que posiblemente produzca un &lt;em&gt;NullPointerException&lt;/em&gt; en otra parte distante del código de dónde se devolvió el valor &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Propagar excepciones no es un signo de poca sabiduría, puede haber motivos para ello sobre todo si no se le puede dar un tratamiento adecuado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando se produce una excepción la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; posee métodos para emitir en la salida un informe de la pila de llamadas, también se puede personalizar la salida. Esta información es esencial y muy útil para conocer la causa de un error ya que indica entre otras cosas cada uno de los métodos, línea en el código fuente y clases donde se ha producido la excepción.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/</id>
        <title>Obtener el mínimo o máximo de dos, una lista o stream de valores en Java</title>        
        <updated>2017-10-12T11:00:00+02:00</updated>
        <published>2017-10-12T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Si tenemos dos valores y queremos obtener el menor con una línea de código, podemos obtenerlo con un a sentencia &lt;em&gt;if&lt;/em&gt; o con el operador condicional &lt;em&gt;? :&lt;/em&gt;. Si queremos obtener el menor de tres valores con sentencias &lt;em&gt;if&lt;/em&gt; o el operador &lt;em&gt;? :&lt;/em&gt;  el problema aparentemente sencillo se complica y si optamos por usar una lista de valores tratándola como si el tamaño fuese desconocido quizá usemos un bucle &lt;em&gt;for&lt;/em&gt; junto con una variable que mantenga el menor valor encontrado hasta el momento usando un &lt;em&gt;if&lt;/em&gt; que compare el valor menor encontrado con el valor actual de la lista.&lt;/p&gt;

&lt;p&gt;Sin embargo, en la API de Java hay dos métodos que permiten simplificar esta tarea, para dos valores podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#min-int-int-&#34;&gt;Math.min()&lt;/a&gt; y para una lista de valores de tamaño desconocido podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#min-java.util.Collection-&#34;&gt;Collections.min()&lt;/a&gt;. Usando un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; aún es más sencillo ya que estos poseen un método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-&#34;&gt;Stream.min()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt; que devuelven el valor mínimo y máximo.&lt;/p&gt;

&lt;p&gt;Este sería el código para los casos de comparar dos elementos, una lista y un stream de valores. Se que se puede probar con &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; incluída entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;otras novedades de Java 9&lt;/a&gt;. En la lista de 20 valores aleatorios el menor es el 2 y entre la variable &lt;em&gt;a&lt;/em&gt; y &lt;em&gt;b&lt;/em&gt; el valor mínimo es 19.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/82b8c88dc3d00080eb6087d9af481ec9.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max.png&#34; title=&#34;Diferentes formas de obtener el valor mínimo y máximo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Diferentes formas de obtener el valor mínimo y máximo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para obtener el máximo sería similar pero usando el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#max-int-int-&#34;&gt;Math.max()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#max-java.util.Collection-&#34;&gt;Collections.max()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/</id>
        <title>Ejemplo con el cliente HTTP/2 de Java</title>        
        <updated>2017-10-08T12:00:00+02:00</updated>
        <published>2017-10-08T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otra de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;nuevas funcionalidades incluidas en Java 9&lt;/a&gt; aunque en modo incubación es el cliente con soporte para HTTP/2 para realizar peticiones a recursos usando este protocolo más eficiente y rápido. Al mismo tiempo se ha simplificado el código necesario para realizar una petición y obtener el resultado de una URL. También se ha añadido la funcionalidad de realizar peticiones asíncronas y creación de conexiones de &lt;em&gt;WebSockets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Las clases importantes de esta nueva API con &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpRequest.html&#34;&gt;HttpRequest&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.html&#34;&gt;HttpResponse&lt;/a&gt;. Estas clases se encuentran en el módulo de incubación &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk.incubator.httpclient-summary.html&#34;&gt;jdk.incubator.httpclient&lt;/a&gt;, una vez que sea definitiva la API se renombrará el módulo.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo realiza una petición a la página del buscador Google con unas cabeceras y obtiene el código de estado, las cabeceras devueltas y el cuerpo de la página de resultado. En la declaración del módulo para usar el cliente hay que indicar que tiene como requerimiento su módulo de &lt;em&gt;jdk.incubator.httpclient&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=module-info.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2.png&#34; title=&#34;Petición con el cliente de Java para HTTP/2&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Petición con el cliente de Java para HTTP/2&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Otras fomas de manejadores del resultado de la petición son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asString--&#34;&gt;BodyHandler.asString()&lt;/a&gt;: almacena el resultado de la petición en un String&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asByteArray--&#34;&gt;BodyHandler.asByteArray()&lt;/a&gt;: almacena el resultado de la petición en un array de bytes como sería el caso de obtener una imagen o un archivo PDF&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asFile-java.nio.file.Path-&#34;&gt;BodyHandler.asFile(Path)&lt;/a&gt;: almacena el resultado en un archivo del disco&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#discard-U-&#34;&gt;BodyHandler.discard()&lt;/a&gt;: descarta la respuesta y devuelve el valor indicado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se puede definir la política de cómo procesar las redirecciones para seguirlas, no seguirlas o solo si son seguras o utilizan el mismo protocolo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#ALWAYS&#34;&gt;HttpClient.Redirect.ALWAYS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#NEVER&#34;&gt;HttpClient.Redirect.NEVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SAME_PROTOCOL&#34;&gt;HttpClient.Redirect.SAME_PROTOCOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SECURE&#34;&gt;HttpClient.Redirect.SECURE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con la clase &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/javax/net/ssl/SSLContext.html&#34;&gt;SSLContext&lt;/a&gt; es posible establecer autenticación para el cliente usando un certificado como muestro en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/&#34;&gt;Autenticación mutua de cliente y servidor con certificados&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para ejecutar el ejemplo usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; y Java 9 hay que añadir un poco de configuración al &lt;em&gt;script&lt;/em&gt; de construcción que posiblemente en un futuro no será necesaria cuando se mejore el soporte.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/</id>
        <title>Evitar niveles de anidación de sentencias condicionales con guard clauses</title>        
        <updated>2017-10-07T12:00:00+02:00</updated>
        <published>2017-10-07T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Al escribir el código de un método es habitual hacer algunas comprobaciones sobre los parámetros, por ejemplo, para comprobar que el parámetro tiene una referencia, si es nulo o cumple alguna condición, si es una lista que no esté vacía o para validar mediante alguna otra regla. Estas validaciones o aserciones se realizan al inicio del método con sentencias &lt;em&gt;if&lt;/em&gt; que añaden un nivel de tabulación al código si se anidan. Estos niveles de tabulación con sentencias &lt;em&gt;if&lt;/em&gt; anidadas hacen poco legible el código.&lt;/p&gt;

&lt;p&gt;Este código que comprueba algunos parámetros no es tan sencillo de entender por los varios niveles de anidación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=NestedIf.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En vez de crear este nivel de anidación y crear varios flujos distintos por donde se bifurca el código, con aserciones, sentencias &lt;em&gt;if&lt;/em&gt; o &lt;em&gt;guard clauses&lt;/em&gt;  el código queda más legible. Después de cada cláusula &lt;em&gt;if&lt;/em&gt; es seguro que la aserción que realiza se cumple.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=GuardClauses.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;También es una recomendación que los métodos solo tengan una sentencia &lt;em&gt;return&lt;/em&gt;, de hecho en la enseñanza de programación se explica pero para estos casos de comprobaciones la ventaja de no tener varios &lt;em&gt;if&lt;/em&gt; anidados es justificable tener varios &lt;em&gt;return&lt;/em&gt;, el código queda más legible.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html&#34;&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/</id>
        <title>La triste realidad de Java, versiones antiguas</title>        
        <updated>2017-10-04T19:30:00+02:00</updated>
        <published>2017-10-01T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Algunos desarrolladores que utilizan el lenguaje de programación Java desearían que el tiempo que pasa entre publicación de una nueva versión y la siguiente fuese menor. Las nuevas versiones incorporan modificaciones en el lenguaje y en la API que facilitan el trabajo de los desarrolladores haciendo que escriban menos líneas de código, haciendo que el código fuente sea más legible que al final redunda en software con menos &lt;em&gt;bugs&lt;/em&gt;, con más funcionalidades, un tiempo de desarrollo menor y con menos costes.&lt;/p&gt;

&lt;p&gt;La versión de Java 9 fue publicada en septiembre de 2017 con algunos aplazamientos hasta estar todas las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; listas, principalmente la nueva modularidad. La versión de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 también con importantes novedades&lt;/a&gt; fue publicada con tres años de anterioridad, en marzo de 2014. En las últimas versiones entre cada una han pasado algunos años.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.0 (Enero 23, 1996)&lt;/li&gt;
&lt;li&gt;JDK 1.1 (Febrero 19, 1997)&lt;/li&gt;
&lt;li&gt;J2SE 1.2 (Diciembre 8, 1998)&lt;/li&gt;
&lt;li&gt;J2SE 1.3 (Mayo 8, 2000)&lt;/li&gt;
&lt;li&gt;J2SE 1.4 (Febrero 6, 2002)&lt;/li&gt;
&lt;li&gt;J2SE 5.0 (Septiembre 30, 2004)&lt;/li&gt;
&lt;li&gt;Java SE 6 (Diciembre 11, 2006)&lt;/li&gt;
&lt;li&gt;Java SE 7 (Julio 28, 2011)&lt;/li&gt;
&lt;li&gt;Java SE 8 (Marzo 18, 2014)&lt;/li&gt;
&lt;li&gt;Java SE 9 (Septiembre 21, 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y de otros de los populares &lt;em&gt;frameworks&lt;/em&gt; para programación de aplicaciones web de servidor como &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Apache Struts&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring Framework&lt;/a&gt; que aún se siguen utilizando en versiones como 1 y 3 respectivamente en algunos casos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Struts 1.1 (2003)&lt;/li&gt;
&lt;li&gt;Struts 1.2 (2004)&lt;/li&gt;
&lt;li&gt;Struts 1.3 (2008)&lt;/li&gt;
&lt;li&gt;Struts 2 (2007)&lt;/li&gt;
&lt;li&gt;Struts 2.1 (2009)&lt;/li&gt;
&lt;li&gt;Struts 2.2 (2010)&lt;/li&gt;
&lt;li&gt;Struts 2.3 (2011)&lt;/li&gt;
&lt;li&gt;Struts 2.5 (2016)&lt;/li&gt;
&lt;li&gt;Spring Framework 1 (2004)&lt;/li&gt;
&lt;li&gt;Spring Framework 2 (2006)&lt;/li&gt;
&lt;li&gt;Spring Framework 2.5 (2007)&lt;/li&gt;
&lt;li&gt;Spring Framework 3 (2009)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.1 (2011)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.2.5 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4.2 (2015)&lt;/li&gt;
&lt;li&gt;Spring Framework 5 (2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En Java 9 el calendario de publicaciones va a cambiar optando por un modelo basado en fechas fijas cada seis meses y cada tres años para las versiones con soporte de largo plazo. Cada una de estas nuevas versiones incorporará las características que estén listas para ser publicadas lo que evitará que si una novedad se retrasa no retrase al resto de novedades que ya estén listas, simplemente se publicará en la siguiente versión al cabo de unos meses. Esto va a hacer que el número de versiones aumente significativamente a lo que hasta ahora ha ocurrido.&lt;/p&gt;

&lt;p&gt;Sin embargo, y a pesar de que algunos desarrolladores se han quejado de el tiempo que pasa entre versión y versión y que ahora con el nuevo calendario se le dará solución, ¿en algunos entornos va a cambiar algo? Si resulta que algunas organizaciones ya sean entes públicos o empresas privadas siguen utilizando versiones de Java como la 6 e incluso la 5 que fueron publicadas hace ya más de una década. Una década en el ámbito tecnológico es una eternidad. O de Spring como la 3 del 2009 o incluso de Struts como la 1 en el mejor de los casos del 2008 que ya incluso ni siquiera tiene soporte ni se siguen desarrollando lo que implica falta de soporte de seguridad. Y no es por que cada nueva versión de Java sea incompatible con la anterior, precisamente lo contrario, la compatibilidad hacia atrás es una de las cosas que siempre se le da una gran importancia en la plataforma a veces incluso por encima de nuevas características, tanto que aún código compilado a &lt;em&gt;bytecode&lt;/em&gt; en las versiones 1.0, 1.1 y 1.2 funcionaría perfectamente con la JVM de Java 9.&lt;/p&gt;

&lt;p&gt;Algunas de estas organizaciones pueden tener necesidad de utilizar versiones durante un periodo de tiempo largo ya sea por el número y tamaño de las aplicaciones que manejan pudiendo ser de un servicio crítico o por el coste que supone reemplazarlas o adaptarlas a tiempos más modernos. Pero usar software de hace una década parece algo excesivo para las aplicaciones nuevas que se desarrollan hoy, aún así si siguen usando versiones antiguas seguro que tendrán motivos. Versiones antiguas de librerías y sin posibilidad de usar las que no estén homologadas en la organización que por desgracia la lista es muy limitada. Generar gráficas con &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;, PDF con &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; o &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;, Excel con &lt;a href=&#34;https://poi.apache.org/&#34;&gt;Apache POI&lt;/a&gt; son solo algunas de las necesidades habituales pero para otras es raro no encontrar alguna librería que lo facilite en gran medida.&lt;/p&gt;

&lt;p&gt;O usan &lt;em&gt;frameworks&lt;/em&gt; propios que a mi no me interesa aprender porque además de usar librerías ya antiguas fuera de esa organizaciones no tienen ninguna validez con lo que uno queda encadenado profesionalmente al menos en parte a esa organización y no me parece recomendable para un futuro profesional.&lt;/p&gt;

&lt;p&gt;El resultado es que aún celebrando la publicación de una nueva versión de Java en muchas organizaciones pasarán muchos años, quizá algún lustro o una ¡década! antes de que la utilicen como ya pasa ahora. Y esta es la triste realidad de Java en algunos sitios. Posiblemente solo en algunas &lt;em&gt;startups&lt;/em&gt; que no tienen una carga tan grande puedan utilizar la última versión de Java al contrario de lo ocurre en otras organizaciones y entornos corporativos mayores.&lt;/p&gt;

&lt;p&gt;Algunas empresas se quejan de que faltan trabajadores para cubrir puestos técnicos pero para completar el asunto digamos también que faltan salarios, condiciones laborales dignas, menos subcontratación o externalización u &lt;em&gt;outsourcing&lt;/em&gt; y proyectos interesantes en algún aspecto como podría ser el tecnológico que a uno le motive a postular a un puesto de trabajo. Yo al menos aparte del sueldo también valoro en buena medida la tecnología que se vaya a usar en el proyecto buscando que no esté obsoleta y que me permita seguir aprendiendo, al menos con la posibilidad de elegir trabajo.&lt;/p&gt;

&lt;p&gt;Y como escuché en cierta charla en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/conferencia-bilbostack-2016/&#34;&gt;una de las BilboStack&lt;/a&gt;, luego dirán que Java es una mierda, ya, una mierda, ¿del 2006?, ¿hablamos de Java 9, &lt;a href=&#34;https://www.jooq.org/&#34;&gt;jOOQ&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;, &lt;a href=&#34;http://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt;, &lt;a href=&#34;https://spring.io/&#34;&gt;Spring 5&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE 8&lt;/a&gt;, &lt;a href=&#34;https://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&#34;http://wildfly.org/&#34;&gt;WildFly&lt;/a&gt;, &lt;em&gt;frameworks&lt;/em&gt; de servidor basados en componentes desde hace años con similitudes con los que ahora a la gente se le &lt;em&gt;hace el culo pepsi-cola&lt;/em&gt; en JavaScript con &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt;?&amp;hellip; por mencionar algunas pocas.&lt;/p&gt;

&lt;p&gt;Quizá en la capital del reino de súbditos o en la capital de la nación que quiere votar sí o no a su independencia haya más posibilidades de encontrar un trabajo más interesante tecnológicamente pero en el páramo de la periferia no hay tantas posibilidades o de incluso crearlas&amp;hellip; quizá algún día.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="opinion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/</id>
        <title>JShell la herramienta REPL incorporada en Java 9</title>        
        <updated>2017-09-29T22:00:00+02:00</updated>
        <published>2017-09-29T21:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; es la incorporación de una herramienta &lt;em&gt;Read-Evaluation-Print-Loop&lt;/em&gt; o REPL similar a las disponibles en otros lenguajes dinámicos para permitir evaluar pequeños ejemplos de código, hacer pruebas o como herramienta para alguien que esté aprendiendo a programar sin la necesidad de utilizar un entorno integrado de desarrollo, una herramienta de construcción y los varios archivos y comandos necesarios para compilar y ejecutar el código Java.&lt;/p&gt;

&lt;p&gt;El comando de la herramienta &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell&lt;/a&gt; es &lt;em&gt;jshell&lt;/em&gt; que inicia un símbolo del sistema donde empezar a introducir las expresiones, se sale de &lt;em&gt;jshell&lt;/em&gt; con el comando &lt;code&gt;/exit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Se pueden crear variables, crear y modificar definiciones de métodos y clases. Cada una de estas expresiones crea un &lt;em&gt;snippet&lt;/em&gt; de código que pueden listarse con el comando &lt;code&gt;/list&lt;/code&gt;. Al introducir las expresiones se soporta completado y asistencia de código con la tecla tabulador como ayuda para saber que métodos tiene un objeto.&lt;/p&gt;

&lt;p&gt;Se pueden crear clases y métodos como en el ejemplo de la serie de Fibonacci implementada con un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; de la cual se muestran los elementos de la serie menores que el número 100.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions.png&#34; title=&#34;Expresiones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion.png&#34; title=&#34;Asistencia de código&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Expresiones y asistencia de código&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods.png&#34; title=&#34;Serie de Fibonacci con un Stream en un método&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Serie de Fibonacci con un Stream en un método&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para diferenciar las expresiones de código de los comandos estos últimos son precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Hay varios como los ya citados para listar los &lt;em&gt;snippets&lt;/em&gt; de código y salir de &lt;em&gt;jshell&lt;/em&gt;, otros son para listar las definiciones de variables con &lt;code&gt;/vars&lt;/code&gt;, métodos con &lt;code&gt;/methods&lt;/code&gt;, tipos con &lt;code&gt;/types&lt;/code&gt; e &lt;em&gt;imports&lt;/em&gt; con &lt;code&gt;/imports&lt;/code&gt;. La lista completa de comandos puede obtenerse pulsando la tecla tabulador después de la barra de comando.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands.png&#34; title=&#34;Comandos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Comandos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para los &lt;em&gt;snippets&lt;/em&gt; multilínea o algo complejos puede utilizarse un editor externo con el comando &lt;code&gt;/edit&lt;/code&gt;. El editor de nuestra preferencia se establece con el comando &lt;code&gt;/set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;También se pueden &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/external-code.htm&#34;&gt;añadir módulos o librerías&lt;/a&gt; para usar las clases y tipos que contengan con el comando &lt;code&gt;/env&lt;/code&gt; y las opciones &lt;code&gt;&amp;ndash;add-modules&lt;/code&gt;  &lt;code&gt;&amp;ndash;module-path&lt;/code&gt; y &lt;code&gt;&amp;ndash;class-path&lt;/code&gt;. Los &lt;em&gt;snippets&lt;/em&gt; creados en una sesión pueden guardarse en un archivo con el comando &lt;code&gt;/save&lt;/code&gt; y ser cargados al inicio de JShell o con el comando &lt;code&gt;/open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/toc.htm&#34;&gt;guía oficial de JShell&lt;/a&gt; se comenta algunas opciones más de esta nueva herramienta.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/guides/java-and-j2ee/getting-started-with-jshell&#34;&gt;Getting Started with JShell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>