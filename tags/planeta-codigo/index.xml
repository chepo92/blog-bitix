<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2018-05-25T18:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/generador-de-paginas-web-estaticas-y-bitacoras-con-hugo/</id>
        <title>Generador de páginas web estáticas y bitácoras Hugo</title>        
        <updated>2018-05-25T18:00:00+02:00</updated>
        <published>2018-05-25T18:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/generador-de-paginas-web-estaticas-y-bitacoras-con-hugo/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Hugo es un de las mejores herramientas en la categoría de generadores de páginas web estáticas, también puede utilizarse para generar bitácoras. Su fácil instalación, rapidez, personalización o su gran sistema de plantillas y taxonomía son varias de sus características destacadas. Con Hugo conseguí resolver varias de las necesidades que tenía para Blog Bitix, la gestión de enlaces internos y externos, personalización de diseño y procesado de imágenes.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Hugo&#34; title=&#34;Hugo&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En diciembre del 2013 pase de usar &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; a usar &lt;a href=&#34;http://octopress.org/&#34;&gt;Ocotpress&lt;/a&gt; junto con &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; para el hospedaje. En mayo del 2015 modifiqué mi bitácora para usar en vez de &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; la herramienta equivalente &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, ambas sirven para generar sitios web estáticos formados únicamente por HTML, CSS, imágenes, documentos y JavaScript. Tanto Octopress, &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; como Hugo y otros como &lt;a href=&#34;http://docs.getpelican.com&#34;&gt;Pelican&lt;/a&gt; son similares, a partir de archivos normalmente en formato &lt;em&gt;markdown&lt;/em&gt; genera el HTML de la página web o bitácora junto con los recursos estáticos que necesite. Cada una de estas opciones son adecuadas para páginas de presencia en internet y bitácoras.&lt;/p&gt;

&lt;p&gt;Varían en el lenguaje de programación que emplean, Octopress usa &lt;a href=&#34;https://www.ruby-lang.org/es/&#34;&gt;Ruby&lt;/a&gt; y Hugo usa &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, y el formato de las plantillas que utilizan para personalizar la generación del contenido. La &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress/&#34;&gt;migración desde Blogger a Octopress&lt;/a&gt; que hice en 2013 me supuso una gran mejora al editar los artículos. La edición de los artículos se puede hacer con cualquier editor de textos en la computadora local en vez de usar una editor en un navegador mucho más limitado y lento, además de editar el texto la gestión de las imágenes es mucho más simple al tratarse como simples archivos que basta colocar entre el código fuente de la bitácora que usará el generador para producir la página web o bitácora. El &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;cambio de Octopress a Hugo&lt;/a&gt; más tarde me permitió otros aspectos importantes a la hora de editar los artículos.&lt;/p&gt;

&lt;p&gt;La web está formada por un conjunto de páginas enlazadas, la gestión de los enlaces es un aspecto muy importante en una página web y en una bitácora es igual. Si una página a la que hacíamos referencia cambia de dirección todos los enlaces que tuviésemos quedarán rotos. Hay varias posibilidades para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/como-buscar-los-enlaces-rotos-de-un-sitio-web/&#34;&gt;buscar enlaces rotos&lt;/a&gt;, encontrados y sustituirlos usando Blogger es complicado ya que hay que usar el lento y poco cómodo editor web, usando Octopress era más sencillo haciendo una búsqueda y reemplazo en los archivos de texto en formato &lt;em&gt;markdown&lt;/em&gt; con un buen editor de textos pero con Hugo me resulta mucho más sencillo por la forma en que he organizado el código fuente. Los enlaces comunes que utilizo en múltiples artículos los incluyo en un &lt;a href=&#34;https://github.com/picodotdev/blog-bitix/blob/master/layouts/shortcodes/links.html&#34;&gt;&lt;em&gt;shortcode&lt;/em&gt;&lt;/a&gt; y otro para los &lt;a href=&#34;https://github.com/picodotdev/blog-bitix/blob/master/layouts/shortcodes/postslinks.html&#34;&gt;propios artículos del blog&lt;/a&gt; y luego en la página o artículo hago referencia a ellos usando un identificador de forma que si un día cambia una página de dirección o una URL de algún artículo solo he de hacer la sustitución en un único lugar en esos &lt;em&gt;shortcodes&lt;/em&gt;. Con &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; externalizo los comentarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/&#34;&gt;Gestionar los enlaces de una bitácora con Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La gestión de las imágenes es otro aspecto que si no se organiza se acaba con un directorio sin ninguna organización donde es complicado saber que imágenes utiliza cada artículo. Los principales directorios que utilizo son dos uno para &lt;a href=&#34;https://github.com/picodotdev/blog-bitix/tree/master/static/assets/images/logotipos&#34;&gt;imágenes de logotipos&lt;/a&gt; y otro para las &lt;a href=&#34;https://github.com/picodotdev/blog-bitix/tree/master/static/assets/images/posts&#34;&gt;imágenes de cada artículo&lt;/a&gt; con una subcarpeta por año y otra con el identificador del artículo. Hasta hace poco usaba &lt;a href=&#34;https://www.imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt; para producir las previsulizaciones de las imágenes y una reducción de las imágenes originales. Recientemente en Hugo se ha incorporado la funcionalidad de aplicar procesado a las imágenes con lo que es posible generar estas previsualizaciones y reducciones sin necesidad de perder las &lt;a href=&#34;https://github.com/picodotdev/blog-bitix/tree/master/content/post/2018/2018-05-04-los-plantones-de-roble/images&#34;&gt;imágenes originales&lt;/a&gt;, esto tiene la ventaja de que si un tiempo después hay que hacer algún cambio a un imagen se puede utilizar la original. También podido simplificar la forma de organizar las imágenes, ahora al lado del artículo &lt;em&gt;markdown&lt;/em&gt; en que se usan.&lt;/p&gt;

&lt;p&gt;Tanto la gestión de enlaces como de los recursos estáticos es algo que no podía hacer con Blogger y fue uno de los principales motivos para migrar a un generador estático de páginas web. Como todo son archivos estáticos lo único que hace falta es un servidor web, hay varias opciones de hospedaje bastante baratas al no necesitar un lenguaje de programación en el servidor como PHP ni una base de datos relacional. Yo utilizo GitHub Pages que es incluso sin coste. Usando algunas de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/3-formas-sencillas-de-monetizar-un-blog/&#34;&gt;varias formas para monetizar un blog&lt;/a&gt; escribiendo contenido interesante y de forma regular los ingresos por este medio cubren el coste del hospedaje y del dominio.&lt;/p&gt;

&lt;p&gt;Con Hugo personalicé completamente el diseño y estilos de de la bitácora pero &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo dispone de múltiples temas&lt;/a&gt;. En la página de &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;documentación de Hugo&lt;/a&gt; está el formato a usar en las plantillas, &lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;&lt;em&gt;shortcodes&lt;/em&gt;&lt;/a&gt; y &lt;a href=&#34;https://gohugo.io/templates/partials/&#34;&gt;&lt;em&gt;partials&lt;/em&gt;&lt;/a&gt; así como las &lt;a href=&#34;https://gohugo.io/templates/variables/&#34;&gt;variables disponibles&lt;/a&gt; y &lt;a href=&#34;https://gohugo.io/templates/functions/&#34;&gt;funciones&lt;/a&gt; disponibles en las plantillas. Con la &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;guía de inicio rápido&lt;/a&gt; es posible tener una página web en unos pocos minutos y la &lt;a href=&#34;https://gohugo.io/overview/source-directory/&#34;&gt;estructura básica de directorios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una de las características destacadas de Hugo es que es muy rápido, en unos pocos segundos es capaz de generar la página web completa a partir del código fuente de los archivos. Ya he escrito más de 300 artículos y tarda menos de 4 segundos en generar este blog. Otra que destaco es que solo se necesita un único binario con lo que se evita el infierno de dependencias que en alguna ocasión con Octopress me causó problemas. Usando el servidor web incorporado que posee es posible previsualizar en local el contenido de la página antes de publicarla.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;¡Hola nuevo mundo!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;Nuevo diseño en Blog Bitix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/&#34;&gt;Gestionar los enlaces de una bitácora con Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/recuperar-datos-eficientemente-en-graphql-usando-batching/</id>
        <title>Recuperar datos eficientemente en GraphQL usando batching</title>        
        <updated>2018-05-20T19:00:00+02:00</updated>
        <published>2018-05-20T19:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/recuperar-datos-eficientemente-en-graphql-usando-batching/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/graphql.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;GraphQL&#34; title=&#34;GraphQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Dada una consulta con los datos a recuperar &lt;a href=&#34;http://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; hace una llamada al correspondiente &lt;em&gt;resolver&lt;/em&gt; o &lt;em&gt;data fecher&lt;/em&gt; para obtener el valor de cada propiedad. Cuando se tratan de propiedades en un &lt;em&gt;java bean&lt;/em&gt; esto no supone ningún problema en cuanto a rendimiento pero cuando obtener el valor de una propiedad es costoso la consulta resulta ineficiente.&lt;/p&gt;

&lt;p&gt;Por ejemplo, siguiendo el ejemplo que he utilizado en anteriores &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/graphql/&#34;&gt;artículos sobre GraphQL&lt;/a&gt; de una librería en la que hay un tipo para representar un libro con una propiedad con sus comentarios, con una consulta que permite recuperar los libros para cada uno de ellos se llama al &lt;em&gt;resolver&lt;/em&gt; que recupera los comentarios. En este ejemplo no ya que están los datos en memoria y no se usa una base de datos pero si recuperar los comentarios de cada libro supusiera una consulta SQL en una base de datos relacional (o tráfico de red en una base de datos NoSQL u otro servicio) y la lista de libros devuelta fuese grande cada vez que se realizará esta consulta el número de sentencias SQL a ejecutar sería grande y el tiempo de respuesta pobre y con una carga mayor para el servidor de base de datos.&lt;/p&gt;

&lt;p&gt;Para hacer eficientemente este caso en GraphQL existe la funcionalidad de &lt;em&gt;batching&lt;/em&gt; con la que un &lt;em&gt;resolver&lt;/em&gt; o &lt;em&gt;data fecher&lt;/em&gt; puede recuperar los comentarios de todos los libros en una misma petición. Para esto GraphQL proporciona al &lt;em&gt;resolver&lt;/em&gt; en vez de cada libro individual la lista de todos los libros para los cuales hay recuperar los comentarios.&lt;/p&gt;

&lt;p&gt;Esta es la teoría ya que en el momento de escribir este artículo en la &lt;a href=&#34;https://github.com/graphql-java/graphql-java-tools&#34;&gt;librería de utilidades que hace más sencillo usar GraphQL en Java&lt;/a&gt; se implementó una &lt;a href=&#34;https://github.com/graphql-java/graphql-java-tools/issues/12&#34;&gt;petición de mejora para añadir &lt;em&gt;batching&lt;/em&gt;&lt;/a&gt; a los &lt;em&gt;resolvers&lt;/em&gt;, en su momento se añadió la funcionalidad pero no de forma correcta como me di cuenta a escribir y probar el ejemplo de esta serie de artículos de modo que les creé esta &lt;a href=&#34;https://github.com/graphql-java/graphql-java-tools/issues/93&#34;&gt;petición para corregir el soporte de &lt;em&gt;batching&lt;/em&gt;&lt;/a&gt;. Tres días depués de haber creado la petición en GitHub alguien envío un &lt;em&gt;pull request&lt;/em&gt; pero no ha sido hasta después de casi seis meses que finalmente se ha aceptado, fusionado y publicado en la versión 5.1.0.&lt;/p&gt;

&lt;p&gt;La firma del método del &lt;em&gt;resolver&lt;/em&gt; para recuperar los comentarios de un libro sin usar &lt;em&gt;batching&lt;/em&gt; y usando &lt;em&gt;batching&lt;/em&gt; son los siguientes respectivamente. Estos al igual que cualquier otro método del &lt;em&gt;resolver&lt;/em&gt; puede recibir parámetros con los que implementar la funcionalidad que se desee, en este caso para limitar el número de resultados devueltos y para devolverlos a partir de uno  dado.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/fa91df2d0203a0e2137c461ff387719f.js?file=BookResolver.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con la lista completa de libros de la que hay que recuperar los comentarios ya sería posible lanzar una única consulta SQL a una base de datos relacional en vez de una por cada libro. El método que emplea &lt;em&gt;batching&lt;/em&gt; ha de estar anotado con la anotación &lt;em&gt;@Batched&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La consulta de GraphQL a realizar para recuperar los tres primeros comentarios de cada libro y los resultados que devuelve son los siguientes. La consulta parece un tanto compleja porque la propiedad de los comentarios implementa paginación pero básicamente se recupera de cada libro su título y los comentarios.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/fa91df2d0203a0e2137c461ff387719f.js?file=curl.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/fa91df2d0203a0e2137c461ff387719f.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/GraphQL&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/</id>
        <title>Depurar código JavaScript con la instrucción debugger</title>        
        <updated>2018-05-19T12:00:00+02:00</updated>
        <published>2018-05-18T19:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/javascript.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;JavaScript&#34; title=&#34;JavaScript&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los navegadores web utilizan la palabra clave sentencia &lt;em&gt;debugger;&lt;/em&gt; como punto de ruptura para iniciar el depurado de un código JavaScript. En vez de poner el punto de ruptura desde el navegador utilizando la herrmienta de depuración para desarrolladores con esta instrucción se puede poner en el código fuente donde se desee, de esta forma se evita buscar entre los múltiples recursos que haya cargados en la página e ir a la línea en la que se desea iniciar la depuración poniendo un punto de ruptura.&lt;/p&gt;

&lt;p&gt;Suponiendo que se desea poner un punto de ruptura en un código JavaScript hay que editar el archivo JavaScript de código fuente e incluir la sentencia &lt;em&gt;debugger;&lt;/em&gt; como en el siguiente caso. Cuando el navegador ejecute esa sentencia iniciará, tiendo las herramientas de depuración abiertas, el depurador.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/f0b4d4eba1b8428724f2d2a63b0a496b.js?file=Debugger.html&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
  
  
  
  
  
  

  
  
  

  
  
  















&lt;figure&gt;
    
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/images/javascript-debugger_hu846d34e90b5e643f744d4823c28f732f_278539_2560x1440_fit_box_2.png&#34; title=&#34;JavaScript Debugger&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/05/depurar-codigo-javascript-con-la-instruccion-debugger/images/javascript-debugger_hu846d34e90b5e643f744d4823c28f732f_278539_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;175&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;JavaScript Debugger&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;p&gt;Con la herramienta de depuración abierta se pueden poner expresiones de inspección, nuevos puntos de ruptura e ir paso a paso en la ejecución del código JavaScript. Esta sentencia para iniciar la depuración es lo mismo que añadir un punto de ruptura inspeccionando los recursos de JavaScript de la página pero quizá resulta más cómodo.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger&#34;&gt;MDN debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/gestion-de-errores-con-either-o-try-en-vez-de-con-codigo-de-error-null-pptional-checked-exception-o-unchecked-exception/</id>
        <title>Gestión de errores con Either o Try en vez de con código de error, null, Optional, checked exception o unchecked exception</title>        
        <updated>2018-05-11T20:00:00+02:00</updated>
        <published>2018-05-11T20:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/gestion-de-errores-con-either-o-try-en-vez-de-con-codigo-de-error-null-pptional-checked-exception-o-unchecked-exception/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;A lo largo del tiempo han surgido varias formas de gestionar las excepciones. En C hace muchos años eran con códigos de error, en Java se incorporaron en el lenguaje las excepciones &lt;em&gt;checked&lt;/em&gt; o &lt;em&gt;uncheked&lt;/em&gt; o la nueva clase Optional en Java cada una con sus ventajas y y algunas deficiencias. Más recientemente usando un tipo tal que &lt;em&gt;Either&lt;L,R&gt;&lt;/em&gt; son otra forma para el tratamiento de errores sobre las opciones anteriores.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una parte importante para el correcto funcionamiento de un programa corresponde a la gestión de errores que pueden producirse en su ejecución. Si se trata de un programa que se comunica vía interfaz de red ha de estar preparado ante la situación que la conexión se pierda o se produzcan errores en la transmisión porque por ejemplo se ha desconectado el cable de red o la WiFi no es estable. Si se trata de un programa que guarda datos en el almacenamiento persistente también pueden producirse errores como que el archivo ya existe, el directorio no existe o el espacio del disco se ha agotado. Los posibles casos de error que pueden producirse en un programa son muchos y variados.&lt;/p&gt;

&lt;p&gt;En épocas más antiguas una forma de gestionar los errores era y sigue siendo con códigos de error donde la función o el código de salida de un programa retorna un 0 si no se ha producido ningún error o un número distinto de cero si se ha producido algún error, con un código de salida diferente por cada error. Dado que no hay obligación de gestionar adecuadamente el código de salida a veces no se hace con el consiguiente posible mal funcionamiento del programa. Otra forma de código de error es retornar un valor &lt;em&gt;null&lt;/em&gt; en un método o función pero que no tratado adecuadamente producirá una excepción de tipo &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerExcetion&lt;/a&gt;. Con la introducción de la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html&#34;&gt;Optional&lt;/a&gt; entre otras &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades de Java 8&lt;/a&gt; los punteros nulos se gestionan más adecuadamente pero en los casos en los que se devuelve un puntero &lt;em&gt;null&lt;/em&gt; no se proporciona información de cuál ha sido la condición de error que se ha producido.&lt;/p&gt;

&lt;p&gt;Para obligar a gestionar adecuadamente las condiciones de error e informar de que posibles condiciones de error se pueden producir se incorporaron en algunos lenguajes las excepciones como en Java. Las excepciones &lt;em&gt;checked&lt;/em&gt;, aquellas que son declaradas y de obligado tratamiento, garantizan que sean tratadas de alguna forma pero algo molestas con las sentencias &lt;em&gt;try-catch-exception&lt;/em&gt;. Las excepciones &lt;em&gt;unchecked&lt;/em&gt;, aquellas que no es necesario declararlas y no de obligado tratamiento, son arriesgadas ya que al igual que los códigos de error no obliga a darles un tratamiento además de que no se declaran que excepciones es posible que sean lanzadas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/06b00278af3fe06943f6892acedb4b13.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/06b00278af3fe06943f6892acedb4b13.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En algunos lenguajes con capacidades funcionales se ha propuesto una nueva forma para la gestión de condiciones de error, en Java y con la librería &lt;a href=&#34;https://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt; se proporciona la clase &lt;a href=&#34;http://static.javadoc.io/io.vavr/vavr/0.9.2/io/vavr/control/Either.html&#34;&gt;Either&lt;/a&gt; que es un tipo con la definición de tipo genérico &lt;em&gt;Either&amp;lt;L,R&amp;gt;&lt;/em&gt;. Que un método devuelva &lt;em&gt;Either&lt;BigDecmal, Exception&gt;&lt;/em&gt; indica que puede devolver en el caso del ejemplo un &lt;em&gt;Integer&lt;/em&gt; en el caso correcto o una excepción en el caso de error. Un potencial fallo de esta opción es que no hay obligación de usar un &lt;em&gt;try-catch&lt;/em&gt; pero si se quiere usar el valor devuelto en caso correcto se ha de tener en cuenta el potencial caso de que lo haya es valor derecho. La clase &lt;em&gt;Either&lt;/em&gt; proporciona métodos para tratar adecuadamente en caso de que esté presente el valor izquierdo o el valor derecho.&lt;/p&gt;

&lt;p&gt;La clase &lt;em&gt;Either&lt;/em&gt; tiene múltiples métodos para comprobar si el valor que tiene es un valor del tipo izquierdo, derecho, obtener el valor izquierdo, derecho y múltiples métodos que hereda de &lt;a href=&#34;http://static.javadoc.io/io.vavr/vavr/0.9.2/io/vavr/Value.html&#34;&gt;Value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En vez de retornar un &lt;em&gt;Either&lt;/em&gt; en un método usando Vavr se puede utilizar la clase &lt;a href=&#34;https://static.javadoc.io/io.vavr/vavr/0.9.2/io/vavr/control/Try.html&#34;&gt;Try&lt;/a&gt; como otra forma de gestionar las excepciones. Con &lt;em&gt;Try&lt;/em&gt; el método no es necesario que devuelva un &lt;em&gt;Either&lt;/em&gt; de modo que retorne el valor en el caso correcto y lance una exepción en caso de error. El &lt;em&gt;Try&lt;/em&gt; puede convertirse a un &lt;em&gt;Either&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaException&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;Las excepciones del lenguaje Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ashtonkemerling.com/blog/2017/01/26/java-without-if/&#34;&gt;Java Without If&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vavr.io/vavr-docs/#_either&#34;&gt;Either Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/05/plantillas-con-etiquetas-no-balanceadas-en-apache-tapestry/</id>
        <title>Plantillas con etiquetas no balanceadas en Apache Tapestry</title>        
        <updated>2018-05-01T10:30:00+02:00</updated>
        <published>2018-05-01T10:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/05/plantillas-con-etiquetas-no-balanceadas-en-apache-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Apache Tapestry es uno de los mejores &lt;em&gt;frameworks&lt;/em&gt; web para Java que he usado, sin embargo, también tiene algún incordio o curiosidad. Una de ellas es que las plantillas han de ser XML bien formado y en este caso que comento en el que necesitaríamos una plantilla con etiquetas desbalanceadas nos obliga a buscar una solución, esta es la que uso.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-tapestry-5.svg&#34; class=&#34;right &#34; width=&#34;400&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las plantillas en &lt;a href=&#34;https://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt; son XHTML, esto quere decir que al ser &lt;a href=&#34;http://es.wikipedia.org/wiki/Validaci%C3%B3n_XML#Documento_Bien_Formado&#34;&gt;archivos xml han de estar bien formados&lt;/a&gt; con sus etiquetas bien balanceadas y anidadas. Esto tiene la ventaja de que Tapestry nos avisará cuando se intente generar código HTML mal formado con el contenido de plantilla, una especie de compilación que si no es correcta no pasará desapercibida como en otros &lt;em&gt;frameworks&lt;/em&gt; y que puede generar otro tipo de errores. Sin embargo, también tiene una desventaja y es que si necesitamos generar una etiqueta de inicio dentro de un componente &lt;em&gt;if&lt;/em&gt; la plantilla no será válida.&lt;/p&gt;

&lt;p&gt;Supongamos que queremos generar un contenido a tres columnas de una serie de elementos, en cada tercer elemento de la fila tendremos que cerrar la fila anterior y abrir una nueva. El ejemplo de lo que no se puede hacer es el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/72a843db91d1bc57442ed771f835adf0.js?file=template-1.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;En este ejemplo las etiquetas &lt;em&gt;div&lt;/em&gt; de apertura y cierre hacen que el XML de la plantilla no esté bien balanceado. No se si habrá otra forma mejor pero esta es el rodeo que uso para tener una plantilla bien balanceada y generar el contenido HTML necesario. En el código Java del componente creo un método que devuelve un mapa de trozos de HTML que no podría incluir en la propia plantilla, cada trozo de HTML tiene una clave asociada por la que identificarlo, en este caso &lt;em&gt;open&lt;/em&gt; y &lt;em&gt;close&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/72a843db91d1bc57442ed771f835adf0.js?file=Component.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando estos métodos en la plantilla el código de la plantilla &lt;em&gt;tml&lt;/em&gt; ya bien formado quedaría de la siguiente manera, usando el componente &lt;a href=&#34;http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/OutputRaw.html&#34;&gt;OutputRaw&lt;/a&gt; se emite el trozo HTML de apertura o cierre:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/72a843db91d1bc57442ed771f835adf0.js?file=template-2.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Esta pequeña «ñapa» que no es muy habitual en las plantillas pero que en algún caso puede ser necesario emplear es una forma de hacer las plantillas &lt;em&gt;tml&lt;/em&gt; bien formadas en circunstancias donde incluyéndolo en la plantilla no lo sería.&lt;/p&gt;

&lt;p&gt;Prefiero que Tapestry me valide que el XML de la plantilla esté bien formado evitando que se pudiera generar HTML con etiquetas no balanceadas y me obligue a hacer este rodeo que la posibilidad de generar HTML con etiquetas mal balanceadas que los navegadores aceptan pero que en algún caso podría provocar una desmaquetación, aunque en los casos que se aplique esta solución hay que tener especial cuidado ya que como no se realiza ninguna validación al emitir etiquetas de forma «cruda» el HTML generado podría estar mal balanceado.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2014/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.pdf&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.epub&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.mobi&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/custom/PlugInTapestry.zip&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/</id>
        <title>Personalizar el prompt del sistema del intérprete de comandos Bash</title>        
        <updated>2018-04-29T21:30:00+02:00</updated>
        <published>2018-04-29T10:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;GNU&#34; title=&#34;GNU&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El &lt;em&gt;prompt&lt;/em&gt; de la terminal es el símbolo del sistema que precede al comando que introducimos en la terminal y por defecto indica el directorio de trabajo que utilizarán los comandos y el directorio que utilizarán las rutas relativas. El &lt;em&gt;prompt&lt;/em&gt; del intérprete de comandos &lt;em&gt;Bash&lt;/em&gt; se puede personalizar para por ejemplo modificar el color de su texto y la información que incluye con las preferencias del usuario.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;prompt&lt;/em&gt; se configura con la variable de entorno &lt;em&gt;PS1&lt;/em&gt; que en &lt;em&gt;Bash&lt;/em&gt; está en el directorio personal definido en el archivo &lt;em&gt;.bashrc&lt;/em&gt;. Los colores se especifican con una secuencia de caracteres y números que forman códigos de escape que son interpretados de forma especial, estas secuencias están mezclados con las secuencias de la información a mostrar. Como conocer las secuencias de caracteres con los códigos de escape ANSI para los colores y letras para la información es complicado de escribir o conocer al detalle en la web &lt;a href=&#34;https://www.kirsle.net/wizards/ps1.html&#34;&gt;Bash $PS1 Generator&lt;/a&gt; hay un asistente que facilita el crear un &lt;em&gt;prompt&lt;/em&gt; a nuestro gusto de forma sencilla y correcta.&lt;/p&gt;

&lt;p&gt;El siguiente es el que utilizo en mi sistema con colores, el nombre del usuario, el nombre sistema y el directorio de trabajo actual.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
  
  
  
  
  
  

  
  
  

  
  
  















&lt;figure&gt;
    
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-personalizado_hu9d8ea0e92ec202a66f2573bf5c6472ac_8224_2560x1440_fit_box_2.png&#34; title=&#34;Prompt de la terminal personalizado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-personalizado_hu9d8ea0e92ec202a66f2573bf5c6472ac_8224_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;161&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Prompt de la terminal personalizado&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;p&gt;Según se edita el &lt;em&gt;prompt&lt;/em&gt; el asistente previsualiza como queda en la sección &lt;em&gt;Preview&lt;/em&gt;, una vez que el &lt;em&gt;prompt&lt;/em&gt; es el que deseamos en la sección &lt;em&gt;Result&lt;/em&gt; el asistente ofrece el contenido de la variable de entorno &lt;em&gt;PS1&lt;/em&gt; que hay que añadir o cambiar en el archivo &lt;em&gt;~/.bashrc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d7f2101c07e92766f124b0a12e84f09a.js?file=.bashrc&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si quieres mostrar alguna información que sea el resultado de algún comando también se puede añadir al &lt;em&gt;prompt&lt;/em&gt;. Por ejemplo, supón que se desea añadir la hora del sistema al &lt;em&gt;prompt&lt;/em&gt; útil si se quiere a modo de registro para conocer posteriormente a que hora se lanzó un comando, la información de la hora entre otras posibles cosas relacionadas con la fecha la devuelve el comando &lt;em&gt;date&lt;/em&gt;. El siguiente &lt;em&gt;script&lt;/em&gt; de &lt;em&gt;Bash&lt;/em&gt; usando el comando &lt;em&gt;date&lt;/em&gt; proporciona la información de la hora a añadir en este caso.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d7f2101c07e92766f124b0a12e84f09a.js?file=date.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Ahora hay que incluir esta información en el &lt;em&gt;prompt&lt;/em&gt; de la siguiente forma.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d7f2101c07e92766f124b0a12e84f09a.js?file=.bashrc-date&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
  
  
  
  
  
  

  
  
  

  
  
  















&lt;figure&gt;
    
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-date_hud4a1d03f3ab4a9cb27abe1f1606be98d_8996_2560x1440_fit_box_2.png&#34; title=&#34;Prompt de la terminal personalizado con el resultado de un comando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/prompt-bash-date_hud4a1d03f3ab4a9cb27abe1f1606be98d_8996_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;161&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Prompt de la terminal personalizado con el resultado de un comando&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;p&gt;Otro caso habitual es añadir la rama de git del directorio actual de trabajo y si esta tiene cambios como comento en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/&#34;&gt;Prompt de la terminal personalizado en carpetas de git con el intérprete Bash&lt;/a&gt;. El &lt;em&gt;script&lt;/em&gt; necesario que proporciona &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; es más complejo que el caso anterior pero con la misma finalidad, el &lt;em&gt;script&lt;/em&gt; está en &lt;a href=&#34;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&#34;&gt;git-prompt.sh&lt;/a&gt; y requiere modificar la variable de entorno &lt;em&gt;PS1&lt;/em&gt; o bien &lt;em&gt;PROMPT_COMMAND&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
  
  
  
  
  
  

  
  
  

  
  
  















&lt;figure&gt;
    
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_2560x1440_fit_box_2.png&#34; title=&#34;Prompt de la terminal por defecto&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;191&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Prompt de la terminal personalizado en carpeta de git&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9200862/short-date-in-bash-ps1-prompt&#34;&gt;Short date in bash PS1 prompt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-clase-optional-de-java-para-evitar-la-excepcion-nullpointerexception/</id>
        <title>La clase Optional de Java para evitar la excepción NullPointerException</title>        
        <updated>2018-04-28T00:00:00+02:00</updated>
        <published>2018-04-28T00:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/la-clase-optional-de-java-para-evitar-la-excepcion-nullpointerexception/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Con la clase &lt;em&gt;Optional&lt;/em&gt; añadida en el JDK en la versión 8 del lenguaje Java se puede evitar una de las excepciones más comunes que se produce cuando se hace uso de una referencia nula a un objeto.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las excepciones que más se producen en un programa hecho con el lenguaje Java es la conocida &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerExpcetion&lt;/a&gt; que ocurre cuando se hace uso de una variable que referencia a un objeto pero que el contenido de la variable es &lt;em&gt;null&lt;/em&gt;, sin valor o sin contener una referencia a un objeto de modo que la llamada al método no es posible. La excepción &lt;em&gt;NullPointerException&lt;/em&gt; extiende de &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/RuntimeException.html&#34;&gt;RuntimeException&lt;/a&gt; por lo que es una &lt;em&gt;unchecked exception&lt;/em&gt; y por ello no es necesario capturarla o lanzarla, cuando se produce hay un error en el programa.&lt;/p&gt;

&lt;p&gt;Entre las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades que Java 8 incluyó en el lenguaje y JDK&lt;/a&gt; está la inclusión de la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html&#34;&gt;Optional&lt;/a&gt; con la que haciendo uso de ella se pueden evitar los &lt;em&gt;NullPointerException&lt;/em&gt;. Un objeto de tipo &lt;em&gt;Optional&lt;/em&gt; contiene o no una referencia a otro tipo de objeto. Por ejemplo, una variable de tipo &lt;em&gt;Optional&amp;lt;String&amp;gt;&lt;/em&gt; contiene una referencia a un objeto &lt;em&gt;Optional&lt;/em&gt; que a su vez contiene o no una referencia a una cadena &lt;em&gt;String&lt;/em&gt;. El uso de la variable &lt;em&gt;Optional&lt;/em&gt; no producirá un &lt;em&gt;NullPointerException&lt;/em&gt; y con sus métodos es posible saber si contiene o no una referencia al tipo usado en el genérico. Con el método &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#isPresent()&#34;&gt;isPresent()&lt;/a&gt; es posible saber si el &lt;em&gt;Optional&lt;/em&gt; contiene una referencia, con &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElse(T)&#34;&gt;orElse()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElseGet(java.util.function.Supplier)&#34;&gt;orElseGet()&lt;/a&gt; se obtiene la referencia que indiquemos en caso de que no tenga una referencia y con los métodos estáticos a modo de constructores &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#of(T)&#34;&gt;of()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#ofNullable(T)&#34;&gt;ofNullable()&lt;/a&gt; se obtiene respectivamente una instancia de &lt;em&gt;Optional&lt;/em&gt; con la referencia indicada que no puede ser nula o un &lt;em&gt;Optional&lt;/em&gt; que podría contener una referencia nula.&lt;/p&gt;

&lt;p&gt;Usar un objeto &lt;em&gt;Optional&lt;/em&gt; advierte al programador de que la referencia que contiene puede ser nula y usada correctamente evita los &lt;em&gt;NullPointerException&lt;/em&gt; aunque usarla indiscriminadamente hace del código más incómodo de escribir y leer, en variables locales es prescindible su uso pero útil en algunos valores de retorno o parámetros de métodos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9552591792afa8d6d44d11d25a380f6d.js?file=jshell.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Hay algunos métodos más en la clase &lt;em&gt;Optional&lt;/em&gt; con algunas funcionalidades adicionales que hace uso de las nuevas capacidades funcionales del lenguaje como convertir un &lt;em&gt;Optional&lt;/em&gt; a un &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;Las excepciones del lenguaje Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/one-dollar-solution-to-avoid-null-pointer-exceptio&#34;&gt;The $1 Solution to Avoid the Null Pointer Exception&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-sentencia-try-with-resources-de-java/</id>
        <title>La sentencia try-with-resources de Java</title>        
        <updated>2018-04-21T14:30:00+02:00</updated>
        <published>2018-04-21T14:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/la-sentencia-try-with-resources-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las novedades que incorporó Java 7 es la sentencia &lt;em&gt;try-with-resources&lt;/em&gt; con el objetivo de cerrar los recursos de forma automática en la sentencia &lt;em&gt;try-catch-finally&lt;/em&gt; y hacer más simple el código. Aquellas varaibles cuyas clases implementan la interfaz &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/AutoCloseable.html&#34;&gt;AutoCloseable&lt;/a&gt; pueden declararse en el bloque de inicialización de la sentencia &lt;em&gt;try-with-resources&lt;/em&gt; y sus métodos &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/AutoCloseable.html#close()&#34;&gt;close()&lt;/a&gt; serán llamados después del bloque &lt;em&gt;finally&lt;/em&gt; como si su código estuviese de forma explícita.&lt;/p&gt;

&lt;p&gt;Un ejemplo de código que lee una línea de un fichero usando la sentencia &lt;em&gt;try-with-resources&lt;/em&gt; es la siguiente de Java 7. Como se observa no es necesario llamar de forma explícita al método &lt;em&gt;close&lt;/em&gt; para liberar los recursos de la instancia de la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/io/BufferedReader.html&#34;&gt;BufferedReader&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9779dde2d563dcf7e8bb114f44966003.js?file=Java7.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Anteriormente a Java 7 esto se debía hacer de la siguiente manera con unas pocas lineas más de código algo menos legibles.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9779dde2d563dcf7e8bb114f44966003.js?file=Java6.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código es similar pero no es equivalente. Observesé que require declarar la variable &lt;em&gt;br&lt;/em&gt; fuera del ámbito de la sentencia &lt;em&gt;try-catch-finally&lt;/em&gt; donde se usa. Además, si se produce una excepción en el bloque &lt;em&gt;try&lt;/em&gt; y posteriormente en el bloque &lt;em&gt;finally&lt;/em&gt; en Java 6 la excepción del bloque &lt;em&gt;try&lt;/em&gt; se enmascara y la que se lanza es la del bloque &lt;em&gt;finally&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La excepción que se lanza en el bloque &lt;em&gt;try&lt;/em&gt; y usando el método &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html#addSuppressed(java.lang.Throwable)&#34;&gt;Throwable.addSuppressed()&lt;/a&gt; que se añadió en la API en Java 7 junto con el método &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html#getSuppressed()&#34;&gt;Throwable.getSuppressed()&lt;/a&gt; se obtienen las excepciones enmascaradas o suprimidas en la sentencia &lt;em&gt;try-with-resources&lt;/em&gt;. El orden de ejecución de los bloques de una sentencia &lt;em&gt;try-with-resources&lt;/em&gt; es el indicado en los números emitidos con el método &lt;em&gt;println&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9779dde2d563dcf7e8bb114f44966003.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/9779dde2d563dcf7e8bb114f44966003.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;La mayoría de clases relacionadas con entrada y salida implementan la interfaz &lt;em&gt;AutoCloseable&lt;/em&gt; como las relacionadas con el sistema de ficheros y flujos de red como &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html&#34;&gt;InputStream&lt;/a&gt;, también las relacionadas con la conexión de base de datos mediante JDBC con &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/sql/Connection.html&#34;&gt;Connection&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;The try-with-resources Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-exception-handling/try-with-resources.html&#34;&gt;Try-with-resources in Java 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/27033358&#34;&gt;What is a suppressed exception?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/la-controversia-sobre-las-excepciones-checked-y-unchecked/</id>
        <title>La controversia sobre las excepciones checked y unchecked</title>        
        <updated>2018-04-20T17:00:00+02:00</updated>
        <published>2018-04-20T17:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/la-controversia-sobre-las-excepciones-checked-y-unchecked/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son una forma de gestionar las condiciones de error que se dan en los programas. En el lenguaje C se utiliza el valor de retorno de la función para determinar la condición de error que se ha producido, el problema es que comprobar el valor de retorno puede ignorarse y la gestión de errores está mezclada con la tarea del programa.&lt;/p&gt;

&lt;p&gt;El lenguaje Java utiliza un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;mecanismo de excepciones&lt;/a&gt;, las excepciones son objetos que se lanzan cuando se produce una condición de error. Todas las excepciones en Java heredan de &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; subdividiéndose en &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Error.html&#34;&gt;Error&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Exception.html&#34;&gt;Exception&lt;/a&gt;, las primeras son condiciones de error del sistema y las segundas condiciones de error del programa. A su vez las &lt;em&gt;Exception&lt;/em&gt; pueden ser &lt;em&gt;checked&lt;/em&gt; si heredan de esta y son aquellas que el compilador fuerza a que sean capturadas no pudiendo ignorarse, han de capturarse en una construcción &lt;em&gt;try catch&lt;/em&gt; o declarar que el método puede lanzar la excepción no capturada. Las excepciones &lt;em&gt;uncheked&lt;/em&gt; heredan de &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/RuntimeException.html&#34;&gt;RuntimeException&lt;/a&gt; que heredan a su vez de &lt;em&gt;Exception&lt;/em&gt; pero tienen la particularidad de que no es necesario capturarlas ni declararlas como que se pueden lanzar debido a que se consideran condiciones de error en la programación como un acceso a un &lt;em&gt;array&lt;/em&gt; fuera de rango que produce un &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&#34;&gt;ArrayIndexOutOfBounds&lt;/a&gt;, el conocido &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerException&lt;/a&gt; cuando se utiliza una referencia nula, otro es &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/ArithmeticException.html&#34;&gt;ArithmeticException&lt;/a&gt; que se produce al dividir por 0.&lt;/p&gt;

&lt;p&gt;Algunas ventajas de las excepciones son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separar el código que gestiona los errores del código con el caso principal del programa.&lt;/li&gt;
&lt;li&gt;Propagar errores hacia arriba en la pila de llamadas.&lt;/li&gt;
&lt;li&gt;Agrupar y diferenciar entre diferentes tipos de errores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hay una cierta polémica sobre si las excepciones &lt;em&gt;checked&lt;/em&gt; son una buena idea. Entre los motivos que se alegan en contra de su uso están que cambiar la firma de un método añadiendo una nueva excepción como lanzable hace que el código que usase ese método podría ocasionar errores de compilación y que hace necesario el tratarla o declararla en la cadena de métodos hasta que sea tratada. Otro motivo es que a mayor nivel en la jerarquía de llamada en los métodos se necesitarán manejar una lista amplia de excepciones.&lt;/p&gt;

&lt;p&gt;En el lado contrario las excepciones se consideran que son buenas porque conocer las condiciones de error o excepción que puede lanzar el método forma parte del contrato del método y es necesario para realizar un correcto manejo de errores. Las excepciones &lt;em&gt;checked&lt;/em&gt; pueden parecer un incordio pero son necesarias para hacer un correcto manejo de errores y evitar que el programa falle por no tratar las condiciones de error de las que advertirían. Por otro lado no deberían silenciarse con un bloque &lt;em&gt;catch&lt;/em&gt; vacío sin una buena razón. En las excepciones &lt;em&gt;checked&lt;/em&gt; el compilador es capaz de advertir si alguna excepción no ha sido capturada o lanzada.&lt;/p&gt;

&lt;p&gt;Como regla general las excepciones &lt;em&gt;checked&lt;/em&gt; se usan cuando el programa es capaz de recuperarse del error y tratarlo adecuadamente, las &lt;em&gt;uncheked&lt;/em&gt; cuando se trata de un error de programación o no se puede hacer nada para recuperarse.&lt;/p&gt;

&lt;p&gt;En el siguiente código se observa como capturar, lanzar y declarar excepciones en las firmas de los métodos en Java en una construcción &lt;em&gt;try catch finally&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c0fc9936712783e76b22088e5b8f2b2e.js?file=Bank.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c0fc9936712783e76b22088e5b8f2b2e.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el aparatado referncia incluyo unos buenos enlaces que amplian y detallan más apropiadamente la controversia sobre las excepciones &lt;em&gt;checked&lt;/em&gt; y &lt;em&gt;unchecked&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html&#34;&gt;Exceptions tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html&#34;&gt;Advantages of Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/124143/why-are-exceptions-not-checked-in-net#126122&#34;&gt;Why are Exceptions not Checked in .NET?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.artima.com/intv/handcuffs.html&#34;&gt;The Trouble with Checked Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/</id>
        <title>Prompt de la terminal personalizado en carpetas de git con el intérprete Bash</title>        
        <updated>2018-04-14T00:30:00+02:00</updated>
        <published>2018-04-14T00:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;GNU&#34; title=&#34;GNU&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Uno de los sistemas de control de versiones más utilizado es &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;. &lt;a href=&#34;https://es.wikipedia.org/wiki/Bash&#34;&gt;Bash&lt;/a&gt; es el intérprete de comandos por defecto en la mayoría de distribuciones &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. A la hora de trabajar en la terminal y estando como directorio actual en un directorio que está bajo el control de versiones de git bash por defecto no muestra ninguna información del estado de los archivos en su repositorio en el símbolo del sistema o &lt;em&gt;prompt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El intérprete &lt;a href=&#34;http://zsh.sourceforge.net/&#34;&gt;Zsh&lt;/a&gt; y &lt;a href=&#34;http://ohmyz.sh/&#34;&gt;Oh-My-Zsh&lt;/a&gt; ofrece mediante sus temas soporte para los repositorios de git modificando el símbolo del sistema para mostrar más información acerca del estado. En Bash también es posible añadir soporte para que muestre información como la rama actual en la que se está trabajando, si hay archivos modificados o no añadidos al control de versiones, si hay archivos en el &lt;em&gt;stash&lt;/em&gt; y una comparación entre la rama actual y la del origen o &lt;em&gt;upstream&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
  
  
  
  
  
  

  
  
  

  
  
  



  
  
  
  
  
  

  
  
  

  
  
  













&lt;figure&gt;
    
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/terminal_hu6d4cd90f7258a5b4f3fa9ff1cd70710c_8935_2560x1440_fit_box_2.png&#34; title=&#34;Prompt de la terminal por defecto&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/terminal_hu6d4cd90f7258a5b4f3fa9ff1cd70710c_8935_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;191&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_2560x1440_fit_box_2.png&#34; title=&#34;Prompt de la terminal en carpeta git&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2018/04/prompt-de-la-terminal-personalizado-en-carpetas-de-git-con-el-interprete-bash/images/git-bash_hu4332dbb3d900d0136c532c59777fc2b2_50870_300x200_fit_box_2.png&#34; width=&#34;300&#34; height=&#34;191&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Prompt de la terminal por defecto y en carpeta de git&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;* la presencia de este caracter indica que hay cambios en alguno de los archivos bajo el control de versiones.&lt;/li&gt;
&lt;li&gt;+ indica que hay archivos añadidos al &lt;em&gt;stash&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;=&lt;/em&gt; indica que la rama está en el mismo estado que en &lt;em&gt;upstream&lt;/em&gt;, en su lugar puede mostrarse el caracter &lt;em&gt;&amp;gt;&lt;/em&gt; para indicar que la rama en local está por delante de la rama en remoto o mostrarse &lt;em&gt;&amp;lt;&lt;/em&gt; para lo contrario.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El &lt;em&gt;script&lt;/em&gt; necesario para añadir el soporte a repositorios git en Bash es &lt;a href=&#34;https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh&#34;&gt;git-prompt.sh&lt;/a&gt;. Una vez descargado su funcionalidad se personaliza con varias variables de entorno tal y como está documentado en el comentario al inicio de este &lt;em&gt;script&lt;/em&gt; que se añaden en el archivo de perfil del usuario de inicio &lt;em&gt;.bashrc&lt;/em&gt;. Añadidas unas variables de entorno que empiezan por &lt;em&gt;GIT_PS1&lt;/em&gt; y hecho el &lt;em&gt;source&lt;/em&gt; del script junto con la utilización de la variable &lt;em&gt;PROMPT_COMMAND&lt;/em&gt; en lugar de &lt;em&gt;PS1&lt;/em&gt; para posibilitar la información de estado con colores al estar en un directorio git se muestra el &lt;em&gt;prompt&lt;/em&gt; del ejemplo anterior.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/31f86e3c7593a50b012e1296eb458be9.js?file=install.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este es el archivo &lt;em&gt;.bashrc&lt;/em&gt; completo de la distribución &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; con el soporte para el &lt;em&gt;script&lt;/em&gt; &lt;em&gt;git-prompt.sh&lt;/em&gt; y algunas opciones personalizadas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/31f86e3c7593a50b012e1296eb458be9.js?file=.bashrc&#34;&gt;&lt;/script&gt;

&lt;p&gt;La documentación completa con todas las opciones de personalización están en las primeras líneas de comentario del &lt;em&gt;script&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2018/04/personalizar-el-prompt-del-sistema-del-interprete-de-comandos-bash/&#34;&gt;Personalizar el prompt del sistema del intérprete de comandos Bash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/04/introduccion-a-nio-2-el-sistema-de-entrada-salida-de-java/</id>
        <title>Introducción a NIO.2, el sistema de entrada/salida de Java</title>        
        <updated>2018-04-07T14:00:00+02:00</updated>
        <published>2018-04-07T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/04/introduccion-a-nio-2-el-sistema-de-entrada-salida-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Una de las tareas más importante que realizan algunas aplicaciones es el manejo de la entrada y salida ya sea al sistema de ficheros o a la red. Desde las versiones iniciales de Java se ha mejorado soporte añadiendo programación asíncrona de E/S, permitir obtener información de atributos propios del sistema de archivos, reconocimiento de enlaces simbólicos y facilitado de algunas operaciones básicas.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En las primeras versiones de Java el sistema de entrada/salida proporcionado en el paquete &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/io/package-summary.html&#34;&gt;&lt;em&gt;java.io&lt;/em&gt;&lt;/a&gt; era básico. En la versión 1.4 de Java se añadió un nuevo sistema de entrada/salida llamado NIO para suplir algunas de sus deficiencias que posteriormente en Java 7 se mejoró aún más con NIO.2. Entre las mejoras se incluyen permitir navegación de directorios sencillo, soporte para reconocer enlaces simbólicos, leer atributos de ficheros como permisos e información como última fecha de modificación, soporte de entrada/salida asíncrona y soporte para operaciones básicas sobre ficheros como copiar y mover ficheros.&lt;/p&gt;

&lt;p&gt;Las clases principales de esta nueva API para el manejo de rutas, ficheros y operaciones de entrada/salida son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html&#34;&gt;Path&lt;/a&gt;: es una abstracción sobre una ruta de un sistema de ficheros. No tiene porque existir en el sistema de ficheros pero si si cuando se hacen algunas operaciones como la lectura del fichero que representa. Puede usarse como reemplazo completo de &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/io/File.html&#34;&gt;java.io.File&lt;/a&gt; pero si fuera necesario con los métodos &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/io/File.html#toPath()&#34;&gt;File.toPath()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#toFile()&#34;&gt;Path.toFile()&lt;/a&gt; se ofrece compatibilidad entre ambas representaciones.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html&#34;&gt;Files&lt;/a&gt;: es una clase de utilidad con operaciones básicas sobre ficheros.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/FileSystems.html&#34;&gt;FileSystems&lt;/a&gt;: otra clase de utilidad como punto de entrada para obtener referencias a sistemas de archivos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con la clase &lt;em&gt;Path&lt;/em&gt; se pueden hacer operaciones sobre rutas como obtener la ruta absoluta de un &lt;em&gt;Path&lt;/em&gt; relativo o el &lt;em&gt;Path&lt;/em&gt; relativo de una ruta absoluta, de cuanto elementos se compone la ruta, obtener el &lt;em&gt;Path&lt;/em&gt; padre o una parte de una ruta. Otros métodos interesantes son &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#relativize(java.nio.file.Path)&#34;&gt;relativize()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#normalize()&#34;&gt;normalize()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#toAbsolutePath()&#34;&gt;toAbsolutePath()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#resolve(java.nio.file.Path)&#34;&gt;resolve()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#startsWith(java.nio.file.Path)&#34;&gt;startsWith()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html#endsWith(java.nio.file.Path)&#34;&gt;endsWith()&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-1.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=info.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Utilizando estas clases expondré algunos ejemplos siendo el primero recorrer el listado de archivos o también se podría hacer el listado de forma recursiva de un directorio e imprimir la información de cada archivo como nombre, si es un enlace simbólico, permisos propietario, fecha de última modificación y tamaño utilizando los siguiente métodos similar a lo que hace el comando &lt;em&gt;ls&lt;/em&gt; de GNU/Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)&#34;&gt;Files.walkFileTree()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#isSymbolicLink(java.nio.file.Path)&#34;&gt;Files.isSymbolicLink()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)&#34;&gt;Files.readAttributes()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/attribute/PosixFilePermissions.html&#34;&gt;PosixFilePermissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/FileVisitor.html&#34;&gt;FileVisitor&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/SimpleFileVisitor.html&#34;&gt;SimpleFileVisitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Al igual que es posible leer los permisos también es posible establecerlos con el método &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#setPosixFilePermissions(java.nio.file.Path,java.util.Set)&#34;&gt;Files.setPosixFilePermissions()&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-2.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=ls.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las operaciones de crear directorios o archivos, copiar archivos, moverlos y eliminarlos son muy comunes de modo que la clase &lt;em&gt;Files&lt;/em&gt; ofrece varios métodos que con una única línea permite hacer estas operaciones de forma sencilla. El siguiente ejemplo crea un archivo, lo copia, lo mueve y finalmente lo elimina.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-3.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para leer el contenido de archivos la clase &lt;em&gt;Files&lt;/em&gt; ofrece los métodos &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path)&#34;&gt;newBufferedReader()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)&#34;&gt;newBufferedWrite()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)&#34;&gt;newInputStream()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)&#34;&gt;newOutputStream()&lt;/a&gt; junto con otros como &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAllLines(java.nio.file.Path,java.nio.charset.Charset)&#34;&gt;readAllLines()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html#readAllBytes(java.nio.file.Path)&#34;&gt;readAllBytes()&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-4.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En cuanto a la programación de entrada/salida asíncrona se ofrecen dos paradigmas uno basado en la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Future.html&#34;&gt;Future&lt;/a&gt; y otro en funciones de rellamada o &lt;em&gt;callbacks&lt;/em&gt;. La programación asíncrona evita bloquear el hilo que ejecuta el código y aprovecha mejor los procesadores multinúcleo con lo que se mejora el rendimiento de las aplicaciones. Para los ficheros se usa la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/channels/AsynchronousFileChannel.html&#34;&gt;AsynchronousFileChannel&lt;/a&gt; y para flujos de red &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/channels/AsynchronousSocketChannel.html&#34;&gt;AsynchronousSocketChannel&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-5.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3bb11076a051490963a68625b9c1b388.js?file=Main-6.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si se desea profundizar más en NIO y NIO.2 el libro &lt;a href=&#34;https://amzn.to/2JsEIao&#34;&gt;The Well-Grounded Java Developer&lt;/a&gt; dedica un capítulo introductorio en el que me he basado para realizar este artículo, el libro &lt;a href=&#34;https://amzn.to/2q7qMdN&#34;&gt;Java I/O, NIO and NIO.2&lt;/a&gt; está completamente dedicado al nuevo sistema de entrada/salida de Java y el tutorial &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/io/index.html&#34;&gt;Java Basic I/O&lt;/a&gt; también está muy bien como introducción.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617290068&amp;linkId=61507308185711a0af4b5ed5ab70b62b&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484215664&amp;linkId=d748ea086bd02aa68dd0b27945514558&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/&#34;&gt;monitorizar archivos con Java&lt;/a&gt; muestro como recibir eventos cuando se añade, elimina o modifica algún archivo de los observados usando la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/nio/file/WatchService.html&#34;&gt;WatchService&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaNIO&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2016/Twitter#&amp;amp;pageSet=0&amp;amp;page=0&amp;amp;contentItem=0&#34;&gt;Artículo NIO.2, Java Magazine Jul/Ago 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/que-es-y-como-funciona-el-type-erasure-en-java/</id>
        <title>Qué es y cómo funciona el type erasure en Java</title>        
        <updated>2018-03-31T10:30:00+02:00</updated>
        <published>2018-03-31T10:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/03/que-es-y-como-funciona-el-type-erasure-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Los tipos genéricos en Java se implementaron usando &lt;em&gt;type erasure&lt;/em&gt; por simplicidad en la implementación, no incurrir en penalizaciones de rendimiento o memoria y por mantener la compatibilidad con versiones anteriores de Java. Son varios los conceptos que están asociados a la implementación de los tipos genéricos en Java que es recomendable conocer como &lt;em&gt;type erasure&lt;/em&gt;  y métodos &lt;em&gt;bridge&lt;/em&gt; de este artículo pero también &lt;em&gt;heap pollution&lt;/em&gt;, &lt;em&gt;non-reifiable&lt;/em&gt;, &lt;em&gt;wildcards&lt;/em&gt; y &lt;em&gt;bound type parameters&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En la introducción de los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/&#34;&gt;tipos genéricos en Java&lt;/a&gt; con la versión 1.5 se decidió implementarlo usando &lt;em&gt;type erasuse&lt;/em&gt; que consiste en que en tiempo de ejecución se pierde la información de los tipos genéricos y para la máquina virtual no son distintos de un tipo no genérico, es un proceso que realiza el compilador. Esto tiene sus ventajas y algunas desventajas pero hay dos buenos motivos por los que en Java se decidió implementar los tipos genéricos usando &lt;em&gt;type erasuse&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Un motivo es que los tipos al ser en tiempo de ejecución exactamente iguales que los no genéricos de versiones anteriores se mantiene la compatibilidad hacia atrás tanto a nivel de código como a nivel binario lo que significa en un caso que el código fuente no es necesario que sea modificado y en otro que no es necesario recompilarlo y esto es importante para usar nuevas versiones de Java sin ningún tipo de modificación y para que programas antiguos sigan funcionando. El segundo motivo es que el mismo tipo sirve para todas las posibles instancias del tipo genérico, de forma que es eficiente y no se incurre en ninguna penalización de rendimiento o memoria.&lt;/p&gt;

&lt;p&gt;La desventaja del &lt;em&gt;type erasure&lt;/em&gt; es que en tiempo de ejecución no se pueden hacer algunas optimizaciones, en computación y uso de memoria. Sin embargo, evaluando las ventajas y desventajas los desarrolladores de Java siempre han dado gran importancia en la compatibilidad hacia atrás y por ello prefirieron implementar los &lt;em&gt;generics&lt;/em&gt; usando &lt;em&gt;type erasure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El proceso de eliminar los tipos de los genéricos se realiza eliminando todos los parámetros de los tipos parametrizados siendo reemplazados con su restricción (&lt;em&gt;bound&lt;/em&gt;), con el tipo &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html&#34;&gt;Object&lt;/a&gt; o con con su restricción, si tiene múltiples restricciones se usa la primera.&lt;/p&gt;

&lt;p&gt;En Java dos métodos distintos no pueden tener la misma firma, dado que los &lt;em&gt;generics&lt;/em&gt; han sido implementados con &lt;em&gt;type erasure&lt;/em&gt; también se ha de cumplir que dos métodos no pueden tener la misma firma una vez aplicado el &lt;em&gt;erasure&lt;/em&gt;. Para no perder las validaciones de tipos el compilador inserta los &lt;em&gt;cast&lt;/em&gt; necesarios. El código fuente de una clase genérica sería el siguiente, que el compilador transformaría siguiendo las reglas del &lt;em&gt;type erasure&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/fe9adde28f19c10787720a7db6a4a840.js?file=Generic.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/fe9adde28f19c10787720a7db6a4a840.js?file=Erased.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Al mismo tiempo que el compilador inserta los &lt;em&gt;cast&lt;/em&gt; necesarios para mantener la validación de tipos inserta métodos &lt;em&gt;bridge&lt;/em&gt; para mantener el polimorfismo en las clases que extienden de tipos genéricos. Si se extiende la clase &lt;em&gt;Node&lt;/em&gt; anterior y se aplica &lt;em&gt;type erasure&lt;/em&gt; la firma del método &lt;em&gt;setData&lt;/em&gt; de &lt;em&gt;IntegerNode&lt;/em&gt; no coincide con el de la clase &lt;em&gt;Node&lt;/em&gt;. Para solventar este problema el compilador inserta un método &lt;em&gt;bridge&lt;/em&gt; para el método &lt;em&gt;setData&lt;/em&gt; con un parámetro &lt;em&gt;Object&lt;/em&gt; que se encarga de hacer de puente y llamar al método &lt;em&gt;setData&lt;/em&gt; que recibe un &lt;em&gt;Integer&lt;/em&gt; aplicando un &lt;em&gt;cast&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/generics/erasure.html&#34;&gt;Type Erasure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/que-es-el-concepto-de-heap-pollution-en-java/&#34;&gt;Qué es el concepto de Heap Pollution en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-pros-and-cons-of-having-Generics-as-erasure-or-reifiable?share=1&#34;&gt;What are the pros and cons of having Generics as erasure or reifiable?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/la-herramienta-jlink-para-generar-runtimes-de-java-incluyendo-exclusivamente-los-modulos-que-usa-una-aplicacion/</id>
        <title>La herramienta jlink para generar runtimes de Java incluyendo exclusivamente los módulos que usa una aplicación</title>        
        <updated>2018-03-24T23:30:00+01:00</updated>
        <published>2018-03-24T23:30:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/03/la-herramienta-jlink-para-generar-runtimes-de-java-incluyendo-exclusivamente-los-modulos-que-usa-una-aplicacion/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En versiones anteriores de Java 9 había un único &lt;em&gt;runtime&lt;/em&gt; para ejecutar cualquier aplicación que debía ser instalado previamente para la ejecución de la aplicación. Aunque la aplicación no usase &lt;em&gt;Swing&lt;/em&gt; por ser una aplicación web o cosas como &lt;a href=&#34;https://es.wikipedia.org/wiki/CORBA&#34;&gt;CORBA&lt;/a&gt; ya en desuso aún estaban disponibles en el &lt;em&gt;runtime&lt;/em&gt; por motivos de no romper la compatibilidad con versiones anteriores.&lt;/p&gt;

&lt;p&gt;Esto hacía que las aplicaciones no fuesen lo más eficiente posible y aumenta el tamaño necesario ahora de las imágenes de contenedores como &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; estas tuviesen un tamaño mayor del imprescindible, además de hacer que el tiempo de arranque sea algo mayor e incluir clases que aumentan la superficie de ataque ante un fallo de seguridad. Entre las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades de Java 8&lt;/a&gt; se añadieron los &lt;a href=&#34;http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html&#34;&gt;&lt;em&gt;compact profiles&lt;/em&gt;&lt;/a&gt; que eran subconjuntos más reducidos del &lt;em&gt;runtime&lt;/em&gt; pero eran conjuntos prefijados, las aplicaciones debían usar el mínimo que necesitasen si querían usar alguno. La solución de Java 8 fue una solución intermedia, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;los módulos de Java 9&lt;/a&gt; han sido la solución completa.&lt;/p&gt;

&lt;p&gt;Con la incorporación de la modularidad a Java 9 se posibilita generar &lt;em&gt;runtimes&lt;/em&gt; con exclusivamente los módulos que necesite la aplicación, si la aplicación solo necesita el módulo &lt;em&gt;java.base&lt;/em&gt; por ser muy sencilla se puede generar un &lt;em&gt;runtime&lt;/em&gt; con solo este módulo. Los módulos son una mejora conveniente para la tendencia en el desarrollo de aplicaciones en forma de microservicios y ejecución con contenedores. La herramienta que posibilita generar &lt;em&gt;runtimes&lt;/em&gt; personalizados con &lt;a href=&#34;https://docs.oracle.com/javase/9/tools/jlink.htm&#34;&gt;jlink&lt;/a&gt; que pueden ser ejecutandos sin instalar previamente ningún JDK en el sistema y posibilitando que cada aplicación pueda usar su propio &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Usando como ejemplo el caso de la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/&#34;&gt;aplicación con el cliente de HTTP/2&lt;/a&gt; que tiene como dependencias únicamente el módulo &lt;em&gt;jdk.incubator.httpclient&lt;/em&gt; de forma explícita y &lt;em&gt;java.base&lt;/em&gt; de forma implícita en su definición de módulo la forma de generar un runtime específico para esta aplicación con &lt;em&gt;jlink&lt;/em&gt; es la siguiente que utiliza el archivo con las dependencias de módulos declarados en el archivo &lt;em&gt;module-info.java&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2e113967c3823da21308e8f2a9adbd4f.js?file=module-info.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando la linea de comandos o con una tarea de &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; se genera el &lt;em&gt;runtime&lt;/em&gt; para la aplicación con &lt;em&gt;jlink&lt;/em&gt;. El módulo ha de compilarse previamente. Con la opción &lt;em&gt;&amp;ndash;launcher&lt;/em&gt; se crea un &lt;em&gt;script&lt;/em&gt; para lanzar la aplicación con la clase que contiene el método &lt;em&gt;main&lt;/em&gt; indicada como punto de entrada, la opción &lt;em&gt;&amp;ndash;output&lt;/em&gt; indica donde se genera el contenido del &lt;em&gt;runtime&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2e113967c3823da21308e8f2a9adbd4f.js?file=jlink.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El espacio total del &lt;em&gt;runtime&lt;/em&gt; en este caso de es de solo 38 MiB. Comparados con los casi 200 MiB que ocupa el &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; comprimido que incluye todos los módulos, aproximadamente 500 MiB instalado y alrededor de entre 600 y 900 MiB dependiendo de la imagen base de Docker que se use se aprecia que el ahorro de espacio es considerable lo que redunda en tiempos de transferencia por red menores y un inicio más rápido de las aplicaciones.&lt;/p&gt;

&lt;p&gt;El contenido del &lt;em&gt;runtime&lt;/em&gt; y de su estructura de directorios es la indicada a continuación. Listando los módulos incluidos en este &lt;em&gt;runtime&lt;/em&gt; en vez de todos los del JDK se observa que solo están incluidos los necesarios por la aplicación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2e113967c3823da21308e8f2a9adbd4f.js?file=info.sh&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2e113967c3823da21308e8f2a9adbd4f.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez generado el &lt;em&gt;runtime&lt;/em&gt; su uso es el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2e113967c3823da21308e8f2a9adbd4f.js?file=run.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el vídeo &lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html?bcid=5582437011001&amp;amp;playerType=single-social&amp;amp;size=events&#34;&gt;Java in a World of Containers&lt;/a&gt; se comenta otra serie de características y opciones incluidas en Java para hacer de esta plataforma más consciente de las condiciones de ejecución propias de los contenedores.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradew jlink&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/novedades-de-java-10/</id>
        <title>Novedades de Java 10</title>        
        <updated>2018-03-27T17:00:00+01:00</updated>
        <published>2018-03-23T20:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/03/novedades-de-java-10/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Oracle y los ingenieros a cargo del desarrollo de Java están haciendo en mi opinión un buen trabajo que se han materializado en las versiones Java 8 con las &lt;em&gt;lambdas&lt;/em&gt;, en Java 9 con los módulos y en Java 10 con la mejora en la inferencia de tipos. Todo ello está haciendo que la plataforma evolucione más rápido y significativamente que lo que hasta hace unos años estábamos acostumbrados.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El 20 de marzo de 2018 se publicó la que es la versión 10 de Java siguiendo el nuevo calendario de publicar una nueva versión cada seis meses, Java 9 fue publicado en septiembre del año anterior. Con este nuevo calendario no pasarán tantos años entre cada nueva versión que era la queja de algunos desarrolladores y el motivo de que la plataforma Java no evolucionar tan rápidamente como algunos desarrolladores desean, quizá ahora la queja sea al contrario que se publican demasiadas versiones y no da tiempo a asimilar los cambios. Para dar cabida a ambas necesidades y garantizar un soporte prolongado cada año y medio será declarada una versión como de soporte a plazo largo o &lt;em&gt;LTS&lt;/em&gt; para que las empresas tengan seguridad en las aplicaciones que desarrollen.&lt;/p&gt;

&lt;p&gt;Lo mejor de este nuevo calendario de publicaciones cada seis meses es que las empresas y programadores tienen predictibilidad de cuándo se lanzará la siguiente versión aunque las nuevas características que tenga no está predeterminado ya no pasarán varios años entre versiones visibilizando que la plataforma evoluciona continuamente en pequeños saltos cada poco tiempo en vez de saltos grandes cada mucho tiempo que son más disruptivos y hace más difícil la adopción.&lt;/p&gt;

&lt;p&gt;Es un principio no añadir características según lo que está de moda sino pensando en décadas futuras. Java 10 tiene una lista más reducida de cambios que Java 9 pero importantes y significativos. Java es el último en unirse a la fiesta de la inferencia de tipos pero ha sido de forma intencionada ya que el coste de implementarla de forma incorrecta supone un alto coste que hay que mantener en adelante. Otras ideas que ha sido implementadas el lenguajes de programación funcional y están listas para su uso masivo tomarán su propio camino en futuras versiones de Java por ejemplo &lt;em&gt;pattern matching&lt;/em&gt; y &lt;em&gt;value types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La lista más relevante de novedades de Java 10 es la siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;286: &lt;a href=&#34;http://openjdk.java.net/jeps/286&#34;&gt;Local-Variable Type Inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;296: &lt;a href=&#34;http://openjdk.java.net/jeps/296&#34;&gt;Consolidate the JDK Forest into a Single Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;304: &lt;a href=&#34;http://openjdk.java.net/jeps/304&#34;&gt;Garbage-Collector Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;307: &lt;a href=&#34;http://openjdk.java.net/jeps/307&#34;&gt;Parallel Full GC for G1&lt;/a&gt;, se ha mejorado el recolector de basura G1 añadiendo soporte para paralelismo y mejorado las pausas en los peores escenarios.&lt;/li&gt;
&lt;li&gt;310: &lt;a href=&#34;http://openjdk.java.net/jeps/310&#34;&gt;Application Class-Data Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;312: &lt;a href=&#34;http://openjdk.java.net/jeps/312&#34;&gt;Thread-Local Handshakes&lt;/a&gt;, mejora interna en la sincronización y pausas en los &lt;em&gt;threads&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;313: &lt;a href=&#34;http://openjdk.java.net/jeps/313&#34;&gt;Remove the Native-Header Generation Tool (javah)&lt;/a&gt;, se elimina la funcionalidad de &lt;em&gt;javah&lt;/em&gt; al haber sido sustituida y mejorada por funcionalidad añadida en &lt;em&gt;javac&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;314: &lt;a href=&#34;http://openjdk.java.net/jeps/314&#34;&gt;Additional Unicode Language-Tag Extensions&lt;/a&gt;, se añade alguna nueva extensión de Unicode.&lt;/li&gt;
&lt;li&gt;316: &lt;a href=&#34;http://openjdk.java.net/jeps/316&#34;&gt;Heap Allocation on Alternative Memory Devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;317: &lt;a href=&#34;http://openjdk.java.net/jeps/317&#34;&gt;Experimental Java-Based JIT Compiler&lt;/a&gt;, se añade en forma experimental el compilador JIT Graal implementado en Java en la plataforma Linux.&lt;/li&gt;
&lt;li&gt;319: &lt;a href=&#34;http://openjdk.java.net/jeps/319&#34;&gt;Root Certificates&lt;/a&gt;, se han añadido varios certificados raíz al &lt;em&gt;keystore&lt;/em&gt; incluído para permitir que las conexiones TLS funcionen por defecto.&lt;/li&gt;
&lt;li&gt;322: &lt;a href=&#34;http://openjdk.java.net/jeps/322&#34;&gt;Time-Based Release Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;inferencia-de-tipos-para-variables-locales&#34;&gt;Inferencia de tipos para variables locales&lt;/h3&gt;

&lt;p&gt;De las novedades la inferencia de tipos para variables locales es la más destacada en cuanto a cambios en el lenguaje con la adición de la nueva palabra reservada &lt;em&gt;var&lt;/em&gt;, esto ayuda a no tener que repetir varias veces los tipos en la construcción de un objeto. En las &lt;em&gt;lambdas&lt;/em&gt; los parámetros no es necesario declararlos infiriéndose de la interfaz que implementan. La inferencia de tipos es la idea que permite al compilador obtener el tipo estático sin que sea necesario escribirlo de forma explícita.&lt;/p&gt;

&lt;p&gt;Java no es el único o primer lenguaje en incluir la inferencia de tipos para variables. Ha sido usado en otros lenguajes durante décadas. En realidad la inferencia de tipos incluida en Java 10 con &lt;em&gt;var&lt;/em&gt; es muy limitada y restringida de manera intencionada. Si no fuese así el &lt;a href=&#34;https://en.wikipedia.org/wiki/Hindley-Milner_type_system&#34;&gt;algoritmo Hindley-Milner&lt;/a&gt; usado para la inferencia de tipos usado en la mayoría de lenguajes que toma un tiempo exponencial en el peor de los casos potencialmente disminuiría la velocidad de &lt;em&gt;javac&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La inferencia de tipos para variables locales hace que el código no sea tan verboso sin perder en gran medida la legibilidad ya que solo es para las variables locales. El siguiente ejemplo muestra la evolución de la inferencia de tipos desde Java 5 pasando por Java 8 donde se incluyeron algunas mejoras y el que puede utilizarse a partir de Java 10.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4ff7ac7eecda8504ee0834593d70929.js?file=JavaTypeInference.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Los tipos en la parte izquierda pueden parecer redundantes y obvios. Tradicionalmente la filosofía de Java es declarar de forma estática los tipos para todo incluyendo las expresiones más simples. Ciertamente definir los tipos para propiedades y en las firmas de los métodos impone un contrato que es necesario respetar y esto ayuda en el mantenimiento asi como a su entendimiento. Sin embargo, declarar los tipos para expresiones intermedias puede parecer menos útil e incómodo.&lt;/p&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;https://developer.oracle.com/java/jdk-10-local-variable-type-inference&#34;&gt;Java 10 Local Variable Type Inference&lt;/a&gt; y vídeo de Youtube &lt;a href=&#34;https://www.youtube.com/watch?v=Le1DbpRZdRQ&#34;&gt;First contact with &amp;lsquo;var&amp;rsquo; in Java 10&lt;/a&gt; hay una explicación más detallada de esta nueva característica y se aprecia claramente en los siguientes ejemplos que muestran la evolución de la inferencia de tipos.&lt;/p&gt;

&lt;p&gt;No solo hay una mejora de legibilidad aquí, también hay una ventaja en términos de evolución y mantenimiento de código. Si tomamos el mismo código con tipos explícitos para la variable &lt;em&gt;userChannels&lt;/em&gt; y reemplazamos el tipo del canal representado con un &lt;em&gt;String&lt;/em&gt; con un objeto de dominio &lt;em&gt;Channel&lt;/em&gt; que pudiese tener información adicional acerca del canal entonces necesitaríamos reescribir los tipos de todo el código que dependa de este nuevo tipo.&lt;/p&gt;

&lt;p&gt;La inferencia de tipos definitivamente reduce la cantidad de tiempo para escribir código Java pero mejor es la mejora en legibilidad del código. Los desarrolladores dedican mucho más tiempo a leer código fuente que el que dedican a escribirlo de manera que definitivamente hay que optimizar para la facilidad de lectura sobre la facilidad de escritura. Aunque &lt;em&gt;var&lt;/em&gt; no siempre es una mejora en cuanto a legibilidad ya que se pierde la información del tipo su uso se guía por el principio de no tanto para optimizar la escritura o lectura sino generalizando más para la facilidad de mantenimiento, escribir algunos tipos genéricos no triviales es complicado aún con la ayuda de asistencia de un entorno integrado de desarrollo.&lt;/p&gt;

&lt;p&gt;No está permitido en retornos, parámetros, propiedades, variables sin inicializar, ni asignar &lt;em&gt;null&lt;/em&gt; pero en Java 11 el uso de &lt;em&gt;var&lt;/em&gt; se permitirá en los parámetros de una expresión &lt;em&gt;lambda&lt;/em&gt; que será útil porque permite un parámetro formal cuyo tipo es inferido pero que además en el que se pueden usar anotaciones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4ff7ac7eecda8504ee0834593d70929.js?file=JavaLambdaVarAnnotation.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con la inferencia de tipos los nombres de las variables cobran mayor importancia dado que &lt;em&gt;var&lt;/em&gt; elimina la posibilidad al lector del código adivinar la intención de una variable a partir del tipo. Ya es difícil asignar nombres adecuados ahora supondrá mayor importancia.&lt;/p&gt;

&lt;p&gt;El tipo en las variables locales no es tan importante ya que normalmente los nombres de las variables son el del tipo. Con &lt;em&gt;var&lt;/em&gt; se evita repetición entre el tipo y el nombre de la variable, la brevedad de &lt;em&gt;var&lt;/em&gt; hace destacar el nombre de la variable y proporciona mayor claridad además de tener que escribir menos código repetitivo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4ff7ac7eecda8504ee0834593d70929.js?file=NamesAlign.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con &lt;em&gt;var&lt;/em&gt; se evita la longitud variable de los tipos y la no alineación de los nombres de las variables, permite quitar los nombres largos de algunos tipos que son comunes en las aplicaciones empresariales como cosas como &lt;em&gt;DefaultListenerFactory&lt;/em&gt; con vocablos que se van añadiendo uno detras de otro hasta formar un largo nombre.&lt;/p&gt;

&lt;p&gt;Utilizar &lt;em&gt;var&lt;/em&gt; no tiene por que suponer una perdida de legibilidad del código, un buen nombre de variable da más información que el tipo. Por ejemplo, &lt;em&gt;List&amp;lt;User&amp;gt;&lt;/em&gt; parece ser una lista de usuarios, utilizando el nombre de la variable &lt;em&gt;admins&lt;/em&gt; obtendríamos que son una parte más concreta de usuarios en el contexto local en el que se está usando. Por lo que no tener el tipo no es dramático si es suplido con un buen nombre de variable que capture su contenido correctamente.&lt;/p&gt;

&lt;p&gt;La palabra reservada &lt;em&gt;var&lt;/em&gt; no hace de Java un lenguaje dinámico, sigue siendo estático y fuertemente tipado. Solo que ahora los tipos no hace falta declararlos explícitamente y es el compilador el que se encarga de inferirlos según el contexto. En tiempo de ejecución nada cambia, el rendimiento sigue siendo el mismo y solo es una característica en tiempo de compilación.&lt;/p&gt;

&lt;p&gt;La existencia de &lt;em&gt;var&lt;/em&gt; no significa que haya de usarse de forma indiscriminada para todas las variables locales sino juiciosamente. En este caso quizá es preferible declarar el tipo por no ser obvio lo que retorna el método &lt;em&gt;getCities()&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4ff7ac7eecda8504ee0834593d70929.js?file=TypeVsVar.java&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/amber/LVTIstyle.html&#34;&gt;Style Guidelines for Local Variable Type Inference in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los entornos integrados de desarrollo tardarán un tiempo en implementar la inferencia de tipos para variables locales hasta que lancen nuevas versiones.&lt;/p&gt;

&lt;h3 id=&#34;otras-novedades&#34;&gt;Otras novedades&lt;/h3&gt;

&lt;p&gt;El tiempo para iniciar el interprete REPL de &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell&lt;/a&gt; ha sido reducido significativamente especialmente en casos donde se inicia con un archivo que incluye varios &lt;em&gt;snippets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se han añadido mejoras en la herramienta de documentación de las clases Javadoc como soporte para varias hojas de estilo, agrupar métodos redefinidos que no cambian la especificación o nueva etiqueta &lt;em&gt;summary&lt;/em&gt; como resumen de la API.&lt;/p&gt;

&lt;p&gt;Se han añadido varios métodos para crear copias no modificables con &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/List.html#copyOf(java.util.Collection)&#34;&gt;List.copyOf()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Set.html#copyOf(java.util.Collection)&#34;&gt;Set.copyOf()&lt;/a&gt;, and &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Map.html#copyOf(java.util.Map)&#34;&gt;Map.copyOf()&lt;/a&gt;. Se han añadido nuevos métodos a la clase &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html&#34;&gt;Collectors&lt;/a&gt; para devolver una lista no modificable con &lt;em&gt;toUnmodifiableList&lt;/em&gt;, &lt;em&gt;toUnmodifiableSet&lt;/em&gt;, and &lt;em&gt;toUnmodifiableMap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se añade el método &lt;a href=&#34;https://docs.oracle.com/javase/10/docs/api/java/util/Optional.html#orElseThrow()&#34;&gt;Optional.orElseThrow()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Algunas &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html#Removed&#34;&gt;otras características ya obsoletas se han eliminado&lt;/a&gt; y &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html#Deprecated&#34;&gt;otras se han marcado como &lt;em&gt;deprecated&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;el-posible-futuro-jdk-11&#34;&gt;El posible futuro JDK 11+&lt;/h3&gt;

&lt;p&gt;Está planificado en seis meses después de Java 10 y con soporte extendido, el soporte de Java 10 durará tan solo hasta 2018.09, el de Java 11 al ser una &lt;em&gt;LTS&lt;/em&gt; durará un periodo de 8 años hasta el 2026.09.&lt;/p&gt;

&lt;p&gt;En el nuevo modelo las nuevas características no se añaden hasta que están preparadas. Tentativamente las &lt;a href=&#34;http://openjdk.java.net/projects/jdk/11/&#34;&gt;características de JDK 11&lt;/a&gt; no están completamente determinadas pero se están evaluando grandes proyectos como &lt;a href=&#34;http://openjdk.java.net/projects/valhalla/&#34;&gt;Valhalla&lt;/a&gt; para hacer más eficiente el tratamiento de datos que no requieran la indentidad de objetos con los denominados &lt;a href=&#34;http://openjdk.java.net/jeps/169&#34;&gt;Value Types&lt;/a&gt; útil para la programación funcional con datos puros optimizados para computaciones en paralelo. El proyecto &lt;a href=&#34;http://openjdk.java.net/projects/loom/&#34;&gt;Loom&lt;/a&gt; que posibilita una versión más ligera aún que los &lt;em&gt;threads&lt;/em&gt; o hilos con &lt;em&gt;fibers&lt;/em&gt; o fibras, &lt;em&gt;continuations&lt;/em&gt; o &lt;em&gt;coroutine&lt;/em&gt; y &lt;a href=&#34;https://en.wikipedia.org/wiki/Tail_call&#34;&gt;Tail Call&lt;/a&gt;. El proyecto &lt;a href=&#34;http://openjdk.java.net/projects/panama/&#34;&gt;Panama&lt;/a&gt; hará más fácil trabajar con código nativo o el proyecto &lt;a href=&#34;http://openjdk.java.net/projects/zgc/&#34;&gt;ZGC&lt;/a&gt; para crear un recolector de basura que pueda manejar gigabytes y terabytes con pausas menores a 10ms. O el proyecto &lt;a href=&#34;http://openjdk.java.net/projects/amber/&#34;&gt;Amber&lt;/a&gt; con unas pequeñas mejoras pero muy cómodas para el programador como la de los literales &lt;em&gt;strings raw&lt;/em&gt;. En la &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;página del OpenJDK&lt;/a&gt; hay más proyectos que en un futuro quizá sean implementados y publicados en alguna versión.&lt;/p&gt;

&lt;p&gt;En la sección final de referencia incluyo varios artículos y vídeos de los que he obtenido la información para hacer este resumen de las novedades de Java 10. Algunos son muy interesantes y amplían en gran medida lo comentado y lo que posiblemente llegue en un futuro.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Le1DbpRZdRQ&#34;&gt;First contact with &amp;lsquo;var&amp;rsquo; in Java 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/84mCmmzksGI?t=47m43s&#34;&gt;Keynotes: Oracle Code Chicago&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.oracle.com/java/java10&#34;&gt;Introducing Java SE 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.oracle.com/java/jdk-10-local-variable-type-inference&#34;&gt;Java 10 Local Variable Type Inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.eclipse.org/content/java-10-support-oxygen&#34;&gt;Java 10 Support for Oxygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/10/&#34;&gt;JDK 10 General-Availability Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html&#34;&gt;JDK 10 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/corporate/pressrelease/Java-10-032018.html&#34;&gt;Oracle Java SE 10 Release Arrives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoworld.com/article/3230507/java/java-jdk-10-what-new-features-to-expect-in-the-next-java.html&#34;&gt;JDK 10: What’s new in Java 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.forbes.com/sites/oracle/2018/03/20/what-java-10-and-javas-new-6-month-release-cadence-mean-for-developers/&#34;&gt;What Java 10 And Java&amp;rsquo;s New 6-Month Release Cadence Mean For Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html&#34;&gt;Project Loom: Fibers and Continuations for the Java Virtual Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.azul.com/the-incredible-shrinking-java-platform/&#34;&gt;The Incredible Shrinking Java Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/eol-135779.html&#34;&gt;Oracle Java SE Support Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opsian.com/blog/java-on-docker/&#34;&gt;Java on Docker will no longer suck: improvements coming in Java 10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/</id>
        <title>Tú con tu Mac, yo con mi GNU/Linux</title>        
        <updated>2018-03-18T17:00:00+01:00</updated>
        <published>2018-03-17T14:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/03/tu-con-mac-yo-con-mi-gnu-linux/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/macos.png&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;macOS&#34; title=&#34;macOS&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/windows-10.svg&#34; class=&#34;right &#34; width=&#34;350&#34; alt=&#34;Windows&#34; title=&#34;Windows&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;GNU&#34; title=&#34;GNU&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Por motivos laborales y por política de la empresa tuve que elegir como equipo un portátil de &lt;a href=&#34;https://www.apple.com/&#34;&gt;Apple&lt;/a&gt;, en concreto un MacBook Pro con procesador Intel Core i5, 16 GiB de memoria y 512 GiB de almacenamiento SSD. Prácticamente el mejor portátil que había en su momento en el catálogo de la manzana que tendría un precio seguro más de 2000€ y quizá 2500€. Este cambio me ha permitido poder comparar con mi propio portátil, un Sony Vaio con procesador Intel Core i5 3210, 8 GiB de memoria y 250 GiB de almacenamiento SSD y la distribución &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; de &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tenía la duda de si esta experiencia me iba a convencer de pasarme al lado oscuro. Llevo usando el MacBook desde hace un año siendo este &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/mi-primer-mac-yo-usuario-de-gnu-linux/&#34;&gt;mi primer contacto con un Mac&lt;/a&gt; y puedo decir de momento que no hay nada en los Mac que me convezca de adquirir uno de los portátiles de Apple. Sí no son feos, tenían (en pasado) alguna cosa distinta como los &lt;em&gt;magsafe&lt;/em&gt; en el adaptador de corriente, no tienen elementos obsoletos como una salida VGA o grabadora DVD, una buena pantalla y un buen &lt;em&gt;touchpad&lt;/em&gt; pero a un precio exagerado. Aún así y ahora que he probado tanto Windows, macOS como GNU/Linux no tengo nada que envidiar a los portátiles de Apple ni a macOS por mi parte, es más estoy más convencido de usar GNU/Linux.&lt;/p&gt;

&lt;h3 id=&#34;software&#34;&gt;Software&lt;/h3&gt;

&lt;p&gt;Empezando por el software libre, ¿hace falta que mecione &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.es.html&#34;&gt;las cuatro libertades esenciales&lt;/a&gt;? o la posibilidad de elegir la distribución o entorno de escritorio que más me guste o mejor se adapte a mis requerimientos. Pensando mal, en el portátil Mac no estoy seguro de que no tengan algún tipo de software espía, algún tipo de monitorización o telemetría.&lt;/p&gt;

&lt;p&gt;Para cualquier necesidad en Linux seguramente hay una aplicación que realice esa funcionalidad, editor de documentos, reproductor de vídeo, edición fotográfica, navegador, administrador de ebooks, entorno de desarrollo, editor de código, descargas torrent. Las principales aplicaciones están disponibles para ambas plataformas: &lt;a href=&#34;https://www.libreoffice.org/&#34;&gt;LibreOffice&lt;/a&gt;, &lt;a href=&#34;https://www.videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;, &lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;http://calibre-ebook.com/&#34;&gt;Calibre&lt;/a&gt;, &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&#34;https://transmissionbt.com/&#34;&gt;Tranmission&lt;/a&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Sin embargo, para algunas otras necesidades en Mac seguramente hay que sacar otra vez la tarjeta de crédito para compra alguna aplicación que realice la tarea que en GNU/Linux está disponible gratuitamente y es software libre. Por ejemplo, para convertir un vídeo a otro formato, para convertir a MP3 un CD de audio o un simple compresor/descompresor de archivos. Menos mal que en mac también se puede acceder a todo ese catálogo de software libre.&lt;/p&gt;

&lt;p&gt;Y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/&#34;&gt;en GNU/Linux también hay juegos de buena calidad&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;El hardware de Apple es bonito y es un aspecto que lo cuidan mucho al menos más que en los típicos portátiles de la mayoría de las marcas que fabrican para Windows. Sin embargo, en cuanto a características no es de lo mejor que uno puede encontrar y a un precio significativamente mayor.&lt;/p&gt;

&lt;p&gt;Mi equipo es del 2012 y el Mac que uso del 2015, realmente lo único que echo de menos es la resolución de la pantalla que en el Mac es de 2560x1600 nativa y de 1650x1050 escalada lo que hace que se vea el texto muy bien. El &lt;em&gt;magic mouse&lt;/em&gt; al ser táctil también está bien aunque a veces detecte gestos incorrectos pero el hecho de que cuando esté cargándose no se pueda utilizar es un fallo de diseño.&lt;/p&gt;

&lt;p&gt;Compara el &lt;a href=&#34;https://slimbook.es/&#34;&gt;Slimbook Pro 2&lt;/a&gt; y el &lt;a href=&#34;https://www.apple.com/es/macbook-pro/&#34;&gt;MacBook Pro&lt;/a&gt;, para empezar en el Slimbook se pueden instalar 32 GiB de memoria en el Mac solo 16 GiB, a características similares con disco SSD de 512 GiB y pantalla de HiDPI el Slimbook está sobre los 1000€ y los Mac empezando por 1500€.&lt;/p&gt;

&lt;h3 id=&#34;entorno-de-escritorio&#34;&gt;Entorno de escritorio&lt;/h3&gt;

&lt;p&gt;El entorno de escritorio en lo personal uso &lt;a href=&#34;https://www.gnome.org/&#34;&gt;GNOME&lt;/a&gt; y en ciertos aspectos tiene similitudes como la barra superior, la vista de ventas o la gestión de escritorios. GNOME ha evolucionado de forma muy notable desde las primeras versiones 3.0 añadiendo muchas nuevas funcionalidades y mejorando varios aspectos visuales en cada ciclo de desarrollo de seis meses. KDE también ha mejorado mucho.&lt;/p&gt;

&lt;p&gt;GNOME puede personalizarse en cierta medida con algunos complementos para por ejemplo hacer que la barra de aplicaciones se muestre siempre. Algunos otros aspectos de GNOME me gustan más como el menú agrupado para varios de los iconos, en Mac cada icono tiene su propio menú de acciones. En la vista de aplicaciones de GNOME estás pueden cerrarse sin tener que seleccionar la aplicación. Tanto GNOME como macOS soportan escritorios virtuales.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    
&lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2018/305/gnome-overview.jpg&#34; title=&#34;GNOME&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2018/305/gnome-overview-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2018/305/macos-overview.jpg&#34; title=&#34;macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2018/305/macos-overview-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Comparación entre el entorno de escritotio de GNOME y macOS&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;/div&gt;

&lt;p&gt;GNOME incluye todo lo que un usuario necesita desde navegador de archivos, visor de fotos, visor de documentos, aplicación de correo electrónico, terminal, editor de texto plano. Y GNOME no es la única opción también está &lt;a href=&#34;https://www.kde.org/&#34;&gt;KDE&lt;/a&gt; o &lt;a href=&#34;https://xfce.org/&#34;&gt;XFCE&lt;/a&gt; por nombrar solo dos de los otros entornos e escritorio más conocidos.&lt;/p&gt;

&lt;h3 id=&#34;gestor-de-paquetes&#34;&gt;Gestor de paquetes&lt;/h3&gt;

&lt;p&gt;La forma de instalar y actualizar aplicaciones de las distribuciones GNU/Linux con los gestores y repositorios de paquetes es muy sencillo. En Arch Linux que es una distribución &lt;a href=&#34;https://en.wikipedia.org/wiki/Rolling_release&#34;&gt;rolling release&lt;/a&gt; cada vez que hago una actualización tengo las últimas versiones de cada paquete y aplicación.&lt;/p&gt;

&lt;p&gt;En los Mac se puede utilizar algo similar con &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; y menos mal que existe para hacer más fácil instalar y sobre todo matener actualizados los programas a las últimas versiones.&lt;/p&gt;

&lt;h3 id=&#34;precio&#34;&gt;Precio&lt;/h3&gt;

&lt;p&gt;No se cuanto costaría exactamente el equipo Mac pero con su configuración al menos unos 2000€. Pues bien un Slimbook a día de hoy con con una configuración del modelo tal que Intel Core i5 8250U (4 núcleos, 8 hilos), 32 GiB de memoria, 250 GiB de almacenamiento SSD con interfaz NVMe y pantalla QHD+ 3200 x 1800 HiDPI cuesta unos 1400€ siendo el tope de gama. Eso para los usuarios que necesiten tal ingente cantidad de memoria y en una de las configuraciones más completas.&lt;/p&gt;

&lt;p&gt;El MacBook Pro más barato empieza en 1500€ y con únicamente 8 GiB de memoria y solo 128 GiB de SSD, con 16 GiB de memoria y 256 GiB de SSD se va a los 2000€.&lt;/p&gt;

&lt;h3 id=&#34;obsolescencia&#34;&gt;Obsolescencia&lt;/h3&gt;

&lt;p&gt;Es Apple quien decide cuando deja de dar soporte a sus equipos, en forma de actualizaciones de seguridad o nuevas versiones de macOS, 6+ años aproximadamente lo que me parece poco tiempo, posiblemente en ese momento uno ya se platee comprar otro pero también el equipo seguramente se útil para ciertos propósitos. En GNU/Linux los equipos siguen teniendo actualizaciones y siguen siendo usables incluso con 10 años. Dejan de ser válidos cuando el software demanda más al equipo del lo que es capaz principalmente por la cantidad de memoria. Pero aún en estos casos utilizando una distribución que consuma pocos recursos siguen siendo usables para ciertas tareas.&lt;/p&gt;

&lt;h3 id=&#34;mi-conclusión&#34;&gt;Mi conclusión&lt;/h3&gt;

&lt;p&gt;La marca Apple tiene un halo de idolatración, de que no hay nada mejor ya sea en el hardware o en el software y si se me permite de elitismo, superioridad, ir a contracorriente, tener algo diferenciativo o exclusividad. Por mi experiencia no creo que GNU/Linux hoy día tenga mucho envidiar, ni sea más difícil de instalar o usar, quizá un buen soporte de hardware desde el primer día pero eso es consecuencia de la cuota de uso de GNU/Linux en el escritorio, aún así las cosas han mejorado mucho en la última década.&lt;/p&gt;

&lt;p&gt;¿Quieres un equipo para trabajar sin preocuparte mucho de dedicarle tiempo a mantenerlo? usa una versión con soporte prolongado (LTS) de &lt;a href=&#34;https://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;, ¿quieres una distribución con el software actualizado? usa Arch Linux o una de sus derivadas, ¿quieres un equipo potente, configurable, ligero y bonito? échale un vistazo a los Slimbook.&lt;/p&gt;

&lt;p&gt;Pasado este tiempo usando un Mac a mi no me han convencido de cambiar y comprar uno de ellos. La plataforma del pingüino también tiene defectos al igual que macOS no está exento de ellos, los dos alguna vez se me han bloqueado, pero después de probar un Mac la verdad es que no entiendo la idolatración y lo fieles que son algunos de sus usuarios a esta marca. Al pagar lo que hay que pagar por un Mac uno debe pensar que con legitimidad van a recibir a cambio algo acorde a sus expectativas más cuanto mayor sea el precio, quizá si el precio es elevado cuesta más reconocer los defectos. Quédate con tu Mac, a mi dame mi GNU/Linux.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.soydemac.com/apple-actualiza-la-lista-de-mac-y-otros-dispositivos-vintage-y-obsoletos/&#34;&gt;Apple actualiza la lista de Mac y otros dispositivos “vintage y obsoletos”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="apple"/>
            
                <category term="gnu-linux"/>
            
                <category term="microsoft"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="windows"/>
            
        
    </entry>
    
</feed>
