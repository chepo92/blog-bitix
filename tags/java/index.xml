<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/java/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-07-01T12:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/07/portales-con-liferay-y-ejemplo-de-portlet/</id>
        <title>Portales con Liferay y ejemplo de portlet</title>        
        <updated>2017-07-01T12:00:00+02:00</updated>
        <published>2017-07-01T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/07/portales-con-liferay-y-ejemplo-de-portlet/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Muchas organizaciones usan portales para mantener su presencia en internet. Los portales son herramientas muy versátiles que incluyen la gestión de contenidos y flujo de trabajo para publicarlo, foros, blog, &amp;hellip; Liferay es uno de los más conocidos que usa la plataforma Java. La unidad básica funcional de un portal es un &lt;em&gt;portlet&lt;/em&gt; que en ciertos aspectos son similares en otros diferentes a lo que son los servlets en las aplicaciones web Java.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/liferay.png&#34; class=&#34;right&#34; width=&#34;400&#34; alt=&#34;Liferay&#34; title=&#34;Liferay&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los portales son una especialización de un sitio web que presenta información diversa de una forma integrada y uniforme. Suelen aplicarse cuando una entidad tiene necesidades de presentar información según el usuarios autenticado, su rol, los usuarios necesitan colaborar o se necesita integrar información de múltiples fuentes. Son usados por entidades públicas como gobiernos, ayuntamientos y también por corporaciones de tamaño mediano y grande.&lt;/p&gt;

&lt;p&gt;Algunos de sus casos de uso son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/web-platform&#34;&gt;Plataforma web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/enterprise-cms&#34;&gt;Sistema de gestión de contenidos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/integration-platform&#34;&gt;Plataforma de integración&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/collaboration-platform&#34;&gt;Plataforma de colaboración&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/social-apps-platform&#34;&gt;Plataforma de aplicaciones sociales&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uno de los servidores de portales más destacados es &lt;a href=&#34;https://www.liferay.com/&#34;&gt;Liferay&lt;/a&gt;. Liferay implementa la especificación de los &lt;a href=&#34;https://es.wikipedia.org/wiki/Portlet&#34;&gt;&lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; de Java que son la pieza básica funcional de un portal.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio.png&#34; title=&#34;Página inicial de Liferay&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Liferay es el contenedor de &lt;em&gt;portlets&lt;/em&gt; y proporciona un entorno de ejecución similar a lo que los contenedores de servlet proporcionan para los servlets. Las similitudes y diferencias entre un servlet y un &lt;em&gt;portlet&lt;/em&gt; son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los &lt;em&gt;portlets&lt;/em&gt; son gestionados por un contenedor.&lt;/li&gt;
&lt;li&gt;Su ciclo de vida está gestionado por el contenedor.&lt;/li&gt;
&lt;li&gt;Generan contenido dinámico.&lt;/li&gt;
&lt;li&gt;Interactúan con el cliente mediante peticiones y respuestas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y se diferencia en que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Los &lt;em&gt;portlets&lt;/em&gt; generan únicamente un fragmento de la página web.&lt;/li&gt;
&lt;li&gt;No están asociados directamente a una URL.&lt;/li&gt;
&lt;li&gt;No pueden generar contenido arbitrario, si se solicita text/html los &lt;em&gt;portlets&lt;/em&gt; deben generar text/html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El contenedor de &lt;em&gt;portlets&lt;/em&gt; proporciona funcionalidades como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Almacenamiento persistente para las preferencias.&lt;/li&gt;
&lt;li&gt;Procesamiento de solicitudes.&lt;/li&gt;
&lt;li&gt;Modos de los &lt;em&gt;portlets&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Estado de la ventana o fragmento.&lt;/li&gt;
&lt;li&gt;Información de usuario,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://web.liferay.com/es/community/wiki/-/wiki/Main/Liferay+Portlets&#34;&gt;Liferay incluye más de 60 &lt;em&gt;portlets&lt;/em&gt;&lt;/a&gt; listos para usar que cumplen las funciones de &lt;abbr title=&#34;Content Management System&#34;&gt;CMS&lt;/abbr&gt;, foros, blogs, agregador de blogs, wiki, calendario, encuestas, anuncios, herramientas sociales, de comercio electrónico, integración de contenido de sistemas externos, geolocalización, tiempo, administración, gestión de flujo de trabajo y &lt;a href=&#34;https://web.liferay.com/marketplace&#34;&gt;otros muchos más ofrecidos en el marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Desde la &lt;a href=&#34;https://www.liferay.com/es/downloads&#34;&gt;página de descargas&lt;/a&gt; se puede obtener la edición para la comunidad de Liferay además de otros productos eligiendo la versión deseada y en la &lt;a href=&#34;https://dev.liferay.com/es/home&#34;&gt;red para desarrolladores&lt;/a&gt; obtener documentación y material de referencia. Una vez descargado el archivo de la distribución de Liferay y descomprimido se inicia con el comando ubicado en &lt;em&gt;tomcat-8.0.32/bin/startup.sh&lt;/em&gt;. En el archivo &lt;em&gt;tomcat-8.0.32logs/catalina.out&lt;/em&gt; se emiten las trazas y mensajes del servidor. Iniciado Liferay se presenta una página de configuración, se han de aceptar los términos y condiciones e iniciar sesión con el usuario creado en la primera página de configuración.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/configuracion.png&#34; title=&#34;Configuración básica de Liferay&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/configuracion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para añadir un &lt;em&gt;portlet&lt;/em&gt; propio a Liferay hay que acceder al &lt;em&gt;Panel de control &amp;gt; Aplicaciones &amp;gt; Gestor de aplicaciones&lt;/em&gt; y pulsar la opción cargar ubicada en la parte superior derecha de la página. En la salida del servidor aparecerán varias trazas relativas al despliegue del &lt;em&gt;portlet&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/gestor-de-aplicaciones.png&#34; title=&#34;Gestor de aplicaciones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/gestor-de-aplicaciones-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/instalar-aplicacion.png&#34; title=&#34;Instalar aplicación&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/instalar-aplicacion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Los &lt;em&gt;portlets&lt;/em&gt; se distribuyen como archivos de aplicaciones web &lt;em&gt;.war&lt;/em&gt; con varios descriptores adicionales con información que usa Liferay para el despliegue del &lt;em&gt;portlet&lt;/em&gt;. En el siguiente ejemplo comentaré cómo crear un &lt;em&gt;portlet&lt;/em&gt; Hola Mundo sin ayuda de ningún framework como &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; o &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt;. El archivo principal es &lt;em&gt;portlet.xml&lt;/em&gt;  donde se describen los &lt;em&gt;portlets&lt;/em&gt; de la aplicación indicando por ejemplo el nombre del &lt;em&gt;portlet&lt;/em&gt;, la clase que lo implementa o los modos que soporta, otros archivos descriptores son &lt;em&gt;web.xml&lt;/em&gt;, &lt;em&gt;liferay-portlet.xml&lt;/em&gt; y &lt;em&gt;liferay-display.xml&lt;/em&gt; con unas propiedades exclusivas de Liferay indicando el icono y la categoría en la que ubicar el &lt;em&gt;portlet&lt;/em&gt; en la paleta de &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=portlet.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=web.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=liferay-portlet.xml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=liferay-display.xml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Un &lt;em&gt;portlet&lt;/em&gt; es una clase Java que extiende de &lt;a href=&#34;https://docs.liferay.com/portlet-api/2.0/javadocs/javax/portlet/GenericPortlet.html&#34;&gt;GenericPortlet&lt;/a&gt;. En el caso del ejemplo es muy sencillo ya que solo emite un mensaje usando una preferencia de configuración que Liferay se encarga de persistir, tiene un modo de edición y procesa una acción para cambiar el valor de una preferencia que se utiliza al emitir el mensaje.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0549b3b333adf38fc3be5a2ba6cfee45.js?file=HolaMundoPortlet.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando como herramienta de construcción del proyecto &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; el archivo &lt;em&gt;.war&lt;/em&gt; a desplegar el Liferay se genera con la tarea &lt;em&gt;build&lt;/em&gt; en el directorio &lt;em&gt;build/libs/HolaMundoPortlet-0.1.war&lt;/em&gt;. Esta archivo hay que desplegarlo en Liferay para posteriormente incluirlo en alguna página, se visualice el contenido que genera y se pueda interactuar con él.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/anadir-portlet.png&#34; title=&#34;Añadir portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/anadir-portlet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-hola-mundo-portlet.png&#34; title=&#34;Portlet HolaMundo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/inicio-hola-mundo-portlet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias.png&#34; title=&#34;Preferencias del portlet&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-usuario.png&#34; title=&#34;Portlet HolaMundo con preferencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/243/preferencias-usuario-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Aunque el libro &lt;a href=&#34;http://amzn.to/2sc1tWN&#34;&gt;Liferay in Action&lt;/a&gt; no está actualizado a la última versión de Liferay sirve para conocer los conceptos básicos de su funcionamiento, explica la teoría e incluye ejemplos de código de como crear un &lt;em&gt;portlet&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=193518282X&amp;linkId=a4fdbe9a2a0c68685cfc8119f253125b&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoPortlet&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_portal&#34;&gt;Web portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Portlet&#34;&gt;Portlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.liferay.com/es/products/what-is-a-portal/web-platform&#34;&gt;¿Qué es un Portal?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jcp.org/aboutJava/communityprocess/edr/jsr362/index2.html&#34;&gt;Portlet Specification 3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/06/hemeroteca-11/</id>
        <title>Hemeroteca #11</title>        
        <updated>2017-06-27T21:00:00+02:00</updated>
        <published>2017-06-24T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/06/hemeroteca-11/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;Desde hace ya tiempo escribir y publicar en el blog es una de las cosas que realmente me gustan y me motivan a pesar de que el blog me requiere mucho tiempo de mi tiempo personal, cada artículo me exige entre 5 y 10 horas de dedicación durante el fin de semana y en mi tiempo libre. Es satisfactorio ver que cada semana y cada mes el número de visitas aumentan a un ritmo rozando los dos dígitos y que también se nota en los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/donacion/&#34;&gt;ingresos por publicidad de AdSense que en parte dono&lt;/a&gt; a alguno de los proyectos de software libre que usó o me parecen interesantes de apoyarles económicamente aunque sea pequeña.&lt;/p&gt;

&lt;p&gt;Aún no he llegado al punto de plantearme seriamente abandonar el blog y recuperar mi tiempo para leer, ver películas que ahora me descargo pero pocas veo, andar en bicicleta, pasear u otras cosas, a veces pienso que le dedico mucho tiempo al blog, antes escribía un artículo a la semana, ahora estoy publicando muchas dos artículos faltándome más tiempo para editar y publicar los artículos que para redactarlos. La fe de poder de usar en un trabajo muchas de las herramientas de escribo, que es uno de mis motivaciones de tener el blog, me mantiene escribiendo aunque la realidad es que llevo ya 3 lustros trabajando y en prácticamente la totalidad de proyectos la tecnología estaba ya decidida e impuesta.&lt;/p&gt;

&lt;p&gt;El número de visitas ha aumentado notablemente de unas 9K páginas vistas en enero de 2016 a unas 30K en enero de 2017 y ahora a finales de junio unas 60K. Solamente en estos seis primeros meses ya he duplicado el tráfico mayoritariamente proveniente del buscador Google. Los ingresos por AdSense también han aumentado notablemente de 15€ pasando a 50€ mensuales con los que ahora cada dos meses recibo una transferencia de Google en mi cuenta corriente lo que empieza a ser una cantidad respetable aunque no compense por ello solamente la dedicación que requiere.&lt;/p&gt;

&lt;p&gt;Más del 90% del tráfico que recibo proviene del buscador Google y el resto de tráfico directo o de referencia. Solo unos 5 artículos son los que reciben la mayor parte de las visitas y que intento aprovechar para que los usuarios accedan a otros artículos relacionados. El aumento de visitas se debe a que con el paso del tiempo habré posicionado mejor algunos artículos en Google y en menor medida a los nuevos que he publicado. A Google creo que le gustan los sitios que publican nuevo contenido con asiduidad y regularmente en primera instancia y en medida similar si es de calidad. De enero de 2014 a enero de 2016 el crecimiento parece plano pero también fue constante aunque simplemente se ve enmascarado por el de los últimos meses.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/analytics.png&#34; title=&#34;Analytics&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/analytics-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/adsense.png&#34; title=&#34;AdSense&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/242/adsense-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Evolución visitas e ingresos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Analizando los ingresos y visitas de mi blog y divagando cual sería el tráfico que debería generar para vivir únicamente blog si con 60K páginas vistas obtengo 50€ en ingresos al mes, debería multiplicar por ¿30, 40? el tráfico de este momento para vivir del blog, pero siendo más modesto multiplicar por 5 o 10 ya serían unos ingresos muy notables y algo que parece alcanzable aunque no sea fácilmente, ¿cuantas visitas mensuales son esas para una web? ¿3,6M de páginas vistas al mes? ¿300K o 600K siendo más modesto?. Quizá si publicase en inglés la audiencia sería mayor, aún no se cual es el tráfico que poseen otras páginas hispanas personales de temática tecnológica, software libre o programación más conocidos para saber cual es el límite de visitas alcanzable en este nicho de temática ya que los blogs que sigo en pocos he visto esta misma exhivición impúdica de datos que incluyo aquí (si como blogger te sientes aludido ya tienes tema para un artículo ;). Medios como &lt;a href=&#34;https://www.xataka.com/&#34;&gt;Xataka&lt;/a&gt; o &lt;a href=&#34;https://www.genbeta.com/&#34;&gt;Genbeta&lt;/a&gt; por citar algunos tecnológicos muy conocidos profesionales, empresariales o de grupos editoriales con las vistas que tienen deben generar suficiente tráfico para que sus ingresos solo en publicidad costeen los gastos de los redactores, servidores, viajes, paguen algunos sueldos, etc.&lt;/p&gt;

&lt;p&gt;Cambiando de tema y yendo a la hemeroteca en la lista de artículos que he publicado en estos seis meses están los siguientes, en total 40 (incluido este) nuevos artículos únicos y fabricados artesanalmente a mano. Este semestre he hecho dos donaciones de 60€ y publicados otros tantos artículos comentando a que proyectos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/articulo-3-de-yo-apoyo-al-software-libre/&#34;&gt;Artículo #3 de Yo apoyo al software libre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/articulo-4-de-yo-apoyo-al-software-libre/&#34;&gt;Artículo #4 de Yo apoyo al software libre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este semestre he publicado una nueva serie sobre electrónica aprovechando que compre un kit con varios elementos electrónicos con los que jugar para la &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; 3 que he usado en la 1, se ha compuesto de un total de 10 artículos y aún podría escribir alguno más pero lo dejaré para otro momento si recupero las ganas de cacharrear con el hardware otra vez.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;Desempaquetado del kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/&#34;&gt;Ejemplo Hello World con Java en la Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/&#34;&gt;Ejemplo de JNI, usar código en C desde Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/&#34;&gt;Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/&#34;&gt;Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-movimiento-en-la-raspberry-pi-con-java/&#34;&gt;Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un servomotor con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/luces-navidenas-con-la-raspberry-pi-y-java/&#34;&gt;Luces navideñas con la Raspberry Pi y Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La otra serie de varios artículos publicados durante otras tantas semanas ha sido sobre &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;Docker Swarm&lt;/a&gt; continuando y completando un poco más la serie sobre &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; para crear &lt;em&gt;clusters&lt;/em&gt; de nodos con la tecnología de la se se está hablando mucho y está transformando el estado del arte para el despliegue, ejecución y distribución de servicios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/introduccion-y-ejemplo-de-cluster-de-contenedores-con-docker-swarm/&#34;&gt;Introducción y ejemplo de cluster de contenedores con Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/iniciar-un-stack-de-servicios-en-un-cluster-de-docker-swarm/&#34;&gt;Iniciar un stack de servicios en un cluster de Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/escalar-y-actualizar-un-servicio-de-un-cluster-de-docker-swarm/&#34;&gt;Escalar y actualizar un servicio de un cluster de Docker Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/contenedores-en-docker-swarm-con-volumenes-de-datos-persistentes-usando-rex-ray-y-virtualbox/&#34;&gt;Contenedores en Docker Swarm con volúmenes de datos persistentes usando REX-Ray y VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/informacion-sensible-en-contenedores-con-docker-secrets/&#34;&gt;Información sensible en los contenedores con Docker Secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/imagenes-de-docker-con-alpine-linux/&#34;&gt;Imágenes de Docker con Alpine Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entre otros artículos que he publicado está un &lt;em&gt;script&lt;/em&gt; para instalar &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; de forma desatendida, automatizada y personalizable. Dado que Arch Linux no posee un instalador y hay que introducir los comandos directamente en la terminal para realizar la instalación después de leer una buena cantidad de documentación de la estupenda &lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;wiki de Arch Linux&lt;/a&gt;, este &lt;em&gt;script&lt;/em&gt; sirve para instalar Arch Linux de forma sencilla o como consulta de los comandos a ejecutar paso a paso para instalar esta distribución.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/script-de-instalacion-de-arch-linux-desatendido-automatizado-y-personalizable/&#34;&gt;Script de instalación de Arch Linux desatendido, automatizado y personalizable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También he publicado algún que otro artículo de opinión de dos noticias relevantes que se han producido en este periodo de tiempo, como son el ataque del &lt;em&gt;ransomware&lt;/em&gt; WannaCry y que afectó a algunas empresas y organizaciones y relacionado con este tema me preguntaba si las distribuciones GNU/Linux son más seguras que Windows. También daba mi opinión sobre el el anuncio de Shuttleworth de abandonar la convergencia con el servidor gráfico Mir y el entorno de escritorio Unity. Y un último sobre la diferencia de trato para bien de &lt;a href=&#34;https://www.pepephone.com/&#34;&gt;Pepephone&lt;/a&gt; con lo que es habitual en otras empresas de telecomunicaciones para mal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/distribuciones-gnu-linux-mas-seguras-que-windows/&#34;&gt;Distribuciones GNU/Linux, ¿más seguras que Windows?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/sobre-el-anuncio-de-shuttleworth-de-abandonar-unity-y-mir-y-volver-a-gnome-en-ubuntu/&#34;&gt;Sobre el anuncio de Shuttleworth de abandonar Unity y Mir y volver a GNOME en Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/sobre-el-ataque-de-ransomware-que-ha-sufrido-telefonica-y-otras-empresas/&#34;&gt;Sobre el ataque de ransomware que ha sufrido Telefonica y otras empresas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/asi-trata-pepephone-a-sus-clientes/&#34;&gt;Así trata Pepephone a sus clientes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dos artículos para usuarios sin muchos conocimientos de como instalar &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; o la distribución &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; de &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. Explicando paso a paso y detalladamente con capturas de pantalla cuales son los pasos para realizar la instalación desde cero.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-windows-10-paso-a-paso-desde-cero/&#34;&gt;Descargar e instalar Windows 10 paso a paso desde cero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/descargar-e-instalar-la-distribucion-ubuntu-de-gnu-linux-paso-a-paso-desde-cero/&#34;&gt;Descargar e instalar la distribución Ubuntu de GNU/Linux paso a paso desde cero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un par de artículos patrocinados de los cuales uno ha sido otra forma de ingreso.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/&#34;&gt;Cursos de formación de KeepCoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/servidores-cloud-vps-de-cloudingio-para-hospedar-blogs-y-paginas-web/&#34;&gt;Servidores Cloud VPS de Clouding.io para hospedar blogs y páginas web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También he publicado un par de artículos en inglés traducción de otros que publique en español como experimento para comprobar que tal se indexan en Google y si alguno de ellos atrae visitas a mi blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/windows-10-and-office-2016-as-easy-to-use-without-license-as-always/&#34;&gt;Windows 10 and Office 2016 as easy to use without license as always&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/04/3-office-alternative-options-to-microsoft-office/&#34;&gt;3 office alternative options to Microsoft Office&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habiendo publicado dos series con una buena cantidad de artículos este semestre he publicado pocos artículos de programación. A destacar de estos últimos ha sido el resumen como en años anteriores de la conferencia &lt;a href=&#34;http://bilbostack.com/&#34;&gt;BilboStack&lt;/a&gt; celebrada en febrero de las presentaciones a las que asistí. Varios artículos sobre diferentes tipos de bases de datos relacionales, de documentos y de clave valor representadas por &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; y &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;. También como realizar autenticación mutua entre cliente y servidor con certificados ya sea con el programa &lt;em&gt;curl&lt;/em&gt;, una aplicación en la plataforma Java o con un navegador web.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/&#34;&gt;Registro y descubrimiento de servicios con Spring Cloud y Consul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/conferencia-bilbostack-2017/&#34;&gt;Conferencia BilboStack 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/&#34;&gt;Cómo crear un servicio de systemd para una aplicación con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-relacional-postgresql/&#34;&gt;Introducción a la base de datos relacional PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/&#34;&gt;Introducción a la base de datos NoSQL MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/usar-la-base-de-datos-nosql-mongodb-con-java/&#34;&gt;Usar la base de datos NoSQL MongoDB con Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/introduccion-a-la-base-de-datos-nosql-redis/&#34;&gt;Introducción a la base de datos NoSQL Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/&#34;&gt;Autenticación mutua de cliente y servidor con certificados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para acabar publique un artículo de un cargador de pilas recargables, un paquete de pilas de la marca blanca de Amazon y un reloj con un pequeño análisis y múltiples fotos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/desempaquetado-de-cargador-de-pilas-recargables-pilas-recargables-aa-y-reloj-despertador/&#34;&gt;Desempaquetado de cargador de pilas recargables, pilas recargables AA y reloj despertador&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Que disfrutéis leyendo algunos de los artículos que publiqué y aprovechar para suscribiros con vuestro lector de &lt;em&gt;feeds&lt;/em&gt; preferido a Blog Bitix para no perderos ninguno de los que publique en el siguiente semestre que posiblemente verse bastante sobre Java.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="hemeroteca"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/</id>
        <title>Autenticación mutua de cliente y servidor con certificados</title>        
        <updated>2017-06-18T23:30:00+02:00</updated>
        <published>2017-06-17T02:45:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/openssl.svg&#34; class=&#34;right&#34; width=&#34;400&#34; alt=&#34;OpenSSL&#34; title=&#34;OpenSSL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los certificados no solo sirven para autenticar a un servidor o acceder solo a aquellos en los que confiamos. El servidor también puede autenticar a los clientes mediante un certificado como alternativa a usar un usuario y contraseña ya sea una autenticación &lt;em&gt;BASIC&lt;/em&gt; o un formulario personalizado. Al igual que en el cliente usa el certificado de la autoridad de certificación en la que confía para validar el que presenta el servidor, el servidor puede requerir que el cliente también proporcione un certificado que el servidor valida según las autoridades de certificación en las que confía, en ambos casos el servidor o cliente usan su clave privada para iniciar la conexión segura con el &lt;em&gt;handsake&lt;/em&gt; del &lt;a href=&#34;https://es.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;protocolo TLS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para el ejemplo usaré un servidor web &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; ejecutado como un contenedor de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; configurado de tal manera que requiere autenticación para el cliente con certificados.&lt;/p&gt;

&lt;p&gt;Inicialmente deberemos generar tres parejas de claves privadas y públicas, una para nuestra propia autoridad de certificación, una clave para el servidor y otra para el cliente. Al mismo tiempo generaré otras tres parejas de claves privadas y públicas para comprobar que cuando se proporciona un certificado incorrecto la autenticación falla.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-genrsa.sh&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=ca.crt&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=ca.key&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=ca.pub&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-genrsa-unknown.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El siguiente paso es generar los certificados y firmar con la clave y certificado de la autoridad de certificado los certificados del servidor y cliente. Como paso previo a que la autoridad de certificación emita los certificados del servidor y cliente hay que generar una petición de firma de certificado, los archivos &lt;em&gt;.csr&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-req.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-req-unknown.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con la misma herramienta de &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; es posible comprobar si un certificado es válido para una autoridad de certificación en la que se confía, para ello se usa el certificado raiz de la autoridad.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-verify.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=openssl-verify-unknown.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para hacer que el servidor nginx requiera autenticación mediante certificados para el cliente hay que añadir un poco de configuración mediante las directivas &lt;em&gt;ssl&lt;/em&gt; donde se indica el certificado del servidor, la clave privada del servidor, el certificado de la autoridad de certificación contra la que se validarán los certificados de los clientes y finalmente la directiva que establece que se ha de verificar a los clientes mediante certificados.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=nginx.conf&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con el siguiente archivo descriptor de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; y comando se inicia el servidor web nginx.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=docker-compose.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iniciado el servidor web ya se pueden realizar peticiones y el servidor y el cliente se autenticarán mutuamente. El servidor devolverá el código HTML de la página de bienvenida por defecto con las cabeceras del protocolo HTTP después de realizar el &lt;em&gt;handsake&lt;/em&gt; donde se valida el certificado del servidor.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=curl.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si se intenta realizar una petición sin certificado de cliente o con un certificado de cliente en el que no confié el servidor (que no esté firmado por la autoridad de certificación en la que confía) se devolverá un código de estado 400 que indica que la petición se ha rechazado. También el cliente advertirá si la autoridad de certificación en la que confía no valida el certificado del servidor con un error 400 y título &lt;em&gt;400 The SSL certificate error&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=curl-unknown.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El siguiente &lt;em&gt;script&lt;/em&gt; escrito en lenguaje &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; muestra como desde un programa para la plataforma Java se realiza autenticación mutua y que error da cuando alguno de los certificados es inválido ya sea el del cliente o el del servidor. Generando previamente los &lt;em&gt;keystores&lt;/em&gt; de la autoridad de certificado y del cliente introduciendo como clave en el ejemplo &lt;em&gt;password&lt;/em&gt; cuando se solicita.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=keytool.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=MutualCertAuth.groovy&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=groovy.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;En caso de que al usar un &lt;em&gt;keystore&lt;/em&gt; con un certificado de una autoridad que no valida el certificado del servidor se producirán un error, también cuando el certificado del cliente no sea válido para el servidor.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/16c98598bc1a2e63509f9c70960419b3.js?file=groovy-unknown.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Lo anterior es usando la herramienta &lt;em&gt;curl&lt;/em&gt; o un un programa en la plataforma Java, en el caso de querer realizar autenticación mutua con un navegador web como &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; hay que instalar el certificado del cliente y si es necesario el certificado de la autoridad de certificación para que el candado indicativo de la seguridad del protocolo HTTPS se muestre en verde y no indique ningún problema de seguridad en la autenticación del servidor. En Firefox los certificados se añaden en el menú &lt;em&gt;Preferencias &amp;gt; Avanzado &amp;gt; Ver certficados&lt;/em&gt;. En la pestaña &lt;em&gt;Sus certificados&lt;/em&gt; hay que importar el certificado del cliente en formato &lt;em&gt;PKCS12&lt;/em&gt; y en la pestaña &lt;em&gt;Autoridades&lt;/em&gt; el certificado de la autoridad que haya firmado el certificado del servidor, con el botón &lt;em&gt;Importar&lt;/em&gt; se selecciona el archivo &lt;em&gt;crt&lt;/em&gt; de la autoridad. Al introducir la URL y realizar la petición Firefox solicita mediante un diálogo seleccionar el certificado a usar para realizar la autenticación en el servidor.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-bad-request.png&#34; title=&#34;Autenticación mutua fallida&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-bad-request-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-mutual-authorized.png&#34; title=&#34;Autenticación mutua correcta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-mutual-authorized-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-server-cert.png&#34; title=&#34;Certificado del servidor validado por la CA&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-server-cert-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-certs.png&#34; title=&#34;Certificados de cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-certs-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-cas.png&#34; title=&#34;Certificados de la autoridades de certificación&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-cas-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-ca.png&#34; title=&#34;Añadir certificado de CA&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-ca-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-select-cert.png&#34; title=&#34;Selección de certificado de cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/241/firefox-select-cert-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Autenticación mutua de cliente y servidor con el navegador web Firefox&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/MutualCertAuth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up &amp;amp;&amp;amp; groovy MutualCertAuth.groovy&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/&#34;&gt;Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="seguridad"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/luces-navidenas-con-la-raspberry-pi-y-java/</id>
        <title>Luces navideñas con la Raspberry Pi y Java</title>        
        <updated>2017-05-14T11:00:00+02:00</updated>
        <published>2017-05-14T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/luces-navidenas-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Con diferentes sensores y dispositivos de salida de electrónica se pueden realizar proyectos muy interesantes. En el siguiente usaré múltiples diodos LED que se encenderán y apagarán de forma aleatoria cada cierto tiempo. El resultado será muy vistoso y lo utilizaré cuando lleguen las fechas como luces navideñas.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Como muestra de lo que se puede hacer con la Raspberry Pi usando los pines GPIO haré un ejemplo que consistirá en múltiples diodos LED de diferentes colores enciendan y apaguen simulando una especie de luces navideñas. Como yo tengo la Raspbperry Pi 1 B con 26 pines de los cuales solo 17 son GPIO podré usar hasta 17 diodos LED, aunque solo usaré 15. En el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt; viene incluidos 24 diodos LED de diferentes colores 6 blancos, 6 rojos, 6 amarillos y 6 verdes, también es necesario una resistencia por cada diodo de unos 200 ohmios de los cuales en el &lt;em&gt;kit&lt;/em&gt; se incluyen 20 de este valor.&lt;/p&gt;

&lt;p&gt;Aunque con muchos más LED el ejemplo no es más complicado que el ejemplo que ya mostré de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;encender y apagar un diodo LED&lt;/a&gt;. Usaré diodos de diferentes colores y dispuestos de forma aleatoria para darle un aspecto desordenado, para darle un aspecto más caótico los LEDs se encenderán y apagarán de forma aleatoria. Usaré el lenguaje de programación Java y la librería de alto nivel &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; para controlar el encendido y apagado de los diodos.&lt;/p&gt;

&lt;p&gt;Esta es la foto del cableado usando múltiples cables macho-macho para conectar los pines con el polo positivo de los diodos pasando por la resistencia y también múltiples cables para conectar el polo negativo del diodo con tierra. Usando una placa &lt;em&gt;breadboard&lt;/em&gt; para realizar las conexiones sin soldadura y una placa de extensión wiringPi para conectar la Raspberry Pi con la placa &lt;em&gt;breadboard&lt;/em&gt; con un cable de 26 pines en mi caso por el modelo que tengo de RPi este es el aspecto de cableado.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-01.jpg&#34; title=&#34;Cableado de las luces LED del árbol de navidad&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-01-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-02.jpg&#34; title=&#34;Cableado de las luces LED del árbol de navidad&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-02-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-03.jpg&#34; title=&#34;Cableado de las luces LED del árbol de navidad&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-03-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-04.jpg&#34; title=&#34;Cableado de las luces LED del árbol de navidad&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-04-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-05.jpg&#34; title=&#34;Cableado de las luces LED del árbol de navidad&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/233/arbol-navidad-05-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado de las luces LED del árbol de navidad&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Cada cierto tiempo los diodos cambian de estado, algunos se encenderán, otros se apagarán y otros seguirán en el estado que estaban. Para ello generaré un booleano aleatorio para cada uno de los diodos que determinará si debe estar encendido o apagado. Este es el programa Java junto con la parte relevante del archivo &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; para compilar y construir el ejemplo y el comando que uso para ejecutarlo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/86d81809da0ad791e41a8f821a58ea62.js?file=ChristmasTree.java%20&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/86d81809da0ad791e41a8f821a58ea62.js?file=build.gradle&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/86d81809da0ad791e41a8f821a58ea62.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Esta aplicación para la Raspberry Pi queda bastante vistosa y no es muy complicado de realizar a pesar del del lío de cables que resulta. Este es un vídeo de su funcionamiento.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/F2BChbcyr5g&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRasberriPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeChristmasTree&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un servomotor con la Raspberry Pi y Java</title>        
        <updated>2017-05-13T11:40:00+02:00</updated>
        <published>2017-05-07T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/05/controlar-un-servomotor-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otro de los elementos que incluye el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la Raspberry Pi&lt;/a&gt; es un &lt;a href=&#34;https://es.wikipedia.org/wiki/Servomotor&#34;&gt;servomotor&lt;/a&gt;, en concreto uno del modelo SG90. En la &lt;a href=&#34;http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf&#34;&gt;especificación del servomotor SG90&lt;/a&gt; está detallado cual es el código de colores de los cables. Rojo para la corriente de 5V, marrón para tierra y naranja para el &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;Pulse Width Modulated&#34;&gt;PWM&lt;/abbr&gt; con el que se controlará el servo motor, el diodo led es simplemente para saber que cuando se enciende el programa Java se ha iniciado. La Raspberry Pi tiene algunos pines con soporte hardware para realizar PWM.&lt;/p&gt;

&lt;p&gt;Un servomotor es un elemento distinto de un motor, un motor usa dos cables uno para mover el motor hacia adelante y otro cable para mover el motor hacia atrás. Los servomotores además de utilizar un único cable para controlarlo su funcionalidad es distinta usándose para posicionar el motor en un determinado ángulo que en el caso del SG90 tiene un ángulo de funcionamiento de 180º. Además el servomotor es más complejo, como se explica en el siguiente artículo de título &lt;a href=&#34;http://handyboard.com/hb/faq/hardware-faqs/dc-vs-servo/&#34;&gt;¿Cual es la diferencia entre un motor DC y servo motor?&lt;/a&gt; el servomotor se compone de varios elementos empaquetados como una pieza. Se compone de un motor DC normal, una unidad de reducción, un sensor de posicionamiento y un circuito de control.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/230/servomotor.jpg&#34; title=&#34;Servomotor&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/230/servomotor-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/230/cableado.jpg&#34; title=&#34;Cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/230/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Servomotor y cableado&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La función del servomotor es recibir la señal de control y aplicar corriente al motor hasta que que esté en la posición indicada por la señal. Un servomotor no rota libremente sino que como he comentado en el caso del SG90 tiene un ángulo de funcionamiento de entre 0º y 180º. La señal de control es un pulso de anchura modulada o PWM.&lt;/p&gt;

&lt;p&gt;Usando la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;Diozero&lt;/a&gt; es sencillo controlar un servomotor a través de la clase &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html&#34;&gt;Servo&lt;/a&gt;. El constructor recibe tres datos el &lt;em&gt;pin&lt;/em&gt; de la Raspberry Pi que controlará el servomotor, según la nomenclatura Broadcom que usa la librería Diozero, la frecuencia del pulso PWD que sirve para controlar la velocidad de rotación y finalmente la posición inicial a establecer. Con el método &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/Servo.html#getPulseWidthMs--&#34;&gt;pulseWidthMs&lt;/a&gt; y un rango de un valor &lt;em&gt;float&lt;/em&gt; entre 0.6 y 2.4 controlaremos la posición o ángulo del servomotor.&lt;/p&gt;

&lt;p&gt;El siguiente programa Java cambia en un bucle la posición del servo desde la posición mínima a la máxima. En él he utilizado el &lt;em&gt;pin&lt;/em&gt; 18 que en la Raspberry Pi 1 soporta PWD, en las versiones 2 y 3 podríamos haber usado los &lt;em&gt;pines&lt;/em&gt; 18 o 19.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/92cd41d20e45e50a7657e219789c0e81.js?file=Servomotor.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/g8RsvZ26Cqg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aunque he conseguido hacer funcionar el servomotor con este programa no ha sido exento de problemas. Y es que cuando el programa finaliza la Raspberry Pi se me bloquea o se pierde la conectividad de red. No se si por algún &lt;em&gt;bug&lt;/em&gt; en la librería Diozero o alguna incompatibilidad con la Raspberry Pi 1 B, quizá en otro modelo de la Raspberry Pi no dé los problemas que a mi me da.&lt;/p&gt;

&lt;p&gt;En otros artículos de la serie puedes consultar cómo usar otros &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;elementos de kit con Java y la Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeServomotor&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/download/ds/towerpro/SG90_a.pdf&#34;&gt;Especificación SG90 servomotor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Servomotor&#34;&gt;Servomotor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/</id>
        <title>Ejemplo sensor de golpes y detector de movimiento en la Raspberry Pi con Java</title>        
        <updated>2017-04-13T11:00:00+02:00</updated>
        <published>2017-04-13T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/ejemplo-sensor-de-golpes-y-detector-de-movimiento-en-la-raspberry-pi-con-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otro par de sensores que incluye el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de introducción a la electrónica para la Raspberry Pi&lt;/a&gt; son un sensor de golpes o &lt;em&gt;tilt&lt;/em&gt; y un detector de movimiento. El funcionamiento de ambos es muy similar, utilizando un &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; como entrada se recibe si el sensor de golpes está activo o si el detector de movimiento ha detectado movimiento. El sensor de golpes es una bolita de mercurio encerrada en una ampolla de cristal. Como el mercurio a temperatura ambiente su estado es líquido puede moverse y como es un metal puede conducir la electricidad cuando está en una determinada posición entre dos filamentos.&lt;/p&gt;

&lt;p&gt;El sensor de golpes necesita de tres cables uno para la corriente de 3.3V, otro para tierra y finalmente otro que se conecta como entrada a un &lt;em&gt;pin&lt;/em&gt; GPIO. Usando varios cables hembra-hembra y macho-macho hacemos las conexiones entre el sensor y la placa de pruebas sin soldadura o &lt;em&gt;breadboard&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/sensores-1.jpg&#34; title=&#34;Sensor de golpes y detector de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/sensores-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/sensores-2.jpg&#34; title=&#34;Sensor de golpes y detector de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/sensores-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Sensor de golpes y detector de movimiento&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Usando la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; para controlar los &lt;em&gt;pines&lt;/em&gt; GPIO desde un programa implementado con Java detectamos si el sensor está activo o no según la posición de la bolita de mercurio. El ejemplo consiste en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;encender un diodo LED&lt;/a&gt; que ya mostré en un artículo anterior de esta &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/electronica/&#34;&gt;serie sobre electrónica&lt;/a&gt; cuando el sensor &lt;em&gt;tilt&lt;/em&gt; esté activo. Usaré el &lt;em&gt;pin&lt;/em&gt; 18 para el diodo LED y el &lt;em&gt;pin&lt;/em&gt; 21 para el sensor según la nomenclatura de Broadcom. Los &lt;em&gt;pines&lt;/em&gt; serían el 12 según la nomenclatura del &lt;em&gt;header&lt;/em&gt; y 1 según la nomenclatura de wiringPi para el diodo LED y 13 y 2 para el sensor &lt;em&gt;tilt&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/cableado-tilt.jpg&#34; title=&#34;Cableado sensor de golpes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/cableado-tilt-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor de golpes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=Tilt.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el siguiente vídeo se aprecia como cuando al cambiar de posición del sensor de movimiento se mueve la bolita de mercurio y el diodo LED de ejemplo se enciende y apaga.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/7Rkou-pJWFY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El detector de movimiento en teoría es similar en funcionamiento al &lt;em&gt;tilt&lt;/em&gt; y la librería diozero proporciona la clase &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/sandpit/MotionSensor.html&#34;&gt;MotionSensor&lt;/a&gt; para hacer más sencillo su uso. Digo en teoría porque no he conseguido hacerlo funcionar y he revisado varias veces las conexiones mostradas en otros ejemplos incluido el &lt;a href=&#34;http://osoyoo.com/2016/07/14/motionsensor-pi/&#34;&gt;ejemplo de osoyoo&lt;/a&gt;, no se si es porque me falta algo más que debo tener en cuenta y que no conozco o el sensor no funciona viniendome estropeado. Cuando el sensor detecta movimiento cambia el voltaje de su &lt;em&gt;pin&lt;/em&gt; GPIO de datos. Los otros dos &lt;em&gt;pines&lt;/em&gt; que utiliza son uno para el voltaje de 5V y el de tierra.&lt;/p&gt;

&lt;p&gt;El programa Java para el sensor de movimiento es similar al sensor &lt;em&gt;tilt&lt;/em&gt; e igualmente encendería o apagaría un diodo LED cuando detecta movimiento.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/cableado-motion.jpg&#34; title=&#34;Cableado sensor de movimiento&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/224/cableado-motion-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor de movimiento&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=Motion.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Ambos ejemplos pueden usarse con los siguientes comandos cambiando la dirección IP de la Raspberry Pi y el directorio de la misma a donde se suben los ejemplos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/ec8532262fcc92e4862a2cd4c294b073.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El siguiente artículo de la sería será sobre cómo usar un &lt;em&gt;servo motor&lt;/em&gt; que es diferente de un motor que gira constantemente.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pimylifeup.com/raspberry-pi-motion-sensor/&#34;&gt;Raspberry Pi Motion Sensor using a PIR Sensor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.meccanismocomplesso.org/en/pir-motion-detector/&#34;&gt;PIR motion detector – a sensor for Arduino and Raspberry Pi (1st part)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/</id>
        <title>Cómo usar un diodo LED, un pulsador y un zumbador con la Raspberry Pi y Java</title>        
        <updated>2017-04-09T12:00:00+02:00</updated>
        <published>2017-04-09T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/04/como-usar-un-diodo-led-un-pulsador-y-un-zumbador-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El &lt;em&gt;kit&lt;/em&gt; de electrónica para la Raspberry Pi incluye varios dispositivos controlables con lo &lt;em&gt;pines&lt;/em&gt; GPIO. En el caso de este ejemplo usaré un diodo LED, un zumbador y un pulsador para crear un ejemplo en el que el diodo LED se enciendan y el zumbador emita un sonido cuando el pulsador se active.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En artículos anteriores ya he comentado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/&#34;&gt;como hacer parpadear un diodo LED&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;como usar un display LCD de 16 columnas y 2 filas&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/&#34;&gt;como obtener la temperatura y humedad de un sensor DHT11&lt;/a&gt;, todo estos ejemplo usando varios elementos de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi 3&lt;/a&gt;. En este artículo en el que mostraré cómo usar un LED, un pulsador y un zumbador es mucho más sencillo que los casos del &lt;em&gt;display&lt;/em&gt; LCD de 16 filas y 2 columnas y del sensor DHT11. Vistos los ejemplos de artículos anteriores lo más difícil de este es hacer el conexionado con los cables. Para controlar los pines usaré la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; que proporciona clases de alto nivel para cada uno de estos elementos para que desde código Java sea bastante sencillo controlarlos.&lt;/p&gt;

&lt;p&gt;El ejemplo consistirá en que cuando se presione el pulsador se encienda el diodo LED y el zumbador se active emitiendo un zumbido audible. Cada uno de estos elementos requiere usar un &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; de los 17 que hay disponibles en la Raspberry Pi 1 que es el modelo que tengo yo o de los 26 &lt;em&gt;pines&lt;/em&gt; que poseen versiones posteriores de la Raspberry Pi como la B+, 2 y 3.&lt;/p&gt;

&lt;p&gt;Este sería el esquema de conexionado de los elementos. El diodo LED tiene una polaridad de modo que la patita larga que es la parte positiva se conectará al &lt;em&gt;pin&lt;/em&gt; GPIO 1 según la nomenclatura de wiringPi o el 18 según la de Broadcom con una resistencia de 200 ohmios entre el &lt;em&gt;pin&lt;/em&gt; GIPO y la patita de diodo para que la intensidad que atraviesa el diodo sea menor y no se desgaste. El zumbador también tiene una polaridad que en el caso del &lt;em&gt;kit&lt;/em&gt; que he usado viene serigrafiado y con una etiqueta, la parte positiva se conectará a otro &lt;em&gt;pin&lt;/em&gt; GPIO y usaré el &lt;em&gt;pin&lt;/em&gt; GPIO 2. Para que el pulsador haga contacto bien en la placa de conexiones para hacer pruebas sin soldadura hay que presionar sin forzar pero hasta que quede bien encadado y sin fijo, usaré el &lt;em&gt;pin&lt;/em&gt; GPIO 3.&lt;/p&gt;

&lt;p&gt;Para el pulsador usaré el método &lt;em&gt;PULL UP&lt;/em&gt; (el otro es &lt;em&gt;PULL DOWN&lt;/em&gt;) donde conectaré una patita del pulsador a tierra y la adyacente al &lt;em&gt;pin&lt;/em&gt; GPIO, en &lt;a href=&#34;https://grantwinney.com/using-pullup-and-pulldown-resistors-on-the-raspberry-pi/&#34;&gt;algunas páginas&lt;/a&gt; se explica haciendo uso de resistencias, sin embargo, el uso de resistencias en la Raspberry Pi no es necesario ya que los &lt;em&gt;pines&lt;/em&gt; ya &lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/special-pin-functions/&#34;&gt;las tienen incorporadas internamente&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/cableado.jpg&#34; title=&#34;cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/esquema-cableado.png&#34; title=&#34;Esquema del cableado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/esquema-cableado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Esquema del cableado&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La librería diozeo para identificar los pines usa la nomenclatura de Broadcom, otras son las nomenclaturas del &lt;em&gt;header&lt;/em&gt; o de wiringPi. Hay que tener en cuenta la nomenclatura que se use ya que el número del &lt;em&gt;pin&lt;/em&gt; variará en cada una de ellas, también hay que tener en cuenta la versión de la Raspberry Pi ya que hay pequeñas variaciones según la versión. Por ejemplo, según la tabla de referencia siguiente, para la Raspberry Pi 1 y según la nomenclatura de Brodacom el &lt;em&gt;pin&lt;/em&gt; GPIO 18 corresponde al número 12 de &lt;em&gt;header&lt;/em&gt;, el GPIO 21 al número 13 y el GPIO 22 al número 15. Según la nomenclatura de wiringPi el GPIO 1 corresponde al número 1, el GPIO 2 al número 2 y el GPIO 3 al número 3.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi1b-header-rev1.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi1b-header-rev1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi3b-header.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi3b-header-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Header de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi1b-header-rev1-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi1b-header-rev1-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi3b-header-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/221/raspberrypi3b-header-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Headers de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Usando la librería diozero el código Java para realizar el ejemplo no necesita excesiva explicación. Es posible hacer uso de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;funciones lambdas que incorporó el lenguaje Java en la versión de Java 8&lt;/a&gt; y con la sentencia &lt;em&gt;try-with-resources&lt;/em&gt; del lenguaje los elementos se finalizará correctamente en caso de producirse alguna excepción, por ejemplo apagando el diodo en caso de que estuviese encendido o apagando el zumbador en su caso.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0d5bb399bc7a20b903ee54ec41dee8e1.js?file=LedButtonBuzzer.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este es un pequeño vídeo en el que muestro su funcionamiento.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/jaqMi53pjf0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeLedButtonBuzzer&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/</id>
        <title>Obtener la temperatura y humedad con el sensor DHT11, la Raspberry Pi, C y Java</title>        
        <updated>2017-04-02T10:15:00+02:00</updated>
        <published>2017-03-31T19:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/obtener-la-temperatura-y-humedad-con-el-sensor-dht11-la-raspberry-pi-c-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El &lt;em&gt;kit&lt;/em&gt; de iniciación a la electrónica para la Raspberry Pi tiene un sensor para la temperatura y humedad, el modelo DHT11. Obtener la información requiere restricciones de tiempo, este es un caso de uso justificado para usar lenguaje C y JNI para integrarlo con Java. En el ejemplo el código C llama a un método de una clase Java con dos valores enteros o lanza una excepción en caso de que al realizar la lectura haya habido algún error en la transmisión de los bits.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Entre los varios sensores incluídos en el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación para la Raspberry Pi&lt;/a&gt; está el sensor de temperatura y humedad con el modelo DHT11. El DHT11 es un sensor muy básico pero suficiente y válido si el objetivo es trastear un poco con hardware.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;http://www.micropik.com/PDF/dht11.pdf&#34;&gt;especificación del sensor DHT11&lt;/a&gt; está descrita su funcionamiento y forma de comunicación. Utiliza 3 cables, uno para la corriente de 3.3V, otro para tierra y finalmente uno de datos que se conecta a cualquier &lt;em&gt;pin&lt;/em&gt; &lt;abbr title=&#34;General Purpose Input Output&#34;&gt;GPIO&lt;/abbr&gt; de la Raspberry Pi. Según la especificación el sensor proporciona sus datos en unos 4 ms cuando se le emite un pulso bajo durante unos pocos microsegundos y a continuación uno alto durante otros pocos microsegundos, momento a partir del cual el sensor emite 40 bits de información empezando por un pulso bajo de inicio y a continuación el propio bit con un pulso alto, según sea la duración del pulso alto el bit se considera un 0 si es menor de unos 27μs y un 1 si dura más de ese tiempo hasta unos 80μs momento en el que se emite el siguiente bit de información. Los primeros 8 bits corresponden a la parte entera de la humedad, los siguientes 8 bits a la parte decimal de la humedad, el tercer grupo de 8 bits a la parte entera de la temperatura y 8 bits más para la parte decimal. El último grupo de 8 bits hasta completar los 40 bits son de &lt;em&gt;checksum&lt;/em&gt; para detectar errores en la transmisión. El porcentaje de errores en la transmisión significativo en este sensor y quizá haya que realizar varias lecturas del sensor para obtener una correcta.&lt;/p&gt;

&lt;p&gt;Dada las restricciones de tiempo que utiliza el sensor en el ejemplo usaré el lenguaje C para obtener los valores de temperatura y humedad y &lt;abbr title=&#34;Java Native Interface&#34;&gt;JNI&lt;/abbr&gt; para acceder a ellos desde Java. Aún usando C se producen errores en la obtención de los valores ya que el método usado por el sensor y transmitir los datos basados en tiempo de microsegundos no es muy fiable. Usando Java la situación sería peor por las restricciones que impone la máquina virtual con sus paradas para la recolección de basura por ejemplo. Así que el ejemplo consistirá en una combinación de C y Java con JNI un poco más avanzado que el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/&#34;&gt;Ejemplo de JNI, usar código en C desde Java&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/dht11-1.jpg&#34; title=&#34;Sensor DHT11&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/dht11-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/dht11-2.jpg&#34; title=&#34;Sensor DHT11&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/dht11-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Sensor DHT11&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Lo primero que deberemos hacer para acceder a la información del sensor desde Java es crear una clase que contenga un método nativo que realizará la lectura de la información en C. Con la utilidad &lt;em&gt;javah&lt;/em&gt; obtendremos el archivo de cabecera que implementará el programa en C. Finalmente, siguiendo la especificación se escribe el código C que realice la lectura que en este caso usará la librería &lt;a href=&#34;http://wiringpi.com/&#34;&gt;wiringPi&lt;/a&gt; para la interacción con los pines GPIO de la Raspberry Pi.&lt;/p&gt;

&lt;p&gt;El código en C invocará el método &lt;em&gt;setTemperatureHumidity&lt;/em&gt; pasando como parámetros los datos de temperatura y humedad leídos del sensor, el método nativo &lt;em&gt;read&lt;/em&gt; es utilizado por el código Java que controla el sensor para realizar la lectura en el código C.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.h&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=Dht11.c&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código en C del sensor hay que compilarlo en la Raspberry Pi con el compilador &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; obteniendo una librería con código nativo que Java y JNI cargará y enlazará de forma dinámica en el programa Java. Ya que el código C usa la librería wiringPi ha de instalarse previamente junto con el compilador gcc. Obtenida la librería la copiamos mediante FTP o SSH de la Raspberry Pi a nuestro equipo de desarrollo. El código C realiza la lectura usando la librería wiringPi siguiendo la especificación de como se transmiten los datos por el sensor, realizada una lectura correcta usa varias de las funciones de la estructura &lt;a href=&#34;http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html&#34;&gt;JNIEnv&lt;/a&gt; para obtener la referencia a un método de la clase DHT11 e invocarlo con los valores obtenidos del sensor o lanza una excepción si la lectura ha sido errónea.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=install-packages.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El comando para compilar la librería de código nativo a partir del código en C y el archivo de cabecera generado con &lt;em&gt;javah&lt;/em&gt; es el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=compile.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para facilitar la ejecución la librería la proporcionó ya compilada y ubicada en el directorio &lt;em&gt;src/main/resources&lt;/em&gt; de modo que será incluida en el archivo &lt;em&gt;jar&lt;/em&gt; generado por &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; en el ejemplo y que la clase DHT11 extraerá al directorio temporal del sistema y cargará para su uso.&lt;/p&gt;

&lt;p&gt;La clase Java del ejemplo que hace uso del sensor realiza una lectura cada 3 segundos e imprime en la terminal y en el &lt;em&gt;display&lt;/em&gt; 1602 el último valor obtenido correctamente de la temperatura y humedad.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=TemperatureHumidity.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este es el esquema de conexiones que he utilizado para el ejemplo y una foto del cableado real, he usado del &lt;em&gt;pin&lt;/em&gt; GPIO número 2 según la nomenclatura de wiringPi para el cable de datos del sensor DHT11 que se corresponde con pin número 13 según la nomenclatura del &lt;em&gt;header&lt;/em&gt; de la Raspberry Pi. Para ver el cableado del &lt;em&gt;display&lt;/em&gt; 1602 más detalladamente y la activación del bus de comunicación I2C que necesita consulta el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/&#34;&gt;Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/cableado.jpg&#34; title=&#34;Cableado sensor DHT11 y display 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Cableado sensor DHT11 y display 1602&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Ejecutando el programa del ejemplo y usando el display 1602 (16 columnas y 2 filas) se muestra la temperatura y humedad obtenida del sensor.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/temperature-humidity.jpg&#34; title=&#34;Cableado ejemplo y funcionando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/temperature-humidity-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/display.jpg&#34; title=&#34;Cableado ejemplo y funcionando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/219/display-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Cableado ejemplo y funcionando&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En el kernel de Linux hay un módulo que proporciona también los valores del sensor, sin embargo, no he conseguido obtener la temperatura y humedad usándolo. Lo he probado con el kernel 4.4 de Arch Linux ARM y en la versión 4.9 veo que hay cambios en este módulo que quizá lo hagan funcionar. Para usar el módulo del kernel hay que añadir un poco de configuración para el inicio de la Raspberry Pi. En los archivos &lt;em&gt;/sys/devices/platform/dht11@0/iio:device0/in_temp_input&lt;/em&gt; y &lt;em&gt;/sys/devices/platform/dht11@0/iio:device0/in_temp_input&lt;/em&gt; estarán la temperatura y humedad respectivamente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=kernel-module-config.txt&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=cat.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para ejecutar el ejemplo con ya todo instalado uso uno de los siguientes dos comandos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c77e19703a53924171a6a4144a1b46a7.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeTemperatureHumidity&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html&#34;&gt;Java programming with JNI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hirt.se/blog/?p=493&#34;&gt;Accessing 1-wire Protocol Devices from Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/&#34;&gt;How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.prometec.net/sensores-dht11/&#34;&gt;Sensores de temperatura DHT11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Hexalyse/RPi-weather-log/blob/master/dht11.c&#34;&gt;dht11.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.uugear.com/portfolio/read-dht1122-temperature-humidity-sensor-from-raspberry-pi/&#34;&gt;Read DHT11/22 Temperature &amp;amp; Humidity Sensor from Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arduino-info.wikispaces.com/DHT11-Humidity-TempSensor&#34;&gt;Digital output temperature and humidity sensor DHT11 - DHT22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://playground.arduino.cc/Main/DHT11Lib&#34;&gt;A DHT11 Class for Arduino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/master/drivers/iio/humidity/dht11.c&#34;&gt;torvalds/linux/blob/master/drivers/iio/humidity/dht11.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortosaforum.com/raspberrypi/dht11driver.htm&#34;&gt;RaspberryPi DHT11 temperature and humidity sensor driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/</id>
        <title>Ejemplo de JNI, usar código en C desde Java</title>        
        <updated>2017-03-25T10:05:00+01:00</updated>
        <published>2017-03-25T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-de-jni-usar-codigo-en-c-desde-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Para tareas muy específicas que requieran alto rendimiento, baja latencia, tiempo real o haya restricciones de tiempo el lenguaje Java y la JVM pueden mostrar algunas limitaciones obligando a escribir alguna sección crítica de un programa en un lenguaje nativo como C o C++. Para hacer posible la integración entre Java y C existe en Java la API JNI. En este artículo mostraré como realizar un programa Java que emite el mensaje Hola Mundo desde una biblioteca compartida en C y usando JNI.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/gnu.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;SVG&#34; title=&#34;SVG&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.png&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Nunca hasta ahora había tenido necesidad de crear un programa que no estuviese completamente escrito en el lenguaje Java. La &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/overview-summary.html&#34;&gt;API de Java&lt;/a&gt; ofrece multitud de clases para cualquier funcionalidad que necesitemos desde estructuras de datos hasta algoritmos de búsqueda o criptografía. También porque el rendimiento de un programa en Java es suficiente y similar a un programa equivalente escrito en C o C++ gracias a las optimizaciones que implementa la máquina virtual de Java o &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; aún siendo los programas Java compilados a una representación intermedia de &lt;em&gt;bytecode&lt;/em&gt; independiente de la arquitectura de procesador y sistema operativo en archivos de extensión &lt;em&gt;class&lt;/em&gt; y posteriormente interpretados y traducidos a la arquitectura de ejecución, lo que le proporciona a Java la conocida frase &lt;em&gt;&amp;ldquo;Write once, run anywhere&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, en casos que se necesita un alto rendimiento para tareas muy específicas o evitar las imposiciones de la máquina virtual como las paradas que realiza para el recolector de basura una solución es escribir esa funcionalidad crítica en lenguaje C, C++ e incluso en &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. El caso de necesidad que me he encontrado es acceder a un sensor de temperatura DHT11 del &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt; para leer de él la temperatura y humedad. La forma que tiene el sensor DHT11 de proporcionar los datos tiene restricciones de tiempo, cuando se le requieren los valores envía 80 bits de datos donde un pulso de 27μs significa un 0 y un pulso de más de ese tiempo hasta 70μs significa un 1. Estas restricciones de tiempo del sensor y el hecho de que es en una modesta en potencia &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; 1 donde lo usaré hace que Java no sea capaz de leer correctamente los valores del sensor.&lt;/p&gt;

&lt;p&gt;Acceder desde Java a código nativo en C requiere usar &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html&#34;&gt;Java Native Interface o por sus siglas JNI&lt;/a&gt;. Lo primero que hay que realizar es crear una clase que declare los métodos que serán implementados de forma nativa declarando estos métodos usando la palabra reservada &lt;em&gt;native&lt;/em&gt; y que serán enlazados por la JVM cargando una librería compartida con &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#loadLibrary-java.lang.String-&#34;&gt;System.loadLibrary()&lt;/a&gt;. Creada la clase Java se ha de generar el archivo de cabecera &lt;em&gt;.h&lt;/em&gt; propia del lenguaje C con el programa de utilidad del JDK &lt;em&gt;javah&lt;/em&gt;. Con el archivo de cabecera se implementa la función y se crea una librería compartida en &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt; usando el &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;compilador gcc&lt;/a&gt;. Con la librería compartida se puede iniciar el programa Java. Si la biblioteca compartida no se encuentra se lanzará una excepción del tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/UnsatisfiedLinkError.html&#34;&gt;UnsatisfiedLinkError&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/UnsatisfiedLinkError.png&#34; title=&#34;Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/UnsatisfiedLinkError-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Excepción UnsatisfiedLinkError cuando no se encuentra la librería de código nativo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Algunas otras necesidades para hacer uso de JNI son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Acceder a características dependientes de la plataforma necesitadas por la aplicación que no están soportadas en la librería estándar de Java.&lt;/li&gt;
&lt;li&gt;Ya hay una librería escrita en otro lenguaje y se quiere hacer accesible a código Java a través de JNI.&lt;/li&gt;
&lt;li&gt;Se quiere implementar una pequeña parte de código crítico en un lenguaje de bajo nivel como ensamblador.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde los métodos de código nativo se puede:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crear, inspeccionar y actualizar objetos Java (incluyendo arrays y strings).&lt;/li&gt;
&lt;li&gt;Llamar a métodos Java.&lt;/li&gt;
&lt;li&gt;Capturar y lanzar excepciones.&lt;/li&gt;
&lt;li&gt;Cargar y obtener información de clases.&lt;/li&gt;
&lt;li&gt;Realizar validación de tipos en tiempo de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los comandos para generar el archivo de cabecera de C y compilarlo con el código nativo en una librería compartida con gcc son:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=build.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;La cabecera usa varias definiciones de tipos definidas en los archivos &lt;em&gt;jni.h&lt;/em&gt; y el archivo que variará según el sistema operativo &lt;em&gt;jni_md.h&lt;/em&gt;. En la &lt;a href=&#34;http://xdprof.sourceforge.net/doxygen/structJNIEnv__.html&#34;&gt;estructura JNIEnv&lt;/a&gt; con múltiples funciones de integración en C y Java, también varias definiciones de los tipos Java para usarlos en C como &lt;em&gt;jobject&lt;/em&gt;, &lt;em&gt;jstring&lt;/em&gt;, &lt;em&gt;jint&lt;/em&gt;, &lt;em&gt;jboolean&lt;/em&gt;, &lt;em&gt;jlong&lt;/em&gt;, &lt;em&gt;jdouble&lt;/em&gt;, &lt;em&gt;jchar&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;El programa que emite el mensaje &lt;em&gt;Hello World!&lt;/em&gt; desde código nativo en C debe cargar y enlazar la librería de código nativo con el código de la clase Java. Esto se muestra en el bloque de inicialización &lt;em&gt;static&lt;/em&gt; de la clase, en este caso usándo el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#load-java.lang.String-&#34;&gt;System.load()&lt;/a&gt;, la librería de código nativo de extensión &lt;em&gt;.so&lt;/em&gt; en GNU/Linux como en este caso al construirse el proyecto se incluye en el archivo &lt;em&gt;.jar&lt;/em&gt; del artefacto resultante se extráe al directorio temporal y se carga desde esa ubicación temporal. En el programa se llama al método &lt;em&gt;print&lt;/em&gt; implementado en código nativo y en el código C se usa la función &lt;em&gt;printf&lt;/em&gt; de la librería &lt;em&gt;stdio&lt;/em&gt; para emitir el mensaje:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.c&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=JniHelloWorld.h&#34;&gt;&lt;/script&gt;

&lt;p&gt;La librería compartida para un sistema &lt;em&gt;amd64&lt;/em&gt; la he compilado en mi equipo de escritorio y para la versión &lt;em&gt;arm&lt;/em&gt; en la Raspberry Pi e incluido en el directorio &lt;em&gt;src/main/resources&lt;/em&gt; de código fuente del ejemplo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/94e61b21e8d1378384e363879df5be31.js?file=execute.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/JniHelloWorld-amd64.png&#34; title=&#34;Mensaje en la terminal emitido desde código nativo (amd64)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/JniHelloWorld-amd64-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/JniHelloWorld-arm.png&#34; title=&#34;Mensaje en la terminal emitido desde código nativo (ARM)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/217/JniHelloWorld-arm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Mensaje en la terminal emitido desde código nativo en un sistema amd64 y ARM&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Ente ejemplo usa Java 8 y requiere instalar el compilador gcc para compilar la librería con código nativo. &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; ofrece soporte para &lt;a href=&#34;https://docs.gradle.org/3.4.1/userguide/native_software.html&#34;&gt;compilar código nativo con su plugin&lt;/a&gt;, sin embargo, he preferido usar y conocer los comandos javah y gcc sin usar Gradle. En el siguiente artículo mostraré el ejemplo del sensor DHT11 usando JNI y código nativo en C llamando a métodos de un objeto Java desde código C.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeJniHelloWorldLocal&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dogan.io/2015/08/15/java-jni-jnr-go/&#34;&gt;GO: Call me maybe, Java!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html&#34;&gt;Java Native Interface Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html&#34;&gt;Java Programming Tutorial, Java Native Interface (JNI)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/</id>
        <title>Controlar un display LCD 1602 para mostrar texto con la Raspberry Pi y Java</title>        
        <updated>2017-03-19T02:00:00+01:00</updated>
        <published>2017-03-18T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/controlar-un-display-lcd-1602-para-mostrar-texto-con-la-raspberry-pi-y-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Uno de los motivos por los que compré el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt;, además de cacharrear un poco, era en concreto controlar el &lt;em&gt;display&lt;/em&gt; LCD de 16 columnas y 2 filas. En el &lt;em&gt;kit&lt;/em&gt; el &lt;em&gt;display&lt;/em&gt; viene con un adaptador con el bus de comunicación I2C. El &lt;em&gt;display&lt;/em&gt; se puede usar sin este bus pero requiere utilizar muchos más pines GPIO de datos de los limitados 17 que ofrece la Raspberry Pi 1 y los 26 de las Raspberry Pi B+, 2  y 3. Controlar el &lt;em&gt;display&lt;/em&gt; con I2C requiere únicamente 2 pines, por contra sin usar I2C requiere un número significativamente mayor 4 u 8 pines.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;display&lt;/em&gt; 1602 con su adaptador para el bus I2C que viene con el &lt;em&gt;kit&lt;/em&gt; ya incorporado en la parte trasera es el siguiente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/display-lcd-1602.jpg&#34; title=&#34;Display LCD 16 columnas y 2 filas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/display-lcd-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/adaptador-bus-i2c-1602.jpg&#34; title=&#34;Adaptador bus I2C para display 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/adaptador-bus-i2c-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Display LCD 1602 y adaptador bus I2C&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El esquema de conexionado para controlar el &lt;em&gt;display&lt;/em&gt; requiere usar los pines de la Raspberry Pi &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; además de un &lt;em&gt;pin&lt;/em&gt; para proporcionar un voltaje de 5V y otro &lt;em&gt;pin&lt;/em&gt; para la tierra. El &lt;em&gt;pin&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; es el número 2 según la numeración de pines de la Raspberry Pi y el &lt;em&gt;SDL&lt;/em&gt; es el 5. El &lt;em&gt;pin&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; es utilizado en el bus I2C para transmitir los datos y el &lt;em&gt;SDL&lt;/em&gt; para la señal de reloj o sincronización. Utilizando la placa de extensión wiringPi de 26 &lt;em&gt;pines&lt;/em&gt; los &lt;em&gt;pines&lt;/em&gt; &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; se encuentran identificados por su nombre y el de la placa de extensión de 40 &lt;em&gt;pines&lt;/em&gt; que viene con el &lt;em&gt;kit&lt;/em&gt; de iniciación también, deberemos identificar estos pines y realizar las conexiones adecuadamente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/breadboard-cableado.jpg&#34; title=&#34;Cableado en la breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/breadboard-cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/esquema-cableado.png&#34; title=&#34;Esquema del cableado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/esquema-cableado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Cableado en la breadboard&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Hay que emplear varios cables macho-macho y hembra-hembra para conectar a los pines del adaptador I2C del &lt;em&gt;display&lt;/em&gt;  a los &lt;em&gt;pines&lt;/em&gt; del voltaje de 5V, tierra, &lt;em&gt;SDA&lt;/em&gt; y &lt;em&gt;SDL&lt;/em&gt; de la placa de pruebas sin soldadura.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/cables-macho-macho-hembra-hembra.jpg&#34; title=&#34;Unión cables macho-macho y hembra-hembra&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/cables-macho-macho-hembra-hembra-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Unión cables macho-hembra&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El siguiente paso será activar el bus I2C en la Raspberry Pi que por defecto está desactivado. Esto requiere añadir unos parámetros en la configuración de arranque y cargar unos módulos del kernel que finalmente crearán un dispositivo tal que en &lt;em&gt;/dev/i2c-0&lt;/em&gt; o &lt;em&gt;/dev/i2c-0&lt;/em&gt;. Si instalamos el paquete &lt;em&gt;i2c-tools&lt;/em&gt; podremos detectar el &lt;em&gt;display&lt;/em&gt; en el bus I2C, en la captura de pantalla en la dirección 27 que hay que usar al construir la instancia del controlador del &lt;em&gt;display&lt;/em&gt;. Estos cambios en la configuración de inicio requieren reiniciar la Raspberry Pi. En un sistema con la distribución &lt;a href=&#34;https://archlinuxarm.org/&#34;&gt;Arch Linux ARM&lt;/a&gt; los cambios son los siguientes.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=configuration.txt&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/i2cdetect.png&#34; title=&#34;Detectción del display 1602 en el bus I2C&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/i2cdetect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Detectción del display 1602 en el bus I2C&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Según la &lt;a href=&#34;https://www.sparkfun.com/datasheets/LCD/HD44780.pdf&#34;&gt;especificación del &lt;em&gt;display&lt;/em&gt; 1602&lt;/a&gt; este componente soporta varios comandos para controlarlo, algunos son para limpiar el texto, cambiar la dirección de escritura, añadir caracteres personalizados y emitir texto en la línea o posición del &lt;em&gt;display&lt;/em&gt; que queramos. No es simple el controlar el &lt;em&gt;display&lt;/em&gt; a bajo nivel ya que hay que trabajar en momentos con binario y usar bytes, por ello para el ejemplo usaré la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;diozero&lt;/a&gt; que ya trae una implementación de controlador con funciones de alto nivel &lt;em&gt;I2CLcd&lt;/em&gt; que en versiones más recientes de la librería ha sido renombrada a &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html&#34;&gt;HD44780Lcd&lt;/a&gt; mucho más cómoda que enviar &lt;em&gt;bytes&lt;/em&gt; a bajo nivel al bus I2C, el &lt;a href=&#34;https://github.com/mattjlewis/diozero/blob/master/diozero-core/src/main/java/com/diozero/HD44780Lcd.java&#34;&gt;código fuente de la clase HD44780Lcd&lt;/a&gt; está disponible y podemos verlo si hay curiosidad.&lt;/p&gt;

&lt;p&gt;En mi caso con la Raspberry Pi 1 he tenido que utilizar la versión 0.9 de la librería diozero porque la 0.8 me generaba un &lt;em&gt;stacktrace&lt;/em&gt; de una excepción &lt;em&gt;java.lang.UnsupportedOperationException&lt;/em&gt;. Obtener esta versión de la librería como aún era de desarrollo y no estaba publicada en &lt;a href=&#34;https://search.maven.org/&#34;&gt;Maven Central&lt;/a&gt; la he descargado de un &lt;a href=&#34;https://drive.google.com/drive/u/0/folders/0B2Kd_bs3CEYaZ3NiRkd4OXhYd3c&#34;&gt;google drive que ha creado el autor&lt;/a&gt; y usado en &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; como una dependencia del sistema de ficheros. Como librería subyacente de diozero para controlar los pines GPIO he usado &lt;a href=&#34;http://abyz.co.uk/rpi/pigpio/&#34;&gt;pigpio&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=java.lang.UnsupportedOperationException&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el ejemplo mostraré un texto en cada una de las lineas del &lt;em&gt;display&lt;/em&gt; y usaré una de las funciones del para mostrar caracteres personalizados con los que es posible crear &lt;em&gt;emojis&lt;/em&gt; o caracteres nuevos. El controlador de diozero ya contiene una buena colección de caracteres personalizados que definen el patrón de 5x8 puntos que siguen, los nombres de estos caracteres personalizados están en la clase interna &lt;em&gt;Characters&lt;/em&gt; de &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html&#34;&gt;HD44780Lcd&lt;/a&gt; aunque también podemos definir nuevos. El ejemplo es el siguiente donde se muestra el uso de los métodos &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setText-int-java.lang.String-&#34;&gt;setText&lt;/a&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-&#34;&gt;setCharacter&lt;/a&gt;, también el constructor donde hay que indicar la dirección asignada al dispositivo en el bus I2C que siendo la 27 corresponde con el valor definido en una constante. Pero también hay otros métodos como &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#clear--&#34;&gt;clear&lt;/a&gt;, &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOff--&#34;&gt;cursorOff&lt;/a&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#cursorOn--&#34;&gt;cursorOn&lt;/a&gt; para apagar y encender el cursor, &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOff--&#34;&gt;displayOff&lt;/a&gt;
&lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#displayOn--&#34;&gt;displayOn&lt;/a&gt; para apgar y encender el &lt;em&gt;display&lt;/em&gt; y &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#createChar-int-byte:A-&#34;&gt;createChar&lt;/a&gt; para crear nuevos caracteres definidos como una &lt;em&gt;array&lt;/em&gt; de 8 posiciones donde cada &lt;em&gt;byte&lt;/em&gt; indica los pixeles encendidos de cada fila del caracter de 5x8 y con &lt;a href=&#34;http://static.javadoc.io/com.diozero/diozero-core/0.9/com/diozero/HD44780Lcd.html#setCharacter-int-int-char-&#34;&gt;setCharacter&lt;/a&gt; para emitir uno de los 8 posibles que se pueden usar al mismo tiempo. Además de estos también hay otros pocos métodos más relacionados con el cursor.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=Lcd.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=build.gradle&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=executeSSH.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1ab3b748f7e9cc0c60cbc7c21531f21f.js?file=executeGradle.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/mensaje-lcd-1602.jpg&#34; title=&#34;Mensaje en LCD 1602&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/215/mensaje-lcd-1602-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Mensaje en LCD 1602&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&#34;media media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/V6msjQNDPuU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Pudiendo mostrar mensajes en &lt;em&gt;display&lt;/em&gt; es posible mostrar cualquier información que un programa sea capaz de capturar como temperatura y humedad del correspondiente sensor en el mismo &lt;em&gt;kit&lt;/em&gt;, estado de un pulsador, espacio disponible en el disco del sistema, y memoria libre, &lt;em&gt;uptime&lt;/em&gt; del sistema, fecha y hora, &amp;hellip; cualquier cosa que se nos ocurra.&lt;/p&gt;

&lt;p&gt;El ejemplo parece simple, y el programa Java lo es, pero requiere conocer varias cosas que en internet está dispersas como activar el bus I2C o conocer la librería diozero para controlar el &lt;em&gt;display&lt;/em&gt; que simplifica enormemente el código y nos evita comunicarnos a más bajo nivel con el &lt;em&gt;display&lt;/em&gt;, realizar las conexiones eléctricas también requiere algo de conocimiento. Averiguar todo esto me costó una buena cantidad de tiempo.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeLcd&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/</id>
        <title>Ejemplo encender y apagar diodo LED con la Raspberry Pi en Java</title>        
        <updated>2017-03-12T00:15:00+01:00</updated>
        <published>2017-03-11T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-encender-y-apagar-diodo-led-con-la-raspberry-pi-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El primer ejemplo que haré de un programa Java que usa los &lt;em&gt;pines&lt;/em&gt; GPIO para realizar algo con el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de inicialización a la electrónica con la Raspberry Pi&lt;/a&gt; consiste en un pequeño programa Java que hace parpadear un diodo LED. La librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;Diozero&lt;/a&gt; ofrece a los programas Java el acceso a los &lt;em&gt;pines&lt;/em&gt; GPIO de la diferentes versiones de la Raspberry Pi desde la 1 (rev 1 y rev 2) pasando por los modelos B+, 2 y 3. Otra librería que se puede usar con el lenguaje de programación Java es &lt;a href=&#34;http://pi4j.com/&#34;&gt;Pi4J&lt;/a&gt; aunque personalmente Diozero me ha gustado más por ser de más alto nivel.&lt;/p&gt;

&lt;p&gt;Algunas de las características que ofrece la librería Diozero son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Soporta dispositivos GPIO / I2C / SPI (LEDs, botones, sensores, motores, pantallas, etc).&lt;/li&gt;
&lt;li&gt;Soporta todos los modelos de las placas Raspberry Pi, Odroid C2, BeagleBone Black, C.H.I.P y Asus Tinker.&lt;/li&gt;
&lt;li&gt;Usa caracterśiticas de Java como &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;gestión automática de recursos&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;expresiones lambda&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;referencias a métodos&lt;/a&gt; que simplifican el desarrollo y mejoran la legibilidad.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rtd.diozero.com/en/latest/#devices&#34;&gt;Lista de deipositivos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Soporta varios proveedores para el acceso al los dispositivos con &lt;a href=&#34;http://rtd.diozero.com/en/latest/#performance&#34;&gt;diferentes grados de rendimiento&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una de las primeras cosas a conocer es como se numeran los &lt;em&gt;pines&lt;/em&gt; en la Raspberry Pi ya que hay varias nomenclaturas (&lt;em&gt;header&lt;/em&gt;, wiringPi y Broadcom) y que nomenclatura utiliza la librería Diozero. También deberemos tener en cuenta el modelo de la Raspberry Pi que poseamos ya que según el modelo hay pequeñas diferencias en algunos &lt;em&gt;pines&lt;/em&gt;. Además si usamos una placa de extensión para pruebas sin sodadura como la &lt;a href=&#34;http://wiringpi.com/&#34;&gt;wiringPi&lt;/a&gt; deberemos identificarlos por su nombre. Yo que poseo una de las primeras Raspberry Pi (la 1, rev1) el correspondiente su &lt;a href=&#34;https://www.raspberrypi.org/documentation/usage/gpio/&#34;&gt;esquema de &lt;em&gt;pines&lt;/em&gt; Raspberry Pi 1 (rev. 1)&lt;/a&gt; es el del enlace. En ese esquema se define que el &lt;em&gt;pin&lt;/em&gt; número 12 según el conteo del &lt;em&gt;header&lt;/em&gt; corresponde a GPIO 18 según la nomenclatura Broadcom y la librería Diozero y al GPIO 1 en la librería Pi4J y en la placa de extensión wiringPi.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/raspberrypi1b.jpg&#34; title=&#34;Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/raspberrypi1b-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/raspberrypi3b.jpg&#34; title=&#34;Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/raspberrypi3b-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Placas modelos Raspberry Pi 1 B y 3 B&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/breadboard-cableado.jpg&#34; title=&#34;Breadboard y placa extesión GPIO wiringPi de 26 pines&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/breadboard-cableado-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/gpio-extension-40-pines-board.jpg&#34; title=&#34;Placa extesión GPIO de 40 pines&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/gpio-extension-40-pines-board-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Breadboard y placa extesión GPIO wiringPi de 26 pines y 40 pines&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/esquema-cableado.png&#34; title=&#34;Esquema del cableado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/esquema-cableado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Esquema del cableado&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Como uso la placa de extensión wiringPi para conectar los &lt;em&gt;pines&lt;/em&gt; de la Raspberry Pi a otra placa para hacer pruebas sin soldadura también conocidas como &lt;em&gt;breadboard&lt;/em&gt;  resultará que en el programa Java al usar Diozero uso la nomenclatura Broadcom para identificar los pines pero al conectar los cables en la placa de pruebas uso la nomenclatura de wiringPi.&lt;/p&gt;

&lt;p&gt;Para el ejemplo utilizaré la placa de extensión sin soldadura, una resistencia de 200 ohmios (dadas sus bandas de colores rojo, negro, marrón y dorado) y un diodo LED además de un par de cables macho-macho para realizar las conexiones electrónicas entre el GPIO 18 (según la nomenclatura de la librería Diozero y Broadcom, 12 según la nomenclatura del &lt;em&gt;header&lt;/em&gt; y 1 según la de wiringPi) y la resistencia además de entre el diodo y la línea de tierra. Los diodos LED poseen una orientación y hay que conectar la resistencia con el polo positivo del diodo LED, el polo positivo del diodo LED identifica porque es la patita larga y el negativo con tierra es la patita corta. Si realizamos la conexión al revés solo pasará que el diodo no se enciende pero no lo estropeará, la resistencia si es necesaria para no hacer que pase por el diodo una intensidad que lo estropee como se explica en
&lt;a href=&#34;http://www.educachip.com/resistencia-led/&#34;&gt;¿Qué resistencia ooner a un LED?&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/diodo-resistencia.jpg&#34; title=&#34;Diodo blanco y resistencia de 200 ohmios&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/diodo-resistencia-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Diodo blanco y resistencia de 200 ohmios&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Las resistencias poseen cuatro bandas de colores que indican el valor en ohmios de esa resistencia, la tabla de colores es el siguiente:&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/codigo-colores-resistencias.jpg&#34; title=&#34;Código de colores de las resistencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/214/codigo-colores-resistencias-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Código de colores de las resistencias&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El programa Java para hacer parpadear el diodo LED con la librería Diozero con el proveedor &lt;a href=&#34;http://abyz.co.uk/rpi/pigpio/&#34;&gt;pigpio&lt;/a&gt;. El ejemplo consiste en activar y apagar el &lt;em&gt;pin&lt;/em&gt; sucesivamente en un bucle y usar el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#sleep-long-&#34;&gt;Thread.sleep&lt;/a&gt; para que pase unos segundos entre uno y otro y nos de tiempo a ver el encendido y apagado. El nada complejo programa Java para controlar el diodo y un vídeo de su funcionamiento están a continuación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1fda899b7fbbc19a82bb397d525927f2.js?file=PinBlink.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1fda899b7fbbc19a82bb397d525927f2.js?file=executeSSH.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1fda899b7fbbc19a82bb397d525927f2.js?file=executeGradle.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/NX5tBxWuzFA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En un artículo anterior comento &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/&#34;&gt;como disponer de un entorno para desarrollar, desplegar las librerías &lt;em&gt;jar&lt;/em&gt; en la Raspberry Pi&lt;/a&gt; y como ejecutar los ejemplos desde la línea de comandos usando una combinación de herramientas de &lt;a href=&#34;https://es.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt;, &lt;a href=&#34;https://rsync.samba.org/&#34;&gt;rsync&lt;/a&gt; y &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executePinBlink&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/</id>
        <title>Ejemplo Hello World con Java en la Raspberry Pi</title>        
        <updated>2017-03-04T23:00:00+01:00</updated>
        <published>2017-03-04T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/03/ejemplo-hello-world-con-java-en-la-raspberry-pi/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Este artículo es introductorio a los siguientes que escribiré y publicaré sobre el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/&#34;&gt;kit de iniciación a la electrónica para la Raspberry Pi&lt;/a&gt;. Antes de empezar a cacharrear con los sensores y dipositivos de entrada y salida, con los pines GPIO y para hacerlo de forma cómoda crearé un entorno de desarrollo y despliegue en la &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; usando &lt;a href=&#34;https://es.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt;, &lt;a href=&#34;https://rsync.samba.org/&#34;&gt;rsync&lt;/a&gt; para copiar los artefactos del equipo de desarrollo a la RPi y &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; usándolo desde &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; para lanzar comandos y ejecutar los ejemplos de forma remota aunque si no se quiere usar Ansible se pueden lanzar los comandos mediante SSH.&lt;/p&gt;

&lt;p&gt;En la Raspberry Pi deberemos instalar por supuesto &lt;a href=&#34;http://www.oracle.com/technetwork/java/index.html&#34;&gt;Java&lt;/a&gt; (es posible usar Java 8) junto con SSH y rsync, configurar el servidor SSH en la RPi modificando el archivo &lt;em&gt;/etc/ssh/sshd_config&lt;/em&gt;, habilitar el servidor SSH, copiar nuestra &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/&#34;&gt;clave pública ssh generada previamente&lt;/a&gt; al archivo &lt;em&gt;~/.ssh/authorized_keys&lt;/em&gt; del usuario e instalar &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; como requerimiento de Ansible. Los programas Java los escribiremos en un equipo más potente que la Raspberry Pi ya sea un portátil o un equipo de sobremesa con un IDE ya sea &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;, &lt;a href=&#34;https://eclipse.org&#34;&gt;eclipse&lt;/a&gt; u otro, también deberemos instalar Gradle, Ansible y rsync. En Arch Linux con los siguientes comandos del gestor de paquetes:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=pacman-raspberrypi.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=authorized_keys&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=pacman.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con la ayuda de unas tareas para la herramienta de construcción Gradle haremos el despliegue y la ejecución de la librería &lt;em&gt;jar&lt;/em&gt; del proyecto de los ejemplos y de las dependencias que necesiten. El archivo de construcción de Gradle sería el siguiente en el que la tarea &lt;em&gt;copyDependencies&lt;/em&gt; copia las dependencias al directorio &lt;em&gt;build/libs&lt;/em&gt;. La tarea &lt;em&gt;upload&lt;/em&gt; ejecutan el comando &lt;em&gt;rsync&lt;/em&gt; para subir el archivo &lt;em&gt;jar&lt;/em&gt; y las dependencias del proyecto a la Raspberry Pi. Finalmente, una tarea como &lt;em&gt;executeHelloWorld&lt;/em&gt; ejecutará el comando en la Raspberry Pi para lanzar el programa Java. Con SSH también se puede lanzar el comando de forma remota cambiando la dirección IP de la Raspberry Pi por la que tenga asignada.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=build.gradle&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=executeSSH.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=executeGradle.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El programa de ejemplo es universal gracias a la idea &lt;em&gt;«Write once, run anywhere»&lt;/em&gt; posibilitado por la máquina virtual o &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;&lt;a href=&#34;http://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java&#34;&gt;JVM&lt;/a&gt;&lt;/abbr&gt; y el &lt;em&gt;bytecode&lt;/em&gt;, está compilado en un sistema con arquitectura x64 (el de mi equipo) y ejecutado en un sistema con arquitectura arm (el de la RPi). No se diferencia en nada al que usaríamos para lo mismo en cualquier otro sistema distinto de la Raspberry Pi.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2a2fb6ccb095ddaee5a1df0a5ebb0cae.js?file=HelloWorld.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El resultado de este ejemplo es un mensaje en la terminal que es emitido por un programa Java ejecutado en la Raspberry Pi y lanzado de forma remota.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/213/java-raspberrypi-hello-world.png&#34; title=&#34;Ejemplo Hello World con Java en la Raspberry Pi&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/213/java-raspberrypi-hello-world-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Ejemplo Hello World con Java en la Raspberry Pi&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En los siguientes artículos de la serie mostraré ya como usar diferentes elementos de salida como diodos LED, zumbador, &lt;em&gt;display&lt;/em&gt; LCD 1602 o de entrada como un pulsador.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRaspberryPi&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew executeHelloWorld&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/</id>
        <title>Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</title>        
        <updated>2017-02-18T10:00:00+01:00</updated>
        <published>2017-02-18T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Entre las ventajas de integrar dos aplicaciones mediante el envío de mensajes están que evita que estén acopladas y la comunicación es asíncrona. Con RabbitMQ también podremos implementar cada uno de ellas con el lenguaje de programación que prefiramos de entre las varias posibilidades para las que ofrece clientes y por esto último podemos preferir usarlo en vez de las especificación JMS propia de Java EE que nos obligaría a usar un servidor de aplicaciones que lo implemente, posiblemente JBoss/Wildfly o Weblogic en vez de Tomcat o Jetty. En el artículo incluyo un ejemplo para el lenguaje Java mostrando el envío y recepción de mensajes junto con la aplicación de administración que nos proporcionará información útil.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/rabbitmq.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;RabbitMQ&#34; title=&#34;RabbitMQ&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las aplicaciones que se integran mediante el envío y recepción de mensajes evitan el acoplamiento y sincronía junto con la posibilidad de implementar cada una de ellas con diferentes lenguajes o plataformas. Entre las especificaciones que componen Java EE está &lt;abbr title=”Java Message Service”&gt;JMS&lt;/abbr&gt; pero tanto la aplicación que envía como la que recibe mensajes deben estar programadas en el lenguaje Java, a menos que incluyamos un adaptador que permita a la aplicación no Java interactuar con JMS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; es un software que proporciona una funcionalidad similar a JMS pero con la ventaja que ofrece soporte para los lenguajes más populares como &lt;a href=&#34;http://www.oracle.com/technetwork/java/index.html&#34;&gt;Java&lt;/a&gt; y &lt;a href=&#34;http://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java&#34;&gt;&lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/es/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://www.microsoft.com/net&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; y varias más. Usa varios conceptos similares a los presentes en JMS como que el emisor envía los mensajes a una cola y el receptor los lee de ella de modo que ni el emisor ni receptor se conocen consiguiendo de este modo el desacoplamiento entre ellos. Los mensajes son leídos de las colas con la posibilidad de que cada mensaje sea recibido por un único receptor o por cada uno de ellos.&lt;/p&gt;

&lt;p&gt;Realmente en RabbitMQ los mensajes no son enviados directamente por el emisor a las colas sino que se envían a un &lt;em&gt;exchange&lt;/em&gt; que finalmente lo enruta y encola en la cola destino. Los &lt;em&gt;exchanges&lt;/em&gt; pueden ser directos basando su lógica de encolado según el valor del &lt;em&gt;binding key&lt;/em&gt; enviada junto con el mensaje y un &lt;em&gt;routing key&lt;/em&gt; asociada con la cola o basados en temas en los que se usa una cadena formada por una lista de palabras separada por puntos, la lógica de enrutado se toma según si el &lt;em&gt;binding key&lt;/em&gt; cumple el patrón del &lt;em&gt;routing key&lt;/em&gt; que puede contener sustituidores de palabras, siendo un &lt;em&gt;*&lt;/em&gt; una palabra exacta y &lt;em&gt;#&lt;/em&gt; varias palabras contiguas.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;http://www.rabbitmq.com/documentation.html&#34;&gt;documentación de RabbitMQ&lt;/a&gt; hay 6 tutoriales en diferentes lenguajes para el envío y recepción de mensajes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-java.html&#34;&gt;Tutorial 1, Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-two-java.html&#34;&gt;Tutorial 2, Work Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-three-java.html&#34;&gt;Tutorial  3, Publish/Subscribe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-four-java.html&#34;&gt;Tutorial 4, Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-five-java.html&#34;&gt;Tutorial 5, Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-six-java.html&#34;&gt;Tutorial 6, Remote procedure call (RPC)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basándome en estos ejemplos he creado un proyecto uno muy similar al Tutorial 1, ejecutable más fácilmente con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tanto en el emisor como en el receptor deberemos declarar las colas que van a usar (si una no existe se creará y si existe se usará), a la cola se le asigna un nombre y el receptor define un manejador para recibir los mensajes según se envían.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=Send.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=Receive.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para ejecutar el ejemplo usaré el &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;contenedor de Docker para RabbitMQ&lt;/a&gt; iniciándolo con &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; y el siguiente archivo descriptor. Puedes consultar la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;serie de artículos sobre Docker&lt;/a&gt; que escribí para conocer cómo usarlo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=docker-run.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez iniciado el contenedor y con el código fuente del ejemplo, iniciamos en cualquier orden la parte receptora de los mensajes y la parte emisora de mensajes con los comandos &lt;code&gt;./gradlew receive&lt;/code&gt; y &lt;code&gt;./gradlew send&lt;/code&gt; respectivamente, momento en el cual veremos que en la consola salen las notificaciones de recepción y envío.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/send.png&#34; title=&#34;Aplicación de ejemplo enviando mensajes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/send-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/receive.png&#34; title=&#34;Aplicación de ejemplo reciviendo mensajes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/receive-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En la comunicación con RabbitMQ se puede usar &lt;a href=&#34;http://www.rabbitmq.com/ssl.html&#34;&gt;TLS/SSL&lt;/a&gt; así como mecanismos de &lt;a href=&#34;http://www.rabbitmq.com/authentication.html&#34;&gt;autenticación&lt;/a&gt; y &lt;a href=&#34;http://www.rabbitmq.com/access-control.html&#34;&gt;autorización&lt;/a&gt; para mayor seguridad. Usando confirmaciones si el receptor falla en el procesado el mensaje no se pierde ya que no se habrá declarado como &lt;em&gt;acknowledge&lt;/em&gt; aún así si RabbitMQ falla los mensajes se perderán a menos que las colas se declaren como persistentes las cuales se guardarán en disco perdurando a una catástrofe.&lt;/p&gt;

&lt;p&gt;RabbitMQ posee un &lt;a href=&#34;https://www.rabbitmq.com/management.html&#34;&gt;&lt;em&gt;plugin&lt;/em&gt; para la administración&lt;/a&gt; con el que podemos administrar permisos, tener una vista global, ver ratios de mensajes, estadísticas, colas, &lt;em&gt;exchanges&lt;/em&gt; y más información, nos da información muy interesante sobre el estado del procesamiento de mensajes. Es accesible mediante el navegador y la URL &lt;em&gt;http://localhost:15672/&lt;/em&gt;. En la captura del estado de la cola &lt;em&gt;hello&lt;/em&gt; hay 10 mensajes encolados pendientes de entregar a algún receptor.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/rabbitmq-management.png&#34; title=&#34;Aplicación web de administración de RabbitMQ&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/rabbitmq-management-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/rabbitmq-queue.png&#34; title=&#34;Información de estado de una cola&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/210/rabbitmq-queue-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para profundizar más en las aplicaciones basadas en mensajes con RabbitMQ dos buenos libros son &lt;a href=&#34;http://amzn.to/2lTGMQc&#34;&gt;Learning RabbitMQ&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2lW9qwF&#34;&gt;Matering RabbitMQ&lt;/a&gt; cubriendo temas más avanzados como &lt;em&gt;clustering&lt;/em&gt;, alta disponibilidad, arquitectura, patrones de diseño, seguridad y rendimiento.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=9bb0705e8a34f246d5530b141b0a690e&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=e87eebb622314cdf0c2c14fc32940264&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoRabbitMQ&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up &amp;amp;&amp;amp; ./gradlew receive &amp;amp;&amp;amp; ./gradle send&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/documentation.html&#34;&gt;Documentación RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/&#34;&gt;Introducción y ejemplo sencillo de Java Message Service (JMS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/</id>
        <title>Cómo crear un servicio de systemd para una aplicación con Spring Boot</title>        
        <updated>2017-02-11T10:00:00+01:00</updated>
        <published>2017-02-11T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/02/como-crear-un-servicio-de-systemd-para-una-aplicacion-con-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La mayoría de distribuciones Linux ya usan systemd como gestor y supervisor de los servicios del sistema.  Creando un descriptor podremos gestionar un servicio propio con los mismos comandos de systemd que usamos para cualquier otro servicio del sistema.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/linux.png&#34; class=&#34;right&#34; alt=&#34;Linux&#34; title=&#34;Linux&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Habiendo creado una aplicación o microservicio, por ejemplo con &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt;, necesitaremos que se inicie con el sistema y una forma de gestionarlo para detenerlo, reiniciarlo y que se reinicie en caso de salida abrupta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.freedesktop.org/wiki/Software/systemd/&#34;&gt;systemd&lt;/a&gt; es el gestor de servicios que han adoptado la mayoría de distribuciones importantes como &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;https://www.centos.org/&#34;&gt;CentOS&lt;/a&gt;, &lt;a href=&#34;https://www.redhat.com/es/technologies/linux-platforms/enterprise-linux&#34;&gt;RHEL&lt;/a&gt;, &lt;a href=&#34;https://www.opensuse.org/es/&#34;&gt;openSUSE&lt;/a&gt;, incluso &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; después de abandonar su propio gestor de servicios &lt;a href=&#34;https://es.wikipedia.org/wiki/Upstart&#34;&gt;Upstart&lt;/a&gt;. Podemos usar systemd para que gestione como servicio una aplicación propia. Para ello deberemos crear un archivo &lt;em&gt;unit&lt;/em&gt; que describa el servicio y sus dependencias con otros servicios para que se inicie correctamente, él y sus dependencias.&lt;/p&gt;

&lt;p&gt;Los servicios se definen en archivos de texto denominados &lt;em&gt;unit&lt;/em&gt; que tienen un formato similar a los archivos &lt;em&gt;.desktop&lt;/em&gt; que a su vez están inspirados en los archivos &lt;em&gt;.ini&lt;/em&gt; de Windows. En la &lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&#34;&gt;documentación de los archivos &lt;em&gt;unit&lt;/em&gt; de systemd&lt;/a&gt; se detalla con amplitud los archivos &lt;em&gt;unit&lt;/em&gt; de systemd, tienen tres secciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[Unit]: contiene información genérica independiente del tipo de servicio como descripción, requerimientos, deseos o orden de inicio.&lt;/li&gt;
&lt;li&gt;[Service]: define el tipo de servicio, los comandos de preinicio, inicio, postinicio, parada, postparada, condiciones reinicio y más parámetros comentados en la &lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/systemd.service.html&#34;&gt;documentación de los sevicios de systemd&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[Install]: esta sección es usada al habilitar o deshabilitar un servicio en el sistema con el comando &lt;em&gt;systemctl&lt;/em&gt;, pudiendo por ejemplo que se inicie este servicio cuando otro se inicie siendo otra forma de declarar dependencias. De este modo se puede indicar que un servicio tiene otros como dependencia pero también se puede indicar que un servicio se inicie cuando otro lo haga.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando la aplicación del &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Ejemplo de API REST en Java con JAX-RS y Spring Boot&lt;/a&gt;, crearé un archivo &lt;em&gt;unit&lt;/em&gt; de systemd para que se inicie con el sistema y se reinicie en caso de fallo. Primeramente deberemos crear los archivos que definen el servicio para systemd y sus dependencias si las tienen. En los siguientes ejemplos &lt;em&gt;spring-boot-jaxrs.service&lt;/em&gt; es una aplicación de &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; con una interfaz REST que simplemente devuelve el mensaje indicado por parámetro con la fecha en la dirección &lt;em&gt;http://localhost:8080/message?message=Hola&lt;/em&gt;. &lt;em&gt;spring-boot-jaxrs-postgres.service&lt;/em&gt; es el mismo servicio pero que tiene una dependencia sobre un contenedor de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; con una base &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, aunque la aplicación Spring Boot no hace uso de la base de datos PostgreSQL sirve para observar que si se inicia el servicio de la aplicación Java también se inicia el servicio de la base de datos si no estuviera ya en ejecución. &lt;em&gt;postgres.service&lt;/em&gt; es el servicio de la base de datos PostgreSQL en un contenedor de Docker y que tiene como dependencia el servicio de Docker.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3c6603987257cde5e0b182bf8066798f.js?file=spring-boot-jaxrs.service&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3c6603987257cde5e0b182bf8066798f.js?file=spring-boot-jaxrs-postgres.service&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3c6603987257cde5e0b182bf8066798f.js?file=postgres.service&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
        &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/102785.js&#34; id=&#34;asciicast-102785&#34; async&gt;&lt;/script&gt;
        &lt;noscript&gt;&lt;a href=&#34;https://asciinema.org/a/102785&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/102785.png&#34; width=&#34;734&#34;/&gt;&lt;/a&gt;&lt;/noscript&gt;
        
        &lt;figcaption&gt;Servicio de systemd para una aplicación con Spring Boot&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;La instalación de la aplicación y de los servicios de systemd en el sistema se realizan copiando archivos, cambiando algunos permisos y usando los comandos de systemd para gestionar los servicios. Los mensajes de salida que emite el servicio se obtienen con el comando &lt;code&gt;journalctl -u spring-boot-jaxrs.service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Los archivos &lt;em&gt;unit&lt;/em&gt; propios deben ser ubicados en el directorio &lt;em&gt;/etc/systemd/system/&lt;/em&gt;, siendo el directorio &lt;em&gt;/usr/lib/systemd/system/&lt;/em&gt; donde se ubican los instalados por los paquetes del sistema. Iniciado el servicio con el comando &lt;code&gt;sudo systemctl start spring-boot-jaxrs.service&lt;/code&gt;, si queremos habilitarlo con el inicio del sistema usamos el comando &lt;code&gt;sudo systemctl enable spring-boot-jaxrs.service&lt;/code&gt;. Para ver el estado del servicio usamos el comando &lt;code&gt;sudo systemctl status spring-boot-jaxrs.service&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3c6603987257cde5e0b182bf8066798f.js?file=install.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3c6603987257cde5e0b182bf8066798f.js?file=manage.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;En los enlaces de referencia hay documentación más detallada tanto para gestionar los servicios con systemd como también documentación de sus archivos &lt;em&gt;unit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrs&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;sudo systemctl start spring-boot-jaxrs.service&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files&#34;&gt;Understanding Systemd Units and Unit Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/systemd.unit.html&#34;&gt;systemd unit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.freedesktop.org/software/systemd/man/systemd.service.html&#34;&gt;systemd service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/engine/admin/host_integration/&#34;&gt;Docker host integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#deployment-install&#34;&gt;Installing Spring Boot applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Systemd&#34;&gt;Systemd (Arch Linux Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/</id>
        <title>Registro y descubrimiento de servicios con Spring Cloud y Consul</title>        
        <updated>2017-01-28T11:00:00+01:00</updated>
        <published>2017-01-28T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Tradicionalmente el conectar un servicio con sus servicios dependientes se ha realizado por configuración, normalmente mediante un nombre de dominio y su puerto. Esta configuración estática es suficiente para unos pocos servicios y que no varían durante su funcionamiento. Con el advenimiento de los microservicios con su estado y número cambiantes en el tiempo han surgido varias herramientas para en vez de usar configuración usar descubrimiento. Una de estas herramientas Consul para la que Spring Cloud proporciona integración.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/spring.png&#34; class=&#34;right&#34; alt=&#34;Spring&#34; title=&#34;Spring&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En una aplicación con una arquitectura de microservicios esta se compone de múltiples partes cambiantes. Los microservicios pueden aparecer, desaparecer, variar en número o cambiar de ubicación, la aplicación debe ser tolerante a esos cambios y seguir proporcionando su servicio. Por tanto, la configuración de red de los servicios no se puede realizar usando direcciones &lt;abbr title=&#34;Internet Protocol&#34;&gt;IP&lt;/abbr&gt; ya que no se conocen las que utilizarán los microservicios y usar nombres de dominio de &lt;abbr title=&#34;Domain Name System&#34;&gt;DNS&lt;/abbr&gt; puede no ser viable ya que los cambios tardan en propagarse. Conocer el nombre de &lt;em&gt;host&lt;/em&gt; y puerto reales de los microservicios es proporcionado por la funcionalidad de descubrimiento de servicios o &lt;em&gt;service discovery&lt;/em&gt; que proporcionan algunos servicios como &lt;a href=&#34;https://github.com/Netflix/eureka&#34;&gt;Eureka&lt;/a&gt;, &lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; o &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache Zookeper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En este artículo explicaré como usar la parte de descubrimiento de servicios de Consul usando una aplicación con &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; y  con &lt;a href=&#34;http://projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;. Spring Cloud proporciona varias cosas comunes para aplicaciones basadas en microservicios. Si aún no conoces las herramientas en las que se basará el ejemplo puedes consultar los siguientes artículos específicos como introducción:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html&#34;&gt;Herramienta de construcción Gradle &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;Ejemplo de multiproyecto con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/&#34;&gt;Aplicación Java autocontenida con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config/&#34;&gt;Configuración de una aplicación en diferentes entornos con Spring Cloud Config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consul además de descubrimiento de servicios proporciona otras funcionalidades como detección de fallos o caídas para prevenir enviar peticiones a máquinas fuera de servicio y almacenamiento básico clave/valor para configuración dinámica o activación de características. Dispone de una aplicación web en la que podemos ver el estado de los servicios, una &lt;a href=&#34;https://www.consul.io/docs/agent/http.html&#34;&gt;API REST&lt;/a&gt; con la que comunicarse con Consul en una aplicación o en cada microservicio y un servidor de nombres &lt;abbr&gt;DNS&lt;/abbr&gt;, podemos usar cualquiera de las dos interfaces de consulta, la basada en la &lt;abbr&gt;API&lt;/abbr&gt; &lt;abbr&gt;REST&lt;/abbr&gt; o la basada en DNS para obtener las direcciones IP con la ubicación de los servicios.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/206/consul.png&#34; alt=&#34;Consul&#34; title=&#34;Consul&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Instalar Consul es muy sencillo basta con &lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;descargar un binario&lt;/a&gt; y descargar la interfaz web si queremos tener el &lt;em&gt;dashboard&lt;/em&gt; con la información del servicio. Descargados y descomprimidos Consul se inicia con el siguiente comando. Podemos acceder al panel &lt;em&gt;dashboard&lt;/em&gt; con la dirección &lt;a href=&#34;http://localhost:8500&#34;&gt;http://localhost:8500&lt;/a&gt; con un navegador web. Inicialmente en el panel de servicios solo se encuentra el propio de Consul cuando aún no se ha registrado ningún servicio, aplicación o microservicio.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=consul.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una aplicación que use Spring Boot y que quiera hacer pública su disponibilidad en Consul basta con que use la anotación &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; en la clase de inicio de la aplicación junto con las dependencias adecuadas. Con la declaración de esta anotación y la dependencia &lt;em&gt;spring-cloud-starter-consul-all&lt;/em&gt; Spring se comunicará con Consul a través de la API REST para registrar cuando se inicie la aplicación, su nombre, nombre de máquina y puerto en el que estará disponible.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Spring Cloud proporciona además un servicio que podemos usar para conocer los servicios registrados en Consul, con la clase &lt;em&gt;DiscoveryClient&lt;/em&gt; podemos conocer los nombres de los servicios, su nombre de máquina y puerto desde una aplicación Java. En el método &lt;em&gt;run&lt;/em&gt; de la clase &lt;em&gt;Main&lt;/em&gt; se usa en este ejemplo para imprimir en la salida el listado de servicios registrados en Consul. Uno de esos servicios esta aplicación de ejemplo, ya que se registra en Consul cuando se inicia.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/206/consul-services.png&#34; title=&#34;Servicios registrados en Consul&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/206/consul-services-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Servicios registrados en Consul&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Consul para conocer que los servicios siguen en funcionamiento hace una petición &lt;abbr&gt;HTTP&lt;/abbr&gt; cada ciertos segundos a una ruta de la aplicación, Spring Boot proporciona una dependencia, &lt;em&gt;spring-boot-starter-actuator&lt;/em&gt;, que usada provee del &lt;em&gt;endpoint /health&lt;/em&gt; para que Consul monitorice el estado del servicio.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/206/service-health.png&#34; title=&#34;Endpoint de estado de servicio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/206/service-health-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Endpoint de estado de servicio&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Esta es la salida en la consola listando los servicios disponibles, siendo uno de ellos esta aplicación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudConsul&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./consul/consul.sh y ./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloud.spring.io/spring-cloud-consul/&#34;&gt;Spring Cloud Consul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>