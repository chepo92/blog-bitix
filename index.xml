<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-10-01T11:30:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-de-versiones-antiguas/</id>
        <title>La triste realidad de Java de versiones antiguas</title>        
        <updated>2017-10-01T12:00:00+02:00</updated>
        <published>2017-10-01T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-de-versiones-antiguas/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Algunas desarrolladores que utilizan el lenguaje de programación Java desearían que el tiempo que pasa entre publicación de una nueva versión y la siguiente fuese menor. Las nuevas versiones incorporan modificaciones en el lenguaje y en la API que facilitan el trabajo de los desarrolladores haciendo que escriban menos líneas de código, haciendo que el código fuente sea más legible que al final redunda en software con menos &lt;em&gt;bugs&lt;/em&gt;, con más funcionalidades, un tiempo de desarrollo menor y con menos costes.&lt;/p&gt;

&lt;p&gt;La versión de Java 9 fue publicada en septiembre de 2017 con algunos aplazamientos hasta estar todas las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; listas, principalmente la nueva modularidad. La versión de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 también con importantes novedades&lt;/a&gt; fue publicada con tres años de anterioridad, en marzo de 2014. En las últimas versiones entre cada una han pasado algunos años.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.0 (Enero 23, 1996)&lt;/li&gt;
&lt;li&gt;JDK 1.1 (Febrero 19, 1997)&lt;/li&gt;
&lt;li&gt;J2SE 1.2 (Diciembre 8, 1998)&lt;/li&gt;
&lt;li&gt;J2SE 1.3 (Mayo 8, 2000)&lt;/li&gt;
&lt;li&gt;J2SE 1.4 (Febrero 6, 2002)&lt;/li&gt;
&lt;li&gt;J2SE 5.0 (Septiembre 30, 2004)&lt;/li&gt;
&lt;li&gt;Java SE 6 (Diciembre 11, 2006)&lt;/li&gt;
&lt;li&gt;Java SE 7 (Julio 28, 2011)&lt;/li&gt;
&lt;li&gt;Java SE 8 (Marzo 18, 2014)&lt;/li&gt;
&lt;li&gt;Java SE 9 (Septiembre 21, 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y de otros de los populares &lt;em&gt;frameworks&lt;/em&gt; para programación de aplicaciones web de servidor como &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Apache Struts&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring Framework&lt;/a&gt; que aún se siguen utilizando en versiones como 1 y 3 respectivamente en algunos casos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Struts 1.1 (2003)&lt;/li&gt;
&lt;li&gt;Struts 1.2 (2004)&lt;/li&gt;
&lt;li&gt;Struts 1.3 (2008)&lt;/li&gt;
&lt;li&gt;Struts 2 (2007)&lt;/li&gt;
&lt;li&gt;Struts 2.3 (2009)&lt;/li&gt;
&lt;li&gt;Struts 2.3 (2011)&lt;/li&gt;
&lt;li&gt;Struts 2.5 (2016)&lt;/li&gt;
&lt;li&gt;Spring Framework 1 (2004)&lt;/li&gt;
&lt;li&gt;Spring Framework 2 (2006)&lt;/li&gt;
&lt;li&gt;Spring Framework 2.5 (2007)&lt;/li&gt;
&lt;li&gt;Spring Framework 3 (2009)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.1 (2011)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.2.5 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4.2 (2015)&lt;/li&gt;
&lt;li&gt;Spring Framework 5 (2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En Java 9 el calendario de publicaciones va a cambiar optando por un modelo basado en fechas fijas cada seis meses y cada tres años para las versiones con soporte de largo plazo. Cada una de estas nuevas versiones incorporará las características que estén listas para ser publicadas lo que evitará que si una novedad se retrasa no retrase al resto de novedades que ya estén listas, simplemente se publicará en la siguiente versión al cabo de unos meses. Esto va a hacer que el número de versiones aumente significativamente a lo que hasta ahora ha ocurrido.&lt;/p&gt;

&lt;p&gt;Sin embargo, y a pesar de que algunos desarrolladores se han quejado de el tiempo que pasa entre versión y versión y que ahora con el nuevo calendario se le dará solución, ¿en algunos entornos va a cambiar algo? Si resulta que algunas organizaciones ya sean entes públicos o empresas privadas siguen utilizando versiones de Java como la 6 e incluso la 5 que fueron publicadas hace ya más de una década. Una década en el ámbito tecnológico es una eternidad. O de Spring como la 3 del 2009 o incluso de Struts como la 1 en el mejor de los casos del 2008 que ya incluso ni siquiera tiene soporte ni se siguen desarrollando lo que implica falta de soporte de seguridad.&lt;/p&gt;

&lt;p&gt;Algunas de estas organizaciones pueden tener necesidad de utilizar versiones durante un periodo de tiempo largo ya sea por el número y tamaño de las aplicaciones que manejan pudiendo ser de un servicio crítico o por el coste que supone reemplazarlas o adaptarlas a tiempos más modernos. Pero usar software de hace una década parece algo excesivo para las aplicaciones nuevas que se desarrollan hoy, aún así si siguen usando versiones antiguas seguro que tendrán motivos. Versiones antiguas de librerías y sin posibilidad de usar las que no estén homologadas en la organización que por desgracia la lista es muy limitada. Generar gráficas con &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;, PDF con &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; o &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;, Excel con &lt;a href=&#34;https://poi.apache.org/&#34;&gt;Apache POI&lt;/a&gt; son solo algunas de las necesidades habituales pero para otras es raro no encontrar alguna librería que lo facilite en gran medida.&lt;/p&gt;

&lt;p&gt;O usan &lt;em&gt;frameworks&lt;/em&gt; propios que a mi no me interesa aprender porque además de usar librerías ya antiguas fuera de esa organizaciones no tienen ninguna validez con lo que uno queda encadenado profesionalmente al menos en parte a esa organización y no me parece recomendable para un futuro profesional.&lt;/p&gt;

&lt;p&gt;El resultado es que aún celebrando la publicación de una nueva versión de Java en muchas organizaciones pasarán muchos años, quizá algún lustro o una ¡década! antes de que la utilicen como ya pasa ahora. Y esta es la triste realidad de Java en algunos sitios. Posiblemente solo en algunas &lt;em&gt;startups&lt;/em&gt; que no tienen una carga tan grande puedan utilizar la última versión de Java al contrario de lo ocurre en otras organizaciones y entornos corporativos mayores.&lt;/p&gt;

&lt;p&gt;Algunas empresas se quejan de que faltan trabajadores para cubrir puestos técnicos pero para completar el asunto digamos también que faltan salarios, condiciones laborales dignas, menos subcontratación o externalización u &lt;em&gt;outsourcing&lt;/em&gt; y proyectos interesantes en algún aspecto como podría ser el tecnológico que a uno le motive a postular a un puesto de trabajo. Yo al menos aparte del sueldo también valoro en buena medida la tecnología que se vaya a usar en el proyecto buscando que no esté obsoleta y que me permita seguir aprendiendo, al menos con la posibilidad de elegir trabajo.&lt;/p&gt;

&lt;p&gt;Y como escuché en cierta charla en una de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/conferencia-bilbostack-2016/&#34;&gt;BilboStack&lt;/a&gt;, luego dirán que Java es una mierda, ya, una mierda, ¿del 2006?, ¿hablamos de Java 9, &lt;a href=&#34;https://www.jooq.org/&#34;&gt;jOOQ&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;, &lt;a href=&#34;http://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt;, &lt;a href=&#34;https://spring.io/&#34;&gt;Spring 5&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE 8&lt;/a&gt;, &lt;em&gt;frameworks&lt;/em&gt; de servidor basados en componentes desde hace años de los que ahora a la gente se le hace el culo pepsi-cola en JavaScript con &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt;?&amp;hellip; por mencionar algunas pocas.&lt;/p&gt;

&lt;p&gt;Quizá en la capital del reino de súbditos o en la capital de la nación que quiere votar sí o no a su independencia haya más posibilidades de encontrar un trabajo más interesante tecnológicamente pero en el páramo de periferia no hay tantas posibilidades o de incluso crearlas&amp;hellip; quizá algún día.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="opinion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/</id>
        <title>JShell la herramienta REPL incorporada en Java 9</title>        
        <updated>2017-09-29T22:00:00+02:00</updated>
        <published>2017-09-29T21:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; es la incorporación de una herramienta &lt;em&gt;Read-Evaluation-Print-Loop&lt;/em&gt; o REPL similar a las disponibles en otros lenguajes dinámicos para permitir evaluar pequeños ejemplos de código, hacer pruebas o como herramienta para alguien que esté aprendiendo a programar sin la necesidad de utilizar un entorno integrado de desarrollo, una herramienta de construcción y los varios archivos y comandos necesarios para compilar y ejecutar el código Java.&lt;/p&gt;

&lt;p&gt;El comando de la herramienta &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell&lt;/a&gt; es &lt;em&gt;jshell&lt;/em&gt; que inicia un símbolo del sistema donde empezar a introducir las expresiones, se sale de &lt;em&gt;jshell&lt;/em&gt; con el comando &lt;code&gt;/exit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Se pueden crear variables, crear y modificar definiciones de métodos y clases. Cada una de estas expresiones crea un &lt;em&gt;snippet&lt;/em&gt; de código que pueden listarse con el comando &lt;code&gt;/list&lt;/code&gt;. Al introducir las expresiones se soporta completado y asistencia de código con la tecla tabulador como ayuda para saber que métodos tiene un objeto.&lt;/p&gt;

&lt;p&gt;Se pueden crear clases y métodos como en el ejemplo de la serie de Fibonacci implementada con un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; de la cual se muestran los elementos de la serie menores que el número 100.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions.png&#34; title=&#34;Expresiones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion.png&#34; title=&#34;Asistencia de código&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Expresiones y asistencia de código&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods.png&#34; title=&#34;Serie de Fibonacci con un Stream en un método&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Serie de Fibonacci con un Stream en un método&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para diferenciar las expresiones de código de los comandos estos últimos son precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Hay varios como los ya citados para listar los &lt;em&gt;snippets&lt;/em&gt; de código y salir de &lt;em&gt;jshell&lt;/em&gt;, otros son para listar las definiciones de variables con &lt;code&gt;/vars&lt;/code&gt;, métodos con &lt;code&gt;/methods&lt;/code&gt;, tipos con &lt;code&gt;/types&lt;/code&gt; e &lt;em&gt;imports&lt;/em&gt; con &lt;code&gt;/imports&lt;/code&gt;. La lista completa de comandos puede obtenerse pulsando la tecla tabulador después de la barra de comando.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands.png&#34; title=&#34;Comandos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Comandos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para los &lt;em&gt;snippets&lt;/em&gt; multilínea o algo complejos puede utilizarse un editor externo con el comando &lt;code&gt;/edit&lt;/code&gt;. El editor de nuestra preferencia se establece con el comando &lt;code&gt;/set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;También se pueden &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/external-code.htm&#34;&gt;añadir módulos o librerías&lt;/a&gt; para usar las clases y tipos que contengan con el comando &lt;code&gt;/env&lt;/code&gt; y las opciones &lt;code&gt;&amp;ndash;add-modules&lt;/code&gt;  &lt;code&gt;&amp;ndash;module-path&lt;/code&gt; y &lt;code&gt;&amp;ndash;class-path&lt;/code&gt;. Los &lt;em&gt;snippets&lt;/em&gt; creados en una sesión pueden guardarse en un archivo con el comando &lt;code&gt;/save&lt;/code&gt; y ser cargados al inicio de JShell o con el comando &lt;code&gt;/open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/toc.htm&#34;&gt;guía oficial de JShell&lt;/a&gt; se comenta algunas opciones más de esta nueva herramienta.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/guides/java-and-j2ee/getting-started-with-jshell&#34;&gt;Getting Started with JShell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/</id>
        <title>Novedades de Java 9, más allá de la modularidad</title>        
        <updated>2017-09-29T20:00:00+02:00</updated>
        <published>2017-09-24T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La modularidad introducida en Java 9 no es la única novedad incorporada en esta nueva versión. Aunque haya llegado a eclipsar al resto hay otra buena colección de mejoras que sin duda facilitarán la programación con uno de los lenguajes más empleados por los programadores aún después de más de 20 años.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La última versión mayor de Java fue publicada en el año 2014, hace ya mucho tiempo para la época actual donde las cosas avanzan a un ritmo muy rápido. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 introdujo en el lenguaje notables cambios&lt;/a&gt; como las expresiones &lt;em&gt;lambda&lt;/em&gt; dotándolo de capacidades funcionales y mayor expresividad en menos líneas de código junto con referencias a métodos e interfaces funcionales que permite crear implementaciones anónimas de interfaces con una &lt;em&gt;lambda&lt;/em&gt;, se añaden los &lt;em&gt;streams&lt;/em&gt; como nueva forma de iterar sobre las colecciones, interfaces con métodos por defecto o estáticos que aumentan la compatibilidad hacia atrás que siempre se le ha dado gran importancia en la plataforma o una nueva API para fechas que solventa las deficiencias de la anterior. Grandes cambios en el lenguaje tan importantes como los que supusieron Java 5.&lt;/p&gt;

&lt;p&gt;Después de algunos aplazamientos principalmente por implementar la modularización de la forma correcta sin que en un futuro suponga un problema ha sido publicada en septiembre de 2017 la versión de Java 9. La característica más llamativa es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;la modularización de la plataforma con Java 9&lt;/a&gt; que supone grandes mejoras como una mejor encapsulación de los paquetes, interfaces entre módulos bien definidas y dependencias explícitas que proporcionan optimización al usarse sólo los módulos que se necesitan, mayor seguridad al ser menor la superficie de ataque y configuración confiable al comprobar las dependencias al compilar o iniciarse la máquina virtual.&lt;/p&gt;

&lt;p&gt;Pero Java 9 además de los módulos incorpora en la plataforma otros cambios destacables. Esta no es una lista exhaustiva pero si contiene muchas de ellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/index.html&#34;&gt;Oracle JDK 9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What’s New in Oracle JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/javase-docs.htm&#34;&gt;Guías descargables con documentación del JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Varios &lt;em&gt;screencasts&lt;/em&gt; sobre varias de las novedades de Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/SeptOct2017&#34;&gt;Java Magazine Sep/Oct 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/duke-java-9.png&#34; width=&#34;300&#34; alt=&#34;Duke Java 9&#34; title=&#34;Duke Java 9&#34;&gt;
&lt;/div&gt;

&lt;h3 id=&#34;métodos-factoría-para-colecciones&#34;&gt;Métodos factoría para colecciones&lt;/h3&gt;

&lt;p&gt;Aún Java no incorpora en el lenguaje una forma de definir como literales elementos tan comunes como listas, conjuntos o mapas. Como alternativa se proporcionan métodos factoría estáticos para crear este tipo de estructuras de datos usando métodos por defecto en sus respectivas interfaces. Además, estos métodos crean colecciones inmutables.&lt;/p&gt;

&lt;p&gt;Aparte de definir este tipo de colecciones de una forma mucho más sencilla que hasta Java 8, las colecciones además son significativamente más eficientes. En el caso de Java 8 un &lt;em&gt;Set&lt;/em&gt; con dos elementos de capacidad 3 requiere un objeto &lt;em&gt;wrapper&lt;/em&gt; para la colección inmodificable, 1 &lt;em&gt;HashSet&lt;/em&gt;, 1 &lt;em&gt;HashMap&lt;/em&gt;, 1 Object[] de longitud 3, 2 dos nodos uno para cada elemento requiriendo en total unos 152 bytes. En el caso de Set creado con Java 9 requiere solo 20 bytes que comparados con los 152 es una mejora significativa más al tener en cuenta que este tipo de estructuras de datos son utilizadas de forma numerosa en cualquier programa. Aún estando hablando de bytes multiplicado por cada uso en algunos casos la reducción de memoria puede ser apreciable.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Collections.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582422289001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;mejoras-en-la-clase-optional&#34;&gt;Mejoras en la clase &lt;em&gt;Optional&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or-java.util.function.Supplier-&#34;&gt;or()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse-java.util.function.Consumer-java.lang.Runnable-&#34;&gt;ifPresentOrElse()&lt;/a&gt; así como &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream--&#34;&gt;stream()&lt;/a&gt; mejoran la experiencia de uso en esta clase que contiene o no un objeto. El método &lt;em&gt;or()&lt;/em&gt; en caso de no contener el &lt;em&gt;Optional&lt;/em&gt; un objeto permite proporcionar un &lt;em&gt;Optional&lt;/em&gt; alternativo. Los métodos &lt;em&gt;ifPresent()&lt;/em&gt; y &lt;em&gt;ifPresentOrElse()&lt;/em&gt; permiten realizar una acción con el objeto del opcional si está presente u otra acción con un valor vacío si no está presente. El método &lt;em&gt;stream()&lt;/em&gt; convierte el &lt;em&gt;Optional&lt;/em&gt; en un &lt;em&gt;stream&lt;/em&gt; de cero o un elemento.&lt;/p&gt;

&lt;h3 id=&#34;mejoras-en-la-api-de-streams&#34;&gt;Mejoras en la API de &lt;em&gt;streams&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los nuevos métodos de los &lt;em&gt;streams&lt;/em&gt; &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#dropWhile-java.util.function.Predicate-&#34;&gt;dropWhile()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#takeWhile-java.util.function.Predicate-&#34;&gt;takeWhile()&lt;/a&gt; permiten descartar o tomar elementos del &lt;em&gt;stream&lt;/em&gt; mientras se comprueba una condición. El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#ofNullable-T-&#34;&gt;ofNullable()&lt;/a&gt; devuelve un &lt;em&gt;stream&lt;/em&gt; de un elemento o vacío dependiendo de si el objeto es &lt;em&gt;null&lt;/em&gt; o no. Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-&#34;&gt;iterate()&lt;/a&gt; permiten generar un secuencia de valores similar a un bucle &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;repl-con-jshell&#34;&gt;REPL con jshell&lt;/h3&gt;

&lt;p&gt;Otra de las características destacables es la incorporación de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; para evaluar código siguiendo el patrón &lt;em&gt;Read-Evaluate-Print-Loop&lt;/em&gt; o REPL para hacer pruebas de código sin la necesidad de un IDE, una herramienta de construcción o toda la infraestructura de un proyecto. Esta herramienta es el comando &lt;em&gt;jshell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se pueden introducir expresiones que son evaluadas y comandos precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Soporta asistencia de código con la tecla tabulador.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8&#34;&gt;Guía de usuario de jshell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell.png&#34; title=&#34;jshell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;jshell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429016001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;jlink-para-generar-runtimes-mínimos&#34;&gt;jlink para generar &lt;em&gt;runtimes&lt;/em&gt; mínimos&lt;/h3&gt;

&lt;p&gt;Java 8 proporciona varios &lt;em&gt;runtimes&lt;/em&gt; reducidos con los &lt;em&gt;compact profiles&lt;/em&gt; que contienen algunas clases menos de las que incluye el JDK completo. Sin embargo, estos &lt;em&gt;runtimes&lt;/em&gt; están preconfigurados y las aplicaciones deben optar por el que ofrezca todas las clases que necesita.&lt;/p&gt;

&lt;p&gt;En Java 9 se proporciona &lt;a href=&#34;http://openjdk.java.net/jeps/282&#34;&gt;jlink&lt;/a&gt; que un sustituto más capaz que los &lt;em&gt;compact profiles&lt;/em&gt;. Permite generar &lt;em&gt;runtimes&lt;/em&gt; aprovechando la nueva modularidad del JDK con únicamente los módulos que necesite la aplicación.&lt;/p&gt;

&lt;p&gt;Esto es especialmente útil para los contenedores de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y los entornos &lt;em&gt;cloud&lt;/em&gt; ya que permite generar imágenes de contenedores con un tamaño significativamente menor. Por ejemplo, una imagen de Docker basada en la distribución &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; con el JDK completo ocupa unos 360 MiB, con &lt;em&gt;jlink&lt;/em&gt; si una aplicación solo necesita del módulo &lt;em&gt;java.base&lt;/em&gt; se puede generar un &lt;em&gt;runtime&lt;/em&gt; con únicamente ese módulo, con este &lt;em&gt;runtime&lt;/em&gt; adaptado la imagen del contenedor tiene un tamaño mucho menor, en este caso de únicamente de unos 40 MiB.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582437011001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;concurrencia&#34;&gt;Concurrencia&lt;/h3&gt;

&lt;p&gt;Se añade un &lt;em&gt;framework&lt;/em&gt; con un conjunto de clases para programación reactiva de publicación-subscripción con las clases &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html&#34;&gt;Flow&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Processor&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html&#34;&gt;Flow.Subscriber&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Publisher&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Subscription&lt;/a&gt;. La clase &lt;em&gt;Subsription&lt;/em&gt; posee dos métodos: &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#cancel--&#34;&gt;cancel()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#request-long-&#34;&gt;request()&lt;/a&gt; para dejar de recibir mensajes y solicitar recibir &lt;em&gt;n&lt;/em&gt; mensajes en la siguientes llamadas de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html#onNext-T-&#34;&gt;onNext​()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#copy--&#34;&gt;copy()&lt;/a&gt; de la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html&#34;&gt;CompletableFuture&lt;/a&gt; permite obtener un copia completándose con el mismo valor cuando la operación se completa normalmente.&lt;/p&gt;

&lt;h3 id=&#34;variable-handles&#34;&gt;Variable Handles&lt;/h3&gt;

&lt;p&gt;Una de las justificaciones de la modularidad es el uso que hasta ahora se le ha dado a la famosa clase interna del JDK &lt;em&gt;sun.misc.Unsafe&lt;/em&gt;. Para proporcionar parte de la funcionalidad de esta clase en una API pública se introduce la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html&#34;&gt;VarHandle&lt;/a&gt; para referenciar a variables estáticas y no estáticas así como a &lt;em&gt;arrays&lt;/em&gt;. Estas instancias se obtienen mediante la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/MethodHandles.Lookup.html&#34;&gt;MethodHandle.Lookup&lt;/a&gt;. Una vez obtenida una instancia de &lt;em&gt;VarHandle&lt;/em&gt; se pueden realizar operaciones de bajo nivel sobre la variable que referencia como operaciones atómicas comparar y establecer pero sin la sobrecarga de rendimiento con las clases equivalentes del paquete &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/atomic/package-summary.html&#34;&gt;java.util.concurrent.atomic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para la mayoría de los programadores esto no les afectará directamente pero sí será una mejora para los desarrolladores de librerías importantes muy populares que si usan la clase &lt;em&gt;Unsafe&lt;/em&gt; y deberían aprovechar estas nuevas capacidades para dejar de usar la clase interna del JDK en la medida de lo posible.&lt;/p&gt;

&lt;h3 id=&#34;actualizaciones-en-la-api-para-procesos&#34;&gt;Actualizaciones en la API para procesos&lt;/h3&gt;

&lt;p&gt;Ahora es posible obtener el identificador del proceso o &lt;em&gt;pid&lt;/em&gt; con el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#pid--&#34;&gt;pid()&lt;/a&gt; y los procesos hijos y descendientes con los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#children--&#34;&gt;children​()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#descendants--&#34;&gt;descendants​()&lt;/a&gt; respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;stackwalker&#34;&gt;StackWalker&lt;/h3&gt;

&lt;p&gt;La clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; permite obtener un &lt;em&gt;stream&lt;/em&gt; secuencial de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.StackFrame.html&#34;&gt;StackWalker.StackFrames&lt;/a&gt; del &lt;em&gt;thread&lt;/em&gt; actual para procesar la pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=StackWalker.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;strings-compactos&#34;&gt;Strings compactos&lt;/h3&gt;

&lt;p&gt;Internamente los la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/String.html&#34;&gt;String&lt;/a&gt; contiene un array de &lt;em&gt;char&lt;/em&gt;, cada &lt;em&gt;char&lt;/em&gt; se representa en formato con la codificación UTF-8 ocupando 16 bits o 2 bytes por cada caracter. Para cadenas en aquellos lenguajes como inglés los caracteres pueden ser representados usando un único &lt;em&gt;byte&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una buena parte de la memoria ocupada en la JVM por cualquier aplicación es debido a las cadenas de modo que tiene sentido compactar aquellas cadenas en las que sea posible representándolas con un único &lt;em&gt;byte&lt;/em&gt; por caracter.&lt;/p&gt;

&lt;p&gt;Lo mejor de todo es que esta optimización será transparente para los programadores y para las aplicaciones proporcionando una reducción en el uso de la memoria y aumento del rendimiento, también en el recolector de basura.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javagists.com/compact-strings-java-9&#34;&gt;Compact Strings In Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recolector-de-basura-g1-por-defecto&#34;&gt;Recolector de basura G1 por defecto&lt;/h3&gt;

&lt;p&gt;Se cambia el recolector de basura por defecto al llamado &lt;em&gt;G1&lt;/em&gt; optimizado para una balance adecuado entre alto rendimiento y baja latencia. En los siguientes artículos se explica de forma más detallada. Al igual que los &lt;em&gt;string&lt;/em&gt; compactos para la mayoría de los programadores será un cambio transparente que no tenga repercusión en la forma de programar las aplicaciones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html&#34;&gt;Getting Started with the G1 Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Make-G1-Default-Garbage-Collector-in-Java-9&#34;&gt;Case for Defaulting to G1 Garbage Collector in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582428191001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;identificador-para-variables&#34;&gt;Identificador para variables _&lt;/h3&gt;

&lt;p&gt;El identificador &lt;em&gt;_&lt;/em&gt; queda reservado para en un futuro usarlo en parámetros a los que no se les dé un uso y no sean relevantes como por ejemplo en las &lt;em&gt;lambdas&lt;/em&gt;. También se evaluará en el &lt;a href=&#34;http://openjdk.java.net/projects/amber/&#34;&gt;proyecto Amber&lt;/a&gt; usar este identificador para tipos diamante parciales como &lt;em&gt;Foo&amp;lt;String, _&amp;gt;&lt;/em&gt; o en referencias a métodos &lt;em&gt;foo.&amp;lt;String, _&amp;gt;bar()&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.takipi.com/project-amber-the-future-of-java-exposed/&#34;&gt;Project Amber: The Future of Java Exposed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;métodos-privados-en-interfaces&#34;&gt;Métodos privados en interfaces&lt;/h3&gt;

&lt;p&gt;Ahora se pueden crear métodos privados en interfaces como utilidad a las implementaciones de los métodos por defecto.&lt;/p&gt;

&lt;h3 id=&#34;mejor-try-with-resource&#34;&gt;Mejor &lt;em&gt;try-with-resource&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Ahora las variables finales o efectivamente finales pueden ser colocadas en los bloques &lt;em&gt;try-with-resource&lt;/em&gt; simplificando  algunos usos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=TryWithResources.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;javadoc&#34;&gt;Javadoc&lt;/h3&gt;

&lt;p&gt;Ahora la documentación Javadoc se genera con marcado de HTML 5 e incluye un cuadro de búsqueda para encontrar más fácilmente tipos y métodos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc.png&#34; title=&#34;Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;archivos-jar-multiversión&#34;&gt;Archivos Jar multiversión&lt;/h3&gt;

&lt;p&gt;Los desarrolladores de librerías para dar soporte a varias versiones de Java debían optar entre generar un artefacto para cada versión o un único archivo &lt;em&gt;jar&lt;/em&gt; limitándose a usar la mínima versión soportada y sin aprovechar las nuevas capacidades de siguientes versiones. Esto es un impedimento para el uso de nuevas versiones.&lt;/p&gt;

&lt;p&gt;Con Java 9 se puede generar un único archivo &lt;em&gt;jar&lt;/em&gt; con algunas clases para una o varias versiones de Java. Por ejemplo, en un archivo &lt;em&gt;jar&lt;/em&gt; con las clases &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; y &lt;em&gt;D&lt;/em&gt; compatibles con Java 6 el desarrollador ahora puede decidir que para la versión 9 la clase &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;B&lt;/em&gt; sean unas optimizadas para esta versión. Esto se consigue con una estructura específica de directorios en el archivo &lt;em&gt;jar&lt;/em&gt;, ubicándose la clase optimizada para Java 9 &lt;em&gt;A&lt;/em&gt; en &lt;em&gt;META-INF/versions/9/A.class&lt;/em&gt; y para Java 10 en &lt;em&gt;META-INF/versions/10/A.class&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Multirelease.out&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238: Multi-Release JAR Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nuevo-modelo-de-publicación&#34;&gt;Nuevo modelo de publicación&lt;/h3&gt;

&lt;p&gt;A partir de la publicación de Java 9 se cambia el modelo de publicación de nuevas versiones optando por una basada en calendario en vez de una por características a incluir. El caso de versiones que han de incluir las características previstas ocasiona el problema que si una se retrasa provoca un retraso en la versión. Con el modelo basado en fechas fijas preestablecidas la versión se liberará con aquellas características que estén listas en la fecha planificada de publicación sin ser retrasadas por aquellas que no.&lt;/p&gt;

&lt;p&gt;Se ha optado por producir una nueva versión cada seis meses con el &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; y &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;licencia GPL&lt;/a&gt; para satisfacer las necesidades de los desarrolladores y una versión con soporte de largo plazo cada tres años para satisfacer las necesidades de tiempo de soporte prolongado de las empresas, &lt;em&gt;Oracle JDK&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582439790001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar un estupendo vídeo de David Gómez (@dgomezg) sobre las nuevas características de Java 9 en español y otro en inglés.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/CkmB86pCV6A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/9EiLRD95zDg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/the-best-java-9-language-and-api-improvements/&#34;&gt;The best Java 9 Language and API improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/new-features-in-java-9-137344.html&#34;&gt;New Java 9 features at a glance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2ylsidI&#34;&gt;Modern Java Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/try-with-resources-enhancement-in-java-9&#34;&gt;Try-With-Resource Enhancements in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2017&#34;&gt;Revista Java Magazine Jul/Aug 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-9-and-intellij-idea&#34;&gt;Java 9 and IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.autentia.com/2017/09/13/java-9-mas-alla-de-la-modularidad/&#34;&gt;Java 9 más allá de la modularidad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;JShell la herramienta REPL incorporada en Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/</id>
        <title>Novedades y nuevas características de Java 9, los módulos</title>        
        <updated>2017-09-29T19:30:00+02:00</updated>
        <published>2017-09-23T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Si en Java 8 la característica más destacada fue la incorporación al lenguaje de las &lt;em&gt;lambdas&lt;/em&gt; y los &lt;em&gt;streams&lt;/em&gt; en Java 9 la característica que más destaca es la definición de los módulos que proporciona varios importantes beneficios.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Después de unos cuantos aplazamientos de fechas finalmente ha sido publicado el 21 de septiembre de 2017 la &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;versión 9 del lenguaje y plataforma Java&lt;/a&gt;, tres años después de las también importantes &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades y nuevas características de Java 8&lt;/a&gt;. Al mismo tiempo se ha publicado versión de &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/downloads/index.html&#34;&gt;Java EE 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La incorporación de los módulos a la plataforma con Java 9 es una de las modificaciones más importantes en esta versión mayor del lenguaje. Aún siendo una de las características más destacadas y que ha eclipsado a otras modificaciones más allá de los módulos también importantes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/index.html&#34;&gt;Oracle JDK 9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What’s New in Oracle JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/javase-docs.htm&#34;&gt;Guías descargables con documentación del JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Varios &lt;em&gt;screencasts&lt;/em&gt; sobre varias de las novedades de Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/SeptOct2017&#34;&gt;Java Magazine Sep/Oct 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/duke-java-9.png&#34; width=&#34;300&#34; alt=&#34;Duke Java 9&#34; title=&#34;Duke Java 9&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Los módulos van a mejorar una de las deficiencias existentes en la visibilidad de las clases entre paquetes. Los módulos de Java proporcionan una mayor encapsulación de las clases contenidas en un paquete y las librerías. Esta encapsulación evita que una aplicación u otra librería haga uso y dependa de clases y paquetes de los que no debería lo que mejora la compatibilidad con versiones futuras. Los desarrolladores de una librería con los módulos ahora tienen un mayor control de los paquetes que expone una librería y que forma parte de su API pública. Con lo que se evita casos que se han dado hasta ahora como que librerías y programas dependan de clases internas en la API de Java como &lt;em&gt;sun.misc.BASE64Encoder&lt;/em&gt; o la famosa &lt;em&gt;sun.misc.Unsafe&lt;/em&gt;, para la primera en Java se añadió un reemplazo con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Base64.html&#34;&gt;java.util.Base64&lt;/a&gt;, para la segunda con Java 9 para parte de su funcionalidad se ha añadido algunas nuevas clases.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-version.png&#34; title=&#34;Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-version-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Java 9 y JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Los módulos proporcionan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encapsulación fuerte: se diferencia entre que es la API pública y usable y la parte privada a la que impide su uso accidental y acoplamiento indeseado entre módulos. La parte privada está encapsulado y de esta forma puede modificarse libremente con la seguridad de no afectar a los usuarios del módulo.&lt;/li&gt;
&lt;li&gt;Interfaces bien definidas: el código no encapsulado forma parte de la API del módulo, dado que otros módulos pueden usar esta API pública hay que tener especial cuidado al modificarlo al introducir cambios que sean incompatibles. Los módulos deben exportar una API bien definida y estable.&lt;/li&gt;
&lt;li&gt;Dependencias explícitas: los módulos necesitan a menudo otros módulos, estas dependencias son parte de la definición del módulo. Las dependencias explícitas forman un grafo que es importante conocer para entender las necesidades de una aplicación y para ejecutarla con todas sus dependencias.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los beneficios son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuración confiable: el sistema de módulos comprueba si una combinación de módulos satisface todas las dependencias antes de compilar o ejecutar una aplicación.&lt;/li&gt;
&lt;li&gt;Encapsulación fuerte: se evitan dependencias sobre detalles internos de implementación.&lt;/li&gt;
&lt;li&gt;Desarrollo escalable: se crean límites entre el equipo que desarrolla un módulo y el que lo usa.&lt;/li&gt;
&lt;li&gt;Optimización: dado que el sistema de módulos sabe que módulos necesita cada uno solo se consideran los necesarios mejorándose tiempos de inicio y memoria consumida.&lt;/li&gt;
&lt;li&gt;Seguridad: la encapsulación y optimización limita la superficie de ataque.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La modularización afecta al diseño, compilación, empaquetado y despliegue es mucho más que una nueva característica del lenguaje. Los módulos son artefactos con su propia entidad que contienen código y metadados para describir el módulo y como se relaciona con otros módulos.&lt;/p&gt;

&lt;p&gt;Hasta ahora se seguía una convención de poner clases en paquetes de nombre &lt;em&gt;.impl&lt;/em&gt; o &lt;em&gt;.internal&lt;/em&gt; pero realmente la gente seguía usando esas clases porque simplemente se podía. No había ninguna forma de ocultar las implementaciones de esos paquetes más allá del los modificadores de accesibilidad &lt;em&gt;protected&lt;/em&gt; y &lt;em&gt;private&lt;/em&gt; que no son satisfactorios para ocultar las implementaciones.&lt;/p&gt;

&lt;p&gt;Java desde sus inicios ha hecho un buen trabajo en la definición de interfaces usando la palabra reservada &lt;em&gt;interface&lt;/em&gt;. En el apartado de dependencias es donde había deficiencias. Sí, hay sentencias &lt;em&gt;import&lt;/em&gt; explícitas pero desafortunadamente son únicamente para el tiempo de compilación.&lt;/p&gt;

&lt;p&gt;En tiempo ejecución no hay ninguna noción de archivos JAR o agrupación lógica. En el &lt;em&gt;classpath&lt;/em&gt; todas las clases son puestas en una lista plana. Cuando la JVM carga una clase la encuentra recorriendo esa lista en orden secuencial, tan pronto como la clase es encontrada la búsqueda finaliza y la clase es cargada. Si la clase no se encuentra se obtiene una excepción en tiempo de ejecución y dado que las clases son cargadas bajo demanda en el momento de uso esa excepción potencialmente puede ser lanzada en un momento posterior de haber iniciado la aplicación. La JVM no puede verificar eficientemente la corrección del &lt;em&gt;classpath&lt;/em&gt; en el inicio o si se debería añadir otra librería &lt;em&gt;jar&lt;/em&gt;. Otros problemas insidiosos suceden cuando hay clases duplicadas en el &lt;em&gt;classpath&lt;/em&gt; por versiones diferentes de una misma librería.&lt;/p&gt;

&lt;p&gt;Antes del sistema de módulos de Java la librería de tiempo de ejecución consistía en un gran archivo &lt;em&gt;rt.jar&lt;/em&gt; con un tamaño de más de 60 MiB. Este archivo contiene la mayor parte de clases de la plataforma en forma de monolito. Para conseguir mayor flexibilidad y ser una plataforma de futuro se decidió modularizar el JDK.&lt;/p&gt;

&lt;p&gt;Eliminar algunas tecnologías en desuso del JDK no era una opción viable. La compatibilidad hacia atrás es uno de los principios más importantes para Java que guían su desarrollo. Eliminar estas APIs rompería esta compatibilidad hacia atrás, a pesar de que afectaría a un pequeño porcentaje de usuarios todavía hay una buena cantidad de gente usando tecnologías como CORBA.&lt;/p&gt;

&lt;p&gt;Descomponer el JDK en módulos ha sido un trabajo inmenso. Con más de 20 años de código heredado acumulados separar una enmarañada y grande base de código conteniendo cientos de clases en módulos bien definidos con límites claros mientras se mantiene la compatibilidad hacia atrás. Esto toma tiempo siendo el motivo de tomar tanto tiempo el incorporar un sistema de módulos en Java. Pero en el futuro este esfuerzo será recompensado en términos de velocidad de desarrollo y aumento de flexibilidad para el JDK.&lt;/p&gt;

&lt;p&gt;Con el tiempo las dependencias entre los propios paquetes y clases de la API de Java estaba enmarañada, con Java 9 las dependencias entre paquetes se ha simplificado en gran medida.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-8-modules.jpg&#34; title=&#34;Módulos de Java 8&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-8-modules-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-modules.jpg&#34; title=&#34;Módulos de Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-modules-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Módulos de Java 8 y Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El entorno de ejecución de Java y el compilador conocen exactamente ahora que módulo resolver al buscar los tipos para un paquete dado. Previamente la única forma de obtener un tipo arbitrario era hacer una búsqueda en todo el &lt;em&gt;classpath&lt;/em&gt;. Por ejemplo, dos módulos con el mismo nombre producen un error en inicio de la aplicación, en vez de en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;Los módulos permiten definir a cada librería los paquetes de clases que exporta como su API accesible por otra librería o programa que la requiera. Además, cada librería debe al mismo tiempo definir qué paquetes requiere. Las exportaciones y requerimientos permiten ahora detectar al iniciar la máquina virtual si el grafo de dependencias está completo cosa que antes se producía en un mayor número de casos en tiempo de ejecución posiblemente con la excepción &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/NoClassDefFoundError.html&#34;&gt;NoClassDefFound&lt;/a&gt;. Una de los efectos que se mejoran en Java y que ya es una característica a la que se le da mucha importancia es la compatibilidad hacia atrás y también la encapsulación ya que los desarrolladores de las librerías tienen mayor control de que paquetes se permite su uso evitando dependencias no deseadas que impidan en un futuro que aplicaciones que hipotéticamente las usasen dejasen de ser compatibles con nuevas versiones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=java-list-modules.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;La definición de un módulo se realiza con un nuevo archivo de código fuente de nombre &lt;em&gt;module-info.java&lt;/em&gt;. Con la palabra reservada &lt;em&gt;requires&lt;/em&gt; y una línea por paquete se definen qué paquetes requiere el módulo, con la palabra reservada &lt;em&gt;exports&lt;/em&gt; se define que paquetes del módulo se exportan y son visibles por algún otro módulo que lo requiera. También se han añadido las palabras reservadas &lt;em&gt;provides&lt;/em&gt; y &lt;em&gt;uses&lt;/em&gt; para proporcionar y usar definiciones de servicios que con anterioridad se realizaba en archivos ubicados en &lt;em&gt;META-INF/services&lt;/em&gt; como muestro en el ejemplo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/&#34;&gt;Aplicación Java extensible con la clase ServiceLoader&lt;/a&gt;. También se puede hacer que la directiva &lt;em&gt;requires&lt;/em&gt; sea de forma transitiva para que el módulo que lo use pueda usar ese paquete sin requerirlo de forma explícita, la directiva &lt;em&gt;opens&lt;/em&gt; permite hacer uso de reflectividad usando el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/reflect/AccessibleObject.html&#34;&gt;setAccesible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dado que la transición hacia el uso de los módulos puede generar problemas de compatibilidad con aplicaciones existentes se han añadido algunos parámetros para la máquina virtual en el comando &lt;em&gt;java&lt;/em&gt; e incluso en el caso más grave desactivar completamente el sistema de módulos, aunque lógicamente esto está desaconsejado. En la &lt;a href=&#34;http://docs.oracle.com/javase/9/migrate/toc.htm&#34;&gt;guía de migración a Java 9&lt;/a&gt; están detallados los aspectos a tener en cuenta en la migración de una versión anterior a Java 9.&lt;/p&gt;

&lt;p&gt;Este es el típico ejemplo &lt;em&gt;Hola Mundo&lt;/em&gt; con Java 9 en que que muestro como compilar un programa usando los módulos y como ejecutarlo directamente desde la linea de comandos. En el código de la clase &lt;em&gt;Main&lt;/em&gt; no hay ningún cambio respecto al que sería con una versión anterior de Java sin embargo se añade el nuevo archivo de código fuente &lt;em&gt;module-info.java&lt;/em&gt; donde se definen sus dependencias que este programa no tiene salvo la implícita sobre el módulo &lt;em&gt;java.base&lt;/em&gt;. Los comandos para compilar y ejecutar el ejemplo directamente con los comandos &lt;em&gt;javac&lt;/em&gt; y &lt;em&gt;java&lt;/em&gt; si cambian, ahora se usa en vez de &lt;em&gt;classpath&lt;/em&gt; la opción &lt;em&gt;module-path&lt;/em&gt; y se indica la clase del módulo que contiene el método &lt;em&gt;main&lt;/em&gt; del programa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=module-info.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=java.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-helloworld.png&#34; title=&#34;Hola Mundo con Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-helloworld-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Hola Mundo con Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El comando &lt;em&gt;jdeps&lt;/em&gt; muestra las dependencias de los módulos muy útil para tareas de análisis o depuración.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps.png&#34; title=&#34;Dependencias del ejemplo Hola Mundo con Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-java-sql.png&#34; title=&#34;Dependencias del módulo java.sql&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-java-sql-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Análisis de dependencais con jdeps&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para finalizar este artículo incluyo un vídeo sobre los módulos que comenta los aspectos más destacados. Hay &lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;otros vídeos sobre las novedades de Java 9&lt;/a&gt; de no más de 15 minutos cada uno.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429007001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJava9&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./java.sh&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-9-its-heeeere&#34;&gt;Java 9: It&amp;rsquo;s Heeeere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/migrate/toc.htm&#34;&gt;Java Platform, Standard Edition Oracle JDK 9 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/java-9-modules-jpms-basics-135885.html&#34;&gt;Java 9 modules – JPMS basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;JShell la herramienta REPL incorporada en Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/</id>
        <title>Cambiar y personalizar los estilos de la documentación Javadoc</title>        
        <updated>2017-09-16T22:00:00+02:00</updated>
        <published>2017-09-16T22:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La documentación generada por &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;la herramienta Javadoc&lt;/a&gt; se puede adaptar a las necesidades propias ya que tiene mecanismos para extenderla. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;Crear un &lt;em&gt;taglet&lt;/em&gt; propio&lt;/a&gt; es una forma pero también se pueden modificar los estilos aplicados al HTML generado, por ejemplo, para adaptar el Javadoc a los colores de la organización o para incluir un logotipo en la cabecera o un texto en el pie de página.&lt;/p&gt;

&lt;p&gt;El comando &lt;em&gt;javadoc&lt;/em&gt; con el que se genera la documentación posee opciones para modificar la cabecera, el pie de página o usar una hoja de estilos propia. Estas opciones son  &lt;em&gt;-header&lt;/em&gt;, &lt;em&gt;-footer&lt;/em&gt; y &lt;em&gt;-stylesheetfile&lt;/em&gt;. Un punto de partida para modificar los estilos es usar la hoja de estilos generada por defecto, realizar en ella las modificaciones oportunas y finalmente indicar que se use con el opción &lt;em&gt;-stylesheetfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el caso de este ejemplo en vez de usar el color azul por defecto he modificado la hoja de estilos para que sea uno verde. En los cambios he partido de la hoja de estilos original del &lt;em&gt;javadoc&lt;/em&gt; e inspeccionando los elementos con las herramientas del navegador para sustituir sus colores por otros de una paleta de colores basada en el verde en la que cambia la tonalidad de color hacia más claro. También se puede modificar la cabecera y el pie de página para incluir una nota con un mensaje de derechos de autor o un enlace y añadir nuevos estilos para el &lt;em&gt;taglet&lt;/em&gt; &lt;em&gt;todo&lt;/em&gt;.&lt;/p&gt;

&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(96, 177, 79);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(116, 197, 99);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(136, 217, 119);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(156, 237, 139);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(176, 255, 159);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(196, 255, 179);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(216, 255, 199);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(236, 255, 219);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=stylesheet.css&#34;&gt;&lt;/script&gt;

&lt;p&gt;La &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html&#34;&gt;tarea de Gradle para generar la documentación Javadoc&lt;/a&gt; posee &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html&#34;&gt;opciones&lt;/a&gt; equivalentes al comando &lt;em&gt;javadoc&lt;/em&gt;, unas de ellas como ejemplo son &lt;em&gt;footer&lt;/em&gt; y &lt;em&gt;bottom&lt;/em&gt; que añaden un texto en en el pie de página de cada página.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-1.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-2.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-3.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-3-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Estilos personalizados de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-1.png&#34; title=&#34;Estilos por defecto de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-2.png&#34; title=&#34;Estilos por defecto de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Estilos por defecto de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El comando &lt;em&gt;javadoc&lt;/em&gt; tiene una buena cantidad de opciones, con la opción &lt;em&gt;-help&lt;/em&gt; se obtiene una listado y descripción de cada una de ellas. Dependiendo del destinatario de la documentación, se pueden limitar las clases que son incluidas en el Javadoc si por ejemplo solo se quiere ofrecer la documentación de la parte pública.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=javadoc-help.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;Documentacion Javadoc del JDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/</id>
        <title>Crear anotaciones de Javadoc personalizadas con taglets</title>        
        <updated>2017-09-16T10:00:00+02:00</updated>
        <published>2017-09-16T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;La herramienta de documentación es Javadoc de Java&lt;/a&gt; permite a partir del código fuente de un programa o librería generar un conjunto de documentos en formato HTML enlazados entre si consultables con un navegador web y accesibles desde internet si son accesibles con un servidor web. La documentación se genera a partir de las clases y métodos del código fuente y también a partir de los comentarios de las clases y métodos.&lt;/p&gt;

&lt;p&gt;En los comentarios se pueden incluir anotaciones que enriquecen la documentación, por ejemplo, para indicar el autor o en qué versión se incluyó una clase o método, incluir enlaces, &amp;hellip; en el propio JDK ya se incluye un amplio &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;conjunto completo de anotaciones&lt;/a&gt;. Pero además de usar las anotaciones ya incorporados por defecto en la herramienta también es posible añadir nuevos propios, escribiendo un &lt;em&gt;taglet&lt;/em&gt;. Con la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;API de los &lt;em&gt;taglets&lt;/em&gt;&lt;/a&gt; basta implementar una clase que implemente la interfaz &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html&#34;&gt;Taglet&lt;/a&gt;. La &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html&#34;&gt;interfaz Taglet de Java 9&lt;/a&gt; ha sido modificada ligeramente pero en esencia proporciona la misma información, en vez de un método para indicar si es posible el &lt;em&gt;taglet&lt;/em&gt; en una localización hay un único método que devuelve un &lt;em&gt;Set&lt;/em&gt; con todas las posibles localizaciones, en vez de necesitar un método &lt;em&gt;register&lt;/em&gt; hay un método &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#init-jdk.javadoc.doclet.DocletEnvironment-jdk.javadoc.doclet.Doclet-&#34;&gt;init&lt;/a&gt; y un único método para generar el contenido, &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#toString-java.util.List-javax.lang.model.element.Element-&#34;&gt;toString&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La clase tiene varios métodos uno que indica el nombre único del &lt;em&gt;taglet&lt;/em&gt; que identificará la anotación en los comentarios de Javadoc, varios métodos para indicar en que localizaciones es usable y dos métodos que generan el contenido a incluir en el HTML resultante. Las clases &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/Tag.html&#34;&gt;Tag&lt;/a&gt; que recibe el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html#toString-com.sun.javadoc.Tag-&#34;&gt;Taglet.toString()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/ParamTag.html&#34;&gt;ParamTag&lt;/a&gt; permite obtener diversa información utilizable para generar el contenido apropiado.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;taglets&lt;/em&gt; pueden ser de tipo bloque con su propia entidad o ser embebidos en linea en un comentario del &lt;em&gt;javadoc&lt;/em&gt;. En ejemplo de &lt;em&gt;taglet&lt;/em&gt; de bloque siguiente consiste en permitir incluir elementos que quedan por hacer en el código, una anotación &lt;em&gt;todo&lt;/em&gt;. Con esta anotación el desarrollador incluye un comentario descriptivo de cuales son las cosas pendientes para un futuro. El código del &lt;em&gt;taglet&lt;/em&gt; sería el siguiente.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=TodoTaglet.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=Main.java&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;p&gt;Una vez escrito el código fuente del &lt;em&gt;taglet&lt;/em&gt; hay que compilarlo e indicar su ubicación al generar la documentación con la herramienta &lt;em&gt;javadoc&lt;/em&gt;. Hay que indicar varias opciones (&lt;em&gt;tagletPath&lt;/em&gt; y &lt;em&gt;taglets&lt;/em&gt;) que también se usarían como parámetros empleando directamente la herramienta &lt;em&gt;javadoc&lt;/em&gt;, los comandos serían los siguientes usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;. También hay que incluir de forma explícita como dependencia la librería &lt;em&gt;tools.jar&lt;/em&gt; ubicado en el JDK.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=build.gradle&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet.png&#34; title=&#34;Contenido del taglet todo en el javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Contenido del taglet todo en el javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html&#34;&gt;Javadoc Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;Taglet Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/</id>
        <title>Cómo generar la documentación Javadoc con Gradle</title>        
        <updated>2017-09-14T10:00:00+02:00</updated>
        <published>2017-09-14T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Habiendo explicado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;que es la herramienta Javadoc&lt;/a&gt;, y en otros artículos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;como crear taglets&lt;/a&gt; para incluirlos en los comentarios y generar contenido con los mecanismos de extensión que ofrece y explicado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/&#34;&gt;como cambiar los estilos que se usan por defecto en el Javadoc&lt;/a&gt; para por ejemplo cambiar los colores según la organización o incluir un texto de derechos de autor en el pie de página, hay que generar la documentación &lt;em&gt;javadoc&lt;/em&gt; usando la herramienta de construcción que usemos. En este artículo muestro como generar la documentación &lt;em&gt;javadoc&lt;/em&gt; con &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo primero es incluir en el proyecto el &lt;em&gt;plugin&lt;/em&gt; de java. Con el &lt;em&gt;plugin&lt;/em&gt; incluido se añade una tarea con la que generar la documentación &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=gradle.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para indicar en Gradle &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#options&#34;&gt;las opciones del comando javadoc&lt;/a&gt; hay que ver cuales son en las clases &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/MinimalJavadocOptions.html&#34;&gt;MinimalJavadocOptions&lt;/a&gt;, &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html&#34;&gt;CoreJavadocOptions&lt;/a&gt; y &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html&#34;&gt;StandardJavadocDocletOptions&lt;/a&gt;. Las opciones permiten indicar la clase de &lt;em&gt;taglet&lt;/em&gt; propio y lo mismo para usar una hoja de estilos propia que puede estar basada pero con pequeñas modificaciones sobre la que usa &lt;em&gt;javadoc&lt;/em&gt; por defecto, también para incluir un texto en cada página en el pie. Lo mismo sería para usar cualquiera de las otras opciones que tiene el comando &lt;em&gt;javadoc&lt;/em&gt;. En el ejemplo se usan dos opciones para la codificación de caracteres.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-1.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para generar un artefacto con la documentación comprimida en un archivo &lt;em&gt;zip&lt;/em&gt; hay que incluir la siguiente configuración en el archivo &lt;em&gt;build.gradle&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-2.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Gradle la documentación Javadoc se genera en el directorio &lt;em&gt;build/xxx&lt;/em&gt; y el artefacto en el directorio &lt;em&gt;build/xxx&lt;/em&gt;. Con las opciones anteriores este es el resultado del HTML generado.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc.png&#34; title=&#34;Artefacto generado con la documentación javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Artefacto generado con la documentación javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/</id>
        <title>La herramienta de documentación Javadoc de Java</title>        
        <updated>2017-09-11T13:00:00+02:00</updated>
        <published>2017-09-11T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Programar y desarrollar requiere además de poseer diversos conocimientos disponer de una buena documentación de consulta y referencia. Una de las cosas buenas que me gustaron de Java cuando empecé a programar en este lenguaje, cuando aún estaba lejos de tener internet y aún me lo sigue pareciendo, fue su &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;documentación Javadoc&lt;/a&gt; de toda la API de clases incluidas en el JDK.&lt;/p&gt;

&lt;p&gt;La documentación Javadoc es una colección de páginas HTML de todas las clases, métodos, parámetros y retornos junto con la información y especificaciones que quiera incluir el desarrollador de la API que en el caso de las clases de JDK incluye abundantes e interesantes detalles de implementación a tener en cuenta al usar las clases.&lt;/p&gt;

&lt;p&gt;Se genera a partir del propio código fuente de las clases con los comentarios incluidos que siguen cierto formato precediendo la definición de las clases y métodos. Al estar código y documentación en el propio archivo de código fuente es más fácil mantener sincronizados el código y su documentación.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk.png&#34; title=&#34;Documentación Javadoc del JDK&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Documentación Javadoc del JDK&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación en el código fuente se incluye en comentarios que preceden una clase o método, además, con anotaciones se pueden documentar los parámetros y el valor de retorno. Se pueden incluir etiquetas HTML junto con algunas de las anotaciones o &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt;, algunas &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;anotaciones Javadoc incluidas en el JDK&lt;/a&gt; son las siguientes pero también se pueden &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;desarrollar &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt; propios&lt;/a&gt; o &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/&#34;&gt;personalizar los estilos de la documentación&lt;/a&gt; para cambiar el contenido, información incluida o adaptar los estilos a unos según los colores de la organización.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;@author&lt;/em&gt;: indica el autor de la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@code}&lt;/em&gt;: incluye en el comentario un trozo de código que se formatea de forma especial.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@docRoot}&lt;/em&gt;: incluye una ruta relativa al directorio raíz donde se genera la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@deprecated&lt;/em&gt;: indica que un método ha quedado obsoleto, se desaconseja su uso y puede que en futuras versiones desaparezca.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@exception&lt;/em&gt;: es sinónima de throws.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@inheritDoc}&lt;/em&gt;: hereda el comentario Javadoc de la clase o método superior en la jerarquía de clases.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@link}&lt;/em&gt;: incluye un enlace a otra sección de la documentación, método o clase.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@linkplain}&lt;/em&gt;: es idéntica a @link pero el enlace es un texto plano.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@literal}&lt;/em&gt;: muestra un texto sin interpretar el texto como HTML.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@param&lt;/em&gt;: documenta un parámetro de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@return&lt;/em&gt;: documenta el valor de retorno de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@see&lt;/em&gt;: incluye un enlace con documentación adicional en la sección final de la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serial&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialData&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialField&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@since&lt;/em&gt;: indica a partir de que versión de la API fue incluida la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@throws&lt;/em&gt;: documenta una posible excepción que puede ser lanzada por el método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@value}&lt;/em&gt;: muestra el valor de un campo estático.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@version&lt;/em&gt;: para documentar la versión de cuando se hizo &lt;em&gt;checkout&lt;/em&gt; del sistema de control de versiones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un ejemplo usando estas anotaciones en una clase sería el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez documentado el código fuente hay que usar la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;herramienta Javadoc&lt;/a&gt; para generar la documentación. Mediante la herramienta de construcción &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; se hace con la tarea &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=gradle.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;La propia documentación de las clases del JDK está generada con la herramienta Javadoc. Este es el aspecto de la documentación de este ejemplo que tiene exactamente el mismo aspecto que la del JDK.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Documentación Javadoc del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos.png&#34; title=&#34;Archivos de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Archivos de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación Javadoc al ser una colección de archivos HTML y demás recursos estáticos pueden copiarse a cualquier servidor web si es necesario que estén disponibles a través de internet y accesibles con cualquier navegador web.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html&#34;&gt;How to Write Doc Comments for the Javadoc Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/</id>
        <title>Los tipos de referencias débiles soft, weak y phantom en Java</title>        
        <updated>2017-09-30T10:30:00+02:00</updated>
        <published>2017-09-10T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/los-tipos-de-referencias-debiles-soft-weak-y-phantom-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Cuando un objeto ya no es alcanzable a través de ninguna referencia directa o cadena de referencias fuertes el objeto es seleccionable para reclamar su memoria y el recolector de basura o &lt;em&gt;garbage collector&lt;/em&gt; de Java lo hace cuando estima oportuno, liberándonos a los programadores de esta tarea, simplificando el código y evitando fugas de memoria. El lenguaje Java le debe al recolector de basura entre otras varias cosas una buena parte de su éxito.&lt;/p&gt;

&lt;p&gt;En Java en realidad hay 4 tipos de referencias a objetos, además de las fuertes hay otras 3 más débiles que no impiden al recolector de basura reclamar el objeto referenciado. Es raro tener la necesidad de usar otra que no sean las fuertes o &lt;em&gt;strong&lt;/em&gt; pero es interesante conocerlas por si en algún caso nos resultase de utilidad. Los otros 3 tipos de referencias denominadas débiles son &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/SoftReference.html&#34;&gt;SoftReference&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ref/WeakReference.html&#34;&gt;WeakReference&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/PhantomReference.html&#34;&gt;PhantomReference&lt;/a&gt; que extienden de &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html&#34;&gt;Reference&lt;/a&gt;. Usar una de estas otras 3 referencias es muy simple basta usar el constructor de cada tipo de referencia.&lt;/p&gt;

&lt;p&gt;Después de la llamada de varias veces al recolector de basura en este caso de forma explícita con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#gc--&#34;&gt;System.gc()&lt;/a&gt; las referencias son encoladas.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;El objeto de una referencia &lt;em&gt;soft&lt;/em&gt; es recolectable a discreción del recolector de basura ante necesidades de memoria, el objeto de una referencias &lt;em&gt;weak&lt;/em&gt; es recolectable si solo es alcanzable por referencias &lt;em&gt;weak&lt;/em&gt; y las referencias &lt;em&gt;phantom&lt;/em&gt; son una mejor y más flexible alternativa al mecanismo de finalización de los objetos.&lt;/p&gt;

&lt;p&gt;Algunos usos prácticos de las referencias &lt;em&gt;soft&lt;/em&gt; y &lt;em&gt;weak&lt;/em&gt; son como caches de datos posiblemente usando la clase &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html&#34;&gt;WeakHashMap&lt;/a&gt;, en el caso de las referencias &lt;em&gt;phantom&lt;/em&gt; como mecanismo alternativo a la finalización de objetos incorporada en los objetos desde la versión inicial de Java.&lt;/p&gt;

&lt;p&gt;El mecanismo de finalización de los objetos Java con el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--&#34;&gt;finalize&lt;/a&gt; que puede ser implementado por cualquier clase presenta los siguientes problemas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La llamada al método &lt;em&gt;finalize&lt;/em&gt; es impredecible ya que depende de cuando del recolector de basura reclame el objeto.&lt;/li&gt;
&lt;li&gt;No hay garantía de que el método &lt;em&gt;finalize&lt;/em&gt; sea llamado ya que puede perdurar durante toda la vida de la JVM.&lt;/li&gt;
&lt;li&gt;Una referencia fuerte al objeto puede ser revivida en el método &lt;em&gt;finalize&lt;/em&gt; si se implementa de forma inadecuada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En los constructores de las referencias débiles se puede indicar un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/ReferenceQueue.html&#34;&gt;ReferenceQueue&lt;/a&gt; en el que se encolará la referencia cuando el objeto al que referencia cambia su alcanzabilidad. Este mecanismo de notificación es utilizado con las referencias &lt;em&gt;phantom&lt;/em&gt; para proporcionar el mecanismo de finalización alternativo. En la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/&#34;&gt;documentación javadoc&lt;/a&gt; con la descripción del paquete de las referencias se comenta este &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/package-summary.html&#34;&gt;proceso de notificación&lt;/a&gt;. Las referencias son encoladas cuando el recolector de basura determina que son solo alcanzables por referencias &lt;em&gt;soft&lt;/em&gt;, &lt;em&gt;weak&lt;/em&gt; o &lt;em&gt;phantom&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;http://resources.ej-technologies.com/jprofiler/help/doc/helptopics/cpu/finalizers.html&#34;&gt;Replacing Finalizers With Phantom References&lt;/a&gt; se explica junto con su código como implementar el mecanismo alternativo al método &lt;em&gt;finalize&lt;/em&gt;. La librería &lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava&lt;/a&gt; proporciona las clases &lt;a href=&#34;https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizablePhantomReference.html&#34;&gt;FinalizablePhantomReference&lt;/a&gt; y &lt;a href=&#34;https://google.github.io/guava/releases/23.0/api/docs/com/google/common/base/FinalizableReferenceQueue.html&#34;&gt;FinalizableReferenceQueue&lt;/a&gt; con una forma un poco más sencilla de usar las referencias &lt;em&gt;phantom&lt;/em&gt;, en esa documentación también hay un ejemplo de código con su uso para liberar un recurso (&lt;em&gt;ServerSocket&lt;/em&gt;) asociado a un objeto (&lt;em&gt;MyServer&lt;/em&gt;).&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/890cbf18d9db8ce7c086648e3ee8a5f8.js?file=MyServer.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Las referencias débiles añaden una indirección a la referencia que contienen, usando el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ref/Reference.html#get--&#34;&gt;get()&lt;/a&gt; se accede al objeto referenciado pero hay que tener en en cuenta que el método &lt;em&gt;get&lt;/em&gt; puede devolver un &lt;em&gt;null&lt;/em&gt; ya que no impiden al recolector de basura reclamar el objeto referenciado, en el caso de las &lt;em&gt;PhantomReferences&lt;/em&gt; el método &lt;em&gt;get&lt;/em&gt; siempre devuelve &lt;em&gt;null&lt;/em&gt; para evitar que la referencia a un objeto sea revivida.&lt;/p&gt;

&lt;p&gt;Otro artículo que recomiendo leer es &lt;a href=&#34;https://dzone.com/articles/weak-soft-and-phantom-references-in-java-and-why-they-matter&#34;&gt;Weak, Soft, and Phantom References in Java (and Why They Matter)&lt;/a&gt;, explica el concepto de estas referencias con un símil más fácil de comprender de un restaurante y sus clientes que dependiendo de su comportamiento se asemeja a estas referencias y el por que de los recolectores de basura, que no es algo novedoso de Java sino que ya fué utilizado en 1959 con el lenguaje Lisp.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaReference&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/weak-soft-and-phantom-references-in-java-and-why-they-matter&#34;&gt;Weak, Soft, and Phantom References in Java (and Why They Matter)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.guajava.net/tipos-de-referencias-en-java/&#34;&gt;Tipos de referencias en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javarevisited.blogspot.com.es/2014/03/difference-between-weakreference-vs-softreference-phantom-strong-reference-java.html&#34;&gt;Difference between WeakReference vs SoftReference vs PhantomReference vs Strong reference in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.oracle.com/blogs/enicholas/2006/05/04/understanding-weak-references&#34;&gt;Understanding Weak References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/finalization-and-phantom&#34;&gt;Finalization and Phantom References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kdgregory.com/index.php?page=java.refobj&#34;&gt;Java Reference Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14494875/weakreference-string-didnt-garbage-collected-how&#34;&gt;WeakReference string didn&amp;rsquo;t garbage collected? How?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/26211657/understanding-phantom-reference-vs-weak-reference-with-respect-to-reference-queu&#34;&gt;Understanding Phantom reference vs weak reference with respect to Reference queue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-possessive-en-expresiones-regulares/</id>
        <title>Los cuantificadores greedy, reluctant y possessive en expresiones regulares</title>        
        <updated>2017-09-09T11:30:00+02:00</updated>
        <published>2017-09-09T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/los-cuantificadores-greedy-reluctant-y-possessive-en-expresiones-regulares/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;En el mundo de las expresiones regulares hay tres tipos de cuantificadores que varían el comportamiento según el número caracteres que toman para encontrar ocurrencias. Son &lt;em&gt;greedy&lt;/em&gt; o avaricioso, &lt;em&gt;reluctant&lt;/em&gt; o reacio y &lt;em&gt;possesive&lt;/em&gt; o posesivo. Cada cuantificador tiene una expresión en una expresión regular. La opción más habitual es el cuantificador &lt;em&gt;greedy&lt;/em&gt;, añadiendo una &lt;em&gt;?&lt;/em&gt; se convierte en &lt;em&gt;reluctant&lt;/em&gt; y añadiendo un &lt;em&gt;+&lt;/em&gt; se convierte en &lt;em&gt;possesive&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;
Greedy  Reluctant  Possessive  Signigicado
X?      X??        X?+         X, uno o ninguno
X*      X*?        X*+         X, cero o mas
X+      X+?        X++         X, uno o más
X{n}    X{n}?      X{n}+       X, exactamente n veces
X{n,}   X{n,}?     X{n,}+      X, al menos n veces
X{n,m}  X{n,m}?    X{n,m}+     X, al menos n veces pero no mas de m
&lt;/pre&gt;

&lt;p&gt;Aparentemente cada uno de los cuantificadores realiza lo mismo, sin embargo, hay diferencias en su comportamiento al hacer emparejamientos entre los elementos de la expresión regular y la cadena en la que se está aplicando.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Greedy&lt;/em&gt; o avaricioso: este cuantificador intenta obtener el emparejamiento más largo que pueda, tantos carecteres como pueda, si el emparejamiento no es válido elimina un caracter de la cadena que se está comprobando y lo intenta de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Reluctant&lt;/em&gt;, reacio o vago: funciona al contrario que el cuantificador &lt;em&gt;greedy&lt;/em&gt;, intentando inicialmente ningún caracter, tan pocos caracteres como pueda, si el emparejamiento no es válido añade un caracter de la cadena que se está comprobando y lo intenta de nuevo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Possesive&lt;/em&gt; o posesivo: funciona igual que &lt;em&gt;greedy&lt;/em&gt; salvo que si el emparejamiento no es válido no elimina un caracter de la cadena que se está comprobando y finaliza la comprobación.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/dbd0adb0d0d6e94367c660f96f4ea70d.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/dbd0adb0d0d6e94367c660f96f4ea70d.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el primer ejemplo del cuantificador &lt;em&gt;greedy&lt;/em&gt; se usa &lt;em&gt;.*&lt;/em&gt; para encontrar cualquier cosa, cero o más veces, seguido de las letras &lt;em&gt;f&lt;/em&gt; &lt;em&gt;o&lt;/em&gt; &lt;em&gt;o&lt;/em&gt;. Dado que el cuantificador de la expresión la expresión &lt;em&gt;.*&lt;/em&gt; es avaricioso primero consume toda la cadena. En este punto, no hay coincidencia dado que las tres últimas letras (&lt;em&gt;f&lt;/em&gt; &lt;em&gt;o&lt;/em&gt; &lt;em&gt;o&lt;/em&gt;) han sido consumidas. De modo quese busca con una letra menos sucesivamente hasta que la la ocurrencia más a la derecha de &lt;em&gt;foo&lt;/em&gt; ha sido regurgitada, en este punto hay coincidencia y la búsqueda finaliza.&lt;/p&gt;

&lt;p&gt;En el segundo ejemplo, sin embargo, el cuantificador es reacio o vago de modo que empieza consumiendo nada. Dado que &lt;em&gt;foo&lt;/em&gt; no aparece en el inicio de la cadena es forzado a tomar la primera letra &lt;em&gt;x&lt;/em&gt; con la que se encuentra la primera coincidencia entre 0 y 4. Se siguen encontrando coincidencias hata que la cadena de entrada ha sido consumida. Encuenta otra coincidencia en 4 y 13.&lt;/p&gt;

&lt;p&gt;En el tercer caso se se hayan coincidencias ya que el cuantificador es posesivo. En este caso, la cadena completa es consuimida por &lt;em&gt;.*+&lt;/em&gt; dejando nada que satisfaga el patrón &lt;em&gt;foo&lt;/em&gt; al final de la expresión. Dado que no vuelve hacia atrás tiene mejor rendimiento que el cuantoficador &lt;em&gt;greedy&lt;/em&gt; en los casos que se quiera encontrar una coincidiencia completa en algo.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaRegexQuantifiers&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/extraer-elementos-de-una-cadena-con-una-expresion-regular/&#34;&gt;Extraer elementos de una cadena con una expresión regular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/regex/quant.html&#34;&gt;Regular Expression Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5319840/greedy-vs-reluctant-vs-possessive-quantifiers&#34;&gt;Greedy vs. Reluctant vs. Possessive Quantifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rexegg.com/regex-quantifiers.html&#34;&gt;Regex Quantifier Tutorial: Greedy, Lazy, Possessive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/seleccion-de-semillas-de-roble-comun-y-metodos-de-germinacion/</id>
        <title>Selección de semillas de roble común y métodos de germinación</title>        
        <updated>2017-09-03T00:20:00+02:00</updated>
        <published>2017-09-02T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/seleccion-de-semillas-de-roble-comun-y-metodos-de-germinacion/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/quercus-robur.png&#34; class=&#34;right&#34; width=&#34;175&#34; alt=&#34;Quercus Robur&#34; title=&#34;Quercus Robur&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las semillas para germinar necesitan las condiciones adecuadas. Para algunos tipos de semillas se utilizan dos procesos, la &lt;a href=&#34;http://www.botanical-online.com/escarificacion.htm&#34;&gt;escarificación&lt;/a&gt; y &lt;a href=&#34;http://www.botanical-online.com/estratificacion.htm&#34;&gt;estratificación&lt;/a&gt;, la primera simula la degradación de la semilla que se daría en condiciones naturales y la segunda simula las condiciones de frío del invierno. Simular de forma artificial la escarificación se realiza desgastando la semilla con una lija o deteriorando la cáscara de la semilla, la estratificación se simula dejando las semillas un periodo de tiempo en el frigorífico pero no en el congelador. Todas las semillas no necesitan de estos dos procesos y pueden germinar simplemente envolviéndolas con un papel de cocina húmedo mantenido así durante varios días.&lt;/p&gt;

&lt;p&gt;En el caso de las semillas de roble común o &lt;em&gt;quercus robur&lt;/em&gt;, que serán las que haga germinar y posteriormente plante, en algunas páginas de internet la germinación se explica de forma diferente. En cualquier caso lo primero es obtener las semillas de la planta u árbol que deseamos hacer germinar. Para plantas de jardín hay numerosas páginas y también tiendas físicas que venden paquetes con varias semillas. En el caso de los árboles es más difícil, algunos viveros venden plantones (árboles ya germinados y con poco tiempo de vida) pero semillas es más difícil encontrar. Sin embargo, basta con buscar en nuestra zona algún ejemplar del árbol del que queramos plantar y esperar a la época en las que las producen para obtener las preciadas semillas.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/roble.jpg&#34; title=&#34;Ejemplar grande de roble&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/roble-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/roble-hojas.jpg&#34; title=&#34;Hojas y bellotas de roble&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/roble-hojas-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Roble, hojas y bellotas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;selección-de-semillas&#34;&gt;Selección de semillas&lt;/h3&gt;

&lt;p&gt;Para obtener una mayor tasa de éxito en la germinación hay que averiguar cuales de las semillas son viables. En el caso de las semillas o bellotas de roble común las viables son aquellas que sumergiéndolas en agua no flotan, en la foto izquierda no hay ninguna que flote ya que estas las he recogido en la temporada en curso pero en la de la derecha si hay algunas que flotan por ser de alguna temporada anterior y aunque tenga el color adecuado se consideran no viables y aptas para germinar ya que muy posiblemente tengan algún tipo de podredumbre. Las que flotan están vacías o podridas y no es probable que germinen por lo que se tiran a la basura directamente. En la recolección las mejores semillas son aquellas con color parduzco, con cierto brillo al limpiarlas, que apretándola no ceda y que tengan el mayor tamaño de las que encontremos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/prueba-viabilidad-semillas-1.jpg&#34; title=&#34;Prueba de viabilidad de semillas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/prueba-viabilidad-semillas-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/prueba-viabilidad-semillas-2.jpg&#34; title=&#34;Prueba de viabilidad de semillas (algunas flotan)&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/prueba-viabilidad-semillas-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Prueba de viabilidad de semmillas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Si la semilla todavía tiene alguna parte de color verde en unos días adquiere el color pardo. Las semillas que tiene un color marrón ya claro se trata de una de la temporada anterior, hay que recolectar las semillas de la temporada actual ya que las de la temporada anterior pierden de su poder de germinación. Tiene que estar sin agujeros que estén causados por algún bicho o grietas para que no estén podridas.&lt;/p&gt;

&lt;p&gt;En la foto de comparación de bellotas la de la izquierda es una bellota de gran calibre y las más adecuadas para seleccionar, la del centro es más pequeña pero también es posible hacerla germinar, la de la derecha es de una temporada anterior que se puede apreciar por su color marrón claro y no es adecuada.&lt;/p&gt;

&lt;p&gt;La época que los robles comunes generan las semillas son a finales de septiembre o principios de octubre para ejemplares jóvenes aunque si se trata de un ejemplar grande y desarrollado como el de la foto anterior las produce a mediados de agosto y a finales de este mes ya empiezan a caer al suelo. Un ejemplar grande genera una gran cantidad de semillas y de buen tamaño y buen calibre, muchas más de las que podamos necesitar para plantar una buena cantidad de robles, las semillas más grandes son las más adecuadas ya que tienen más energía para desarrollar el plantón inicial. Esta muestra de bellotas que he recogido no son ni posiblemente el 10% de las bellotas del ejemplar de roble anterior.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/recogida-bellotas-1.jpg&#34; title=&#34;Recogida de bellotas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/recogida-bellotas-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/recogida-bellotas-2.jpg&#34; title=&#34;Recogida de bellotas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/recogida-bellotas-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bellotas.jpg&#34; title=&#34;Bellotas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bellotas-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Recogida y comparación de bellotas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;germinación&#34;&gt;Germinación&lt;/h3&gt;

&lt;p&gt;Para forzar la germinación he leído varios métodos comentado en algunas páginas de internet. Uno de ellos consiste en envolver las semillas con un papel de cocina y dejarlas humedecidas de forma constante (no sumergidas) durante unos 10-15 días en un vaso. Otro método similar es en vez de usar papel de cocina usar algodón. El tercero es usar una bolsa de plástico cerrada también manteniéndola humedecida de forma constante. En los tres casos proporcionado oscuridad a las semillas.&lt;/p&gt;

&lt;p&gt;El método que mejor me ha resultado a mí ha sido el de la bolsa de plástico, con mayor tasa de éxito de germinación. Además, me parece el más práctico para intentar hacer germinar a más de media docena de bellotas. Para muchas bellotas se gasta mucho papel de cocina o algodón.&lt;/p&gt;

&lt;p&gt;Para que las semillas germinen antes se recomienda lijarles o desgastarles un poco la punta sin dañar el fruto. Y en el caso de la bolsa he tratado de humedecerlas cambiándoles de agua cada unos 3-4 días ya que si no la bolsa adquiere algo de olor.&lt;/p&gt;

&lt;p&gt;También se pueden utilizar semilleros pero me parece mejor el método de la bolsa de plástico para plantar en tierra solo las semillas que hayan germinado. Con cualquiera de los métodos cuando hayan empezado hincharse rompiendo la cáscara y empezado a brotar la raíz y el tallo se puede plantar la semilla en tierra.&lt;/p&gt;

&lt;p&gt;No todas las semillas germinarán pero las bellotas de roble tienen una buena tasa de éxito y son bastante fáciles de hacerlas germinar. Con el método de la bolsa en unos 15 días las semillas ya habrán hinchando y roto algo la cascará y en otros 15 días empezado a desarrollar la raíz y el tallo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bolsa-plastico-germinacion.jpg&#34; title=&#34;Germinación con bolsa de plástico&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bolsa-plastico-germinacion-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bellotas-germinando.jpg&#34; title=&#34;Bellotas germinando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/bellotas-germinando-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Germinación con bolsa de plástico y bellotas germinando&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;plantación&#34;&gt;Plantación&lt;/h3&gt;

&lt;p&gt;Una vez que la semilla ya ha empezado a brotar la raíz se recomienda plantarla de forma vertical con la raíz hacia abajo y en otras de forma horizontal sobre la tierra parcialmente tapada pero siempre intentando que el tallo quede en la parte superior para facilitar el crecimiento al futuro plantón.&lt;/p&gt;

&lt;p&gt;Como recipiente para plantar las semillas en el caso de los robles comunes es recomendable un tiesto que tenga cierta profundidad ya que estos poseen unas raíces largas que durante sus primeros meses y años se dedican a hacerlas crecer más que a crecer el tallo o las hojas. En mi caso usaré cartones de leche recortados por la parte superior, con una altura para las raíces de unos 12 centímetros y con unos agujeros en la parte inferior para que el agua al regarlas drene y las raíces no se pudran con la acumulación de agua. Para que la tierra no se salga por los agujeros inferiores he puesto un trozo de papel de cocina en la parte de abajo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/tiesto-carton-leche.jpg&#34; title=&#34;Tiesto con cartón de leche&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/256/tiesto-carton-leche-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Tiesto con cartón de leche de 1 litro&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Una vez plantadas no hace falta regarlas mucho una vez a la semana sin demasiada abundancia. Los plantones de roble deben tener luz pero no estar expuestos directamente la luz del sol y protegerlos de las heladas los días que haga mucho frío. Al lado de una ventana o en un balcón debería ser suficiente.&lt;/p&gt;

&lt;!--
[Fotos plantones al lado de la ventana]
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;
--&gt;

&lt;p&gt;En realidad se muy poco sobre en este tema, lo que comento aquí espero que sea lo adecuado para que los robles que plante crezcan y sobrevivan al primer año de vida y posteriores. Si también vas a plantar árboles elige con preferencia aquellas especies que en tu zona sean autóctonas.&lt;/p&gt;

&lt;p&gt;También hay que vigilar los plantones para que no les crezcan hongos o se generen bichos en su tierra pero sobre todo&amp;hellip; tener paciencia ya que su desarrollo y crecimiento es lento.&lt;/p&gt;

&lt;p&gt;Para finalizar un par de vídeos de como plantar un roble y vídeo en tiempo acelerado del nacimiento de una bellota hasta los 8 primeros meses de vida.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/QRCDilvqa5E&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/MB-BvkOyHww&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lahuertinadetoni.es/como-germinar-una-bellota-o-roble/&#34;&gt;Como germinar una bellota de roble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aZQzbc5GYGU&#34;&gt;Como germinar bellotas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AQCqBzikA8c&#34;&gt;La mejor manera de germinar bellotas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MDHKlVJJrzg&#34;&gt;Plantación de quercus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="jardineria"/>
            
                <category term="fuera-de-tema"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/</id>
        <title>Cache simple de datos y con Ehcache en Java</title>        
        <updated>2017-08-25T11:00:00+02:00</updated>
        <published>2017-08-25T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/cache-simple-de-datos-y-con-ehcache-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En ocasiones es necesario usar una cache que contenga un número de elementos hasta un límite y que cuando se vayan añadiendo más se vayan borrando otros según algún criterio. En Java si no queremos añadir una nueva dependencia al proyecto con una librería especializada como &lt;a href=&#34;http://www.ehcache.org/&#34;&gt;Ehcache&lt;/a&gt; la clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html&#34;&gt;LinkedHashMap&lt;/a&gt; sirve para aquellos casos de uso simples sin necesidad de dependencias adicionales.&lt;/p&gt;

&lt;p&gt;Si el coste de obtener algunos datos es costoso ya sean porque hay que obtenerlos de una base de datos, mediante una operación de disco o red o hay que hacer algún cálculo sobre ellos en estos casos guardar los datos en una cache supondrá un aumento notable de rendimiento de mayor o menor medida según el coste de la operación que evita la cache. Usar una cache es viable si es posible usar datos no completamente actualizados y dedicar algo de espacio en memoria para la cache. Si en la mayor parte de las búsquedas que se hacen en la cache el elemento buscado está ya presente se considera un acierto o &lt;em&gt;hit&lt;/em&gt; y si no está presente un fallo o &lt;em&gt;miss&lt;/em&gt;, cuando mayor sea el número de aciertos en la cache mayor será el aumento rendimiento percibido.&lt;/p&gt;

&lt;p&gt;Para usar la clase &lt;em&gt;LinkedHashMap&lt;/em&gt; como estructura de datos para una cache simple basta que creemos una nueva clase que extienda de esta con una implementación personalizada para el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-&#34;&gt;removeEldestEntry&lt;/a&gt; que devuelva &lt;em&gt;true&lt;/em&gt; para eliminar entrada más antigua, un caso sería cuando en el mapa se alcance el límite de elementos a almacenar como máximo.&lt;/p&gt;

&lt;p&gt;En el ejemplo se crea una cache que tiene como máximo 5 elementos y se insertan en ella 15, cuando se intenta insertar en elemento más de la capacidad máxima el elemento más viejo se elimina de modo que la cache siempre tiene como máximo 5 elementos. Si la cache va a ser accedida tanto para operaciones de lectura como de escritura desde múltiples &lt;em&gt;threads&lt;/em&gt; hay que prevenir posibles problemas de concurrencia sincronizando su acceso con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedMap-java.util.Map-&#34;&gt;Collections.synchronizedMap&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=Main-1.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=SimpleCache.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si son necesarias funcionalidades más avanzadas como que los elementos expiren pasado un tiempo y para mayores cantidades de datos guardar parte de la cache en disco con un límite de espacio ocupado una de las opciones más conocidas es Ehcache.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3770da191943f7dac30e6a37416cec0f.js?file=Main-2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Cachear datos se puede hacer en varios puntos de una aplicación, si se trata de una aplicación web &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt; cachea el HTML, CSS y JavaScript además de los códigos de estado incluso &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;nginx incorpora la funcionalidad de cache&lt;/a&gt;, la propia aplicación puede cachear ciertos datos con alguna de las formas expuestas en este artículo y las propias bases de datos pueden cachear en memoria ciertos datos para evitar acceder al sistema de ficheros o disco. En definitiva una cache usada de forma efectiva ayuda a mitigar la penalización de operaciones costosas de acceso a red o a disco comparado con el acceso a memoria.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/255/java-cache.png&#34; title=&#34;Ejecución del ejemplo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/255/java-cache-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaCache&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/</id>
        <title>37 buenos libros sobre sobre Java, Linux, DevOps y desarrollo que he leído</title>        
        <updated>2017-08-19T11:00:00+02:00</updated>
        <published>2017-08-18T23:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/37-buenos-libros-sobre-sobre-java-linux-devops-y-desarrollo-que-he-leido/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Con el buscador Google y usando las palabras clave adecuadas es raro no encontrar información sobre aquello que estemos buscando. Pero en internet la información suele estar muy dispersa y en cada sitio la información no es completa y con profundidad, internet esta muy bien como apoyo o para precisar una determinada cuestión. Sin embargo, los libros siguen siendo un buen material de aprendizaje, entre sus ventajas está que la información está mejor organizada con una estructura más didáctica y dependiendo del libro el tema tratado es explicado con profundidad. Desde el 2014 son unos cuantos libros más los que he leído.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;En internet hay cantidad de información que nos permiten aprender sobre cualquier cosa a nuestro libre albedrío y que queramos teniendo el tiempo para dedicárselo ya sea en forma de escuetas presentaciones en &lt;a href=&#34;https://speakerdeck.com/&#34;&gt;SpeakerDeck&lt;/a&gt; o &lt;a href=&#34;http://es.slideshare.net/&#34;&gt;SlideShare&lt;/a&gt;, páginas sobre temas de programación, artículos en bitácoras como esta que estás leyendo u otras, vídeos en &lt;a href=&#34;https://www.youtube.com/&#34;&gt;YouTube&lt;/a&gt;, convenciones presenciales o &lt;em&gt;hangouts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Algunas páginas dedicadas a la programación relativa a &lt;a href=&#34;http://www.oracle.com/technetwork/java/index.html&#34;&gt;Java&lt;/a&gt; y &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt; a las que estoy suscrito son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/&#34;&gt;JAXenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/&#34;&gt;JavaWorld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/&#34;&gt;JavaMagazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualjug.com/&#34;&gt;VirtualJUG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsdmag.org/&#34;&gt;BSD Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net&#34;&gt;LWN.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linux.com/&#34;&gt;linux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la biblioteca digital &lt;a href=&#34;https://openlibra.com&#34;&gt;OpenLibra&lt;/a&gt; encontramos una gran cantidad de libros de diversos temas cuyas licencias permiten su libre acceso.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/254/openlibra.png&#34; title=&#34;OpenLibra&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/254/openlibra-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Web de OpenLibra&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Podemos leer libros cuya información no está relacionada con un determinado herramienta técnica sino que su conocimiento es más generalista e independiente de la tecnología, en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/&#34;&gt;8+ libros para mejorar como programadores&lt;/a&gt; recogía varios de los más mencionados y recomendados por mucha gente todavía válidos a pesar del tiempo transcurrido desde que fueron escritos, son atemporales. En la época que estaba en la universidad hace unos 15-20 años para mi internet aún estaba llegando, lo más parecido que tenía era la biblioteca en la que pedía prestados libros pero lógicamente con mayor limitación de material disponible. Hoy en día los alumnos, de universidad o bachillerato y gente con interés que quiera formarse mediante internet tiene acceso a material del que aprender mucho mejor en cantidad, facilidad y seguramente en calidad. A la gente que ahora está en la universidad le recomendaría que no se limiten a aprender lo que les enseñan en clases magistrales sus profesores sino que tomen parte activa en su formación aprovechándose de los recursos que pueden encontrar en internet.&lt;/p&gt;

&lt;p&gt;Estos son los que me ha parecido que están bastante bien, algunos he leído de forma completa otros solo ciertos capítulos, algunos después de leídos olvidados en parte por falta de uso y porque mi inglés no es muy bueno. Son libros relacionados con la programación, la web o el lenguaje Java en su mayoría. Hay algún libro más que he leído pero estos son los que quería destacar. Además de aprender leer esta buena cantidad de libros me da ideas para escribir algunos artículos, algunos de los cuanles he incluído en este artículo como relacionados.&lt;/p&gt;

&lt;h2 id=&#34;libros-sobre-java&#34;&gt;Libros sobre Java&lt;/h2&gt;

&lt;h3 id=&#34;java-9-modularity&#34;&gt;Java 9 Modularity&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491954167&amp;linkId=a4ac0f67b92d5e64b2f115dec0ed246c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La modularidad no es la única característica que se incorporará en Java 9 hay muchas otras pero quizá la que más llama la atención en parte porque estaba prevista ya para versiones anteriores y finalmente se ha postergado desde la versión 7. En cualquier caso la modularidad mejora la encapsulación, seguridad, rendimiento y compatibilidad con versiones futuras aspecto de la compatibilidad hacia atrás que siempre se la ha dado y es destacado en la plataforma Java.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2ic88Qc&#34;&gt;Java 9 Modularity&lt;/a&gt; explica los cambios que afectan principalmente a algún nuevo archivo de código fuente para definir de forma explícita las dependencias que posee un módulo y los paquetes que exporta que definen su interfaz pública. También explica los cambios que afectan a comandos básicos como &lt;em&gt;javac&lt;/em&gt; para compilar y &lt;em&gt;java&lt;/em&gt; para ejecutar una aplicación. Hasta que los módulos se empiecen a adoptar por las librerías, y será lento, se explican los mecanismos para usar en Java 9 con módulos librerías de código que no hayan sido adaptadas aún.&lt;/p&gt;

&lt;p&gt;Java 9 será publicado en septiembre y ya tengo ideados unos cuantos artículos para publicar.&lt;/p&gt;

&lt;h3 id=&#34;java-generics-and-collections&#34;&gt;Java Generics and Collections&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596527756&amp;linkId=7392be28d1ec52d1dca41e10fc216fc1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los tipos genéricos se añadieron en Java 5, en el año 2004, que el copilador utiliza para validar la corrección del código evitando problemas que serían producidos en tiempo de ejecución. En la API de colecciones se usa de forma extensiva.&lt;/p&gt;

&lt;p&gt;El concepto no es difícil pero dominar las declaraciones de los &lt;em&gt;generics&lt;/em&gt; no lo es, se puede complicar bastante. El libro &lt;a href=&#34;https://amzn.to/2whneuf&#34;&gt;Java Generics and Collections&lt;/a&gt; es antiguo pero no está anticuado y sigue tiendo plena validez hoy, explica porque los &lt;em&gt;generics&lt;/em&gt; fueron implementados en Java como fueron implementados, las limitaciones que causa y las ponderaciones que realizaron sus desarrolladores.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/tutorial-sobre-los-tipos-genericos-de-java/&#34;&gt;Tutorial sobre los tipos genéricos de Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cloud-native-java&#34;&gt;Cloud Native Java&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B074R4B7LY&amp;linkId=cb4b120dd4eac60796de0ec4796fbf8e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La flexibilidad que aporta la computación en la nube (o en los ordenadores de otros como dice la FSF) es en gran medida su éxito. Los programas que adopten esta nueva arquitectura obtienen varias ventajas como escalabilidad, tolerancia a fallos o administración de automatizada. Sin embargo, las aplicaciones tiene que diseñarse o adaptarse a este nuevo entorno.&lt;/p&gt;

&lt;p&gt;Algunas librerías como &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; proporciona a las aplicaciones Java facilidades para desarrollar aplicaciones que se consideran nativas para la computación en la nube. &lt;a href=&#34;https://amzn.to/2v7T4EK&#34;&gt;Cloud Native Java&lt;/a&gt; hace un repaso a los factores a tener en cuenta en las aplicaciones.&lt;/p&gt;

&lt;h3 id=&#34;java-the-good-parts&#34;&gt;Java The Good Parts&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596803737&amp;linkId=c8d9a7967ea7439451a570b1f2659e9d&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El lenguaje de programación Java es uno de los lenguajes más populares y que más desarrolladores posee desde ya muchos años. Su éxito se debe a varios principios que los arquitectos de la plataforma incorporaron desde sus inicios. Un lenguaje orientado a objetos, con excepciones para el tratamiento de errores, organización de clases en paquetes, recolector de basura que libera al programador de la tarea y evitar fugas de memoria o errores no controlados, la máquina virtual que posibilita escribir el código una vez y ejecutarlo en cualquier plataforma para la que haya una JVM, la gran documentación en &lt;em&gt;javadoc&lt;/em&gt; que sirve como consulta y como formato para documentar en el propio código fuente, las colecciones que proporcionan estructuras de datos básicas y útiles para cualquier programa, concurrencia con hilos y primitivas para la sincronización y con el paso del tiempo un ecosistema muy grande de librerías, herramientas y entornos integrados de desarrollo.&lt;/p&gt;

&lt;p&gt;Todas estas características se comentan detalladamente en &lt;a href=&#34;https://amzn.to/2xaP6wf&#34;&gt;Java The Good Parts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;building-maintainable-software-java-edition&#34;&gt;Building Maintainable Software Java Edition&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491953527&amp;linkId=6a378c8faf06d2e362cdeb9226b925cf&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Hay conocimiento que es independiente del lenguaje que se utilice como tratar de escribir funciones o métodos con pocas líneas de código, mantener las interfaces pequeñas, separar en módulos, mantener el acoplamiento bajo y balanceados, que la base de código sea pequeña, automatizar las pruebas o escribir código limpio. Aunque &lt;a href=&#34;https://amzn.to/2vPOQ6v&#34;&gt;Building Maintainable Software Java Edition&lt;/a&gt; es una edición para Java con los ejemplos en este lenguaje las motivaciones que describe de cada uno de los puntos anteriores es universal.&lt;/p&gt;

&lt;h3 id=&#34;the-well-grounded-java-developer&#34;&gt;The Well-Grounded Java Developer&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617290068&amp;linkId=1b305765190419f6de43b75335e43746&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2fRQgJS&#34;&gt;The Well-Grounded Java Developer&lt;/a&gt; diserta sobre varios conceptos a tener en cuenta para tener una base sólida sobre la plataforma Java. Nuevas características de Java 7, cosas vitales como inyección de dependencias, concurrencia, ficheros &lt;em&gt;class&lt;/em&gt; y &lt;em&gt;bytecode&lt;/em&gt; o lenguajes alternativos para la máquina virtual.&lt;/p&gt;

&lt;h3 id=&#34;spring-boot-in-action&#34;&gt;Spring Boot in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292540&amp;linkId=990ac035faf92b423b7edd4e70377b89&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Spring Boot permite que una aplicación sea completamente autocontenida incluyendo un servidor web como &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; entre otros disponibles. En vez de distribuir la aplicación en formato &lt;em&gt;war&lt;/em&gt; para ser desplegada en un contenedor de &lt;em&gt;servlets&lt;/em&gt; o aplicaciones la aplicación se distribuye en formato &lt;em&gt;jar&lt;/em&gt; y se inicia como una aplicación Java tradicional. Es la aplicación la que inicia el servidor web embebido y hace que proporcione su servicio. Esta es nueva tendencia que se sigue en las aplicaciones y en las aplicaciones basadas en la nube.&lt;/p&gt;

&lt;p&gt;Spring Boot proporciona una integración con la parte del ecosistema de &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; que requiera la aplicación. Para nuevos proyectos &lt;a href=&#34;https://amzn.to/2v8gMk7&#34;&gt;Spring Boot in Action&lt;/a&gt; es muy interesante.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/&#34;&gt;Aplicación Java autocontenida con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator/&#34;&gt;Información y métricas de la aplicación con Spring Boot Actuator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Ejemplo de API REST en Java con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gradle-in-action&#34;&gt;Gradle in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291307&amp;linkId=86af7295a55368699341bfbe2ae7040e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; es una herramienta de construcción de proyectos y gestión de dependencias que adopta las mejores características de &lt;a href=&#34;https://ant.apache.org/&#34;&gt;Ant&lt;/a&gt; y &lt;a href=&#34;https://maven.apache.org/&#34;&gt;Maven&lt;/a&gt; con pocas o ninguna de sus deficiencias. &lt;a href=&#34;https://amzn.to/2uY2naN&#34;&gt;Gradle in Action&lt;/a&gt; explica en profundidad esta herramienta de construcción para llegar a dominarla.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html&#34;&gt;Herramienta de construcción Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/04/usar-gradle-mediante-gradle-wrapper.html&#34;&gt;Usar Gradle mediante Gradle wrapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;Ejemplo de multiproyecto con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/05/incluir-informacion-de-la-version-en-el-artefacto-distribuible-con-gradle/&#34;&gt;Incluir información de la versión en el artefacto distribuible con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/iniciar-rapido-un-proyecto-de-java-con-gradle-o-de-spring-con-spring-initializr/&#34;&gt;Iniciar rápido un proyecto de Java con Gradle o de Spring con Spring Initializr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-testing-with-spock&#34;&gt;Java Testing with Spock&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292532&amp;linkId=ac77f9a86125173cda19c2c4949ce0a3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Las pruebas automatizadas son indispensables para escribir código con menos errores y con mayor calidad. En Java hay varias herramientas de &lt;em&gt;testing&lt;/em&gt; para hacer pruebas unitarias, de integración o funcionales. &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; con el que se escriben especificaciones con un DSL y utilizando el lenguaje &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; permite automatizar las indispensables pruebas de todo código. &lt;a href=&#34;https://amzn.to/2vPt5Ul&#34;&gt;Java Testing with Spock&lt;/a&gt; explica esta herramienta.&lt;/p&gt;

&lt;h3 id=&#34;portlets-in-action&#34;&gt;Portlets in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1935182544&amp;linkId=e954596f73982d6fc4c7338ffb4225b7&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los portales son utilizados por algunas organizaciones para gestionar el contenido que publican en su web. &lt;a href=&#34;https://amzn.to/2w96DIn&#34;&gt;Portlets in Action&lt;/a&gt; explica como crear las unidades básicas de los portales en Java, los &lt;em&gt;portlets&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/introduccion-a-los-portales-y-ejemplo-de-portlet-con-liferay/&#34;&gt;Introducción a los portales y ejemplo de portlet con Liferay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/07/portlets-con-el-framework-apache-tapestry-y-apache-pluto/&#34;&gt;Portlets con el framework Apache Tapestry y Apache Pluto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;varios-libros&#34;&gt;Varios libros&lt;/h2&gt;

&lt;h3 id=&#34;learning-javascript&#34;&gt;Learning JavaScript&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=380952682c6e61c533807cd32a6dd038&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2xbmkMh&#34;&gt;Learning JavaScript&lt;/a&gt; explica este lenguaje de programación utilizado en los navegadores web. Denostado a veces por falta de conocimiento el libro explica muchas cosas interesantes del lenguaje e incorporadas la versión de ECMAScript 6. Es un libro que no requiere gran conocimiento previo y empieza desde un nivel básico.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/&#34;&gt;Introducción al JavaScript de ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-book-of-css3&#34;&gt;The Book of CSS3&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275803&amp;linkId=74be128029bfbd8f789af03a1b673aba&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Al igual que JavaScript el denostado CSS también a veces lo es por el mismo motivo. &lt;a href=&#34;https://amzn.to/2wgURft&#34;&gt;The Book of CSS3&lt;/a&gt; explica las nuevas posibilidades para aplicar estilos a documentos HTML en los navegadores. &lt;em&gt;Media queries&lt;/em&gt;, selectores, psedo-clases y pseudo-elementos, &lt;em&gt;web fonts&lt;/em&gt;, efectos y estilos de tipografías, disposiciones en múltiples columnas, imágenes de fondo, bordes y efectos de caja, color y opacidad, gradientes transoformaciones 3D, animaciones y transiciones, &lt;em&gt;layouts&lt;/em&gt;, modos &lt;em&gt;blend&lt;/em&gt;, filtros y máscaras es el contenido del libro.&lt;/p&gt;

&lt;h3 id=&#34;learning-rabbitmq-y-mastering-rabbitmq&#34;&gt;Learning RabbitMQ y Mastering RabbitMQ&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=bffff9170b71717eb95f6be0a95274db&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=4cce33b79c609e875e6fb2a8b3b9ded2&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Los libros &lt;a href=&#34;https://amzn.to/2xbdSN2&#34;&gt;Learning RabbitMQ&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2xbjaI2&#34;&gt;Mastering RabbitMQ&lt;/a&gt; tratan sobre la herramienta &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; para desarrollar aplicaciones que se comuniquen mediante mensajes. Los mensajes son una forma efectiva de desacoplar dos aplicaciones tanto temporalmente como en el lenguaje utilizado en cada una de ellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mongodb-in-action&#34;&gt;MongoDB in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617291609&amp;linkId=497acae6ed525c559c046c38d3ed28c0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La misión de las bases de datos es almacenar información para una posterior consulta o búsqueda. &lt;a href=&#34;https://amzn.to/2xb7KUJ&#34;&gt;MongoDB in Action&lt;/a&gt; trata sobre la base de datos orientada a documentos &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; catalogada como NoSQL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/05/introduccion-a-la-base-de-datos-nosql-mongodb/&#34;&gt;Ejemplo de RabbitMQ con Java para enviar y recibir mensajes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/usar-la-base-de-datos-nosql-mongodb-con-java/&#34;&gt;Usar la base de datos NoSQL MongoDB con Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sql-antipatterns&#34;&gt;SQL Antipatterns&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1934356557&amp;linkId=f6f8cc4cba1c24fdec9a4a47503e738d&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aún con la popularización de las bases de datos NoSQL las bases de datos relacionales siguen siendo perfectamente válidas. El libro &lt;a href=&#34;https://amzn.to/2icem2F&#34;&gt;SQL Antipatterns&lt;/a&gt; es una colección de consejos a tener en cuenta al diseñar y utilizar las bases de datos relacionales. Algunas formas de uso que generan problemas están desaconsejados y se consideran antipatrones.&lt;/p&gt;

&lt;h3 id=&#34;beginning-sql-queries-y-learning-postgresql&#34;&gt;Beginning SQL Queries y Learning PostgreSQL&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484219546&amp;linkId=6c88c8326d867c036266f6483f41477d&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783989181&amp;linkId=0b62f915f94acd860485c75946fa0392&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El lenguaje declarativo SQL es muy potente y yo al menos desconocía o he usado poco muchas cosas que se han añadido al lenguaje en versiones más modernas y que algunas bases de datos como &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; implementan. Algunas de estas cosas son las &lt;em&gt;windows functions&lt;/em&gt;, tipos definidos por el usuario, &lt;em&gt;triggers&lt;/em&gt;, &lt;em&gt;common table expression&lt;/em&gt; o CTE, consultas recursivas, búsqueda de texto más avanzado y eficiente que la expresión &lt;em&gt;like&lt;/em&gt;, &lt;em&gt;lateral subqueries&lt;/em&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Los libros &lt;a href=&#34;https://amzn.to/2xbh62O&#34;&gt;Beginning SQL Queries&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2vaxQG8&#34;&gt;Learning PostgreSQL&lt;/a&gt; son una buena documentación sobre el lenguaje SQL que van más allá de lo enseñado en algunos cursos académicos.&lt;/p&gt;

&lt;h3 id=&#34;cors-in-action&#34;&gt;CORS in Action&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=161729182X&amp;linkId=a1fec0248175841014bd8986c63eb82e&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; permite a sitios distintos del origen de la página proporcionar su contenido. Por defecto, los navegadores solo permiten hacer peticiones al mismo sitio del origen de la página, con una combinación del navegador y cabeceras en las peticiones que proporcionan los sitios web permiten hacer llamadas entre diferentes sitios manteniendo la seguridad. El libro &lt;a href=&#34;https://amzn.to/2vKvmlf&#34;&gt;CORS in Action&lt;/a&gt; trata en detalle este tema.&lt;/p&gt;

&lt;h3 id=&#34;microservice-architecture&#34;&gt;Microservice Architecture&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491956259&amp;linkId=57e9f172013ca12309e2ca2b5fa19fc2&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;El ámbito &lt;em&gt;cloud&lt;/em&gt; y una nueva forma de arquitectura para las aplicaciones han originado los denominados microservicios. En vez de desarrollar una aplicación monolítica y grande se tiende hacia múltiples aplicaciones más pequeñas con un contexto específico que colaboran para proporcionar la misma funcionalidad. El libro &lt;a href=&#34;https://amzn.to/2vPtaY3&#34;&gt;Microservice Architecture&lt;/a&gt; trata las motivaciones, que valor aportan los microservicios así como sus principios y cultura.&lt;/p&gt;

&lt;h3 id=&#34;learning-http-2&#34;&gt;Learning HTTP/2&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491962445&amp;linkId=1a89f93cde97f31c639b38ca79811040&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La siguiente versión del protocolo HTTP mejora varios aspectos del anterior. Es más eficiente, con menos latencia, con mejor rendimiento mas seguro al requerirse una conexión cifrada y haciendo innecesarios varias técnicas que se usaban anteriormente. &lt;a href=&#34;https://amzn.to/2xaScjO&#34;&gt;Learning HTTP/2&lt;/a&gt; es un buen material para conocer las diferencias y los problemas que presentaba HTTP/1.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;Introducción al protocolo HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mastering-oauth-2-0&#34;&gt;Mastering OAuth 2.0&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=c62cfbc31fdea33038fa6650c9bf9686&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; es un protocolo para proporcionar autenticación y autorización a un sitio o aplicación sin que el usuario le proporcione las credenciales. Una aplicación que requiera acceso aun tercero necesita obtener un &lt;em&gt;bearer token&lt;/em&gt; que mediante un proceso de autorización se puede obtener de cuatro formas diferentes dependiendo de la aplicación y de si el dispositivo autorizado es de confianza o no. &lt;a href=&#34;https://amzn.to/2wXTEH6&#34;&gt;Matering OAuth 2.0&lt;/a&gt; es una buena introducción.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;libros-sobre-linux-y-devops&#34;&gt;Libros sobre Linux y DevOps&lt;/h2&gt;

&lt;h3 id=&#34;git-mastering-version-control&#34;&gt;Git: Mastering Version Control&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MXIFY5E&amp;linkId=f6eea55958b2783765b4bda371dd3e04&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;He leído varios libros sobre &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, muchos empiezan explicando como es la estructura de información que guarda Git, no es necesario empezar por ahí. El libro &lt;a href=&#34;https://amzn.to/2vKqyMR&#34;&gt;Git: Mastering Version Control&lt;/a&gt; es mucho más pragmático y explica muy bien los casos de uso que uno requiere de este sistema de control de versiones. Con este libro finalmente he aprendido mejor como usar un &lt;em&gt;rebase&lt;/em&gt; interactivo para reescribir los &lt;em&gt;commits&lt;/em&gt; o hacer un &lt;em&gt;squash&lt;/em&gt;, también como crear &lt;em&gt;alias&lt;/em&gt; y &lt;em&gt;hooks&lt;/em&gt;, los diferentes modos de &lt;em&gt;reset&lt;/em&gt; además de como crear &lt;em&gt;commits&lt;/em&gt;, hacer búsquedas en el repositorio y otras muchas cosas que no he usado aún.&lt;/p&gt;

&lt;h3 id=&#34;gitlab-cookbook&#34;&gt;GitLab Cookbook&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783986840&amp;linkId=153454430c956fe5335fe123ab829a40&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Como servidor de Git me gustan de &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; dos cosas: que tiene una versión para la comunidad usable por ejemplo en un servidor propio de una empresa u organización y que tiene varias herramientas integradas como son una wiki, un sistema de &lt;em&gt;tracking&lt;/em&gt; para las tareas de un proyecto junto con tableros y soporte para hacer integración y entrega continua sin necesidad de más herramientas lo que simplifica la infraestructura para el desarrollo en gran medida. También soporta otras características presentes en GitHub como &lt;em&gt;merge request&lt;/em&gt;, revisiones entre pares o calidad de código entre otras muchas otras, la &lt;a href=&#34;https://about.gitlab.com/features/&#34;&gt;lista completa de &lt;em&gt;features&lt;/em&gt;&lt;/a&gt; es grande. &lt;a href=&#34;https://amzn.to/2icQyvr&#34;&gt;GitLab Cookbook&lt;/a&gt; es un libro introductorio para empezar a manejarlo.&lt;/p&gt;

&lt;h3 id=&#34;docker-in-action-y-the-devops-2-1-toolkit&#34;&gt;Docker in Action y The DevOps 2.1 Toolkit&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1633430235&amp;linkId=f257277b2f9112d7cd77aa1147bafd1d&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1542468914&amp;linkId=f250891fe3d29d340f3fd3f82af96671&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y los contenedores junto con la computación en la nube han cambiado la forma de distribuir y desplegar las aplicaciones en los servidores. Docker es una gran herramienta muy interesante de conocer. Son varias las herramientas del ecosistema, &lt;a href=&#34;https://amzn.to/2icqdxN&#34;&gt;Docker in Action&lt;/a&gt; explica &lt;em&gt;docker&lt;/em&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;&lt;em&gt;docker compose&lt;/em&gt;&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2uXSwBT&#34;&gt;The DevOps 2.1 Toolkit&lt;/a&gt; explica &lt;a href=&#34;https://docs.docker.com/swarm/&#34;&gt;&lt;em&gt;docker swarm&lt;/em&gt;&lt;/a&gt; para crear &lt;em&gt;clusters&lt;/em&gt; de servidores.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ansible-up-and-running-y-implementing-devops-with-ansible-2&#34;&gt;Ansible Up and Running y Implementing DevOps with Ansible 2&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491979801&amp;linkId=35c25b05f8577bf1bf72e0797ca47367&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1787120538&amp;linkId=2e83b442739bb1c91a6637a6f3d50a6c&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; es una herramienta para automatizar tareas en una o múltiples máquinas locales o remotas. Otra de sus propiedades en la mayoría de los casos es que es idempotente, es decir, se pueden ejecutar las acciones múltiples veces aplicando los cambios pertinentes o no haciendo nada según el estado de la máquina y el estado deseado.&lt;/p&gt;

&lt;p&gt;La herramienta es muy útil para tratar a los servidores siendo numerosos como ganado en vez de como mascotas y los libros &lt;a href=&#34;https://amzn.to/2wY1LDM&#34;&gt;Ansible Up and Running&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2wgRIMR&#34;&gt;Implementing DevOps with Ansible 2&lt;/a&gt; lo explican.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/11/introduccion-a-ansible/&#34;&gt;Introducción a Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unix-and-linux-system-administration-handbook-linux-administration-a-beginner-s-guide-y-how-linux-works&#34;&gt;UNIX and Linux System Administration Handbook, Linux Administration A Beginner’s Guide y How Linux Works&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0134277554&amp;linkId=7c91fcafae6964872c27d9bf3f68a9f1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0071845364&amp;linkId=a7a84bf9b3f731a5b2e4cffba08c00b4&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1593275676&amp;linkId=09f1c68e67a12909a5af564fc43cf8d3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2vPg7WB&#34;&gt;UNIX and Linux System Administration Handbook&lt;/a&gt; es un libro que presenta al usuario los sistemas GNU/Linux, &lt;a href=&#34;https://amzn.to/2wXrJae&#34;&gt;Linux Administration A Beginner’s Guide&lt;/a&gt; detalla las tareas administrativas para un servidor Linux y &lt;a href=&#34;https://amzn.to/2uYcE6Z&#34;&gt;How Linux Works&lt;/a&gt; es un libro que explica detalles más profundos de aspectos internos de Linux.&lt;/p&gt;

&lt;h3 id=&#34;amazon-web-services-in-action-y-amazon-web-services-for-dummies&#34;&gt;Amazon Web Services in Action y Amazon Web Services For Dummies&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1617292885&amp;linkId=88093372487f3f14280848b9bec59ef8&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1118571835&amp;linkId=03661313e03334c617b0ec833c2e2eb3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aún habiendo leído &lt;a href=&#34;https://amzn.to/2v8nI0F&#34;&gt;Amazon Web Services in Action&lt;/a&gt; y &lt;a href=&#34;https://amzn.to/2icfumV&#34;&gt;Amazon Web Services For Dummies&lt;/a&gt; como no he tenido la oportunidad de practicar con la nube de Amazon casi todo de lo que leí lo tengo olvidado. &lt;a href=&#34;https://aws.amazon.com/es/free/&#34;&gt;Amazon ofrece una capa gratuita&lt;/a&gt; para probarlo.&lt;/p&gt;

&lt;h2 id=&#34;publicaciones-más-breves&#34;&gt;Publicaciones más breves&lt;/h2&gt;

&lt;p&gt;Esto ya no son libros sino documentos más pequeños sobre diferentes temas.&lt;/p&gt;

&lt;h3 id=&#34;guide-to-the-java-ecosystem-2015&#34;&gt;Guide to the Java Ecosystem 2015&lt;/h3&gt;

&lt;p&gt;Aun es la &lt;a href=&#34;https://dzone.com/guides/the-java-ecosystem-2015-edition&#34;&gt;edición del 2015&lt;/a&gt; y no he visto que hayan publicado una más reciente. Explica las tendencias y el ecosistema de Java. Microservicios, &lt;em&gt;docker&lt;/em&gt;, Java 8, programación &lt;em&gt;reactiva&lt;/em&gt;, mejores prácticas, &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;java-the-legend&#34;&gt;Java The Legend&lt;/h3&gt;

&lt;p&gt;¿A que es debido el éxito de Java? El libro &lt;a href=&#34;http://www.oreilly.com/programming/free/java-the-legend.csp&#34;&gt;Java The Legend&lt;/a&gt; expone varios motivos como importancia de la compatibilidad hacia atrás, fácil de aprender y de leer, un sistema de tipos simple o la máquina virtual de Java o JVM. Aunque también según el documento con algunos fracasos como los &lt;em&gt;Java Bean&lt;/em&gt; por promover la mutabilidad que es molesta para la concurrencia, la finalización de los objetos, sobre configuración de Java EE o la abstracción muy básica de hilos. Comenta el ecosistema alrededor de la plataforma Java con &lt;a href=&#34;https://eclipse.org&#34;&gt;Eclipse&lt;/a&gt;, &lt;a href=&#34;https://www.apache.org/&#34;&gt;Apache&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt; junto con el futuro con Java 9, HTTP/2, JShell y quizá en un futuro el proyecto Panama para una nueva interfaz alternativa a JNI para código nativo y el proyecto Valhalla que trata sobre los tipos para usar cosas como definir colecciones genéricas con tipos primitivos.&lt;/p&gt;

&lt;h3 id=&#34;the-daemon-the-gnu-and-the-penguin&#34;&gt;The daemon, the GNU and the penguin&lt;/h3&gt;

&lt;div class=&#34;media-amazon float-right&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=097903423X&amp;linkId=cf2cd5a87906b63405d49e3f74dc59a3&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://amzn.to/2vKs5CH&#34;&gt;The daemon, the GNU and the penguin&lt;/a&gt; es un documento que repasa el origen, inicios y evolución del software libre y de código abierto desde el año 1968 con referencias a Unix, BSD, Minix, Sun, GPL, Hurd, la web, Tanenbaum, Torvalds, Linux, &amp;hellip; Este documento y el siguiente son unos clásicos en internet.&lt;/p&gt;

&lt;h3 id=&#34;la-catedral-y-el-bazar&#34;&gt;La catedral y el bazar&lt;/h3&gt;

&lt;p&gt;La catedral y el bazar hace referencia a dos modelos distintos de desarrollo uno centralizado y controlado por una organización y otro distribuido de más libre albedrío pero también se ha demostrado muy efectivo posibilitado por la democratización de internet. &lt;a href=&#34;http://catb.org/esr/writings/cathedral-bazaar/&#34;&gt;La catedral y el bazar&lt;/a&gt; está traducido a varios idiomas entre ellos el &lt;a href=&#34;http://biblioweb.sindominio.net/telematica/catedral.html&#34;&gt;español&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para acabar este artículo, viendo la cantidad de libros que he leído en unos 3 o 4 años con el tiempo que supone dedicado a adquirir estos conocimientos en gran parte en el tiempo libre y que en general empleamos los que trabajamos en el sector tecnológico hay que hacerse valer a la hora de recibir o postular a una oferta de trabajo y me refiero al ámbito económico que en muchas ofertas de &lt;a href=&#34;https://www.infojobs.net/&#34;&gt;InfoJobs&lt;/a&gt; o &lt;a href=&#34;https://www.tecnoempleo.com/&#34;&gt;Tecnoempleo&lt;/a&gt; no se corresponde con lo que supone los conocimientos que se solicitan.&lt;/p&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="linux "/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/el-antipatron-de-inicializacion-de-variables-con-dobles-llaves-en-java/</id>
        <title>El antipatrón de inicialización de variables con dobles llaves en Java</title>        
        <updated>2017-08-14T11:00:00+02:00</updated>
        <published>2017-08-14T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/el-antipatron-de-inicializacion-de-variables-con-dobles-llaves-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java es un lenguaje más verboso y con menos azúcar sintáctico (o veneno para ratas, según se mire) que otros lenguajes. Esto hace que por ejemplo para declarar e inicializar objetos tan comunes en un programa de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&#34;&gt;Map&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&#34;&gt;List&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&#34;&gt;Set&lt;/a&gt; que contengan un número fijo de elementos haya que escribir varias líneas de código. Estas clases de estructuras de datos del grupo de colecciones son de las más usadas en una aplicación Java. A la fecha de escribir este artículo Java no soporta literales para las colecciones que reduzca las lineas de código para inicializarlas y mejore la legibilidad del código aunque en versiones recientes si se han incorporado métodos de utilidad que cubren el requerimiento.&lt;/p&gt;

&lt;p&gt;Con el objetivo de reducir la verbosidad quizá en algún sitio se pueda ver que usando la técnica de doble llave se puede inicializar un &lt;em&gt;Map&lt;/em&gt; o &lt;em&gt;List&lt;/em&gt; de una forma más reducida, tal que:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=AntipatronLlaves.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Sin embargo, no es recomendable usar este &lt;em&gt;hack&lt;/em&gt; del lenguaje porque presenta sus inconvenientes, por ello está desaconsejado y se considera un antipatrón. En el pozo de sabiduría para el programador de &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; se indican &lt;a href=&#34;http://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java#27521360&#34;&gt;varios inconvenientes&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cada bloque de inicialización con doble llave crea una clase anónima que incrementa el número de clases de la aplicación y que puede penalizar el rendimiento si se usa de forma extensiva en una aplicación.&lt;/li&gt;
&lt;li&gt;Si se retorna un mapa inicializado de esta forma desde un método el mapa tendrá una referencia al objeto que lo creo, lo que evita que el objeto sea destruido por el recolector de basura hasta que no se recolecte el mapa creando una potencial fuga de memoria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En &lt;a href=&#34;http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line#1005083&#34;&gt;otros hilos de StackOverflow&lt;/a&gt; algunas respuestas muy votadas se propone usar dobles llaves para la inicialización, pero por los puntos comentados anteriormente mejor no usarla por mucho que esté en StackOverflow y haya sido esta una respuesta muy votada.&lt;/p&gt;

&lt;p&gt;Las alternativas en Java 8 en el caso del &lt;em&gt;Map&lt;/em&gt; si queremos reducir la verbosidad al inicializar estos tipos de datos usados profusamente podemos usar lo siguiente, en el caso de &lt;em&gt;List&lt;/em&gt; o &lt;em&gt;Set&lt;/em&gt; disponemos desde hace más tiempo del método &lt;em&gt;Arrays.asList&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava8.java&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava7.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En Java 9 aunque aún no se incorporen la definición de literales al lenguaje con los métodos de utilidad &lt;em&gt;of&lt;/em&gt; en su respectivas interfaces gracias a los &lt;em&gt;defaults methods&lt;/em&gt; el código se simplifica en gran medida.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/093fa885f8d9a40901938951fb8e8cd9.js?file=MapListSetJava9.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javarevisited.blogspot.com.es/2015/10/what-is-double-brace-initialization-in-java-example-anti-pattern.html&#34;&gt;What is Double Brace Initialization in Java? Anti Pattern Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi/wiki?DoubleBraceInitialization&#34;&gt;Double Brace Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java&#34;&gt;What is Double Brace initialization in Java?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://minborgsjavapot.blogspot.com.es/2014/12/java-8-initializing-maps-in-smartest-way.html&#34;&gt;Java 8, Initializing Maps in the Smartest Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/</id>
        <title>Instalar y renovar un certificado de Let&#39;s Encrypt en Nginx</title>        
        <updated>2017-08-18T17:00:00+02:00</updated>
        <published>2017-08-12T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s Encrypt es una entidad que emite certificados TLS/SSL que son reconocidos como de confianza por los navegadores web. Usando esta entidad de certificación es posible obtener y renovar un certificado TLS/SSL de forma automatizada, rápida y sin coste alguno.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/lets-encrypt.svg&#34; class=&#34;right&#34; width=&#34;350&#34; alt=&#34;Let&amp;#39;s Encrypt&#34; title=&#34;Let&amp;#39;s Encrypt&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt; ha anunciado que su buscador va a considerar el uso del protocolo seguro HTTPS como un criterio de &lt;abbr title=&#34;Search Engine Optimization&#34;&gt;SEO&lt;/abbr&gt; y posicionamiento en la lista de resultados, posicionando mejor aquellas páginas web que usen el protocolo seguro. Además, el navegador &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt; va a advertir al usuario para algunas páginas que usen solo HTTP que esas páginas son inseguras. Por estos motivos y para mayor seguridad y privacidad del usuario es conveniente usar el protocolo seguro HTTPS.&lt;/p&gt;

&lt;p&gt;El mayor inconveniente de usar el protocolo seguro HTTPS es que es necesario un certificado firmado por una autoridad de confianza instalada en el navegador del usuario. Hasta ahora había que comprar el certificado que puede llegar a tener un coste de más de 100€, instalarlo en el servidor y renovarlo antes de su fecha de expiración. Tareas quizá manuales por tanto tediosas y propensas a que surjan errores o se nos olvide hacer la renovación del certificado sobre todo si son múltiples los certificados a gestionar.&lt;/p&gt;

&lt;p&gt;Para mejorar la seguridad en la web y facilitar la administración de certificados hace un tiempo se creó una entidad &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; asociado a la &lt;a href=&#34;https://www.linuxfoundation.org/&#34;&gt;Linux Foundation&lt;/a&gt; con la que es posible automatizar la obtención y renovación de un certificado TLS/SSL firmado por una autoridad de confianza para los navegadores. Además Let&amp;rsquo;s Encrypt permite obtener un certificado sin ningún coste, de forma gratuita.&lt;/p&gt;

&lt;p&gt;Los pasos para usar en un servidor web un certificado de Let&amp;rsquo;s Encrypt son los siguientes. Primero hay que instalar el &lt;a href=&#34;https://www.archlinux.org/packages/community/any/certbot/&#34;&gt;paquete certbot&lt;/a&gt; según la distribución de GNU/Linux, en &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=pacman.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el proceso de obtención del certificado demostraremos que somos los propietarios del sitio web a certificar. Usando &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; como servidor web, iniciado y el dominio a certificar con la opción &lt;em&gt;-d&lt;/em&gt; se usa el siguiente comando:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=certbot.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El certificado obtenido tiene una fecha de expiración de únicamente tres meses periodo antes del cual hay que renovarlo. Para hacer la renovación hay que usar el comando:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=certbot-renew.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;La renovación del certificado se realiza cuando queda poco tiempo para que expire, unos 30 días, el siguiente comando permite comprobar antes si la configuración es correcta para realizar la renovación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=certbot-renew-dry-run.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;La clave privada y certificado que Let&amp;rsquo;s Encrypt genera una vez el dominio se ha validado se ubican en el directorio &lt;em&gt;/etc/letsencrypt/live/&lt;/em&gt; con una carpeta por cada dominio. También se puede ver desde la linea de comandos los certificados existentes y sus fechas de expiración.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=key-cert.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=certbot-certificates.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dado el relativo poco tiempo de validez de los certificados es recomendable automatizar la renovación empleando una &lt;a href=&#34;https://es.wikipedia.org/wiki/Cron_(Unix)&#34;&gt;expresión cron&lt;/a&gt;. La utilidad &lt;em&gt;certbot&lt;/em&gt; solo hace la renovación del certificado cuando queda menos de un més para su expiración aunque se programe su ejecución en este caso cada 6 horas y en un minuto aleatorio que Let&amp;rsquo;s Encrypt recomienda para que todos los usuarios no programen sus renovaciones al mismo tiempo:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=cron.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez que se ha renovado el certificado hay que reiniciar el servidor web para que lo utilice y para ello está el parámetro &lt;em&gt;&amp;ndash;renew-hook&lt;/em&gt; que ejecuta un comando cuando se produce una renovación. En el ejemplo anterior está el comando para reiniciar el servicio de nginx con el sistema gestión de procesos de &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/systemd/&#34;&gt;systemd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s Encrypt con &lt;em&gt;certbot&lt;/em&gt; comprueba si somos el propietario de un sitio web instalando en el servidor web un archivo que posteriormente antes de generar el certificado lo valida. Este archivo para nginx se ubica en el directorio &lt;em&gt;/usr/share/nginx/html/.well-known/acme-challenge/&lt;/em&gt; y ha de estar accesible desde internet con el protocolo HTTP en la dirección &lt;em&gt;/.well-known/acme-challenge/&lt;/em&gt; del servidor web.&lt;/p&gt;

&lt;p&gt;La siguiente configuración del servidor web nginx redirige todo el tráfico usando el procotolo HTTPS excepto el contenido del directorio &lt;em&gt;/.well-known/acme-challenge/&lt;/em&gt; que queda accesible por HTTP.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/386fb0fd31e420b5928ffaf444048c12.js?file=nginx.conf&#34;&gt;&lt;/script&gt;

&lt;p&gt;Y este es el resultado al acceder con el navegador al sitio web que tengo instalado en una &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; accesible desde internet con un dominio de &lt;a href=&#34;https://freedns.afraid.org/&#34;&gt;FreeDNS&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/252/smaug-1.png&#34; title=&#34;Sitio web con certificado de Let&amp;#39;s Encrypt&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/252/smaug-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/252/smaug-2.png&#34; title=&#34;Sitio web con certificado de Let&amp;#39;s Encrypt&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/252/smaug-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Sitio web con certificado de Let&amp;#39;s Encrypt&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En la documentación del proyecto de Let&amp;rsquo;s Encrypt hay explicaciones más detalladas sobre &lt;a href=&#34;https://letsencrypt.org/how-it-works/&#34;&gt;como funciona&lt;/a&gt;, &lt;a href=&#34;https://letsencrypt.org/docs/rate-limits/&#34;&gt;límites de uso&lt;/a&gt;, &lt;a href=&#34;https://certbot.eff.org/docs/using.html&#34;&gt;como usarlo&lt;/a&gt; y &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;varias guías según el servidor web y distribución GNU/Linux&lt;/a&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="seguridad"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
</feed>