<?xml version="1.0" encoding="utf-8"?><feed version="2.0" xmlns="http://www.w3.org/2005/Atom"><id>https://picodotdev.github.io/blog-bitix/tags/seguridad/</id><title type="text">Blog Bitix</title><subtitle>Recent content on Blog Bitix</subtitle><updated>2019-11-29T18:00:00+01:00</updated><author><name>picodotdev</name></author><generator>Hugo</generator><icon>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</icon><logo>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</logo><rights>https://creativecommons.org/licenses/by-sa/4.0/</rights><entry><id>https://picodotdev.github.io/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/</id><title>Implementar un segundo factor de autenticación en una aplicación web Java con Spring</title><updated>2019-11-29T18:00:00+01:00</updated><published>2019-11-29T18:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>El segundo factor de autenticación es una medida adicional en la autenticación que proporciona una notable mayor seguridad que utilizar solo un usuario y contraseña. Utilizando Spring y la aplicación para &lt;em>smatphone&lt;/em> Google Authenticator se puede implementar en una aplicación Java el segundo factor de autenticación o &lt;em>2FA&lt;/em> con códigos temporales o &lt;em>TOTP&lt;/em>.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/java.svg" class="right " width="200" alt="Java" title="Java"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/spring.svg" class="right " width="200" alt="Spring" title="Spring"/>
&lt;/div>
&lt;p>Comúnmente para realizar el proceso de autenticar a un usuario se ha realizado simplemente con el método de usuario y contraseña. Sin embargo, verificar la identidad mediante usuario y contraseña para algunos usuarios no es suficientemente seguro dado que los usuarios pueden elegir contraseñas débiles con pocos caracteres o sin usar una combinación que incluya letras, números y símbolos, pueden elegir contraseñas comunes muy utilizadas fáciles de adivinar con un ataque de diccionario, pueden usar la misma contraseña para varios servicios de modo que si las contraseñas de un servicio son descubiertas cualquier otro servicio que las utilice potencialmente corre un riesgo de seguridad. Usar solo usuario y contraseña no proporciona la suficiente seguridad para ciertos servicios que permiten realizar transacciones que involucra dinero, tratan datos sensibles o son servicios atractivos para ser atacados.&lt;/p>
&lt;p>Para que las contraseñas sean seguras las aplicaciones en sus bases de datos &lt;a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/">guardar las contraseñas usando &lt;em>Salted Password Hashing&lt;/em>&lt;/a>, los usuarios por su parte deben utilizar un generador de contraseñas, utilizar una contraseña distinta para cada servicio y &lt;a href="https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassxc/">guardalas en una base de datos cifrada como KeePassXC&lt;/a> para recordar cada una de ellas. Las contraseñas son algo que se conoce, cualquier persona que conozca la contraseña puede autenticarse, más recientemente una capa adicional de seguridad es requerir algo que se tiene, el segundo factor de autenticación o 2FA.&lt;/p>
&lt;p>La aplicación &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=en">Google Authenticator&lt;/a> para dispositivos móviles &lt;a href="https://www.android.com/">Android&lt;/a> permite utilizarse como segundo factor de autenticación, esta aplicación genera códigos con un tiempo corto de duración que son requeridos en un segundo paso de la autenticación después de introducir el usuario y contraseña. Con un segundo factor de autenticación se requiere algo que se sabe, el usuario y contraseña, y algo que se tiene, el dispositivo móvil que genera códigos con lo que aunque la contraseña quede comprometida no se podría realizar la autenticación sin poseer el segundo factor de autenticación.&lt;/p>
&lt;p>Dado que los códigos de verificación tienen un tiempo de vida corto, habitualmente de 30 segundos, y acceder al generador del segundo factor de autenticación requiere acceso físico al dispositivo móvil la combinación de que las credenciales queden comprometidas es significativamente más difícil y por tanto la seguridad aumenta al mismo tiempo. Los principales servicios de internet como &lt;a href="https://www.google.es/">Google&lt;/a>, &lt;a href="https://amzn.to/2flFhHA">Amazon&lt;/a>, &lt;a href="https://twitter.com/">Twitter&lt;/a> y otros servicios utilizados por millones de usuarios permiten ya utilizar 2FA, un fallo en su seguridad por la cantidad de usuarios e importante información que registran les supodría una muy mala imagen, pérdida de ingresos, costes, reputación, usuarios o dependiendo de la gravedad del fallo y los datos comprometidos multas millonarias.&lt;/p>
&lt;p>A través de &lt;a href="https://spring.io/projects/spring-security">Spring Security&lt;/a> y la librería &lt;a href="https://github.com/aerogear/aerogear-otp-java">aerogear-otp-java&lt;/a> una aplicación Java puede implementar el segundo factor de autenticación, incluso posibilitar de que el requerimiento de solicitar segundo factor de autenticación sea opcional según la preferencia de un usuario o como forma de que los usuarios progresivamente habiliten el 2FA. El primer paso es proporcionar al usuario una clave secreta a través de un código QR que codifica una clave secreta que se utiliza para generar los códigos de verificación, el usuario debe escanearlo con la aplicación Google Authenticator con la cámara para que genere código de 6 dígitos con una validez de 30 segundos en el momento de autenticarse, este paso se realiza en el momento de registrarse o de activar el 2FA si es opcional. Con Google Authenticator el código en vez con la cámara también se puede introducir mediante el teclado si la aplicación se lo proporciona en forma de texto en vez de como imagen QR. La ventaja del código QR es que es más rápido y cómodo.&lt;/p>
&lt;p>El primer paso de la autenticación utilizando 2FA es introducir el usuario y contraseña. El segundo paso es introducir el código del segundo factor de autenticación. Introducidos ambos el usuario es redirigido a la página de inicio.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-1_hua9ee30696f9356c56487d9b5ce908954_39508_2560x1440_fit_box_2.png" title="Autenticación con segundo factor de autenticación" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-1_hua9ee30696f9356c56487d9b5ce908954_39508_200x150_fit_box_2.png" width="120"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-2_hu444c0787e54ca21d9ef698a533bad663_23630_2560x1440_fit_box_2.png" title="Autenticación con segundo factor de autenticación" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-2_hu444c0787e54ca21d9ef698a533bad663_23630_200x150_fit_box_2.png" width="120"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-3_hu6d853ec4973549638fd3cc79bdd6076c_19573_2560x1440_fit_box_2.png" title="Autenticación con segundo factor de autenticación" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/autenticacion-2fa-3_hu6d853ec4973549638fd3cc79bdd6076c_19573_200x150_fit_box_2.png" width="120"/>&lt;/a>
&lt;figcaption>Autenticación con segundo factor de autenticación&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/google-authenticator_hud7c7130da01810ea81284c92c02cbefa_101109_2560x1440_fit_box_2.png" title="Aplicación Google Authenticator con varios generadores de códigos temporales" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/google-authenticator_hud7c7130da01810ea81284c92c02cbefa_101109_300x200_fit_box_2.png" width="113"/>&lt;/a>
&lt;figcaption>Aplicación Google Authenticator con varios generadores de códigos temporales&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>Validado el código del 2FA al usuario se le asignan los permisos que le corresponden en el sistema y que le otorgan permisos para realizar acciones, en este caso entrar a la página de inicio.&lt;/p>
&lt;p>La implementación en código contiene las clases que representan una cuenta en el sistema, en &lt;em>InMemoryAccountRepository&lt;/em> se crean dos usuarios &lt;em>admin&lt;/em> y &lt;em>user&lt;/em> con sus contraseñas en el ejemplo en texto plano y los roles que tiene asignados que les otorgarán permisos para realizar acciones en la aplicación.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">AccountRepository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Account&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/AccountRepository.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/AccountRepository.java" target="_blank">AccountRepository.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@Repository&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InMemoryAccountRepository&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">AccountRepository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">ADMIN_SECRET&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;6YFX5TVT76OHHNMS&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">accounts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">InMemoryAccountRepository&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">accounts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Account&lt;/span> &lt;span class="n">admin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Account&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">admin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;admin&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">admin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;{noop}password&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">admin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAuth2fa&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">admin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSecret&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ADMIN_SECRET&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">admin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ROLE_USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Account&lt;/span> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Account&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;{noop}password&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAuth2fa&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">user&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ROLE_USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">accounts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">admin&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">accounts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Account&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">accounts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">account&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findFirst&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">orElse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/InMemoryAccountRepository.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/InMemoryAccountRepository.java" target="_blank">InMemoryAccountRepository.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Account&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="n">auth2fa&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">roles&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getSecret&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setSecret&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="nf">isAuth2fa&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">auth2fa&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setAuth2fa&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Boolean&lt;/span> &lt;span class="n">auth2fa&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">auth2fa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auth2fa&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">roles&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">roles&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">roles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">roles&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/Account.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/Account.java" target="_blank">Account.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>La configuración de seguridad en Spring Security indica para cada URL que permisos se requieren. Para acceder a la página de contenido &lt;em>/home&lt;/em> de la aplicación se requiere el rol &lt;em>USER&lt;/em>, a la página de inicio de sesión &lt;em>/login&lt;/em> se permite acceder a los usuario no autenticados donde introducen sus credenciales de usuario y contraseña, una vez validado el usuario y contraseña el usuario autenticado tiene el rol &lt;em>PRE_AUTH_USER&lt;/em>, dependiendo de si el usuario en su prefrencia usa 2FA o no en el manejador de autenticación exitosa &lt;em>SecondFactorAuthenticationSuccessHandler&lt;/em> redirige al usuario a la página &lt;em>/home&lt;/em> o la página &lt;em>/code&lt;/em> para intorducir el código de verificación del segundo factor autenticación. Al usuario autenticado exitosamente de forma completa se le sustituye el permiso &lt;em>PRE_AUTH_USER&lt;/em> por los que tenga asignado, en el ejemplo el rol &lt;em>USER&lt;/em>.&lt;/p>
&lt;p>La verificación del código del segundo paso de autenticación se realiza en la clase &lt;em>CodeController&lt;/em> con la clase &lt;em>Totp&lt;/em> a partir del código enviado y el código secreto con el cual se generó la imagen de código QR.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableWebSecurity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WebSecurityConfig&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">WebSecurityConfigurerAdapter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">AuthenticationSuccessHandler&lt;/span> &lt;span class="n">authenticationSuccessHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">PasswordEncoder&lt;/span> &lt;span class="nf">encoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">PasswordEncoderFactories&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createDelegatingPasswordEncoder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">AuthenticationSuccessHandler&lt;/span> &lt;span class="nf">authenticationSuccessHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SecondFactorAuthenticationSuccessHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">configure&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpSecurity&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authorizeRequests&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/static/**&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/code&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasRole&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;PRE_AUTH_USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">antMatchers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/home&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasRole&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">anyRequest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">authenticated&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">formLogin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">loginPage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/login&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">successHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authenticationSuccessHandler&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logout&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">permitAll&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">registerAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AuthenticationManagerBuilder&lt;/span> &lt;span class="n">auth&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">auth&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDetailsService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsService&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/WebSecurityConfig.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/WebSecurityConfig.java" target="_blank">WebSecurityConfig.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@EnableWebMvc&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WebMvcConfig&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">WebMvcConfigurer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addViewControllers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ViewControllerRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addViewController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/login&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setViewName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addViewController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/code&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setViewName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addViewController&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/home&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setViewName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addResourceHandlers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ResourceHandlerRegistry&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">registry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResourceHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/static/**&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addResourceLocations&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:/static/&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ClassLoaderTemplateResolver&lt;/span> &lt;span class="nf">templateResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ClassLoaderTemplateResolver&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassLoaderTemplateResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setPrefix&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;templates/&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSuffix&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;.html&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTemplateMode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;HTML&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">SpringTemplateEngine&lt;/span> &lt;span class="nf">templateEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ClassLoaderTemplateResolver&lt;/span> &lt;span class="n">templateResolver&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringTemplateEngine&lt;/span> &lt;span class="n">templateEngine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SpringTemplateEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">templateEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addDialect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">LayoutDialect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">templateEngine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTemplateResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">templateResolver&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">templateEngine&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ThymeleafViewResolver&lt;/span> &lt;span class="nf">viewResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringTemplateEngine&lt;/span> &lt;span class="n">engine&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ThymeleafViewResolver&lt;/span> &lt;span class="n">viewResolver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThymeleafViewResolver&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">viewResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTemplateEngine&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">engine&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">viewResolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCache&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">viewResolver&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/WebMvcConfig.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/WebMvcConfig.java" target="_blank">WebMvcConfig.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SecondFactorAuthenticationSuccessHandler&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">AuthenticationSuccessHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RedirectStrategy&lt;/span> &lt;span class="n">redirectStrategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultRedirectStrategy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onAuthenticationSuccess&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">clearAuthenticationAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">targetUrl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getTargetUrl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isCommitted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">redirectStrategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendRedirect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">targetUrl&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getTargetUrl&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">UserDetailsAdapter&lt;/span> &lt;span class="n">userDetailsAdapter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDetailsAdapter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPrincipal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsAdapter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAccount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAuth2fa&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;/code&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Utils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;/home&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">clearAuthenticationAttributes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">HttpSession&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSession&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WebAttributes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">AUTHENTICATION_EXCEPTION&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setRedirectStrategy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RedirectStrategy&lt;/span> &lt;span class="n">redirectStrategy&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">redirectStrategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">redirectStrategy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">RedirectStrategy&lt;/span> &lt;span class="nf">getRedirectStrategy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">redirectStrategy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/SecondFactorAuthenticationSuccessHandler.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/SecondFactorAuthenticationSuccessHandler.java" target="_blank">SecondFactorAuthenticationSuccessHandler.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Utils&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Authentication&lt;/span> &lt;span class="n">authentication&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">UserDetailsAdapter&lt;/span> &lt;span class="n">userDetailsAdapter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDetailsAdapter&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPrincipal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">GrantedAuthority&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">authorities&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AuthorityUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createAuthorityList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDetailsAdapter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAccount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRoles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toArray&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Authentication&lt;/span> &lt;span class="n">newAuth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UsernamePasswordAuthenticationToken&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPrincipal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authentication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCredentials&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authorities&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">newAuth&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/Utils.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/Utils.java" target="_blank">Utils.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDetailsAdapter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Account&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">UserDetailsAdapter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Account&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Collection&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">GrantedAuthority&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getAuthorities&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">AuthorityUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createAuthorityList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ROLE_PRE_AUTH_USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isAccountNonExpired&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isAccountNonLocked&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isCredentialsNonExpired&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEnabled&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Account&lt;/span> &lt;span class="nf">getAccount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">account&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/UserDetailsAdapter.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/UserDetailsAdapter.java" target="_blank">UserDetailsAdapter.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Java" data-lang="Java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.spring2fa.spring&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@Primary&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserDetailsServiceAdapter&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">AccountRepository&lt;/span> &lt;span class="n">accountRepository&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">UserDetails&lt;/span> &lt;span class="nf">loadUserByUsername&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">UsernameNotFoundException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Account&lt;/span> &lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accountRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UsernameNotFoundException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserDetailsAdapter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">account&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/UserDetailsServiceAdapter.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/UserDetailsServiceAdapter.java" target="_blank">UserDetailsServiceAdapter.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>El código QR es una imagen generada a partir del código secreto y una información adicional que al usurio le permite identificar la cuenta, hay &lt;em>webs&lt;/em> que permiten &lt;a href="https://zxing.org/w/decode.jspx">decodificar una imagen QR&lt;/a> para analizar que información incorpora, en esta la información de la cuenta &lt;em>Spring2FA (admin)&lt;/em> y el secreto &lt;em>6YFX5TVT76OHHNMS&lt;/em> utilizado para generar los códigos temporales. En el HTML devuelto se incluye una imagen con la información embebida en el enlace de la imagen, la imagen se genera por un servicio de Google.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/qr-code-decoder_hu0bd1b6584fcbf4a08a8542128e141a4a_43488_2560x1440_fit_box_2.png" title="Decodificador de imágenes código QR" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/images/qr-code-decoder_hu0bd1b6584fcbf4a08a8542128e141a4a_43488_300x200_fit_box_2.png" width="300"/>&lt;/a>
&lt;figcaption>Decodificador de imágenes código QR&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">xmlns&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&lt;/span> &lt;span class="na">xmlns:th&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.thymeleaf.org&amp;#34;&lt;/span> &lt;span class="na">xmlns:layout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://www.ultraq.net.nz/web/thymeleaf/layout&amp;#34;&lt;/span> &lt;span class="na">layout:decorate&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;~{layout}&amp;#34;&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
...
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://chart.googleapis.com/chart?chs=200x200&amp;amp;chld=M%7C0&amp;amp;cht=qr&amp;amp;chl=otpauth%3A%2F%2Ftotp%2FSpring2FA%20(admin)%3Fsecret%3D6YFX5TVT76OHHNMS&amp;#34;&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
...
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="" target="_blank">login.html&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Las dependencias de librerías son las siguientes.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="n">dependencies&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.springframework.boot:spring-boot-starter-security&amp;#39;&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE&amp;#39;&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1&amp;#39;&lt;/span>
&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;org.jboss.aerogear:aerogear-otp-java:1.0.0&amp;#39;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/build.gradle" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/11/implementar-un-segundo-factor-de-autenticacion-en-una-aplicacion-web-java-con-spring/code/build.gradle" target="_blank">build.gradle&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Este ejemplo está hecho con la infraestructura que proporciona Spring pero el proceso de autenticación es igualmente implementable con cualquier otro &lt;em>framework&lt;/em> o librería.&lt;/p>
&lt;p>Muchos de los servicios populares en internet implementan 2FA como medida de proteger las cuentas de los usuarios y la información en esos servicios. Hay bancos que como contraseña de acceso solo tienen un número de seis dígitos con el riesgo que representa sus usuarios por la importancia que tiene la banca en línea de los datos que se trata.&lt;/p>
&lt;p>
El &lt;a href="https://github.com/picodotdev/blog-ejemplos/tree/master/Spring2FA">código fuente completo del ejemplo&lt;/a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href="https://github.com/">GitHub&lt;/a> y probarlo en tu equipo ejecutando el comando &lt;code>./gradlew run&lt;/code>.
&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://www.baeldung.com/spring-security-two-factor-authentication-with-soft-token">Two Factor Auth with Spring Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.baeldung.com/spring_redirect_after_login">Redirect to Different Pages after Login with Spring Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/altfatterz/two-step-login/">Two Step Login Example&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="java"/><category term="planeta-codigo"/><category term="programacion"/><category term="seguridad"/><category term="spring"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/</id><title>Comprobar la seguridad de un sitio web que use SSL/TLS</title><updated>2019-06-23T12:00:00+02:00</updated><published>2019-06-23T12:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>Aunque un sitio web no trate datos sensibles como tarjetas de crédito o datos personales es muy recomendable que use el protocolo seguro HTTPS para proporcionar cifrado entre el servidor y el navegador del usuario para dotar de confidencialidad a las comunicaciones a la vez que evitar modificaciones por terceras personas de los datos transmitidos. Además, el buscador Google lo tiene en cuenta para el SEO o posicionamiento en su buscador.&lt;/p>
&lt;p>Para usar HTTPS lo difícil era conseguir un certificado firmado por una autoridad de confianza que los navegadores tengan instalada, la obtención y renovación de un certificado tenía un coste. Desde hace un tiempo la autoridad &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s encrypt&lt;/a> emite certificados digitales gratuitamente que proporciona uno en pocos minutos y de forma automatizada incluida la renovación para usar un protocolo seguro. &lt;a href="https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/">Usar un certificado de Let&amp;rsquo;s encrypt en el servidor web nginx&lt;/a> no es complicado.&lt;/p>
&lt;p>Sin embargo, usar HTTPS simplemente no es suficiente y ha de configurarse el servidor web para que utilice algoritmos de cifrado fuertes y que no tengan problemas seguridad conocidos o hoy estén ya considerados débiles. Para analizar el nivel de seguridad proporcionado en las conexiones HTTPS de un servidor web se puede utilizar la herramienta &lt;a href="https://www.ssllabs.com/">Qualys SSL Labs&lt;/a>. Por ejemplo, analizando la seguridad del protocolo HTTPS ofrecido por &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> basta con introducir el dominio a analizar.&lt;/p>
&lt;p>El informe que proporciona incluye información sobre el certificado del servidor entre ella su tiempo de validadez y fecha de expiración, y si es de confianza para los navegadores y plataformas como Mozilla, Apple, Android, Java o Windows. Los datos de configuración como protocolos soportados, &lt;em>cipher suites&lt;/em> y una simulación de &lt;em>handshake&lt;/em> con una gran variedad de versiones de navegadores en diferentes plataformas y versiones incluyendo dispositivos móviles y de escritorio que permite conocer si algún dipositivo pudiera tener algún problema con la configuración de TLS en la conexión, también otros detalle del protocolo.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/images/ssllabs_hu45897026cba3d1771fd184de0c40861a_124032_2560x1440_fit_box_2.png" title="Informe de seguridad TLS" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/images/ssllabs_hu45897026cba3d1771fd184de0c40861a_124032_650x450_fit_box_2.png" width="373"/>&lt;/a>
&lt;figcaption>Informe de seguridad TLS&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>La herramienta proporciona una nota entre A y F siendo la A la mejor calificación posible. Como se observa en la captura para GitHub Pages la herramienta proporciona una calificación de A.&lt;/p>
&lt;p>Hay múltiples combinaciones de algoritmos de cifrado o &lt;em>cipher suites&lt;/em> usados en una conexión SSL/TLS. La primera parte de los siguientes se refieren a TLS, está el tamaño de la clave y el modo y el algoritmo de autenticación del mensaje. Algunas recomendaciones de uso es usar tamaños de clave de más de 128 bits, evitar usar RC4, DES y 3DES, preferir ECDHE y DHE ya que ofrecen &lt;em>forward secrecy&lt;/em> que protege las comunicaciones pasadas aún habiéndose comprometida la clave privada del servidor.&lt;/p>
&lt;ul>
&lt;li>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li>
&lt;li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/li>
&lt;li>TLS_RSA_WITH_AES_256_CBC_SHA256&lt;/li>
&lt;li>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li>
&lt;li>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;/li>
&lt;li>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;/li>
&lt;li>TLS_DHE_DSS_WITH_AES_256_CBC_SHA256&lt;/li>
&lt;li>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_RSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_DHE_DSS_WITH_AES_256_CBC_SHA&lt;/li>
&lt;li>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/li>
&lt;/ul>
&lt;p>Y algunas propiedades de los servidores web &lt;a href="https://httpd.apache.org/">Apache HTTP&lt;/a> y &lt;a href="https://nginx.org/">nginx&lt;/a> que afectan a los algoritmos de cifrado soportados son las siguientes. Algunos navegadores antiguos puede que no soporten los últimos algoritmos de cifrado por lo que hay que permitir en el servidor web unos que sean considerados como seguros pero que también soporten los navegadores de los usuarios del sitio web.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://httpd.apache.org/docs/current/mod/mod_ssl.html">Apache Module mod_ssl&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nginx.org/en/docs/http/ngx_http_ssl_module.html">Nginx Module ngx_http_ssl_module&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Uan vez configurada la seguridad con TLS/SSL es recomendable &lt;a href="https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/">redirigir el tráfico del protocolo HTTP no seguro al protocolo HTTPS seguro&lt;/a>.&lt;/p></content><category term="planeta-codigo"/><category term="seguridad"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/</id><title>Autenticación mediante clave pública y privada con SSH</title><updated>2019-05-03T20:00:00+02:00</updated><published>2019-05-03T20:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/"/><author><name>picodotdev</name></author><content type="html">
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/gnu.svg" class="right " width="200" alt="GNU" title="GNU"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/linux.svg" class="right " width="200" alt="Linux" title="Linux"/>
&lt;/div>
&lt;p>Una de las formas más comunes de autenticar a un usuario, comprobar que un usuario es quien dice ser, es mediante un usuario y contraseña. Contraseña que (en principio) solo conoce el usuario por lo que si este proporciona la correcta se determina que es quien dice ser. Sin embargo, las contraseñas son débiles si no incluyen letras en mayúsculas y minúsculas, números y símbolos pero también difíciles de recordar agravado porque en cada servicio se debería usar una diferente para impedir que ante el descubrimiento de una no sea posible acceder a todos los otros servicios donde se usase la misma.&lt;/p>
&lt;p>Para generar contraseñas fuertes se puede usar &lt;a href="https://strongpasswordgenerator.com/">Strong Password Generator&lt;/a> y para almacenarlas &lt;a href="https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassxc/">el programa KeePassXC&lt;/a>.&lt;/p>
&lt;p>Con &lt;a href="https://www.openssh.com/">OpenSSH&lt;/a> también se puede iniciar sesión de línea de comandos en otro sistema proporcionando un usuario y una contraseña que se solicitará. O mejor aún con una clave pública y privada sin necesidad de introducir una contraseña.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ ssh ubuntu@192.168.33.10
Welcome to Ubuntu 18.04.2 LTS &lt;span class="o">(&lt;/span>GNU/Linux 4.15.0-48-generic x86_64&lt;span class="o">)&lt;/span>
* Documentation: https://help.ubuntu.com
* Management: https://landscape.canonical.com
* Support: https://ubuntu.com/advantage
System information as of Fri May &lt;span class="m">3&lt;/span> 18:04:48 UTC &lt;span class="m">2019&lt;/span>
System load: 0.0 Processes: &lt;span class="m">102&lt;/span>
Usage of /: 10.0% of 9.63GB Users logged in: &lt;span class="m">1&lt;/span>
Memory usage: 6% IP address &lt;span class="k">for&lt;/span> enp0s3: 10.0.2.15
Swap usage: 0% IP address &lt;span class="k">for&lt;/span> enp0s8: 192.168.33.10
&lt;span class="m">0&lt;/span> packages can be updated.
&lt;span class="m">0&lt;/span> updates are security updates.
Last login: Fri May &lt;span class="m">3&lt;/span> 18:04:00 &lt;span class="m">2019&lt;/span> from 192.168.33.1
To run a &lt;span class="nb">command&lt;/span> as administrator &lt;span class="o">(&lt;/span>user &lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>, use &lt;span class="s2">&amp;#34;sudo &amp;lt;command&amp;gt;&amp;#34;&lt;/span>.
See &lt;span class="s2">&amp;#34;man sudo_root&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> details.
ubuntu@ubuntu-bionic:~$
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh.sh" target="_blank">ssh.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/images/openssh_hua00e364d197fb1857da25b410a64f760_83550_600x450_fit_box_2.png" width="578" class="" alt="" title="OpenSSH"/>
&lt;/figure>
&lt;/div>
&lt;p>Usar SSH es más seguro y más cómodo que usar contraseñas para realizar la autenticación, es más seguro ya que una clave pública y privada son más largas y es más cómodo ya que no se solicita contraseña constantemente que de otra manera al cabo de un tiempo se convierte en un paso tedioso y molesto. Lo primero que hay que hacer es &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">generar una clave SSH pública y privada&lt;/a> propia. Una clave de 2048 bits ya se considera segura pero como cuesta lo mismo generar una de más bits se puede generar una de 8192 bits para más seguridad.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl genrsa -out ubuntu &lt;span class="m">8192&lt;/span>
$ ssh-keygen -y -f ubuntu &amp;gt; ubuntu.pub&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-keygen.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-keygen.sh" target="_blank">ssh-keygen.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>En el servidor SSH se deben modificar algunas propiedades de configuración del archivo de configuración &lt;em>/etc/ssh/sshd_config&lt;/em> para permitir la autenticación con usuario y contraseña para poder copiar la clave pública y una vez copiada la clave para mayor seguridad no permitir la autenticación mediante usuario y contraseña.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">PasswordAuthentication yes&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/sshd_config" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/sshd_config" target="_blank">sshd_config&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Una vez generado el par de claves hay que copiar la clave pública al servidor donde se desee iniciar sesión. Manualmente concatenando la clave pública al archivo _.ssh/authorized&lt;em>keys&lt;/em> del directorio &lt;em>home&lt;/em> del usuario con el que se quiere iniciar sesión o también se puede copiar la clave pública usando el comando &lt;em>ssh-copy-id&lt;/em>. Para revocar el acceso mediante esa clave basta con eliminar su linea del archivo de claves autorizadas.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ ssh-copy-id -i ~/.ssh/ubuntu ubuntu@192.168.33.10
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-copy-id.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-copy-id.sh" target="_blank">ssh-copy-id.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo passwd ubuntu
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/passwd.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/passwd.sh" target="_blank">passwd.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Si se poseen varios pares de claves públicas y privadas se puede especificar que clave privada usar para cada máquina a la que se desee conectar en el archivo &lt;em>~/.ssh/config&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Host&lt;/span> &lt;span class="n">192&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">168&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">33&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">10&lt;/span>
&lt;span class="n">HostName&lt;/span> &lt;span class="n">192&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">168&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">33&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">10&lt;/span>
&lt;span class="n">User&lt;/span> &lt;span class="n">ubuntu&lt;/span>
&lt;span class="n">IdentityFile&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ssh&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ubuntu&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-config" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/ssh-config" target="_blank">ssh-config&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>La clave privada debe tener permisos restringidos sino se muestra una advertencia e impide el inicio de sesión.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">$&lt;/span> &lt;span class="n">chmod&lt;/span> &lt;span class="n">600&lt;/span> &lt;span class="n">ubuntu&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/chmod.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/chmod.sh" target="_blank">chmod.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Para probar la autenticación con SSH se puede utilizar una máquina virtual de &lt;a href="https://www.virtualbox.org/">VirtualBox&lt;/a> creada con &lt;a href="https://www.vagrantup.com/">Vagrant&lt;/a>. En el caso de utilizar el usuario &lt;em>ubuntu&lt;/em> hay que asignarle una clave con el comando &lt;em>passwd&lt;/em> para ejecutar comando &lt;em>ssh-copy-id&lt;/em> ya que se solicita su contraseña en este paso, una vez realizado se puede desactivar la autenticación mediante usuario y contraseña cambiando el valor de la configuración &lt;em>PasswordAuthentication&lt;/em> a &lt;em>no&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext"># -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure(&amp;#34;2&amp;#34;) do |config|
config.vm.box = &amp;#34;ubuntu/bionic64&amp;#34;
config.vm.provider :virtualbox do |vb|
vb.name = &amp;#34;Ubuntu 18.04 (Vagrant)&amp;#34;
end
config.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.168.33.10&amp;#34;
config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb|
vb.memory = &amp;#34;2048&amp;#34;
end
end&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/Vagrantfile" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/Vagrantfile" target="_blank">Vagrantfile&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ vagrant up
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/vagrant.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/05/autenticacion-mediante-clave-publica-y-privada-con-ssh/code/vagrant.sh" target="_blank">vagrant.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="http://askubuntu.com/questions/30788/does-ssh-key-need-to-be-named-id-rsa#30792">Does ssh key need to be named id_rsa?&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://stackoverflow.com/questions/3466626/add-private-key-permanently-with-ssh-add-on-ubuntu">How to permanently add a private key with ssh-add on Ubuntu?&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://stackoverflow.com/questions/112396/how-do-i-remove-the-passphrase-for-the-ssh-key-without-having-to-create-a-new-ke">How do I remove the passphrase for the SSH key without having to create a new key?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="gnu-linux"/><category term="planeta-codigo"/><category term="seguridad"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/</id><title>Aumentar el tamaño del identificativo de la cookie de sesión de Tomcat o Spring Session</title><updated>2019-04-12T19:00:00+02:00</updated><published>2019-04-12T17:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/"/><author><name>picodotdev</name></author><content type="html">
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/tomcat.svg" class="right " width="200" alt="Tomcat" title="Tomcat"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/java.svg" class="right " width="200" alt="Java" title="Java"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/spring-boot.svg" class="right " width="200" alt="Spring Boot" title="Spring Boot"/>
&lt;/div>
&lt;p>El protocolo HTTP es un protocolo sin estado que quiere decir que entre las peticiones no se comparte estado ni se recuerda ningún dato. Por otro lado las &lt;em>cookies&lt;/em> es pequeño conjunto de datos que son almacenados en el cliente y son enviados en cada petición que se hace a un sitio web, cada sitio web mantiene su propia colección de &lt;em>cookies&lt;/em>, dos sitios distintos no comparten sus &lt;em>cookies&lt;/em>. Para mantener estado entre dos peticiones se hace uso de las &lt;em>cookies&lt;/em>.&lt;/p>
&lt;p>En Java los servidores web envían al cliente una &lt;em>cookie&lt;/em> con simplemente un identificativo de la sesión, el estado se suele mantener en el servidor en memoria, en almacenamiento de disco o &lt;a href="https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/">persistido en una base de datos como Redis&lt;/a>. El identificativo de la sesión por defecto usando un contenedor de &lt;em>servlets&lt;/em> como &lt;a href="https://tomcat.apache.org/">Tomcat&lt;/a> tiene una longitud de 16 bytes que codificados en hexadecimal da lugar a 32 caracteres o 128 bits. Para aumentar la seguridad por si alguien intenta adivinar el identificativo de cualquier usuario que tenga sesión iniciada por fuerza bruta de casualidad es posible aumentar el número de caracteres para identificar la &lt;em>cookie&lt;/em> de sesión. La clase de la API que lo permite en Tomcat es &lt;a href="https://tomcat.apache.org/tomcat-9.0-doc/config/manager.html">Manager&lt;/a>.&lt;/p>
&lt;p>Según &lt;a href="https://www.owasp.org/index.php/Insufficient_Session-ID_Length">Insufficient Session-ID Length&lt;/a> un identificativo con solo 64 bits (32 de entropía) un atacante haciendo 1000 intentos por segundo y 10000 sesiones válidas tarda solo 7,15 minutos en obtener una sesión válida (32 bit = 4294967296 / 10.000 = 429496, a 1000 intentos por segundo da 429 segundos o 7,15 minutos). Con 128 bits el tiempo crece a 292 años haciendo 10000 intentos por segundo y teniendo 100000 sesiones válidas, pero podría reducirse si el número de intentos por segundo aumentase o sesiones aumentase.&lt;/p>
&lt;p>Los datos se guardan en el servidor y la &lt;em>cookie&lt;/em> con el identicativo de sesión no ocupa mucho aún pasando de 32 caracteres hexadecimales a una cifra mayor como 128, el número de caracteres no es significativo para el rendimiento pero se dificulta en varios órdenes de magnitud la dificultad de adivinar una &lt;em>cookie&lt;/em>.&lt;/p>
&lt;p>Unsando &lt;a href="https://projects.spring.io/spring-boot/">Spring Boot&lt;/a> y &lt;em>Tomcat&lt;/em> basta con usar la clase &lt;em>Manager&lt;/em> para cambiar el valor por defecto de longitud de la sesión.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.springsession&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@ComponentScan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;io.github.picodotdev.springsession&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SESSION_ID_LENGTH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">64&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">WebServerFactoryCustomizer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TomcatServletWebServerFactory&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">cookieProcessorCustomizer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TomcatServletWebServerFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addContextCustomizers&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Context&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">StandardManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getManager&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSessionIdGenerator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSessionIdLength&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SESSION_ID_LENGTH&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/Main-1.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/Main-1.java" target="_blank">Main-1.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Persistiendo la sesión en &lt;a href="https://redis.io/">Redis&lt;/a> con &lt;a href="https://projects.spring.io/spring-session/">Spring Sesion&lt;/a> por defecto el identificativo de la sesión es generado a partir de un &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/UUID.html">UUID&lt;/a>, el identificativo de la sesión tiene el mismo valor por defecto de 128 bits pero para cambiar la longitud hay que proporcionar una clase que cambia el comportamiento.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.springsession&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="nd">@EnableRedisHttpSession&lt;/span>
&lt;span class="nd">@ComponentScan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;io.github.picodotdev.springsession&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SESSION_ID_LENGTH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">64&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">DefaultCookieSerializer&lt;/span> &lt;span class="nf">cookieSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">DefaultCookieSerializer&lt;/span> &lt;span class="n">cookieSerializer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultCookieSerializer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">cookieSerializer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUseBase64Encoding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">cookieSerializer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Primary&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RedisOperationsSessionRepository&lt;/span> &lt;span class="nf">defaultSessionRepository&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RedisOperations&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sessionRedisOperations&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultRedisOperationSessionRespository&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sessionRedisOperations&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/Main-2.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/Main-2.java" target="_blank">Main-2.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.springframework.session.data.redis&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultRedisOperationSessionRespository&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">RedisOperationsSessionRepository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">HEX_CHARACTERS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;0123456789ABCDEF&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAX_INACTIVE_INTERVAL_MINUTES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">30&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SESSION_ID_LENGTH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">127&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">SecureRandom&lt;/span> &lt;span class="n">randomGenerator&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">DefaultRedisOperationSessionRespository&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RedisOperations&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sessionRedisOperations&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sessionRedisOperations&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">RedisOperationsSessionRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RedisSession&lt;/span> &lt;span class="nf">createSession&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">randomGenerator&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">randomGenerator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SecureRandom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">SESSION_ID_LENGTH&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">randomGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextBytes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getHex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">RedisOperationsSessionRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RedisSession&lt;/span> &lt;span class="n">redisSession&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RedisOperationsSessionRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RedisSession&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">MapSession&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">redisSession&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setMaxInactiveInterval&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Duration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ofMinutes&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MAX_INACTIVE_INTERVAL_MINUTES&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">redisSession&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getHex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">StringBuilder&lt;/span> &lt;span class="n">hex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">hex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HEX_CHARACTERS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">0xF0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HEX_CHARACTERS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">0x0F&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">hex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/DefaultRedisOperationSessionRespository.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/DefaultRedisOperationSessionRespository.java" target="_blank">DefaultRedisOperationSessionRespository.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/images/spring-session_hu753693623e6b310d1a7f380031e464c8_72218_2560x1440_fit_box_2.png" title="Longitud del identificativo de sesión de 64 bytes o 128 caracteres hexadecimales" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/images/spring-session_hu753693623e6b310d1a7f380031e464c8_72218_600x450_fit_box_2.png" width="600"/>&lt;/a>
&lt;figcaption>Longitud del identificativo de sesión de 64 bytes o 128 caracteres hexadecimales&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">D2C631033F477F9A3111F40CFDBB83DA041BC7EB4C7CD3F824349945E9CA73E660FE3E0D4DC75A685E9255F7F3C538AC1CE07ED055547CA379BA2CB7B8A52516&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/session-id.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/04/aumentar-el-tamano-del-identificativo-de-la-cookie-de-sesion-de-tomcat-o-spring-session/code/session-id.txt" target="_blank">session-id.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Un libro dedicado a la seguridad muy bueno que he leído es &lt;a href="https://amzn.to/2DeAdi1">Iron-Clad Java Applications&lt;/a>, tiene montón de detalles dedicados a la seguridad de las aplicaciones web sean seguras, incluido como este dedicado a la longitud de los identificativos de la sesión.&lt;/p>
&lt;p>Una clave asimétrica considerada segura puedes ser de 2048 bits pero se puede &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">generar una de hasta 8192 bits&lt;/a> con el mismo esfuerzo lo que aumenta la seguridad de forma exponencial ante un ataque de fuerza bruta que con el aumento de la capacidad de cómputo y en el futuro puede ser viable. El tiempo de cómputo requerido por usar una clave de mayor tamaño no creo que sea significativo para la mayoría de los casos pero igualmente la seguridad aumenta.&lt;/p>
&lt;p>
El &lt;a href="https://github.com/picodotdev/blog-ejemplos/tree/master/SpringSession">código fuente completo del ejemplo&lt;/a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href="https://github.com/">GitHub&lt;/a> y probarlo en tu equipo ejecutando el comando &lt;code>./gradlew run&lt;/code>.
&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/35062780/how-to-change-the-session-id-length-in-spring-boot">How to change the session id length in Spring Boot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spring-projects/spring-session/pull/204">Spring Session, Allow for configuration of session id generation and format&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="java"/><category term="planeta-codigo"/><category term="seguridad"/><category term="spring"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/</id><title>Las contraseñas e información sensible en el código fuente o bytecode de Java no son seguras</title><updated>2019-01-05T13:00:00+01:00</updated><published>2019-01-04T19:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/"/><author><name>picodotdev</name></author><content type="html">
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/java.svg" class="right " width="200" alt="Java" title="Java"/>
&lt;/div>
&lt;p>En Java el código fuente se compila a una representación en &lt;em>bytecode&lt;/em> independiente de la arquitectura del procesador y sistema operativo donde posteriormente se ejecuta. Este &lt;em>bytecode&lt;/em> es un formato binario pero que puede ser decompilado fácilmente con la herramienta &lt;em>javap&lt;/em> incluida en el propio JDK o examinado su contenido simplemente con un editor de texto hexadecimal. Con estas herramientas es fácil ver las instrucciones del programa para la máquina virtual y los caracteres de las cadenas que fueron incluidas en el código fuente.&lt;/p>
&lt;p>Lógicamente, de este modo &lt;em>hardcodear&lt;/em> una contraseña en el código fuente hace que el código fuente sea inseguro pero es que incluso distribuir el binario compilado no es seguro ya que cualquier usuario que tenga acceso al binario de la aplicación es potencialmente capaz de recuperar la contraseña, tener acceso al binario quizá no sea sencillo pero aparte de eso no hay ninguna medida de seguridad adicional que añada más dificultad. Quien dice contraseña dice igualmente una clave privada de cifrado simétrico usada para cifrar o descifrar datos o un &lt;em>bearer token&lt;/em> de OAuth. En definitiva es un problema de seguridad.&lt;/p>
&lt;p>Compilado el programa y utilizando la herramienta &lt;em>javap&lt;/em> se puede obtener el valor de la contraseña. ¿Adivinas cual es la contraseña en este archivo binario de &lt;em>bytecode&lt;/em> examinado el contenido?&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/java-class-hex_hucc38684a2f2e126dcaa28adc7d18c1d8_94339_2560x1440_fit_box_2.png" title="Contenido hexadecimal de un archivo binario de bytecode Java" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/java-class-hex_hucc38684a2f2e126dcaa28adc7d18c1d8_94339_300x200_fit_box_2.png" width="284"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/c-bin-hex_huba456bb72be79b51d2898e9d10ffeae8_61110_2560x1440_fit_box_2.png" title="Contenido hexadecimal de un archivo binario de C" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/images/c-bin-hex_huba456bb72be79b51d2898e9d10ffeae8_61110_300x200_fit_box_2.png" width="284"/>&lt;/a>
&lt;figcaption>Contenido hexadecimal de un archivo binario de bytecode Java y C&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>El siguiente ejemplo sencillo de un programa Java incluye una cadena con una supuesta contraseña. Se observa que en el archivo visualizado en formato hexadecimal o decompilado los caracteres de la cadena son fácilmente reconocibles.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Mz6K3P9rDZ7G6wH&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/Main.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/Main.java" target="_blank">Main.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Para compilar este pequeño programa se utiliza el comando &lt;em>javac&lt;/em> que genera el archivo de &lt;em>bytecode&lt;/em> &lt;em>Main.class&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ javac Main.java
$ xxd Main.class&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/javac.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/javac.sh" target="_blank">javac.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Para decompilar este pequeño programa se utiliza el comando &lt;em>javap&lt;/em>, con él se ven las instrucciones interpretadas por la máquina virtual de Java y la cadena con la contraseña.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ javap -c Main.class
Compiled from &lt;span class="s2">&amp;#34;Main.java&amp;#34;&lt;/span>
public class Main &lt;span class="o">{&lt;/span>
public Main&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
Code:
0: aload_0
1: invokespecial &lt;span class="c1">#1 // Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V&lt;/span>
4: &lt;span class="k">return&lt;/span>
public static void main&lt;span class="o">(&lt;/span>java.lang.String&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
Code:
0: ldc &lt;span class="c1">#2 // String Mz6K3P9rDZ7G6wH&lt;/span>
2: astore_1
3: getstatic &lt;span class="c1">#3 // Field java/lang/System.out:Ljava/io/PrintStream;&lt;/span>
6: ldc &lt;span class="c1">#4 // String Hello World!&lt;/span>
8: invokevirtual &lt;span class="c1">#5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V&lt;/span>
11: &lt;span class="k">return&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/javap.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/javap.sh" target="_blank">javap.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Que el contenido de la constante de las cadenas del programa sea incluido en el binario y examinable con un editor hexadecimal no es exclusivo de Java, en otros lenguajes de programación como C y formatos de ejecutables como ELF para Linux se da el mismo caso al examinar el binario como se observa en las imágenes anteriores. Seguramente en la mayoría de lenguajes, como C#, ocurra lo mismo.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="cp">#&lt;/span>&lt;span class="cp">include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="s">Mz6K3P9rDZ7G6wH&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="s">Hello World!&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/Main.c" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/Main.c" target="_blank">Main.c&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ gcc Main.c -o Main
$ xxd Main&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/gcc.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2019/01/las-contrasenas-e-informacion-sensible-en-el-codigo-fuente-o-bytecode-de-java-no-son-seguras/code/gcc.sh" target="_blank">gcc.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Una solución para evitar este problema de seguridad es &lt;a href="https://picodotdev.github.io/blog-bitix/2018/09/almacenar-cifrados-los-valores-de-configuracion-sensibles-en-spring-cloud-config/">ubicar la contraseña a un archivo de configuración incluso con los valores sensibles cifrados&lt;/a> y que sean descifrados únicamente por la aplicación en el momento de iniciarse. En el caso de ubicar este archivo de configuración en un servidor se puede proteger mediante permisos para que solo los administradores o algunos desarrolladores tenga acceso a él y no cualquier usuario que consiga acceso al sistema.&lt;/p></content><category term="java"/><category term="planeta-codigo"/><category term="programacion"/><category term="seguridad"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/</id><title>Explicación del fallo de seguridad Meltdown y Spectre en los microprocesadores Intel</title><updated>2018-01-07T01:30:00+01:00</updated><published>2018-01-06T10:30:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Los procesadores Intel se han visto afectados por un grave error de seguridad debido a que fueron diseñados con ejecución especulativa sin tener algunas consideraciones de seguridad, técnica empleada para aumentar el rendimiento pero que tiene efectos colaterales en la cache que pueden se aprovechados para realizar ataques &lt;em>side-channel&lt;/em> con los que leer el contenido de la memoria del &lt;em>kernel&lt;/em>, independientemente del sistema operativo utilizado.&lt;/strong>&lt;/p>
&lt;p>El año 2018 ha empezando haciéndose público uno de los peores &lt;em>bugs&lt;/em> de seguridad que afecta a absolutamente todos los procesadores &lt;a href="https://www.intel.es">Intel&lt;/a> que esta compañía ha fabricado en la última década, denominado &lt;a href="https://meltdownattack.com/">&lt;em>Meltdown&lt;/em> y su variante &lt;em>Spectre&lt;/em>&lt;/a>, el error tiene su propio nombre, logotipo y página web. Un error de diseño en los procesadores que solo se puede corregir reemplazando el microprocesador o modificando los sistemas operativos aunque se especula con una pérdida de rendimiento en ciertas cargas de trabajo, entre un 5% y un 30%. El error es tan grave que permite leer a un programa la memoria del núcleo del sistema operativo que debería estar protegida. En la memoria del &lt;em>kernel&lt;/em> residen las claves de acceso a sistemas o datos sensibles que obtenidos y utilizados pueden ocasionar graves problemas de seguridad con consecuencias económicas o de acceso no autorizado a información. Este error es tan grave que deja al viejo conocido &lt;a href="https://en.wikipedia.org/wiki/Pentium_FDIV_bug">fallo de la división de los Pentium&lt;/a> a la altura de chiste. Hace unos meses por si fuera poco se conocía otro error de seguridad en el &lt;a href="https://en.wikipedia.org/wiki/Intel_Management_Engine">Management Engine (ME)&lt;/a> de Intel.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00088&amp;amp;languageid=en-fr">Listado de procesadores Intel afectados por Meltdown y Spectre&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="media">
&lt;figure>
&lt;img src="assets/images/logotipos/meltdown.svg" alt="Meltdown" title="Meltdown" width="200" height="200"/>
&lt;img src="assets/images/logotipos/spectre.svg" alt="Spectre" title="Spectre" width="200" height="200"/>
&lt;figcaption>Logotipos de Meltdown y Spectre&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>Reemplazar todos los microprocesadores es tremendamente caro además de que primero hay que diseñar y fabricar unos que estén exentos del &lt;em>bug&lt;/em> que lleva tiempo, meses o años hasta que estén preparados, por lo que la solución hasta el momento pasa por hacer modificaciones en el software y en los sistemas operativos, compiladores y programas para resolver o mitigar el problema. En el sistema operativo la solución consiste en separar el espacio de direcciones del &lt;em>kernel&lt;/em> de la de los programas, sin embargo, cada vez que el microprocesador cambia entre un espacio de direcciones a otro hay una penalización en tiempo por lo que en ciertas cargas de trabajo muy intensivas en las que se cambia frecuentemente de contextos como operaciones de red, de almacenamiento rápido o E/S el rendimiento se ve afectado. Para un usuario doméstico, ofimático o juegos la perdida de rendimiento será insignificante y no será apreciable ya que en estos casos el microprocesador no trabaja a la máxima carga o no está cambiando frecuentemente del espacio de direcciones del &lt;em>kernel&lt;/em> al de usuario. En grandes centros de datos como la computación en la nube de &lt;a href="https://aws.amazon.com/es/">Amazon Web Services&lt;/a>, &lt;a href="https://cloud.google.com/">Google Cloud Platform&lt;/a> o &lt;a href="https://azure.microsoft.com/es-es/">Microsoft Azure&lt;/a> el rendimiento será más apreciable.&lt;/p>
&lt;p>Como usuarios domésticos para estar protegidos conviene descargar únicamente software de fuentes confiables pero para los usuarios empresariales con sus servicios en la nube en donde los sistemas están aislados pero usando infraestructura compartida y con el descubrimiento de este &lt;em>bug&lt;/em> es más grave si no se parchea, los proveedores de infraestructura en la nube ya han planificando tareas de mantenimiento y reinicios obligatorios.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;img src="assets/images/logotipos/intel.svg" alt="Intel" title="Intel" width="200"/>
&lt;img src="assets/images/logotipos/amd.svg" alt="AMD" title="AMD" width="200"/>
&lt;img src="assets/images/logotipos/arm.svg" alt="ARM" title="ARM" width="200"/>
&lt;/figure>
&lt;/div>
&lt;h3 id="técnicas-para-aumentar-el-rendimiento">Técnicas para aumentar el rendimiento&lt;/h3>
&lt;p>Los microprocesadores modernos implementan varias técnicas para aumentar el rendimiento. Una de las mas simples es aumentar la frecuencia de trabajo del microprocesador, uno de los primeros Pentium trabajaba únicamente a 100 Mhz y los actuales llegan hasta los 3 Ghz, casi 30 veces más. Pero aumentar la frecuencia solo es posible hasta cierto límite a partir del cual el microprocesador se calienta mucho y consume mucha energía. Por lo que hay que emplear otras técnicas al mismo tiempo.&lt;/p>
&lt;p>Otra de las mas simples es reducir el tamaño de los transistores, unos transistores más pequeños hace que sea posible incluir más transistores en el mismo espacio físico para incluir caches de mayor tamaño o nuevas funcionalidades, con más velocidad y con menor consumo de energía. El tamaño de los transistores de los Pentium originales era de 800 nanómetros e incluía 3.1 millones, los Intel Core de octava generación se fabrican a 14 nanómetros incluyendo unos 5000 millones, unas 60 veces más pequeños. Aún así cada vez es más difícil cumplir con la &lt;a href="https://es.wikipedia.org/wiki/Ley_de_Moore">ley de Moore&lt;/a> ya que se está llegando a límite físico de los átomos de los materiales, consistía en que cada dos años se duplica el número de transistores de un microprocesador.&lt;/p>
&lt;p>Con la ayuda de unos transistores más pequeños y más espacio se aprovecha para aumentar el rendimiento incluyendo más núcleos de cómputo. Pero para aumentar el rendimiento de un núcleo de cómputo individual o el &lt;abbr title="Instructions Per Cicle">IPC&lt;/abbr> se emplean otras técnicas como utilizar múltiples &lt;em>pipelines&lt;/em> para ejecutar varias instrucciones simultáneamente, ejecución fuera de orden para reorganizar las instrucciones y la ejecución especulativa para mantener llenos esos &lt;em>pipelines&lt;/em>.&lt;/p>
&lt;h3 id="escalar">Escalar&lt;/h3>
&lt;p>En un microprocesador escalar se ejecuta una instrucción por ciclo, por ejemplo, en esta secuencia de instrucciones que realizan unas sumas se tardarían 6 ciclos de reloj. A estos microprocesadores que ejecutan una instrucción por ciclo de reloj se les denomina escalares, siendo ejemplos el Intel 486 y el ARM1176 usado en la Raspberry Pi 1.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">e&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">k&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/escalar.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/escalar.py" target="_blank">escalar.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;h3 id="superescalar">Superescalar&lt;/h3>
&lt;p>En un microprocesador con dos &lt;em>pipelines&lt;/em> o &lt;a href="https://en.wikipedia.org/wiki/Superscalar_processor">superescalar&lt;/a> se pueden realizar varias operaciones simultáneamente, es decir, mientras se realiza la primera operación en la variable &lt;em>m&lt;/em> se realiza al mismo tiempo la segunda operación de &lt;em>n&lt;/em>, con lo que estas operaciones podrían completarse en únicamente tres ciclos de reloj con la siguiente equivalencia de programa. Ejemplos de microprocesadores superescalares son el Intel Pentium y los &lt;a href="https://www.arm.com/">ARM&lt;/a> Cortex-A7 y Cortex-A53 estos últimos usados en la Raspberry Pi 2 y 3 respectivamente.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">k&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/superescalar-1.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/superescalar-1.py" target="_blank">superescalar-1.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Sin embargo, hacer la suma de &lt;em>o&lt;/em> y &lt;em>x&lt;/em> al mismo tiempo no es posible ya que antes de calcular &lt;em>x&lt;/em> hay que calcular &lt;em>o&lt;/em> debido a que uno de los operandos en la suma de &lt;em>x&lt;/em> es &lt;em>o&lt;/em>, es decir, hay una dependencia en estas instrucciones y se han de ejecutar una después de otra. Con lo que en vez de tres ciclos habría que conformase en ejecutar estas instrucciones en cuatro ciclos.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="c1"># el segundo pipeline está ocioso&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>
&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="c1"># el segundo pipeline está ocioso&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/suprescalar-2.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/suprescalar-2.py" target="_blank">suprescalar-2.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;h3 id="fuera-de-orden">Fuera de orden&lt;/h3>
&lt;p>Los microprocesadores &lt;a href="https://en.wikipedia.org/wiki/Out-of-order_execution">fuera de orden&lt;/a> reordenan las instrucciones de la forma adecuada para que el programa sea equivalente pero manteniendo los &lt;em>pipelines&lt;/em> llenos. Cambiando el orden entre las instrucciones &lt;em>x&lt;/em> e &lt;em>y&lt;/em> se consigue ejecutar las instrucciones en tres ciclos de reloj. Ejemplos de microprocesadores fuera de orden son el Pentium 2 y siguientes microprocesadores Intel y &lt;a href="https://www.amd.com/es">AMD&lt;/a> incluyendo varios ARM Cortex-A9, A15, A17 y A57.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">k&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/fuera-de-orden.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/fuera-de-orden.py" target="_blank">fuera-de-orden.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;h3 id="predicción-de-salto-y-ejecución-especulativa">Predicción de salto y ejecución especulativa&lt;/h3>
&lt;p>Los programas incluyen saltos con sentencias condicionales &lt;em>if&lt;/em> o de bucle. Los microprocesadores tratan de adivinar si una sentencia de salto se producirá o no (con heurísticas y son bastante buenos acertando) para recuperar y tener preparadas las siguientes instrucciones. Mantener los &lt;em>pipelines&lt;/em> llenos es difícil al aumentar su número a tres o cuatro. Para tratar de mantenerlos llenos los microprocesadores usan la predicción de salto y van ejecutando las instrucciones desechando las operaciones si finalmente no se acierta en el salto pero habiendo aumentado el rendimiento si se ha acertado, realizan &lt;a href="https://en.wikipedia.org/wiki/Speculative_execution">ejecución especulativa&lt;/a> de las instrucciones.&lt;/p>
&lt;p>En este otro caso, &lt;em>v&lt;/em> depende de &lt;em>u&lt;/em> y &lt;em>u&lt;/em> depende de &lt;em>t&lt;/em> de modo que un microprocesador superescalar sin ejecución especulativa tardará tres ciclos computando &lt;em>t&lt;/em>, &lt;em>u&lt;/em> y &lt;em>v&lt;/em> para determinar el valor de &lt;em>v&lt;/em> en la sentencia condicional &lt;em>if&lt;/em> (en otro ciclo) momento en que pasa otros tres ciclos calculando &lt;em>w&lt;/em>, &lt;em>x&lt;/em> e &lt;em>y&lt;/em>, en total 4 o 7 ciclos dependiendo de si hay salto en la sentencia condicional.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>
&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">g&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-1.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-1.py" target="_blank">ejecucion-especulativa-1.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Si el predictor de salto determina que es probable que la condición sea cierta la ejecución especulativa reordena el programa de la siguiente manera:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>
&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="n">w_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>
&lt;span class="n">x_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w_&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">g&lt;/span>
&lt;span class="n">y_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y_&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-2.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-2.py" target="_blank">ejecucion-especulativa-2.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Y con la ejecución superescalar se mantiene los &lt;em>pipelines&lt;/em> ocupados de modo que el ejemplo tiene la siguiente equivalencia y tardando aproximadamente 3 ciclos cuando antes se necesitaban 7.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>
&lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w_&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">g&lt;/span>
&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y_&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-3.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/ejecucion-especulativa-3.py" target="_blank">ejecucion-especulativa-3.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;h3 id="cache">Cache&lt;/h3>
&lt;p>Los microprocesadores son muy rápidos comparados con la memoria o el acceso al almacenamiento secundario. Un Cortex-A53 de una Raspberry Pi puede ejecutar una instrucción en 0.5 nanosegundos pero el acceso a memoria costar 100 nanosegundos. Esto no es bueno pero por fortuna los accesos a memoria siguen patrones, accediendo repetidamente a variables recientemente accedidas y accediendo a variables en posiciones cercanas, de forma que colocando estas variables en una cache más rápida y cercana al procesador que la memoria principal se mitiga en gran medida el problema.&lt;/p>
&lt;h3 id="relación-entre-ejecución-especulativa-cache-y-meltdown-y-spectre">Relación entre ejecución especulativa, cache y &lt;em>Meltdown&lt;/em> y &lt;em>Spectre&lt;/em>&lt;/h3>
&lt;p>La ejecución especulativa tiene el efecto colateral de colocar datos en la memoria cache del microprocesador y esto es utilizado para realizar una forma de &lt;a href="https://en.wikipedia.org/wiki/Side-channel_attack">ataque side-channel&lt;/a>. Desde el punto de vista de &lt;em>Meltdown&lt;/em> y &lt;em>Spectre&lt;/em> y la ejecución especulativa lo importante es que midiendo el tiempo que tarda el acceso a memoria se puede conocer si el dato está en la cache (tarda poco) o no (tarda mucho).&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>
&lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kern_mem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># si se llega aquí se produce un fallo&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x100&lt;/span> &lt;span class="c1"># operación de bit and&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">user_mem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/meltdown-1.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/meltdown-1.py" target="_blank">meltdown-1.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>&lt;em>u&lt;/em> tiene una dependencia sobre &lt;em>t&lt;/em> y &lt;em>v&lt;/em> sobre &lt;em>u&lt;/em> con lo que el microprocesador usando la superescalabilidad, la ejecución fuera de orden y ejecución especulativa acabaría transformando el programa en la siguiente secuencia de operaciones:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kern_mem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">u&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w_&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x100&lt;/span>
&lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_mem&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y_&lt;/span> &lt;span class="c1"># nunca se llega aquí, si no fallo&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/meltdown-2.py" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2018/01/explicacion-del-fallo-de-seguridad-meltdown-y-spectre-en-los-microprocesadores-intel/code/meltdown-2.py" target="_blank">meltdown-2.py&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>El microprocesador lee de el valor de una dirección del &lt;em>kernel&lt;/em> de forma especulativa pero el fallo en la operación de acceso no se produce hasta se conoce el valor de &lt;em>v&lt;/em> utilizando en la sentencia condicional no es cero. Limpiando la cache previamente y haciendo que &lt;em>v&lt;/em> de cero para que no se produzca la excepción con los valores adecuados de las variables (&lt;em>a&lt;/em>, &lt;em>b&lt;/em>, &lt;em>c&lt;/em>, &lt;em>d&lt;/em>) la ejecución especulativa de &lt;code>v, y_ = u+d, user_mem[x_]&lt;/code> producirá un acceso a la dirección de memoria &lt;em>0x000&lt;/em> o &lt;em>0x100&lt;/em> dependiendo del valor del octavo bit recuperado en el acceso ilegal a la dirección de memoria &lt;code>kern_mem[address]&lt;/code>. El ataque &lt;em>side-channel&lt;/em> se produce midiendo el tiempo que tarda una instrucción posterior que utilice estas direcciones, si está o no está en la cache (por el tiempo que tarda) determina a que dirección de memoria se ha accedido y cual es el valor del octavo bit de una dirección del &lt;em>kernel&lt;/em>. ¡Felicidades has leído un bit de la memoria del kernel!. Bit a bit y con tiempo se puede leer todo el contenido de la memoria del &lt;em>kernel&lt;/em> aplicando esta operación millones de veces.&lt;/p>
&lt;h3 id="notas-finales">Notas finales&lt;/h3>
&lt;p>Los microprocesadores ARM1176, Cortex-A7, and Cortex-A53 usados en la Raspberry Pi no se ven afectados por el &lt;em>Meltdown&lt;/em> ya que no poseen ejecución especulativa, los AMD Ryzen tampoco se ven afectados por el &lt;em>Meltdown&lt;/em> ya que aunque si soportan ejecución especulativa al contrario de Intel la ejecución especulativa no se permite entre diferentes anillos de seguridad, el &lt;em>kernel&lt;/em> se ejecuta en el anillo 0 y las aplicaciones en el anillo 3. Sin embargo, una variante de &lt;em>Meltdown&lt;/em> es &lt;em>Spectre&lt;/em> que es el mismo caso pero en vez de con la memoria del &lt;em>kernel&lt;/em> con la memoria de otra aplicación. Como las aplicaciones se ejecutan en el mismo anillo en este caso los AMD Ryzen y algunos modelos de ARM si se ven afectados por &lt;em>Spectre&lt;/em> al igual que también los Intel.&lt;/p>
&lt;p>La ejecución especulativa hace más rápidos los microprocesadores pero habiéndose descubierto este fallo muy inseguros en el caso de los Intel ya que se ve afectados por &lt;em>Meltdown&lt;/em> y &lt;em>Spectre&lt;/em> a menos que se implementen parches por software ya que por microcódigo no es posible darle solución. &lt;em>Meltdown&lt;/em> es más grave pero se puede corregir modificando el &lt;em>kernel&lt;/em> aún con una pérdida de rendimiento, &lt;em>Spectre&lt;/em> es más difícil de explotar pero más difícil de corregir y lo que se hará en este último caso es mitigar el problema modificando el sistema operativo, compilador y aplicaciones.&lt;/p>
&lt;p>Intel tiene un problema importante, con AMD y sus Ryzen a buen precio, con buen rendimiento y&amp;hellip; sin el problema del &lt;em>Meltdown&lt;/em>. Para corregir el fallo en el diseño de la arquitectura del hardware Intel va a tener que rediseñar en parte su arquitectura y esto le va a llevar meses hasta tener preparados nuevos modelos de microprocesadores sin el error.&lt;/p>
&lt;p>En el &lt;em>kernel&lt;/em> de Linux 4.14.11 ya se han aplicado varios parches al igual que posteriormente se implementarán en Windows y macOS. Yo como usuario de Linux con un Intel Core i5-3210M que posee la característica &lt;em>pcid&lt;/em> y esa versión del &lt;em>kernel&lt;/em> no he notado ninguna perdida de rendimiento apreciable.&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/">Why Raspberry Pi isn’t vulnerable to Spectre or Meltdown&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pdfs.semanticscholar.org/2209/42809262c17b6631c0f6536c91aaf7756857.pdf">The Intel 80x86 Processor Architecture: Pitfalls for Secure Systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amd.com/en/corporate/speculative-execution">An Update on AMD Processor Security&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lkml.org/lkml/2017/12/27/2">x86/cpu, x86/pti: Do not enable PTI on AMD processors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/List_of_ARM_microarchitectures">List of ARM microarchitectures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://geeks.ms/etomas/2018/01/05/meltdown-y-spectre-algunos-comentarios/">Meltdown y Spectre algunos comentarios&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="hardware"/><category term="planeta-codigo"/><category term="seguridad"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/</id><title>Instalar y renovar un certificado de Let's Encrypt en Nginx</title><updated>2017-08-18T17:00:00+02:00</updated><published>2017-08-12T11:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Let&amp;rsquo;s Encrypt es una entidad que emite certificados TLS/SSL que son reconocidos como de confianza por los navegadores web. Usando esta entidad de certificación es posible obtener y renovar un certificado TLS/SSL de forma automatizada, rápida y sin coste alguno.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/lets-encrypt.svg" class="right " width="350" alt="Let&amp;#39;s Encrypt" title="Let&amp;#39;s Encrypt"/>
&lt;/div>
&lt;p>&lt;a href="https://www.google.es/">Google&lt;/a> ha anunciado que su buscador va a considerar el uso del protocolo seguro HTTPS como un criterio de &lt;abbr title="Search Engine Optimization">SEO&lt;/abbr> y posicionamiento en la lista de resultados, posicionando mejor aquellas páginas web que usen el protocolo seguro. Además, el navegador &lt;a href="https://www.google.es/chrome/browser/desktop/">Chrome&lt;/a> va a advertir al usuario para algunas páginas que usen solo HTTP que esas páginas son inseguras. Por estos motivos y para mayor seguridad y privacidad del usuario es conveniente usar el protocolo seguro HTTPS.&lt;/p>
&lt;p>El mayor inconveniente de usar el protocolo seguro HTTPS es que es necesario un certificado firmado por una autoridad de confianza instalada en el navegador del usuario. Hasta ahora había que comprar el certificado que puede llegar a tener un coste de más de 100€, instalarlo en el servidor y renovarlo antes de su fecha de expiración. Tareas quizá manuales por tanto tediosas y propensas a que surjan errores o se nos olvide hacer la renovación del certificado sobre todo si son múltiples los certificados a gestionar.&lt;/p>
&lt;p>Para mejorar la seguridad en la web y facilitar la administración de certificados hace un tiempo se creó una entidad &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a> asociado a la &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a> con la que es posible automatizar la obtención y renovación de un certificado TLS/SSL firmado por una autoridad de confianza para los navegadores. Además Let&amp;rsquo;s Encrypt permite obtener un certificado sin ningún coste, de forma gratuita.&lt;/p>
&lt;p>Los pasos para usar en un servidor web un certificado de Let&amp;rsquo;s Encrypt son los siguientes. Primero hay que instalar el &lt;a href="https://www.archlinux.org/packages/community/any/certbot/">paquete certbot&lt;/a> según la distribución de GNU/Linux, en &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a>:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># pacman -S certbot&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/pacman.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/pacman.sh" target="_blank">pacman.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>En el proceso de obtención del certificado demostraremos que somos los propietarios del sitio web a certificar. Usando &lt;a href="https://nginx.org/">nginx&lt;/a> como servidor web, iniciado y el dominio a certificar con la opción &lt;em>-d&lt;/em> se usa el siguiente comando:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># certbot certonly --webroot -w /usr/share/nginx/html -d smaug.l5.ca&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot.sh" target="_blank">certbot.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>El certificado obtenido tiene una fecha de expiración de únicamente tres meses periodo antes del cual hay que renovarlo. Para hacer la renovación hay que usar el comando:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># certbot renew&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew.sh" target="_blank">certbot-renew.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>La renovación del certificado se realiza cuando queda poco tiempo para que expire, unos 30 días, el siguiente comando permite comprobar antes si la configuración es correcta para realizar la renovación.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># certbot renew --dry-run&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew-dry-run.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew-dry-run.sh" target="_blank">certbot-renew-dry-run.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>La clave privada y certificado que Let&amp;rsquo;s Encrypt genera una vez el dominio se ha validado se ubican en el directorio &lt;em>/etc/letsencrypt/live/&lt;/em> con una carpeta por cada dominio. También se puede ver desde la linea de comandos los certificados existentes y sus fechas de expiración.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># ls /etc/letsencrypt/live/smaug.l5.ca&lt;/span>
cert.pem chain.pem fullchain.pem privkey.pem&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/key-cert.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/key-cert.sh" target="_blank">key-cert.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo certbot certificates
&lt;span class="o">[&lt;/span>sudo&lt;span class="o">]&lt;/span> password &lt;span class="k">for&lt;/span> raspberrypi:
Saving debug log to /var/log/letsencrypt/letsencrypt.log
-------------------------------------------------------------------------------
Found the following certs:
Certificate Name: smaug.l5.ca
Domains: smaug.l5.ca
Expiry Date: 2017-10-21 09:18:00+00:00 &lt;span class="o">(&lt;/span>VALID: &lt;span class="m">70&lt;/span> days&lt;span class="o">)&lt;/span>
Certificate Path: /etc/letsencrypt/live/smaug.l5.ca/fullchain.pem
Private Key Path: /etc/letsencrypt/live/smaug.l5.ca/privkey.pem
-------------------------------------------------------------------------------&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-certificates.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-certificates.sh" target="_blank">certbot-certificates.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Dado el relativo poco tiempo de validez de los certificados es recomendable automatizar la renovación empleando una &lt;a href="https://es.wikipedia.org/wiki/Cron_(Unix)">expresión cron&lt;/a>. La utilidad &lt;em>certbot&lt;/em> solo hace la renovación del certificado cuando queda menos de un més para su expiración aunque se programe su ejecución en este caso cada 6 horas y en un minuto aleatorio que Let&amp;rsquo;s Encrypt recomienda para que todos los usuarios no programen sus renovaciones al mismo tiempo:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo su
&lt;span class="c1"># crontab -e&lt;/span>
&lt;span class="m">0&lt;/span> */6 * * * sleep &lt;span class="si">${&lt;/span>&lt;span class="nv">RANDOM&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span>m &lt;span class="p">;&lt;/span> certbot renew --quiet --renew-hook &lt;span class="s2">&amp;#34;systemctl restart nginx.service&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/cron.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/cron.sh" target="_blank">cron.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Una vez que se ha renovado el certificado hay que reiniciar el servidor web para que lo utilice y para ello está el parámetro &lt;em>&amp;ndash;renew-hook&lt;/em> que ejecuta un comando cuando se produce una renovación. En el ejemplo anterior está el comando para reiniciar el servicio de nginx con el sistema gestión de procesos de &lt;a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd&lt;/a>.&lt;/p>
&lt;p>Let&amp;rsquo;s Encrypt con &lt;em>certbot&lt;/em> comprueba si somos el propietario de un sitio web instalando en el servidor web un archivo que posteriormente antes de generar el certificado lo valida. Este archivo para nginx se ubica en el directorio &lt;em>/usr/share/nginx/html/.well-known/acme-challenge/&lt;/em> y ha de estar accesible desde internet con el protocolo HTTP en la dirección &lt;em>/.well-known/acme-challenge/&lt;/em> del servidor web.&lt;/p>
&lt;p>La siguiente configuración del servidor web nginx redirige todo el tráfico usando el procotolo HTTPS excepto el contenido del directorio &lt;em>/.well-known/acme-challenge/&lt;/em> que queda accesible por HTTP.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">worker_processes 1;
events {
worker_connections 64;
}
http {
include mime.types;
default_type application/octet-stream;
sendfile on;
#tcp_nopush on;
keepalive_timeout 65;
gzip on;
gzip_disable &amp;#34;msie6&amp;#34;;
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
server {
listen 80;
server_name localhost smaug.l5.ca;
location /.well-known/ {
allow all;
alias /usr/share/nginx/html/.well-known/;
}
location / {
return 301 https://$host$request_uri;
}
}
server {
listen 443 ssl http2 default_server;
server_name localhost smaug.l5.ca;
ssl_certificate /etc/letsencrypt/live/smaug.l5.ca/cert.pem;
ssl_certificate_key /etc/letsencrypt/live/smaug.l5.ca/privkey.pem;
ssl_protocols TLSv1.1 TLSv1.2;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_session_cache shared:SSL:1m;
ssl_session_timeout 3m;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}
}&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/nginx.conf" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/nginx.conf" target="_blank">nginx.conf&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Y este es el resultado al acceder con el navegador al sitio web que tengo instalado en una &lt;a href="https://www.raspberrypi.org/">Raspberry Pi&lt;/a> accesible desde internet con un dominio de &lt;a href="https://freedns.afraid.org/">FreeDNS&lt;/a>:&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-1.png" title="Sitio web con certificado de Let&amp;#39;s Encrypt" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-1-thumb.png" width="285"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-2.png" title="Sitio web con certificado de Let&amp;#39;s Encrypt" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-2-thumb.png" width="285"/>&lt;/a>
&lt;figcaption>Sitio web con certificado de Let&amp;#39;s Encrypt&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>En la documentación del proyecto de Let&amp;rsquo;s Encrypt hay explicaciones más detalladas sobre &lt;a href="https://letsencrypt.org/how-it-works/">como funciona&lt;/a>, &lt;a href="https://letsencrypt.org/docs/rate-limits/">límites de uso&lt;/a>, &lt;a href="https://certbot.eff.org/docs/using.html">como usarlo&lt;/a> y &lt;a href="https://certbot.eff.org/">varias guías según el servidor web y distribución GNU/Linux&lt;/a>.&lt;/p></content><category term="planeta-codigo"/><category term="seguridad"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/</id><title>Autenticación mutua de cliente y servidor con certificados</title><updated>2017-06-18T23:30:00+02:00</updated><published>2017-06-17T02:45:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/"/><author><name>picodotdev</name></author><content type="html">
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/openssl.svg" class="right " width="400" alt="OpenSSL" title="OpenSSL"/>
&lt;/div>
&lt;p>Los certificados no solo sirven para autenticar a un servidor o acceder solo a aquellos en los que confiamos. El servidor también puede autenticar a los clientes mediante un certificado como alternativa a usar un usuario y contraseña ya sea una autenticación &lt;em>BASIC&lt;/em> o un formulario personalizado. Al igual que en el cliente usa el certificado de la autoridad de certificación en la que confía para validar el que presenta el servidor, el servidor puede requerir que el cliente también proporcione un certificado que el servidor valida según las autoridades de certificación en las que confía, en ambos casos el servidor o cliente usan su clave privada para iniciar la conexión segura con el &lt;em>handsake&lt;/em> del &lt;a href="https://es.wikipedia.org/wiki/Transport_Layer_Security">protocolo TLS&lt;/a>.&lt;/p>
&lt;p>Para el ejemplo usaré un servidor web &lt;a href="https://nginx.org/">nginx&lt;/a> ejecutado como un contenedor de &lt;a href="https://www.docker.com/">Docker&lt;/a> configurado de tal manera que requiere autenticación para el cliente con certificados.&lt;/p>
&lt;p>Inicialmente deberemos generar tres parejas de claves privadas y públicas, una para nuestra propia autoridad de certificación, una clave para el servidor y otra para el cliente. Al mismo tiempo generaré otras tres parejas de claves privadas y públicas para comprobar que cuando se proporciona un certificado incorrecto la autenticación falla.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl genrsa -out ca.key &lt;span class="m">8192&lt;/span>
Generating RSA private key, &lt;span class="m">8192&lt;/span> bit long modulus
............................................................................................................................................++
.........................................................................................................................................................................................................................................................................................................................................++
e is &lt;span class="m">65537&lt;/span> &lt;span class="o">(&lt;/span>0x010001&lt;span class="o">)&lt;/span>
$ openssl rsa -in ca.key -pubout &amp;gt; ca.pub
$ openssl genrsa -out server.key &lt;span class="m">8192&lt;/span>
$ openssl rsa -in server.key -pubout &amp;gt; server.pub
$ openssl genrsa -out client.key &lt;span class="m">8192&lt;/span>
$ openssl rsa -in ca.key -pubout &amp;gt; client.pub&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa.sh" target="_blank">openssl-genrsa.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">-----BEGIN CERTIFICATE-----
MIIJeTCCBWGgAwIBAgIJAMmS/dYrpwDnMA0GCSqGSIb3DQEBBQUAMDExCzAJBgNV
BAYTAkVTMQ4wDAYDVQQIEwVTcGFpbjESMBAGA1UEChMJbG9jYWxob3N0MB4XDTE3
MDQwNzA2NTcxNVoXDTIyMDQwNjA2NTcxNVowMTELMAkGA1UEBhMCRVMxDjAMBgNV
BAgTBVNwYWluMRIwEAYDVQQKEwlsb2NhbGhvc3QwggQiMA0GCSqGSIb3DQEBAQUA
...
-----END CERTIFICATE-----&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.crt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.crt" target="_blank">ca.crt&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">-----BEGIN RSA PRIVATE KEY-----
MIISJwIBAAKCBAEAyq7VfFt8LapGTtrN4zPAp5KdiHc3raAhs7MSGmrmtqYszheS
AGok/xx9RlUrLSgzjhQ22s28OgfKnqKOK1bzcjTj5Uwjc5Tr7RY724924amECHXc
ldJGc3c/BpdbyYboxsTau8BbAk45c61QKeoTGtQ+K4a2/X0oArroTtHOlRFFUB9t
yKSD20Vj80Ks4op/Q7ucEcZ8mr9zAXzhfokK72PLRGWmmvd1NBoHUzbrkNH9A8he
...
-----END RSA PRIVATE KEY-----&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.key" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.key" target="_blank">ca.key&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">-----BEGIN PUBLIC KEY-----
MIIEIjANBgkqhkiG9w0BAQEFAAOCBA8AMIIECgKCBAEAyq7VfFt8LapGTtrN4zPA
p5KdiHc3raAhs7MSGmrmtqYszheSAGok/xx9RlUrLSgzjhQ22s28OgfKnqKOK1bz
cjTj5Uwjc5Tr7RY724924amECHXcldJGc3c/BpdbyYboxsTau8BbAk45c61QKeoT
GtQ+K4a2/X0oArroTtHOlRFFUB9tyKSD20Vj80Ks4op/Q7ucEcZ8mr9zAXzhfokK
...
-----END PUBLIC KEY-----&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.pub" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.pub" target="_blank">ca.pub&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl genrsa -out ca-unknown.key &lt;span class="m">8192&lt;/span>
$ openssl rsa -in ca-unknown.key -pubout &amp;gt; ca-unknown.pub
$ openssl genrsa -out server-unknown.key &lt;span class="m">8192&lt;/span>
$ openssl rsa -in server-unknown.key -pubout &amp;gt; server-unknown.pub
$ openssl genrsa -out client-unknown.key &lt;span class="m">8192&lt;/span>
$ openssl rsa -in ca-unknown.key -pubout &amp;gt; client-unknown.pub&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa-unknown.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa-unknown.sh" target="_blank">openssl-genrsa-unknown.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>El siguiente paso es generar los certificados y firmar con la clave y certificado de la autoridad de certificado los certificados del servidor y cliente. Como paso previo a que la autoridad de certificación emita los certificados del servidor y cliente hay que generar una petición de firma de certificado, los archivos &lt;em>.csr&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl req -new -x509 -days &lt;span class="m">1825&lt;/span> -key ca.key -out ca.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>, the field will be left blank.
-----
Country Name &lt;span class="o">(&lt;/span>&lt;span class="m">2&lt;/span> letter code&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>AU&lt;span class="o">]&lt;/span>:ES
State or Province Name &lt;span class="o">(&lt;/span>full name&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Some-State&lt;span class="o">]&lt;/span>:Spain
Locality Name &lt;span class="o">(&lt;/span>eg, city&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Organization Name &lt;span class="o">(&lt;/span>eg, company&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Internet Widgits Pty Ltd&lt;span class="o">]&lt;/span>:Blog Bitix Certiticate Authority
Organizational Unit Name &lt;span class="o">(&lt;/span>eg, section&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Common Name &lt;span class="o">(&lt;/span>e.g. server FQDN or YOUR name&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Email Address &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
$ openssl req -new -key server.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>, the field will be left blank.
-----
Country Name &lt;span class="o">(&lt;/span>&lt;span class="m">2&lt;/span> letter code&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>AU&lt;span class="o">]&lt;/span>:ES
State or Province Name &lt;span class="o">(&lt;/span>full name&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Some-State&lt;span class="o">]&lt;/span>:Spain
Locality Name &lt;span class="o">(&lt;/span>eg, city&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Organization Name &lt;span class="o">(&lt;/span>eg, company&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Internet Widgits Pty Ltd&lt;span class="o">]&lt;/span>:Blog Bitix
Organizational Unit Name &lt;span class="o">(&lt;/span>eg, section&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Common Name &lt;span class="o">(&lt;/span>e.g. server FQDN or YOUR name&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:localhost
Email Address &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
Please enter the following &lt;span class="s1">&amp;#39;extra&amp;#39;&lt;/span> attributes
to be sent with your certificate request
A challenge password &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
An optional company name &lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span>:
$ openssl req -new -key client.key -out client.csr
$ openssl x509 -req -days &lt;span class="m">1825&lt;/span> -in server.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class="m">01&lt;/span> -out server.crt
Signature ok
&lt;span class="nv">subject&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">C&lt;/span> &lt;span class="o">=&lt;/span> ES, &lt;span class="nv">ST&lt;/span> &lt;span class="o">=&lt;/span> Spain, &lt;span class="nv">O&lt;/span> &lt;span class="o">=&lt;/span> Blog Bitix, &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> localhost
Getting CA Private Key
$ openssl x509 -req -days &lt;span class="m">1825&lt;/span> -in client.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class="m">02&lt;/span> -out client.crt&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req.sh" target="_blank">openssl-req.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl req -new -x509 -days &lt;span class="m">1825&lt;/span> -key ca-unknown.key -out ca-unknown.crt
$ openssl req -new -key server-unknown.key -out server-unknown.csr
$ openssl req -new -key client-unknown.key -out client-unknown.csr
$ openssl x509 -req -days &lt;span class="m">1825&lt;/span> -in server-unknown.csr -CA ca-unknown.crt -CAkey ca-unknown.key -set_serial &lt;span class="m">01&lt;/span> -out server-unknown.crt
$ openssl x509 -req -days &lt;span class="m">1825&lt;/span> -in client-unknown.csr -CA ca-unknown.crt -CAkey ca-unknown.key -set_serial &lt;span class="m">02&lt;/span> -out client-unknown.crt&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req-unknown.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req-unknown.sh" target="_blank">openssl-req-unknown.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Con la misma herramienta de &lt;a href="https://www.openssl.org/">OpenSSL&lt;/a> es posible comprobar si un certificado es válido para una autoridad de certificación en la que se confía, para ello se usa el certificado raiz de la autoridad.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl verify -CAfile ca.crt server.crt
server.crt: OK
$ openssl verify -CAfile ca.crt client.crt
client.crt: OK&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify.sh" target="_blank">openssl-verify.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ openssl verify -CAfile ca.crt server-unknown.crt
&lt;span class="nv">C&lt;/span> &lt;span class="o">=&lt;/span> ES, &lt;span class="nv">ST&lt;/span> &lt;span class="o">=&lt;/span> Spain, &lt;span class="nv">O&lt;/span> &lt;span class="o">=&lt;/span> Unknown, &lt;span class="nv">CN&lt;/span> &lt;span class="o">=&lt;/span> localhost
error &lt;span class="m">20&lt;/span> at &lt;span class="m">0&lt;/span> depth lookup: unable to get &lt;span class="nb">local&lt;/span> issuer certificate
error server-unknown.crt: verification failed
$ openssl verify -CAfile ca.crt client-unknown.crt
&lt;span class="nv">C&lt;/span> &lt;span class="o">=&lt;/span> ES, &lt;span class="nv">ST&lt;/span> &lt;span class="o">=&lt;/span> Spain, &lt;span class="nv">O&lt;/span> &lt;span class="o">=&lt;/span> Unknown Client
error &lt;span class="m">20&lt;/span> at &lt;span class="m">0&lt;/span> depth lookup: unable to get &lt;span class="nb">local&lt;/span> issuer certificate
error client-unknown.crt: verification failed&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify-unknown.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify-unknown.sh" target="_blank">openssl-verify-unknown.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Para hacer que el servidor nginx requiera autenticación mediante certificados para el cliente hay que añadir un poco de configuración mediante las directivas &lt;em>ssl&lt;/em> donde se indica el certificado del servidor, la clave privada del servidor, el certificado de la autoridad de certificación contra la que se validarán los certificados de los clientes y finalmente la directiva que establece que se ha de verificar a los clientes mediante certificados.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">http {
...
server {
listen 443;
server_name localhost;
ssl on;
ssl_certificate /etc/nginx/server.crt;
ssl_certificate_key /etc/nginx/server.key;
ssl_client_certificate /etc/nginx/ca.crt;
ssl_verify_client on;
ssl_verify_depth 5;
...
}
}&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/nginx.conf" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/nginx.conf" target="_blank">nginx.conf&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Con el siguiente archivo descriptor de &lt;a href="https://docs.docker.com/compose/">Docker Compose&lt;/a> y comando se inicia el servidor web nginx.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker-compose up
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.sh" target="_blank">docker-compose.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-YAML" data-lang="YAML">nginx&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>image&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>nginx&lt;span class="p">:&lt;/span>alpine&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>volumes&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>./nginx.conf&lt;span class="p">:&lt;/span>/etc/nginx/nginx.conf&lt;span class="p">:&lt;/span>ro&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>./server.key&lt;span class="p">:&lt;/span>/etc/nginx/server.key&lt;span class="p">:&lt;/span>ro&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>./server.crt&lt;span class="p">:&lt;/span>/etc/nginx/server.crt&lt;span class="p">:&lt;/span>ro&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>./ca.crt&lt;span class="p">:&lt;/span>/etc/nginx/ca.crt&lt;span class="p">:&lt;/span>ro&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>ports&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;80:80&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;443:443&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.yml" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.yml" target="_blank">docker-compose.yml&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Iniciado el servidor web ya se pueden realizar peticiones y el servidor y el cliente se autenticarán mutuamente. El servidor devolverá el código HTML de la página de bienvenida por defecto con las cabeceras del protocolo HTTP después de realizar el &lt;em>handsake&lt;/em> donde se valida el certificado del servidor.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -v --cacert ca.crt --cert client.crt --key client.key &lt;span class="s2">&amp;#34;https://localhost/&amp;#34;&lt;/span>
* Trying ::1...
* TCP_NODELAY &lt;span class="nb">set&lt;/span>
* Connected to localhost &lt;span class="o">(&lt;/span>::1&lt;span class="o">)&lt;/span> port &lt;span class="m">443&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="c1">#0)&lt;/span>
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class="nb">set&lt;/span> certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.2 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server hello &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server key exchange &lt;span class="o">(&lt;/span>12&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Request CERT &lt;span class="o">(&lt;/span>13&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server finished &lt;span class="o">(&lt;/span>14&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client key exchange &lt;span class="o">(&lt;/span>16&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, CERT verify &lt;span class="o">(&lt;/span>15&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS change cipher, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix&lt;span class="p">;&lt;/span> &lt;span class="nv">CN&lt;/span>&lt;span class="o">=&lt;/span>localhost
* start date: Jun &lt;span class="m">16&lt;/span> 22:16:18 &lt;span class="m">2017&lt;/span> GMT
* expire date: Jun &lt;span class="m">15&lt;/span> 22:16:18 &lt;span class="m">2022&lt;/span> GMT
* common name: localhost &lt;span class="o">(&lt;/span>matched&lt;span class="o">)&lt;/span>
* issuer: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class="m">200&lt;/span> OK
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class="m">16&lt;/span> Jun &lt;span class="m">2017&lt;/span> 22:30:06 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class="m">612&lt;/span>
&amp;lt; Last-Modified: Tue, &lt;span class="m">25&lt;/span> Apr &lt;span class="m">2017&lt;/span> 17:23:03 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: &lt;span class="s2">&amp;#34;58ff85f7-264&amp;#34;&lt;/span>
&amp;lt; Accept-Ranges: bytes
&amp;lt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
body &lt;span class="o">{&lt;/span>
width: 35em&lt;span class="p">;&lt;/span>
margin: &lt;span class="m">0&lt;/span> auto&lt;span class="p">;&lt;/span>
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.org/&amp;#34;&lt;/span>&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.com/&amp;#34;&lt;/span>&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k">for&lt;/span> using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Connection &lt;span class="c1">#0 to host localhost left intact&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl.sh" target="_blank">curl.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Si se intenta realizar una petición sin certificado de cliente o con un certificado de cliente en el que no confié el servidor (que no esté firmado por la autoridad de certificación en la que confía) se devolverá un código de estado 400 que indica que la petición se ha rechazado. También el cliente advertirá si la autoridad de certificación en la que confía no valida el certificado del servidor con un error 400 y título &lt;em>400 The SSL certificate error&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -v --cacert ca.crt &lt;span class="s2">&amp;#34;https://localhost/&amp;#34;&lt;/span>
* Trying ::1...
* TCP_NODELAY &lt;span class="nb">set&lt;/span>
* Connected to localhost &lt;span class="o">(&lt;/span>::1&lt;span class="o">)&lt;/span> port &lt;span class="m">443&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="c1">#0)&lt;/span>
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class="nb">set&lt;/span> certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.2 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server hello &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server key exchange &lt;span class="o">(&lt;/span>12&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Request CERT &lt;span class="o">(&lt;/span>13&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server finished &lt;span class="o">(&lt;/span>14&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client key exchange &lt;span class="o">(&lt;/span>16&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS change cipher, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix&lt;span class="p">;&lt;/span> &lt;span class="nv">CN&lt;/span>&lt;span class="o">=&lt;/span>localhost
* start date: Jun &lt;span class="m">16&lt;/span> 22:16:18 &lt;span class="m">2017&lt;/span> GMT
* expire date: Jun &lt;span class="m">15&lt;/span> 22:16:18 &lt;span class="m">2022&lt;/span> GMT
* common name: localhost &lt;span class="o">(&lt;/span>matched&lt;span class="o">)&lt;/span>
* issuer: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class="m">400&lt;/span> Bad Request
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class="m">16&lt;/span> Jun &lt;span class="m">2017&lt;/span> 22:30:49 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class="m">253&lt;/span>
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class="nv">bgcolor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;white&amp;#34;&lt;/span>&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection &lt;span class="m">0&lt;/span>
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS alert, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
$ curl -v --cacert ca.crt --cert client-unknown.crt --key client-unknown.key &lt;span class="s2">&amp;#34;https://localhost/&amp;#34;&lt;/span>
* Trying ::1...
* TCP_NODELAY &lt;span class="nb">set&lt;/span>
* Connected to localhost &lt;span class="o">(&lt;/span>::1&lt;span class="o">)&lt;/span> port &lt;span class="m">443&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="c1">#0)&lt;/span>
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class="nb">set&lt;/span> certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.2 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server hello &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server key exchange &lt;span class="o">(&lt;/span>12&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Request CERT &lt;span class="o">(&lt;/span>13&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server finished &lt;span class="o">(&lt;/span>14&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client key exchange &lt;span class="o">(&lt;/span>16&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, CERT verify &lt;span class="o">(&lt;/span>15&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS change cipher, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Finished &lt;span class="o">(&lt;/span>20&lt;span class="o">)&lt;/span>:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix&lt;span class="p">;&lt;/span> &lt;span class="nv">CN&lt;/span>&lt;span class="o">=&lt;/span>localhost
* start date: Jun &lt;span class="m">16&lt;/span> 22:16:18 &lt;span class="m">2017&lt;/span> GMT
* expire date: Jun &lt;span class="m">15&lt;/span> 22:16:18 &lt;span class="m">2022&lt;/span> GMT
* common name: localhost &lt;span class="o">(&lt;/span>matched&lt;span class="o">)&lt;/span>
* issuer: &lt;span class="nv">C&lt;/span>&lt;span class="o">=&lt;/span>ES&lt;span class="p">;&lt;/span> &lt;span class="nv">ST&lt;/span>&lt;span class="o">=&lt;/span>Spain&lt;span class="p">;&lt;/span> &lt;span class="nv">O&lt;/span>&lt;span class="o">=&lt;/span>Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class="m">400&lt;/span> Bad Request
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class="m">16&lt;/span> Jun &lt;span class="m">2017&lt;/span> 22:32:55 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class="m">231&lt;/span>
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 The SSL certificate error&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class="nv">bgcolor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;white&amp;#34;&lt;/span>&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;The SSL certificate error&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection &lt;span class="m">0&lt;/span>
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS alert, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
$ curl -v --cacert ca-unknown.crt --cert client.crt --key client.key &lt;span class="s2">&amp;#34;https://localhost/&amp;#34;&lt;/span>
* Trying ::1...
* TCP_NODELAY &lt;span class="nb">set&lt;/span>
* Connected to localhost &lt;span class="o">(&lt;/span>::1&lt;span class="o">)&lt;/span> port &lt;span class="m">443&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="c1">#0)&lt;/span>
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class="nb">set&lt;/span> certificate verify locations:
* CAfile: ca-unknown.crt
CApath: none
* TLSv1.2 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS handshake, Client hello &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>:
* TLSv1.2 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Server hello &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>IN&lt;span class="o">)&lt;/span>, TLS handshake, Certificate &lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>:
* TLSv1.0 &lt;span class="o">(&lt;/span>OUT&lt;span class="o">)&lt;/span>, TLS alert, Server hello &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
* SSL certificate problem: unable to get &lt;span class="nb">local&lt;/span> issuer certificate
* stopped the pause stream!
* Closing connection &lt;span class="m">0&lt;/span>
curl: &lt;span class="o">(&lt;/span>60&lt;span class="o">)&lt;/span> SSL certificate problem: unable to get &lt;span class="nb">local&lt;/span> issuer certificate
More details here: https://curl.haxx.se/docs/sslcerts.html
curl performs SSL certificate verification by default, using a &lt;span class="s2">&amp;#34;bundle&amp;#34;&lt;/span>
of Certificate Authority &lt;span class="o">(&lt;/span>CA&lt;span class="o">)&lt;/span> public keys &lt;span class="o">(&lt;/span>CA certs&lt;span class="o">)&lt;/span>. If the default
bundle file isn&lt;span class="s1">&amp;#39;t adequate, you can specify an alternate file
&lt;/span>&lt;span class="s1"> using the --cacert option.
&lt;/span>&lt;span class="s1">If this HTTPS server uses a certificate signed by a CA represented in
&lt;/span>&lt;span class="s1"> the bundle, the certificate verification probably failed due to a
&lt;/span>&lt;span class="s1"> problem with the certificate (it might be expired, or the name might
&lt;/span>&lt;span class="s1"> not match the domain name in the URL).
&lt;/span>&lt;span class="s1">If you&amp;#39;&lt;/span>d like to turn off curl&lt;span class="err">&amp;#39;&lt;/span>s verification of the certificate, use
the -k &lt;span class="o">(&lt;/span>or --insecure&lt;span class="o">)&lt;/span> option.
HTTPS-proxy has similar options --proxy-cacert and --proxy-insecure.&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl-unknown.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl-unknown.sh" target="_blank">curl-unknown.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>El siguiente &lt;em>script&lt;/em> escrito en lenguaje &lt;a href="https://www.groovy-lang.org/">Groovy&lt;/a> muestra como desde un programa para la plataforma Java se realiza autenticación mutua y que error da cuando alguno de los certificados es inválido ya sea el del cliente o el del servidor. Generando previamente los &lt;em>keystores&lt;/em> de la autoridad de certificado y del cliente introduciendo como clave en el ejemplo &lt;em>password&lt;/em> cuando se solicita.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ keytool -importcert -keystore ca.jks -trustcacerts -alias ca -file ca.crt
$ openssl pkcs12 -export -out client.p12 -inkey client.key -in client.crt
$ keytool -importkeystore -destkeystore client.jks -srckeystore client.p12 -srcstoretype pkcs12
$ keytool -importcert -keystore ca-unknown.jks -trustcacerts -alias ca -file ca-unknown.crt
$ openssl pkcs12 -export -out client-unknown.p12 -inkey client-unknown.key -in client-unknown.crt
$ keytool -importkeystore -destkeystore client-unknown.jks -srckeystore client-unknown.p12 -srcstoretype pkcs12&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/keytool.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/keytool.sh" target="_blank">keytool.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Groovy" data-lang="Groovy">&lt;span class="nd">@Grab&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;javax.activation&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;activation&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;1.1.1&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Grab&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;javax&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;javaee-api&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;7.0&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Grab&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;org.glassfish.jersey.core&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;jersey-client&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;2.25.1&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.net.ssl.KeyManagerFactory&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.net.ssl.SSLContext&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.net.ssl.TrustManagerFactory&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.client.Client&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.client.ClientBuilder&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.client.Entity&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.ws.rs.core.Response&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.security.KeyStore&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.glassfish.jersey.SslConfigurator&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Response&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buildSslClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;https://localhost&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">path&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">header&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Accept&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s2">&amp;#34;text/html&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readEntity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Client&lt;/span> &lt;span class="nf">buildSslClient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ClientBuilder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newBuilder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sslContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">buildSslContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">SSLContext&lt;/span> &lt;span class="nf">buildSslContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">SslConfigurator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">trustStoreFile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;ca.jks&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//.trustStoreFile(&amp;#34;ca-unknown.jks&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">trustStorePassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">keyStoreFile&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;client.jks&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//.keyStoreFile(&amp;#34;client-unknown.jks&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">keyPassword&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">createSSLContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="nf">Main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/MutualCertAuth.groovy" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/MutualCertAuth.groovy" target="_blank">MutualCertAuth.groovy&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ groovy MutualCertAuth.groovy
&lt;span class="m">200&lt;/span>
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
body &lt;span class="o">{&lt;/span>
width: 35em&lt;span class="p">;&lt;/span>
margin: &lt;span class="m">0&lt;/span> auto&lt;span class="p">;&lt;/span>
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.org/&amp;#34;&lt;/span>&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class="nv">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://nginx.com/&amp;#34;&lt;/span>&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k">for&lt;/span> using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy.sh" target="_blank">groovy.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>En caso de que al usar un &lt;em>keystore&lt;/em> con un certificado de una autoridad que no valida el certificado del servidor se producirán un error, también cuando el certificado del cliente no sea válido para el servidor.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ groovy MutualCertAuth.groovy &lt;span class="c1"># with code change .trustStoreFile(&amp;#34;ca-unknown.jks&amp;#34;)&lt;/span>
Caught: javax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
javax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at org.glassfish.jersey.client.internal.HttpUrlConnector.apply&lt;span class="o">(&lt;/span>HttpUrlConnector.java:287&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.ClientRuntime.invoke&lt;span class="o">(&lt;/span>ClientRuntime.java:252&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.JerseyInvocation&lt;span class="nv">$1&lt;/span>.call&lt;span class="o">(&lt;/span>JerseyInvocation.java:684&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.JerseyInvocation&lt;span class="nv">$1&lt;/span>.call&lt;span class="o">(&lt;/span>JerseyInvocation.java:681&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.internal.Errors.process&lt;span class="o">(&lt;/span>Errors.java:315&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.internal.Errors.process&lt;span class="o">(&lt;/span>Errors.java:297&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.internal.Errors.process&lt;span class="o">(&lt;/span>Errors.java:228&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.process.internal.RequestScope.runInScope&lt;span class="o">(&lt;/span>RequestScope.java:444&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.JerseyInvocation.invoke&lt;span class="o">(&lt;/span>JerseyInvocation.java:681&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.JerseyInvocation&lt;span class="nv">$Builder&lt;/span>.method&lt;span class="o">(&lt;/span>JerseyInvocation.java:411&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.JerseyInvocation&lt;span class="nv">$Builder&lt;/span>.get&lt;span class="o">(&lt;/span>JerseyInvocation.java:311&lt;span class="o">)&lt;/span>
at Main.get&lt;span class="o">(&lt;/span>MutualCertAuth.groovy:19&lt;span class="o">)&lt;/span>
at Main&lt;span class="nv">$get&lt;/span>.call&lt;span class="o">(&lt;/span>Unknown Source&lt;span class="o">)&lt;/span>
at MutualCertAuth.run&lt;span class="o">(&lt;/span>MutualCertAuth.groovy:43&lt;span class="o">)&lt;/span>
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at org.glassfish.jersey.client.internal.HttpUrlConnector._apply&lt;span class="o">(&lt;/span>HttpUrlConnector.java:399&lt;span class="o">)&lt;/span>
at org.glassfish.jersey.client.internal.HttpUrlConnector.apply&lt;span class="o">(&lt;/span>HttpUrlConnector.java:285&lt;span class="o">)&lt;/span>
... &lt;span class="m">13&lt;/span> more
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
... &lt;span class="m">15&lt;/span> more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
... &lt;span class="m">15&lt;/span> more
$ groovy MutualCertAuth.groovy &lt;span class="c1"># with code change .keyStoreFile(&amp;#34;client-unknown.jks&amp;#34;)&lt;/span>
&lt;span class="m">400&lt;/span>
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class="nv">bgcolor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;white&amp;#34;&lt;/span>&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy-unknown.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy-unknown.sh" target="_blank">groovy-unknown.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Lo anterior es usando la herramienta &lt;em>curl&lt;/em> o un un programa en la plataforma Java, en el caso de querer realizar autenticación mutua con un navegador web como &lt;a href="https://www.mozilla.org/es-ES/firefox/new/">Firefox&lt;/a> hay que instalar el certificado del cliente y si es necesario el certificado de la autoridad de certificación para que el candado indicativo de la seguridad del protocolo HTTPS se muestre en verde y no indique ningún problema de seguridad en la autenticación del servidor. En Firefox los certificados se añaden en el menú &lt;em>Preferencias &amp;gt; Avanzado &amp;gt; Ver certficados&lt;/em>. En la pestaña &lt;em>Sus certificados&lt;/em> hay que importar el certificado del cliente en formato &lt;em>PKCS12&lt;/em> y en la pestaña &lt;em>Autoridades&lt;/em> el certificado de la autoridad que haya firmado el certificado del servidor, con el botón &lt;em>Importar&lt;/em> se selecciona el archivo &lt;em>crt&lt;/em> de la autoridad. Al introducir la URL y realizar la petición Firefox solicita mediante un diálogo seleccionar el certificado a usar para realizar la autenticación en el servidor.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-bad-request.png" title="Autenticación mutua fallida" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-bad-request-thumb.png" width="200"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-mutual-authorized.png" title="Autenticación mutua correcta" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-mutual-authorized-thumb.png" width="200"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-server-cert.png" title="Certificado del servidor validado por la CA" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-server-cert-thumb.png" width="200"/>&lt;/a>
&lt;/figure>
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-certs.png" title="Certificados de cliente" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-certs-thumb.png" width="200"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-cas.png" title="Certificados de la autoridades de certificación" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-cas-thumb.png" width="200"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-ca.png" title="Añadir certificado de CA" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-ca-thumb.png" width="200"/>&lt;/a>
&lt;/figure>
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-select-cert.png" title="Selección de certificado de cliente" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-select-cert-thumb.png" width="159"/>&lt;/a>
&lt;figcaption>Autenticación mutua de cliente y servidor con el navegador web Firefox&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>
El &lt;a href="https://github.com/picodotdev/blog-ejemplos/tree/master/MutualCertAuth">código fuente completo del ejemplo&lt;/a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href="https://github.com/">GitHub&lt;/a> y probarlo en tu equipo ejecutando el comando &lt;code>docker-compose up, groovy MutualCertAuth.groovy&lt;/code>.
&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/series/docker/">Serie de artículos sobre Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/">Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="java"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="programacion"/><category term="seguridad"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/</id><title>Cómo redirigir peticiones de HTTP a HTTPS en Nginx, Apache, Tomcat, Jetty y WildFly</title><updated>2016-06-18T13:00:00+02:00</updated><published>2016-06-18T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Usar el protocolo seguro HTTPS proporciona confidencialidad en la comunicación entre el navegador del usuario y el servidor, es una forma de mejorar la seguridad y privacidad. Por ello el buscador de Google lo tiene en cuenta como un parámetro que afecta al SEO siendo mejor usar el protocolo seguro. Sin embargo, el usuario puede estar accediendo por el protocolo no seguro a la página web al poner la dirección en la barra de direcciones o hay enlaces hacia nuestro sitio en otros que hacen uso del protocolo HTTP. Si queremos que nuestro sitio sea accedido únicamente usando el protocolo seguro deberemos hacer una redirección en el servidor.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/nginx.svg" class="right " width="300" alt="Nginx" title="Nginx"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/apache.svg" class="right " width="200" alt="Apache HTTPD" title="Apache HTTPD"/>
&lt;/div>
&lt;p>Si tenemos una aplicación o una bitácora que hasta el momento era accedido por el protocolo no cifrado &lt;abbr title="Hypertext Transfer Protocol">HTTP&lt;/abbr> ahora que Google tiene en cuenta para el &lt;abbr title="Search engine optimization">SEO&lt;/abbr> que usar el protocolo seguro es un parámetro que tiene en cuenta el algoritmo de posicionamiento en el buscador quizá queramos redirigir todo el tráfico de HTTP al protocolo cifrado &lt;abbr title="Hypertext Transfer Protocol Secure">HTTPS&lt;/abbr>.&lt;/p>
&lt;p>Para usar HTTPS deberemos primero &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">configurar el protocolo TLS/SSL en el servidor web o de aplicaciones&lt;/a> usando un certificado SSL que podemos obtener ahora con &lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a> de forma gratuita o &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">generar un certificado&lt;/a> nosotros y que sea firmado por una autoridad de confianza. Una vez que el servidor es capaz de servir el tráfico por el protocolo HTTPS estamos en condiciones de realizar la redirección al protocolo cifrado HTTPS en el puerto 443 cuando sea accedido por el protocolo no cifrado HTTP en el puerto 80.&lt;/p>
&lt;p>Dependiendo del servidor web o de aplicaciones que usemos la configuración será distinta, incluso lo podemos hacer a nivel de aplicación con la ayuda del &lt;em>framework&lt;/em> web si este ofrece algún soporte para ello. A continuación incluiré la configuración necesaria para los servidores web y de aplicaciones más populares como son &lt;a href="https://nginx.org/">Nginx&lt;/a>, &lt;a href="https://httpd.apache.org/">Apache HTTPD&lt;/a>, &lt;a href="https://tomcat.apache.org/">Tomcat&lt;/a>, &lt;a href="https://eclipse.org/jetty/">Jetty&lt;/a> y &lt;a href="https://wildfly.org/">WildFly&lt;/a> y finalmente el caso haciendo la redirección a nivel de aplicación con el &lt;em>framework&lt;/em> &lt;a href="https://tapestry.apache.org/">Apache Tapestry&lt;/a> para desarrollar aplicaciones web con el lenguaje Java.&lt;/p>
&lt;h3 id="nginx">Nginx&lt;/h3>
&lt;p>Usando &lt;a href="https://www.docker.com/">Docker&lt;/a> nos resultará más sencillo hacer la prueba que teniendo que instalar el paquete de Nginx en nuestra distribución. Puedes consultar &lt;a href="https://picodotdev.github.io/blog-bitix/series/docker/">varios artículos sobre Docker&lt;/a> que he escrito a modo introducción y para empezar a usarlo.&lt;/p>
&lt;p>En la sección del servidor que escucha en el puerto HTTP (80) realizamos la redirección permanente con el código de estado 301 hacia el protocolo HTTPS. En la sección del servidor que escucha en el pueto HTTPS (443) accitva el uso de TLS/SSL usando varias directivas y sirve los documentos de &lt;em>/usr/share/nginx/html&lt;/em> en la ruta &lt;em>/&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">server {
listen 80;
server_name localhost;
return 301 https://$host$request_uri;
}
server {
listen 443;
server_name localhost;
ssl on;
ssl_certificate localhost.pem;
ssl_certificate_key localhost.key;
ssl_session_timeout 5m;
ssl_protocols SSLv2 SSLv3 TLSv1;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_prefer_server_ciphers on;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/nginx.conf" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/nginx.conf" target="_blank">nginx.conf&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run --rm --name nginx -p 80:80 -p 443:443 -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/nginx.conf:/etc/nginx/conf.d/default.conf:ro -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/localhost.key:/etc/nginx/localhost.key:ro -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/localhost.pem:/etc/nginx/localhost.pem:ro nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-nginx.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-nginx.sh" target="_blank">docker-nginx.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/nginx-https.png" title="Redirección de HTTP a HTTPS en Nginx" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/nginx-https-thumb.png" width="300"/>&lt;/a>
&lt;figcaption>Redirección de HTTP a HTTPS en Nginx&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h3 id="apache-httpd">Apache HTTPD&lt;/h3>
&lt;p>La configuración para Apache HTTPD es similar simplemente cambian las directivas según su propia configuración. Se activan los módulos para usar TLS/SSL y el que permite hacer reescrituras de las URL.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">...
LoadModule ssl_module modules/mod_ssl.so
LoadModule rewrite_module modules/mod_rewrite.so
...
&amp;lt;VirtualHost *:80&amp;gt;
ServerName localhost
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{SERVER_NAME}$1 [R,L]
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName localhost
DocumentRoot /usr/local/apache2/htdocs
SSLEngine On
SSLCertificateFile conf/localhost.crt
SSLCertificateKeyFile conf/localhost.key
&amp;lt;/VirtualHost&amp;gt;&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/httpd.conf" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/httpd.conf" target="_blank">httpd.conf&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run --rm --name apache -p 80:80 -p 443:443 -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/localhost.key:/usr/local/apache2/conf/localhost.key:ro -v &lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>/localhost.crt:/usr/local/apache2/conf/localhost.crt:ro httpd
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-httpd.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-httpd.sh" target="_blank">docker-httpd.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/apache-httpd-https.png" title="Redirección de HTTP a HTTPS en Apache HTTPD" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/apache-httpd-https-thumb.png" width="300"/>&lt;/a>
&lt;figcaption>Redirección de HTTP a HTTPS en Apache HTTPD&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h3 id="tomcat-jetty-y-wildfly">Tomcat, Jetty y WildFly&lt;/h3>
&lt;p>Es muy habitual que los servidores de aplicaciones como Tomcat, Jetty o WildFly sean accedidos no directamente por el navegador del usuario sino a través de un servidor web como Nginx o Apache haciendo de &lt;em>proxy&lt;/em>. Cuando hay un servidor web que actúa de &lt;em>proxy&lt;/em> para el servidor de aplicaciones es posible decidir que el establecimiento de la conexión cifrada TLS/SSL del protocolo HTTPS se realice en el servidor web y la comunicación cifrada termine al mismo tiempo en él, la comunicación entre el servidor web y el servidor de aplicaciones se realizaría usando el protocolo HTTP. Esto descarga del servidor de aplicaciones la tarea algo costosa del establecimiento de la conexión cifrada y tener que cifrar el tráfico.&lt;/p>
&lt;p>Para el caso de Tomcat, Jetty y WildFly habiendo configurado la posibilidad de usar el protocolo seguro la configuración para hacer la redirección es la misma para los tres, habría que añadir al archivo descriptor &lt;em>web.xml&lt;/em> de la aplicación el siguiente fragmento XML. Esto hace que el servidor fuerce la conexión segura para los recursos indicados, en este caso todos al usar el patrón &lt;em>/*&lt;/em>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-XML" data-lang="XML">...
&lt;span class="nt">&amp;lt;security-constraint&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;web-resource-collection&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;web-resource-name&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>Confidential URLs&lt;span class="nt">&amp;lt;/web-resource-name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url-pattern&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>/*&lt;span class="nt">&amp;lt;/url-pattern&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/web-resource-collection&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user-data-constraint&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;transport-guarantee&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>CONFIDENTIAL&lt;span class="nt">&amp;lt;/transport-guarantee&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/user-data-constraint&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/security-constraint&amp;gt;&lt;/span>
...&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/web.xml" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/web.xml" target="_blank">web.xml&lt;/a>
&lt;/div>
&lt;/div>
&lt;h3 id="redirección-a-nivel-de-aplicación">Redirección a nivel de aplicación&lt;/h3>
&lt;p>Con algún mecanismo propio que empleemos al programar la aplicación (en Java por ejemplo con un filtro) o el &lt;em>framework&lt;/em> web que usemos para desarrollar la aplicación web quizá nos ofrezca algún mecanismo para redirigir las peticiones al puerto seguro cuando sea accedida por el puerto inseguro, por ejemplo, para que la redirección la haga la aplicación en vez del servidor con el &lt;em>framework&lt;/em> Apache Tapestry basta añadir la siguiente configuración en el módulo de la aplicación.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">contributeMetaDataLocator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MappedConfiguration&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MetaDataConstants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECURE_PAGE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/AppModule.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/AppModule.java" target="_blank">AppModule.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>
El &lt;a href="https://github.com/picodotdev/blog-ejemplos/tree/master/RedirigirHTTPaHTTPS">código fuente completo del ejemplo&lt;/a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href="https://github.com/">GitHub&lt;/a> y probarlo en tu equipo ejecutando el comando &lt;code>./docker-nginx.sh o ./docker-httpd.sh&lt;/code>.
&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://wiki.apache.org/httpd/RedirectSSL">Redirect Request to SSL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://confluence.atlassian.com/stashkb/redirect-http-requests-to-https-333810132.html">Redirect HTTP Requests to HTTPS (in Tomcat)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html">Configuring SSL/TLS (in Jetty)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/</id><title>Cómo firmar correos electrónicos con GPG y JavaMail</title><updated>2016-03-19T10:00:00+01:00</updated><published>2016-03-19T10:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>El correo electrónico es un medio muy utilizado para realizar ataques de &lt;em>phising&lt;/em>, algunos son muy burdos pero seguramente algunos usuarios sin muchos conocimientos caen víctimas de ellos y aún los usuarios con conocimientos también pueden serlo si están bien realizados y muestran un correo electrónico exactamente igual que el que intentan suplantar. Los usuarios son las víctimas pero si los sitios web que envían los correos electrónicos legítimos los firmasen digitalmente sería una garantía más para proteger a sus usuarios, pudiendo detectar de otra forma el &lt;em>spam&lt;/em> y &lt;em>phising&lt;/em>. En este artículo muestro a modo de ejemplo como firmar un correo electrónico con GPG y JavaMail e igualmente podría utilizarse para cifrarlo, aunque usar DKIM sería lo más apropiado.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/java.svg" class="right " width="200" alt="Java" title="Java"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/gnupg.png" class="right " alt="GnuPG" title="GnuPG"/>
&lt;/div>
&lt;p>Los sitios de comercio electrónico y muchas páginas web utilizan el &lt;a href="https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure">protocolo seguro HTTPS&lt;/a> para cifrar los datos intercambiados entre cliente y servidor impidiendo a una tercera persona conocer qué información se está transmitiendo, además impide que puedan ser alterados sin su conocimiento. Es habitual usar HTTPS y certificados en las páginas de compra en las que hay que introducir datos personales junto con la tarjeta de crédito también en las cuentas de usuario como forma de proporcionar seguridad y proteger la información personal. Generando y usando &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">certificados TLS/SSL en el servidor&lt;/a> el sitio y el usuario evitan caer en un ataque de &lt;em>phising&lt;/em> en la que una tercera persona con intenciones maliciosas intenta suplantar la identidad del sitio web.&lt;/p>
&lt;p>Pero los &lt;a href="https://es.wikipedia.org/wiki/Phishing">ataques de &lt;em>phising&lt;/em>&lt;/a> también son realizados a través del correo electrónico, mensajes en los que se incluyen enlaces hacia páginas que suplantan a un sitio. Algunos usuarios quizá no se den cuenta de la suplantación al hacer clic en los enlaces maliciosos. Los motores de búsqueda mantendrán a los usuarios a salvo de enlaces maliciosos en las páginas de resultados que les lleven a páginas de &lt;em>phising&lt;/em>, pero no del correo electrónico que si no es detectado como &lt;em>spam&lt;/em> llegará a la bandeja de entrada de los usuarios. El correo electrónico es una vía para llevar a los usuarios hacia esas páginas de &lt;em>phising&lt;/em>. Para evitar este posible peligro no todos los sitios web y de comercio electrónico son los que firman sus mensajes como forma de verificar la autenticidad de los mismos así como evitar que pueda ser modificados sin conocimiento.&lt;/p>
&lt;p>Con &lt;a href="https://www.gnupg.org/">GPG&lt;/a> y &lt;a href="https://en.wikipedia.org/wiki/JavaMail">JavaMail&lt;/a> podemos firmar los mensajes electrónicos que enviemos desde una aplicación Java. La firma de un correo electrónico consiste baśicamente en firmar el contenido del mensaje y adjuntar la firma como un documento adjunto con un &lt;em>mimetype&lt;/em> de &lt;em>application/pgp-signature&lt;/em>. Lo primero que deberemos hacer es &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">generar un par de claves de cifrado asimétrico usando GPG&lt;/a>. Si los mensajes los vamos a enviar usando un cuenta de &lt;a href="https://www.google.com/intl/es/gmail/about/">gmail&lt;/a> y tenemos activada la verificación en dos pasos debemos genera una contraseña de aplicación desde &lt;a href="https://myaccount.google.com/">Mi cuenta de Google&lt;/a>.&lt;/p>
&lt;p>Además de cómo firmar un correo electrónico el siguiente ejemplo muestra &lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/">cómo ejecutar un proceso del sistema en Java&lt;/a> que nos proporciona acceso a todas las utilidades GNU, scripts de &lt;a href="https://www.python.org/">Python&lt;/a> u otros comandos que tenga instalados, también muestra &lt;a href="https://elblogdepicodev.blogspot.com.es/2011/02/enviar-correos-mediante-java-mail.html">cómo enviar un correo electrónico en un programa Java&lt;/a> que ya comenté pero ahora con un ejemplo ejecutable y enviando un archivo adjunto.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">io.github.picodotdev.blogbitix.javamailgpg&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.BufferedReader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.BufferedWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.InputStream&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.InputStreamReader&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.OutputStreamWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Properties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.TimeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.stream.Collectors&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.Authenticator&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.Message&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.Multipart&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.PasswordAuthentication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.Session&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.Transport&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.internet.InternetAddress&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.internet.MimeBodyPart&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.internet.MimeMessage&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.internet.MimeMultipart&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">gmailPassword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Authenticator&lt;/span> &lt;span class="n">authenticator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Authenticator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">PasswordAuthentication&lt;/span> &lt;span class="nf">getPasswordAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PasswordAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pico.dev@gmail.com&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">gmailPassword&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Properties&lt;/span> &lt;span class="n">properties&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.auth&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.starttls.enable&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.host&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;smtp.googlemail.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">properties&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.port&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;587&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Contenido del mensaje
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hola mundo!\n&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Establecer las direcciones a las que será enviado el mensaje
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MimeBodyPart&lt;/span> &lt;span class="n">contentPart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">contentPart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Firmar el contenido con GPG
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">signature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s">&amp;#34;gpg&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;--armor&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;--detach-sig&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;-u&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;pico.dev@gmail.com&amp;#34;&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">MimeBodyPart&lt;/span> &lt;span class="n">signaturePart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">signaturePart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">signature&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;application/pgp-signature&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">signaturePart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setHeader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;application/pgp-signature; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;name=signature.asc&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Agrupar las partes
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Multipart&lt;/span> &lt;span class="n">mp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeMultipart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">mp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">contentPart&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">mp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">signaturePart&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Obtener la sesión para enviar correos electrónicos
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Session&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDefaultInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authenticator&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Crear el mensaje a enviar
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">MimeMessage&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSubject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hola mundo!&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pico.dev@gmail.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TO&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pico.dev@gmail.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">BCC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pico.dev@gmail.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mp&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">// Enviar el correo electrónico
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Transport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Process&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">exec&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">BufferedWriter&lt;/span> &lt;span class="n">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BufferedWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">OutputStreamWriter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getOutputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">waitFor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">ev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">exitValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InputStream&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InputStreamReader&lt;/span> &lt;span class="n">isr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InputStreamReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">BufferedReader&lt;/span> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BufferedReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">isr&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lines&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">joining&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InputStream&lt;/span> &lt;span class="n">eis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getErrorStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InputStreamReader&lt;/span> &lt;span class="n">eisr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InputStreamReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">eis&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">BufferedReader&lt;/span> &lt;span class="n">ebr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BufferedReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">eisr&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ebr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lines&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">joining&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">ebr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ev&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">success&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/Main.java" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/Main.java" target="_blank">Main.java&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>En este ejemplo solo se firma el contenido del mensaje quedando fuera de la firma el asunto, fecha, otros adjuntos y destinatarios del mensaje pero podría utilizarse lo mismo para firmar estos otros datos. Enviado el correo electrónico podemos verificar la firma con el siguiente comando de GPG.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ gpg --verify signature.asc email.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/gpg-verify.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/gpg-verify.sh" target="_blank">gpg-verify.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Hola mundo!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email.txt" target="_blank">email.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2
iQIcBAABCAAGBQJW7RzkAAoJEHL+XiDgEsmJAoMQAJ4l9R8HcAw1lkg7CDWlJJrd
8bJeaAh8VgD1owz8odfF4vbv3Zc2wv8Qlk/YqQ3T+OMnMq2RHk4THfm0TqRH7Y+Y
1Q0JPd+lckLrCQfNGLjQuDqcqhKdaYybwPSjzF4O81fD1xu4Z5blzyZ8nfMEFcdB
ciJHb4NHpkp0IklsQnhDrFHYK2dbtF9P2RmGx+btdouqr21tuxVRvlda+wDVFUMG
N7NH8lKGNmWz2eABED0J6B7jmZMpIlsOzD/o0Mp7aKGL7bh1B7Mq/S1Fh00buRgR
GpXdpA9f+BHXBZlGKR6cm1QHykfARRWt1Tj2R0GBYBgb853Dv4v/dhcyspCvEf+O
NSeAUDu4UY5ExZgig27EgnAntHklqAAQpZRGUhyR4JdBToDkxJqMNNGUsMO0HOFj
7pmyJaEGbPWh5CpXWzsItdOTGprzbD4Tsp9YthsRh185iwtYK3D2pTxIFI75tggK
A+XzRvwmwqajUWYZZtHjZZj7ZDb4044OmSY+rCMrZfwtrxLVL7k3/q/NUukFiNID
ZO46vf7nLfYKCs1niXVuHdMRNeDf4ucOlZLFrmtV/rQJVyxsp2kZevJln37MUOjW
uMMot1wggYP/D+Q40vLxtXojMR5fUr3XMlU5SqqHiX9rKREk+65f14IhyDj0X8X9
hjejzRrf8xAHq545a8wf
=yNCQ
-----END PGP SIGNATURE-----&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/signature.asc.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/signature.asc.txt" target="_blank">signature.asc.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">
Return-Path: &amp;lt;pico.dev@gmail.com&amp;gt;
Received: from archlinux (193.62-99-44.dynamic.clientes.euskaltel.es. [62.99.44.193])
by smtp.googlemail.com with ESMTPSA id wr2sm15734914wjc.49.2016.03.19.02.33.25
for &amp;lt;pico.dev@gmail.com&amp;gt;
(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
Sat, 19 Mar 2016 02:33:26 -0700 (PDT)
Date: Sat, 19 Mar 2016 02:33:26 -0700 (PDT)
From: pico.dev@gmail.com
To: pico.dev@gmail.com
Message-ID: &amp;lt;693632176.1.1458380004611.JavaMail.picodotdev@archlinux&amp;gt;
Subject: Hola mundo!
MIME-Version: 1.0
Content-Type: multipart/mixed;
boundary=&amp;#34;----=_Part_0_824318946.1458380004550&amp;#34;
------=_Part_0_824318946.1458380004550
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
Hola mundo!
------=_Part_0_824318946.1458380004550
Content-Type: application/pgp-signature; name=signature.asc
Content-Transfer-Encoding: 7bit
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2
iQIcBAABCAAGBQJW7RzkAAoJEHL+XiDgEsmJAoMQAJ4l9R8HcAw1lkg7CDWlJJrd
8bJeaAh8VgD1owz8odfF4vbv3Zc2wv8Qlk/YqQ3T+OMnMq2RHk4THfm0TqRH7Y+Y
1Q0JPd+lckLrCQfNGLjQuDqcqhKdaYybwPSjzF4O81fD1xu4Z5blzyZ8nfMEFcdB
ciJHb4NHpkp0IklsQnhDrFHYK2dbtF9P2RmGx+btdouqr21tuxVRvlda+wDVFUMG
N7NH8lKGNmWz2eABED0J6B7jmZMpIlsOzD/o0Mp7aKGL7bh1B7Mq/S1Fh00buRgR
GpXdpA9f+BHXBZlGKR6cm1QHykfARRWt1Tj2R0GBYBgb853Dv4v/dhcyspCvEf+O
NSeAUDu4UY5ExZgig27EgnAntHklqAAQpZRGUhyR4JdBToDkxJqMNNGUsMO0HOFj
7pmyJaEGbPWh5CpXWzsItdOTGprzbD4Tsp9YthsRh185iwtYK3D2pTxIFI75tggK
A+XzRvwmwqajUWYZZtHjZZj7ZDb4044OmSY+rCMrZfwtrxLVL7k3/q/NUukFiNID
ZO46vf7nLfYKCs1niXVuHdMRNeDf4ucOlZLFrmtV/rQJVyxsp2kZevJln37MUOjW
uMMot1wggYP/D+Q40vLxtXojMR5fUr3XMlU5SqqHiX9rKREk+65f14IhyDj0X8X9
hjejzRrf8xAHq545a8wf
=yNCQ
-----END PGP SIGNATURE-----
------=_Part_0_824318946.1458380004550--
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email-original.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email-original.txt" target="_blank">email-original.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/images/gpg-verify.png" title="Verificación de la firma GPG del correo electrónico" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/images/gpg-verify-thumb.png" width="650"/>&lt;/a>
&lt;figcaption>Verificación de la firma GPG del correo electrónico&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>En el anillo de claves de GPG la clave que usemos para firmar no ha de tener &lt;em>passphrase&lt;/em> de lo contrario cuando se ejecute el comando GPG la solicitará en una ventana emergente. Aunque con las opciones &lt;code>&amp;ndash;passphrase&lt;/code> y &lt;code>&amp;ndash;batch&lt;/code> no debería solicitarla no he conseguido evitarlo.&lt;/p>
&lt;p>
El &lt;a href="https://github.com/picodotdev/blog-ejemplos/tree/master/JavaMailGPG">código fuente completo del ejemplo&lt;/a> puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href="https://github.com/">GitHub&lt;/a> y probarlo en tu equipo ejecutando el comando &lt;code>./gradlew --daemon run -Pargs=&amp;#34;[contraseña de aplicación de cuenta gmail]&amp;#34;&lt;/code>.
&lt;/p>
&lt;p>Las suplantaciones mediante correo electrónico son y seguirán siendo habituales si no son detectadas como &lt;em>spam&lt;/em>. Después de escribir este artículo usar &lt;a href="https://es.wikipedia.org/wiki/DomainKeys_Identified_Mail">&lt;abbr title="DomainKeys Identified Mail">DKIM&lt;/abbr>&lt;/a> parece ser la forma adecuada de firmar y cifrar los correos electrónicos y viendo el mensaje original de los que envían &lt;a href="https://www.google.es/">Google&lt;/a> y &lt;a href="https://amzn.to/2flFhHA">Amazon&lt;/a> es lo que utilizan ellos que algo sabrán de esto. Usar DKIM en los correos electrónicos será tema para otro posible artículo, la &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">nube de Amazon ofrece soporte para DKIM&lt;/a>.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">
Delivered-To: pico.dev@gmail.com
Received: by 10.202.213.87 with SMTP id m84csp657124oig;
Sat, 5 Mar 2016 11:33:21 -0800 (PST)
X-Received: by 10.50.43.228 with SMTP id z4mr5087403igl.8.1457206401882;
Sat, 05 Mar 2016 11:33:21 -0800 (PST)
Return-Path: &amp;lt;3gTTbVggTCBQ78-By95Iuww8E7DC.08805y.w8692w8.xyF06u25.w86@gaia.bounces.google.com&amp;gt;
Received: from mail-io0-x247.google.com (mail-io0-x247.google.com. [2607:f8b0:4001:c06::247])
by mx.google.com with ESMTPS id qc5si4273351igb.48.2016.03.05.11.33.21
for &amp;lt;pico.dev@gmail.com&amp;gt;
(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
Sat, 05 Mar 2016 11:33:21 -0800 (PST)
Received-SPF: pass (google.com: domain of 3gTTbVggTCBQ78-By95Iuww8E7DC.08805y.w8692w8.xyF06u25.w86@gaia.bounces.google.com designates 2607:f8b0:4001:c06::247 as permitted sender) client-ip=2607:f8b0:4001:c06::247;
Authentication-Results: mx.google.com;
spf=pass (google.com: domain of 3gTTbVggTCBQ78-By95Iuww8E7DC.08805y.w8692w8.xyF06u25.w86@gaia.bounces.google.com designates 2607:f8b0:4001:c06::247 as permitted sender) smtp.mailfrom=3gTTbVggTCBQ78-By95Iuww8E7DC.08805y.w8692w8.xyF06u25.w86@gaia.bounces.google.com;
dkim=pass header.i=@accounts.google.com;
dmarc=pass (p=REJECT dis=NONE) header.from=accounts.google.com
Received: by mail-io0-x247.google.com with SMTP id l127so142107109iof.1
for &amp;lt;pico.dev@gmail.com&amp;gt;; Sat, 05 Mar 2016 11:33:21 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
d=accounts.google.com; s=20120806;
h=mime-version:feedback-id:date:message-id:subject:from:to;
bh=NITgFdhPAzqOWo2iqDP6r/WemT69aCMvQgch8i8Dg+Q=;
b=UepeQqjXMHGmkDTuXUQkgkxNQQqaxS4XJMc8UFiCGY/qIcekT35TfY1jANbOwGhXjw
ywTuOV6/SVuerbMEatWbArCoz0/+F5hyRcMc8sZ8R1v1KmqGEJVCEHGyAT3DToF2R1UX
i4/rkYEExoiWzVZo3uIyIx7qSkd/Xbgk13CYACsI5hfqRS5RJqO2tHxi4AlRIYG0XsyX
NO+nXadBo/ObEU/xDWu0Qit03pci2mVLHq4oJcJedn+SFJdtDhNWc5m/r9VxrUhOh2Vr
RCTSORdH/4TgkaVCdRj5eZdHvcw6Bt/pocM1Dv8hHLOiqcLCvQgrjfqeYavlqbsYd29Y
HOHA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
d=1e100.net; s=20130820;
h=x-gm-message-state:mime-version:feedback-id:date:message-id:subject
:from:to;
bh=NITgFdhPAzqOWo2iqDP6r/WemT69aCMvQgch8i8Dg+Q=;
b=lyJe3AjvLk/0mtKQeEcahpZ2kY6sUB4AM2uhbUN5e5K8J4Q8vD5Yzqj1xU7711Bl2T
UoNEZL5ZXCaavY1lwievbYrcy7UUbP0kHUCFSrpVUr/r3u08MhNZocJ0O/M8VF0d+JXv
2PDtjEEecriMmxbPZQzg8iPaN13TtRscvXnSO+/fMSThC5850X0aShKTTypQwzXeDniQ
rpdOcnGcBULBsxibI1NcwKzVKtcXzfC+AZm60ieM9GsObhxqafHVByPbrrd5ZnThh6xB
V7jOMb8+20MK8qcztNyICTy9V7lcO+//E6VTR/n6z7+Hj/1aCxNFvRf2aOLIS6UQ2M/B
Io4w==
X-Gm-Message-State: AD7BkJLU4wn+DRfKk7mHW8ysscqGw5YVzpB6ZvgaKBe88k5et3vUXxJNHIQUAx6+T4u+dVDaFdNFfiTnJQjIL8hU
MIME-Version: 1.0
X-Received: by 10.107.6.149 with SMTP id f21mr6132703ioi.25.1457206401678;
Sat, 05 Mar 2016 11:33:21 -0800 (PST)
X-Notifications: XEAAAAKY__YKZOH9BRZfJxfsNZpg
X-Account-Notification-Type: STRONGAUTH_ENROLL_WITH_ASP_NO_BACKUP
Feedback-ID: STRONGAUTH_ENROLL_WITH_ASP_NO_BACKUP:account-notifier
Date: Sat, 5 Mar 2016 19:33:17 +0000 (UTC)
Message-ID: &amp;lt;f7d0Qd6Min_SAvrKnlIuEw@notifications.google.com&amp;gt;
Subject: =?ISO-8859-1?Q?Se_ha_activado_la_verificaci=F3n_en_dos_pasos?=
From: Google &amp;lt;no-reply@accounts.google.com&amp;gt;
To: pico.dev@gmail.com
...&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email-dkim.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/code/email-dkim.txt" target="_blank">email-dkim.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">Introducción a la criptografía e inicio con GPG &lt;/a>&lt;/li>
&lt;li>&lt;a href="https://elblogdepicodev.blogspot.com.es/2011/02/enviar-correos-mediante-java-mail.html">Enviar correos electrónicos mediante Java Mail &lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">Generar y convertir claves y certificados con OpenSSL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL/TLS en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM in Amazon SES&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="java"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="programacion"/><category term="seguridad"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/</id><title>Cómo eliminar de forma segura archivos con wipe y dd en GNU/Linux</title><updated>2016-03-05T12:00:00+01:00</updated><published>2016-03-05T12:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Eliminar archivos del sistema de ficheros no basta para destruir la información que contuvieran. Con herramientas como &lt;em>Foremost&lt;/em> su contenido puede ser recuperado, por ello cuando desechamos una unidad de almacenamiento (disco duro, memoria USB, targeta SD, SSD) conviene hacer un borrado seguro de la unidad, si trabajamos con información sensible quizá queramos hacer un borrado seguro de los archivos que eliminemos. Con el comando &lt;code>wipe&lt;/code> podemos borrar archivos individuales y con el comando &lt;code>dd&lt;/code> una unidad completa.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/gnu.svg" class="right " width="200" alt="GNU" title="GNU"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/linux.svg" class="right " width="200" alt="Linux" title="Linux"/>
&lt;/div>
&lt;p>Aunque los eliminemos su contenido permanece en el sistema de archivos que con herramientas como &lt;a href="https://wiki.archlinux.org/index.php/Foremost">Foremost&lt;/a> pueden recuperarse. Esto es debido a que cuando se elimina un archivo realmente lo que se hace es liberar el espacio ocupado, el contenido mientras no se sobreescriba por el de otro nuevo archivo sigue estando presente en el dispositivo de almacenamiento. Para eliminar de forma segura tal que no sea posible recuperar ni con herramientas como Foremost un archivo del sistema de almacenamiento hay que hacer un borrado seguro del archivo o de la unidad completa, proceso que consiste en sobreescribir la información con datos aleatorios.&lt;/p>
&lt;p>Esto es necesario o recomendable si trabajamos con información sensible como datos personales, contraseñas, claves, &amp;hellip; o si nos deshacemos de la unidad de almacenamiento USB, tarjeta de memoria, disco duro o SSD. En el artículo &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/">Cómo recuperar archivos con Foremost&lt;/a> explico cómo recuperar información que podríamos considerar destruida, en mi experiencia aún habiendo eliminado los archivos usando las facilidades del propio entorno de escritorio se puede recuperar el contenido completo de bastantes de los archivos originales sobre todo si la unidad tiene bastante espacio libre y no ha tenido un uso excesivo.&lt;/p>
&lt;p>En GNU/Linux para eliminar archivos de forma segura disponemos del &lt;a href="http://linux.die.net/man/1/wipe">comando &lt;code>wipe&lt;/code>&lt;/a> que en &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a> su &lt;a href="https://www.archlinux.org/packages/extra/x86_64/wipe/">paquete&lt;/a> se encuentra en el repositorio Extra. Su uso es el siguiente, la opción &lt;em>-r&lt;/em> hace un borrado recursivo de un directorio por lo que hay que usarla con cuidado y la opción &lt;em>-q&lt;/em> hace un borrado rápido sobreescribiendo únicamente 4 veces el contenido del archivo con datos aleatorios, finalmente se indica la ruta del archivo o directorio a eliminar de forma segura. Con otras opciones se puede afinar el comportamiento de borrado.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ wipe -r -q /path/to/directory/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/code/wipe.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/code/wipe.sh" target="_blank">wipe.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Para destruir la información de forma completa con datos aleatorios de una unidad de almacenamiento podemos usar el &lt;a href="http://linux.die.net/man/1/dd">comando &lt;code>dd&lt;/code>&lt;/a>, deberemos sustituir la &lt;em>X&lt;/em> por el identificador adecuado asignado a la unidad que podemos obtener con el comando &lt;code>blkid&lt;/code>:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># blkid&lt;/span>
&lt;span class="c1"># dd if=/dev/urandom of=/dev/sdX bs=4096 status=progress&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/code/dd.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/code/dd.sh" target="_blank">dd.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Como se indica en la &lt;a href="http://manpages.ubuntu.com/manpages/lucid/man1/wipe.1.html">documentación de &lt;em>wipe&lt;/em>&lt;/a> todavía puede ser posible recuperar archivos por el sistema de registro o &lt;em>journaling&lt;/em> de los sistemas de archivos modernos en los que algunos datos pueden escribirse en el sistema de registro, también se comenta alguna noción más a tener en cuenta en cuanto a la seguridad.&lt;/p>
&lt;p>Hacer una eliminación segura con el comando &lt;code>wipe&lt;/code> o uno similar dificulta la recuperación de información pero no es infalible. Una solución recomendada es &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">cifrar completamente el sistema de archivos&lt;/a>. Aún no cifrando completamente el sistema de archivos podemos &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">usar &lt;em>encfs&lt;/em> para cifrar determinados archivos&lt;/a> para proteger la información.&lt;/p>
&lt;p>Aunque si queremos asegurarnos de que la información sea verdaderamente irrecuperable de una unidad otro buen método es usar un martillo como saben en alguna organización política.&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/">Cómo recuperar archivos eliminados o de una unidad corrupta en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">Cifrar archivos con EncFS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">Cifrar unidad USB completamente con dm-crypt y LUKS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://linux.die.net/man/1/wipe">comando &lt;code>wipe&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://linux.die.net/man/1/dd">comando &lt;code>dd&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Securely_wipe_disk">Securely wipe disk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Disk_encryption">Disk encryption&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="gnu-linux"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/</id><title>Cifrar unidad USB completamente con dm-crypt y LUKS en GNU/Linux</title><updated>2016-02-26T18:00:00+01:00</updated><published>2016-02-26T18:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>¿Has perdido alguna vez una memoria USB? ¿sí, aún no? ¿qué datos contenía? Muy posiblemente son varias las memorias USB que tenemos, por su poco tamaño y cada vez mayor capacidad incluso llevaremos alguna en la cartera siempre con nosotros. Si quieres mantener a salvo los datos en caso de pérdida hay varias opciones, una para esta necesidad es cifrar completamente la unidad con dm-crypt junto con LUKS+Ext4 en GNU/Linux. Suena muy técnico pero es muy sencillo usando la aplicación Discos de GNOME y la seguridad de nuestra información aumentará notablemente.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/gnu.svg" class="right " width="200" alt="GNU" title="GNU"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/linux.svg" class="right " width="200" alt="Linux" title="Linux"/>
&lt;/div>
&lt;p>Seguro que tienes varias memorias USB o discos duros externos con los que transportar información de un sitio a otro o como copia de seguridad. No sería extraño perder alguna de esas unidades en una biblioteca, universidad, aeropuerto, vía pública, metro, &amp;hellip; con toda la información que contengan como fotos y documentos con información personal accesible por cualquier persona que se encuentre esa unidad. Si queremos evitar este posible caso de que al perder la unidad USB que al final es lo de menos ya que se puede sustituir fácilmente toda la información este accesible podemos cifrar su contenido. Hay varias formas una &lt;a href="https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">cifrando con GPG archivos individuales&lt;/a>, &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">cifrando con EncFS ciertas carpetas&lt;/a> y varios archivos a la vez o la unidad completa con &lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt">dm-crypt&lt;/a> que será el caso de este artículo.&lt;/p>
&lt;p>Usar GPG es incómodo si necesitamos cifrar múltiples archivos como sería el caso de una memoria USB, EncFS requiere introducir un comando para montar el sistema de archivos cifrado y no obligaremos a que todos los archivos estén cifrados, usando dm-crypt el sistema nos preguntará por la clave de cifrado al conectar la unidad USB y se encargará de hacer el cifrado y descifrado de forma automática y transparente, nosotros trabajaremos con los archivos y sus aplicaciones con normalidad sin ninguna necesidad especial. Además, no es complicado inicializar la unidad USB para que su contenido esté cifrado usando la &lt;a href="https://es.wikipedia.org/wiki/GNOME_Disks">aplicación Discos de GNOME&lt;/a>.&lt;/p>
&lt;p>Deberemos formatear la unidad por lo que previamente deberemos hacer una copia de seguridad de su contenido para no perderlo, en teoría desde Nautilus se puede hacer pero en mis pruebas me indicaba un error que usando la aplicación Discos no se produce.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Error synchronizing after initial wipe: Timed out waiting for object (udisks-error-quark, 0)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/code/error.txt" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/code/error.txt" target="_blank">error.txt&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Iniciada la aplicación Discos e identificada y seleccionada la unidad USB que queremos cifrar usando el botón con el icono de una rueda dentada hacemos clic en la opción formatear partición. Se abrirá un diálogo emergente donde podremos seleccionar el sistema de archivos con el que queremos formatear la unidad, seleccionamos LUKS+Ext4, formato lento e introducimos una contraseña con cierta fortaleza que deberemos recordar (de longitud 8 o más que contenga letras en mayúsculas, minúsculas, números y símbolos como «!&amp;ldquo;·$%&amp;amp;/()=^*,.-;:_»). El formateo lento tardará más o menos tiempo dependiendo de la capacidad de la unidad pero es aconsejable realizarlo para evitar que con &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/">herramientas de recuperación de archivos como Foremost&lt;/a> alguien pueda extraer algún tipo de documento usándola a pesar de en teoría haber sido eliminado, otra forma de evitarlo es &lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/">eliminar ciertos o todos los archivos de forma segura&lt;/a>. En una unidad sin cifrar es sorprendente la cantidad de archivos que se puede recuperar usando &lt;a href="https://wiki.archlinux.org/index.php/Foremost">Foremost&lt;/a> de los que en algún momento estuvieron.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/discos.png" title="Aplicación Discos de GNOME" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/discos-thumb.png" width="231"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/opciones-formato.png" title="Opciones formateo unidad" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/opciones-formato-thumb.png" width="231"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Formateada la unidad con LUKS+Ext4 al conectarla al equipo o montarla el entorno de escritorio nos preguntará por la contraseña con un diálogo.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/contrasena.png" title="Diálogo solicitud contraseña" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/contrasena-thumb.png" width="300"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/unidad-cifrada.png" title="Unidad cifrada en Nautilus" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/unidad-cifrada.png" width="290"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/unidad-descifrada.png" title="Unidad BMOVE ROJO descifrada en Nautilus" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/images/unidad-descifrada.png" width="290"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Introducida la contraseña veremos los archivos originales y podremos trabajar con ellos con normalidad como si no estuviesen cifrados. En la &lt;a href="https://wiki.archlinux.org/">wiki de Arch Linux&lt;/a> hay varios artículos explicando en que consiste dm-crypt y los comandos que deberíamos usar desde la terminal, los artículos en el apartado de referencia del final de este artículo. Cifrar la unidad completamente con cm-crypt y LUKS+Ext4 es perfectamente compatible con usar EncFS, es decir, podemos usar dm-crypt en la unidad y en ella que ya está cifrada &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">almacenar un sistema de archivos también cifrado con EncFS&lt;/a>.&lt;/p>
&lt;p>Son increíbles las opciones que uno va descubriendo del software libre de GNU/Linux y esta es una con la que haremos nuestras unidades USB y los preciados datos que contienen bastante más seguras y a salvo en caso de pérdida o robo. Y esto es solo una muestra, con dm-crypt es posible hacer muchas más cosas que con curiosidad puedes descubrir en la wiki de Arch Linux.&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/">Cómo recuperar archivos eliminados o de una unidad corrupta en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">Cifrar archivos con EncFS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/">Cómo eliminar de forma segura archivos con wipe en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_a_non-root_file_system">Encrypting a non-root file system&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt">Dm-crypt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/disk_encryption">Disk encryption&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Drive_preparation">Drive preparation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption">Device encryption&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="gnu-linux"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/</id><title>Cifrar archivos con EncFS en GNU/Linux</title><updated>2016-02-22T21:00:00+01:00</updated><published>2016-02-19T20:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Hacer copias de seguridad es una buena práctica para evitar perder información en caso de que por ejemplo un disco duro se nos estropee. Cifrar la información o al menos parte de ella como las contraseñas (si las guardamos en un archivo de texto) también es una buena práctica por si perdemos una memoria USB, nos roban en un lugar público o en nuestro domicilio un disco duro o un portátil o los extraviamos en algún viaje. Una forma sencilla para proteger su contenido cifrando múltiples archivos es EncFS.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/gnu.svg" class="right " width="200" alt="GNU" title="GNU"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/linux.svg" class="right " width="200" alt="Linux" title="Linux"/>
&lt;/div>
&lt;p>Nuestros datos es una de las cosas más importantes que podemos perder o nos pueden robar, más que el dispositivo que los contiene ya que este es fácilmente reemplazable no así los datos. La pérdida de datos puede ser porque se nos ha estropeado el disco duro y ha quedado completamente inaccesible, para evitar la pérdida de datos conviene &lt;a href="https://elblogdepicodev.blogspot.com.es/2013/05/copia-de-seguridad-con-rsync.html">realizar copias de seguridad&lt;/a> regularmente de las que recuperar los datos perdidos en caso de necesidad. También nos puede ocurrir que perdamos una memoria USB o peor aún nos roben en nuestro propio domicilio y nos extraigan entre otras cosas el portátil o un disco duro. Los productos de electrónica son objetivos apreciados por los ladrones por su valor, por su demanda que los hacen fácilmente colocables en el mercado y por su poco volumen.&lt;/p>
&lt;p>En GNU/Linux podemos proteger nuestros datos de múltiples formas de una memoria USB, de un portátil o disco duro externo. Una de ellas es &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">cifrando completamente el sistema de archivos&lt;/a> con lo que todos los datos que contuviese estarán protegidos. Otra forma es &lt;a href="https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">cifrar ciertos archivos con información sensible con GPG&lt;/a> como contraseñas, una solución menos invasiva y más compatible con otros sistemas que cifrar completamente el sistema de archivos, no muy complicada pero en la que debemos cifrar cada archivo individualmente. Para evitar cifrar/descifrar cada archivo individualmente y manualmente con GPG podemos usar &lt;a href="https://wiki.archlinux.org/index.php/EncFS">EncFS&lt;/a>. EncFS es un sistema de archivos que podemos montar y cifrará el contenido de todos los archivos que incluyamos en él.&lt;/p>
&lt;p>Con EncFS el contenido de los archivos y sus nombres serán cifrados aunque su tamaño, fechas de modificación y estructura de carpetas seguirá siendo visible. Aunque sin sus nombres originales el tamaño, fechas y estructura de carpetas ya es algo indicativo y por tanto para algunas necesidades no es suficiente la seguridad que proporciona.&lt;/p>
&lt;p>Para usar EncFS debemos instalar su paquete, en &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a> con:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo pacman -S encfs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/pacman.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/pacman.sh" target="_blank">pacman.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Instalado el paquete y con el comando &lt;code>encfs&lt;/code> indicamos el directorio donde se almacenará el sistema de archivos cifrado y el directorio donde EncFS montará el sistema de archivos sin cifrar, la primera vez que lo usemos nos pedirá la contraseña con la que el sistema de archivos se cifrará que deberemos recordar ya que nos la pedirá cada vez que montemos el sistema de archivos cifrado.&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ encfs -f &lt;span class="o">[&lt;/span>directorio cifrado&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>directorio montaje &lt;span class="o">(&lt;/span>sin cifrar&lt;span class="o">)&lt;/span>&lt;span class="o">]&lt;/span>
$ encfs -f cifrado/ descifrado/&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/encfs.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/encfs.sh" target="_blank">encfs.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="media" style="text-align: center;">
&lt;figure>
&lt;script type="text/javascript" src="https://asciinema.org/a/36852.js" id="asciicast-36852" async>&lt;/script>
&lt;noscript>&lt;a href="https://asciinema.org/a/36852" target="_blank">&lt;img src="https://asciinema.org/a/36852.png" width="734"/>&lt;/a>&lt;/noscript>
&lt;figcaption>Inicialización y montaje de un sistema de archivos cifrado para su uso con EncFS&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;p>Montado el sistema de archivos veremos que en el explorador de archivos se ha montado una unidad con el nombre del directorio sin cifrar que hemos indicado, como se aprecia en el caso de Nautilus.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/sistema-archivos-descifrados.png" title="Sistema de archivos montado y descifrado" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/sistema-archivos-descifrados-thumb.png" width="300"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>La opción &lt;em>-f&lt;/em> sirve para usar EncFS en primer plano, si lo usamos de esta forma se quedará esperando hasta que lo finalicemos con &lt;em>Ctrl-C&lt;/em> momento en el que desmontará automáticamente la unidad. Cuando queramos desmontar el sistema de archivos otra opción es el siguiente comando:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ fusermount -u &lt;span class="o">[&lt;/span>directorio sin cifrar&lt;span class="o">]&lt;/span>
$ fusermount -u descifrado/&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/fusermount.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/code/fusermount.sh" target="_blank">fusermount.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Montado el sistema de archivos en primer o segundo plano podremos trabajar con los archivos normalmente y EncFS irá cifrando su contenido y nombres de archivos de forma transparente en el directorio de archivos cifrados. Añadiendo algún archivo este podría ser el contenido del directorio de archivos cifrados.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/sistema-archivos-cifrados.png" title="Sistema de archivos cifrado" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/sistema-archivos-cifrados-thumb.png" width="300"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Por supuesto, el contenido de un archivo cifrado será completamente ininteligible consiguiendo nuestro objetivo de que nuestros datos estén a salvo y protegidos.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/contenido-archivo-descifrado.png" title="Contenido de un archivo de texto" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/contenido-archivo-descifrado-thumb.png" width="300"/>&lt;/a>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/contenido-archivo-cifrado.png" title="Contenido del archivo de texto cifrado" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/images/contenido-archivo-cifrado-thumb.png" width="300"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>En el &lt;a href="https://wiki.archlinux.org/index.php/EncFS">artículo de EncFS de la wiki de Arch Linux&lt;/a> está muy bien explicado con alguna información más sobre esta forma de proteger la preciada información personal que poseemos en diversas formas de documentos, imágenes, fotos, vídeos, música y otros formatos.&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/">Cómo recuperar archivos eliminados o de una unidad corrupta en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">Cifrar unidad USB completamente con dm-crypt y LUKS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/">Cómo eliminar de forma segura archivos con wipe en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/EncFS">Artículo de EncFS de la wiki de Arch Linux&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="gnu-linux"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/</id><title>Cómo recuperar archivos eliminados o de una unidad corrupta en GNU/Linux</title><updated>2016-02-12T19:30:00+01:00</updated><published>2016-02-12T19:30:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>&lt;strong>Muchos archivos y su contenido son recuperables aún después de eliminados y liberado su espacio ocupado del sistema de archivos. Herramientas como Foremost son capaces de recuperar el contenido de un archivo si no ha sido sobreescrito accediendo a bajo nivel a los datos de la unidad, ya esté corrupta y de algún error al montarla o funcione perfectamente. Pudiendo extraer una imagen de la unidad seremos capaces de recuperar gran cantidad de archivos motivo por el cual al deshacernos de una unidad de almacenamiento es recomendable hacer un borrado seguro para evitar que información personal o confidencial sea obtenida con cualquier propósito.&lt;/strong>&lt;/p>
&lt;div class="logotypes" style="float: right;">
&lt;img src="assets/images/logotipos/gnu.svg" class="right " width="200" alt="GNU" title="GNU"/>
&lt;/div>
&lt;div class="logotypes" style="float: right; clear: right;">
&lt;img src="assets/images/logotipos/linux.svg" class="right " width="200" alt="Linux" title="Linux"/>
&lt;/div>
&lt;p>Hace un tiempo me ocurrió que una memoria USB por algún motivo no se montaba bien ni en un sistema Windows ni tampoco en un sistema Linux. El &lt;em>pendrive&lt;/em> estaba formateado con el sistema de archivos NTFS y quizá por haberlo desmontado mal se corrompió.&lt;/p>
&lt;p>Por suerte en GNU/Linux disponemos de cantidad de herramientas y programas que nos ayudan en prácticamente cualquier cosa. En este caso de una memoria que no se dejaba montar buscando algún enlace en la &lt;a href="https://wiki.archlinux.org/">wiki de Arch Linux&lt;/a> relacionado con la recuperación de datos encontré en poco tiempo el artículo sobre &lt;a href="https://wiki.archlinux.org/index.php/Foremost">Foremost&lt;/a>, siendo un programa que puede ayudarnos a recuperar al menos parte de los datos que tuviésemos guardados. Si la unidad no está dañada físicamente y podemos extraer una imagen de la misma Foremost puede acceder a bajo nivel a las estructuras de datos de la imagen de la unidad. Foremost puede trabajar directamente sobre la unidad dañada o con una imagen, esto último es lo recomendable para evitar corromper los datos y dañar más gravemente la unidad al usarla. Si podemos extraer una imagen de la unidad es buen síntoma de que la unidad no ha dejado de funcionar completamente y tal vez se trate solo de un error lógico en la unidad y no físico pudiendo tal vez recuperarla con un formateo.&lt;/p>
&lt;p>El error en concreto al montarlo en mi sistema &lt;a href="https://www.archlinux.org/">Arch Linux&lt;/a> era el siguiente:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">Error mounting /dev/sdb1 at /run/media/picodotdev/xxx: Command-line `mount -t &amp;#34;ntfs&amp;#34; -o &amp;#34;uhelper=udisks2,nodev,nosuid,uid=1000,gid=1000,dmask=0077,fmask=0177&amp;#34; &amp;#34;/dev/sdb1&amp;#34; &amp;#34;/run/media/picodotdev/xxx&amp;#34;&amp;#39; exited
with non-zero exit status 13: ntfs_mst_post_read_fixup_warn: magic: 0x5bc449c0 size: 4096 usa_ofs: 55304 usa_count: 8: Argumento inválido
Actual VCN (0x101010100830081) of index buffer is different from expected VCN (0x1).
Failed to mount &amp;#39;/dev/sdb1&amp;#39;: Error de entrada/salida
NTFS is either inconsistent, or there is a hardware fault, or it&amp;#39;s a SoftRAID/FakeRAID hardware. In the first case run chkdsk /f on Windows then reboot into Windows twice. The usage of the /f parameter is
very important! If the device is a SoftRAID/FakeRAID then first activate it and mount a different device under the /dev/mapper/ directory, (e.g./dev/mapper/nvidia_eahaabcc1). Please see the &amp;#39;dmraid&amp;#39;
documentation for more details.&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/error.log" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/error.log" target="_blank">error.log&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Podemos extraer una imagen de una unidad con el comando &lt;code>dd&lt;/code>, el parámetro &lt;em>if&lt;/em> será la unidad de entrada y el parámetro &lt;em>of&lt;/em> la imagen que se creará en un archivo:&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/sdb1 &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>unidad.image
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/dd.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/dd.sh" target="_blank">dd.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Una vez que disponemos de la imagen en un archivo en un sistema libre de fallos usaremos Foremost para que intente recuperar los archivos que no han sido completamente corrompidos por el error. Indicamos la imagen del archivo extraída con el parámetro &lt;em>-i&lt;/em> y la carpeta donde dejará los archivos recuperados con el parámetro &lt;em>-o&lt;/em> agrupados en directorios por tipo, con el parámetro &lt;em>-t&lt;/em> indicamos los tipos de archivos que queremos recuperar de entre todos los que pueda (doc, docx, pdf, jpg, png, txt, &amp;hellip;).&lt;/p>
&lt;div class="code">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ foremost -t all -i unidad.image -o archivos/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight-meta">
&lt;span class="raw">&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/foremost.sh" target="_blank">view raw&lt;/a>&lt;/span>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2016/02/como-recuperar-archivos-eliminados-o-de-una-unidad-corrupta-en-gnu-linux/code/foremost.sh" target="_blank">foremost.sh&lt;/a>
&lt;/div>
&lt;/div>
&lt;p>Si tenemos suerte con Foremost recuperaremos gran parte de ellos y evitaremos perderlos para siempre. En la wiki de Arch Linux hay una &lt;a href="https://wiki.archlinux.org/index.php/file_recovery">guía con consejos y explicaciones de como proceder en la recuperación de archivos&lt;/a>.&lt;/p>
&lt;p>Una vez que recuperé los archivos y viendo que pude extraer una imagen de la unidad probablemente en mi caso el error sería que se corrompió la unidad quizá por no extraerla de forma segura desde Windows. Por lo tanto la volví a formatear e hice algunas pruebas copiando varios archivos, se copiaron sin dar ningún error así que al final conseguí recuperar incluso la unidad.&lt;/p>
&lt;p>Esto mismo es aplicable a una unidad que funcione correctamente, un archivo y su contenido es recuperable aún después de ser eliminado incluido de la papelera, con más probabilidad si la unidad no tiene muchas escrituras o una buena cantidad de espacio libre ya que por defecto únicamente se elimina de las estructuras del sistema de archivos y el contenido sigue estando presente simplemente no referenciado.&lt;/p>
&lt;p>Para hacer irrecuperable el contenido de un archivo hay que hacer un &lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/">borrado seguro de un archivo con el comando &lt;code>wipe&lt;/code> o de una unidad con &lt;code>dd&lt;/code>&lt;/a> que consiste en sobreescribir el contenido del archivo con datos aleatorios, otra alternativa es &lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">cifrar el sistema de archivos&lt;/a>. Es recomendable hacerlo cuando sustituyamos y nos deshagamos un disco duro o unidad de almacenamiento porque muchos de los archivos son recuperables incluido después de un formateo rápido de la unidad.&lt;/p>
&lt;p>Te sorprenderá la cantidad de archivos que son recuperados por Foremost: documentos, imágenes, archivos de texto, &amp;hellip;&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-archivos-con-encfs-en-gnu-linux/">Cifrar archivos con EncFS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/02/cifrar-unidad-usb-completamente-con-dm-crypt-y-luks-en-gnu-linux/">Cifrar unidad USB completamente con dm-crypt y LUKS en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-eliminar-de-forma-segura-archivos-con-wipe-y-dd-en-gnu-linux/">Cómo eliminar de forma segura archivos con wipe en GNU/Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Foremost">Foremost&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/file_recovery">File recovery&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://linux.die.net/man/1/wipe">Wipe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Securely_wipe_disk">Securely Wipe Disk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/Disk_encryption">Disk encryption&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="gnu-linux"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/</id><title>Certificado SSL, de empresa, «wildcard» y de validación extendida</title><updated>2015-04-25T12:00:00+02:00</updated><published>2015-04-25T10:07:04+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/"/><author><name>picodotdev</name></author><content type="html">
&lt;p>Usar un protocolo seguro garantiza de que los datos intercambiados entre el cliente y el servidor no son leídos ni modificados por una tercera parte además de verificar que la comunicación se está realizando entre las partes que dicen ser. Para usar un &lt;a href="https://es.wikipedia.org/wiki/Transport_Layer_Security">protocolo seguro como SSL/TLS&lt;/a> debemos disponer de con certificado, &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">con OpenSSL podemos generar y convertirlo al formato que deseemos&lt;/a>, sin embargo, para que el usuario tenga garantía de que el certificado es válido este se debe estar firmado por una &lt;a href="https://es.wikipedia.org/wiki/Autoridad_de_certificaci%C3%B3n">autoridad de certificación&lt;/a> (CA) en la que confíe, generalmente con una de las autoridades de certificación cuyos certificados están preinstalados en el navegador web (en Firefox podemos verlos en &lt;em>Preferencias&amp;gt; Avanzado&amp;gt; Certificados&amp;gt; Ver certificados&lt;/em>), los certificados autofirmados son útiles para hacer pruebas pero no son válidos para los usuarios. En este artículo comentaré que tipos de certificados hay y donde podemos obtener o comprar un certificado digital firmado por una CA que sea de confianza para el usuario.&lt;/p>
&lt;p>Los navegadores suelen indicar que se está usando una comunicación segura cuando en la barra de direcciones se muestra un candado y se está usando el protocolo https. Además, haciendo clic en el candado se pueden ver los detalles del certificado usado por el servidor para la comunicación cifrada.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-dominio.png" title="Certificado SSL con validación de dominio" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-dominio.png" width="402"/>&lt;/a>
&lt;/figure>
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado.png" title="Datos de certificado de GitHub" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-thumb.png" width="436"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Sin embargo, para proporcionar más seguridad y garantía de que como usuarios nos estamos comunicando con el servidor que creemos sin examinar el certificado algunos certificados permiten mostrar también en la barra de direcciones un recuadro verde con el nombre de la entidad, el recuadro verde que solemos ver también en la barra de direcciones al acceder a algunos dominios y que es proporcionado por certificados de validación extendida.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-extendida.png" title="Certificado SSL con validación extendida" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-extendida.png" width="405"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Por otra parte los certificados SSL se generan para un dominio en concreto con lo que en principio se debería comprar un certificado por cada dominio en el que deseemos usar una comunicación segura. Sin embargo, para evitar comprar múltiples certificados para los diferentes dominios o subdominios podemos comprar un certificado &lt;em>wildcard&lt;/em> que nos servirá para los subdominios (*.ejemplo.com) o un certificado multidominio (ejemplo.com, ejemplo.net, &amp;hellip;) para como su nombre indica varios dominios. En los certificados de empresa se solicitan datos datos adicionales al adquirirlo y en los detalles del certificado aparece el nombre de la empresa (campo Organización (O) como en el caso de GitHub).&lt;/p>
&lt;p>Los certificados &lt;em>wildcard&lt;/em> y que muestran el recuadro verde son más caros pero pueden ser útiles sobre todo para una página de comercio electrónico, el recuadro verde añade más seguridad, seguramente mejore los ratios de conversión y evite &lt;a href="https://es.wikipedia.org/wiki/Phishing">suplantaciones de identidad o &lt;em>phising&lt;/em>&lt;/a>. Además, utilizar un protocolo seguro es un nuevo criterio que utiliza el buscador Google en su algoritmo para establecer el posicionamiento en la página de resultados. Con las intrucciones que incorporan los procesadores modernos el cifrado y descifrado de los datos no tiene por que significar un aumento de carga considerable para el servidor ni el cliente ni en dispositivos móviles.&lt;/p>
&lt;p>¿Cómo obtener un certificado SSL firmado por una entidad raíz de certificación? Las entidades de registro de dominios aparte de dominios, &lt;em>hosting&lt;/em> virtual o privado algunos permiten comprar certificados SSL. Uno de los que conozco que permite comprar certificados SSL, de empresa, con recuadro verde o &lt;em>wildcard&lt;/em> es &lt;a href="http://www.dondominio.com/products/ssl/">DonDominio&lt;/a>, otro es &lt;a href="http://www.arsys.es/certificados-seguridad-ssl">Arsys&lt;/a>.&lt;/p>
&lt;div class="media">
&lt;figure>
&lt;a href="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificados-dondominio.png" title="Certificados DonDominio" data-gallery>&lt;img src="https://picodotdev.github.io/blog-bitix/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificados-dondominio-thumb.png" width="335"/>&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>En el caso de DonDominio dependiendo de la entidad emisora del certficado que deseemos variará el precio, también si queremos que tenga validación extendida o sea &lt;em>wildcard&lt;/em>. En el caso de un certificado SSL simple que valide solo el dominio es de unos 5 €, de validación de empresa unos 28 €, un certificado de validación extendida con recuadro verde desde unos 126 € y un &lt;em>certificado wildcard&lt;/em> de desde unos 75 €. Estos son precios desde, diferentes opciones pueden salir bastante más caras y hay que tener en cuenta que son para una validez de una año, al igual que los dominios hay que renovar su uso.&lt;/p>
&lt;p>Si no necesitamos el recuadro verde ni un certificado &lt;em>wildcard&lt;/em> una opción interesante es obtener uno gratis a través de &lt;a href="https://letsencrypt.org/">Lets Encrypt&lt;/a>. Esta nueva entidad de certificación nos permitirá obtener uno sin coste, de forma sencilla y automatizada, detrás de esta entidad están organizaciones como &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>, &lt;a href="https://www.mozilla.org/">Mozilla&lt;/a> o &lt;a href="https://www.cisco.com/">CISCO&lt;/a>.&lt;/p>
&lt;p>Una vez obtenido el certificado debemos instalarlo en el servidor, en el artículo &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat JBoss, Wildfly, Lighttpd, Nginx o Apache&lt;/a> comento como usar un certificado en los principales servidores web y de aplicaciones. Si necesitamos un formato concreto podemos &lt;a href="https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">convertir el certificado con OpenSSL&lt;/a>.&lt;/p>
&lt;div class="reference">
Referencia:&lt;br>
&lt;ul>
&lt;li>&lt;a href="https://www.genbeta.com/seguridad/que-es-un-certificado-ssl-y-por-que-deberia-importarte">Qué es un certificado SSL y por qué debería importarte&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div></content><category term="programacion"/><category term="seguridad"/><category term="planeta-linux"/><category term="planeta-codigo"/></entry></feed>