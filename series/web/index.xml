<?xml version="1.0" encoding="utf-8"?><feed version="2.0" xmlns="http://www.w3.org/2005/Atom"><id>https://picodotdev.github.io/blog-bitix/series/web/</id><title type="text">Blog Bitix</title><subtitle>Recent content on Blog Bitix</subtitle><updated>2019-06-23T12:00:00+02:00</updated><author><name>picodotdev</name></author><generator>Hugo</generator><icon>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</icon><logo>https://picodotdev.github.io/blog-bitix/assets/images/logotipos/hugo.png</logo><rights>https://creativecommons.org/licenses/by-sa/4.0/</rights><entry><id>https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/</id><title>Comprobar la seguridad de un sitio web que use SSL/TLS</title><updated>2019-06-23T12:00:00+02:00</updated><published>2019-06-23T12:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;Aunque un sitio web no trate datos sensibles como tarjetas de crédito o datos personales es muy recomendable que use el protocolo seguro HTTPS para proporcionar cifrado entre el servidor y el navegador del usuario para dotar de confidencialidad a las comunicaciones a la vez que evitar modificaciones por terceras personas de los datos transmitidos. Además, el buscador Google lo tiene en cuenta para el SEO o posicionamiento en su buscador.&lt;/p&gt;
&lt;p&gt;Para usar HTTPS lo difícil era conseguir un certificado firmado por una autoridad de confianza que los navegadores tengan instalada, la obtención y renovación de un certificado tenía un coste. Desde hace un tiempo la autoridad &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s encrypt&lt;/a&gt; emite certificados digitales gratuitamente que proporciona uno en pocos minutos y de forma automatizada incluida la renovación para usar un protocolo seguro. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/&#34;&gt;Usar un certificado de Let&amp;rsquo;s encrypt en el servidor web nginx&lt;/a&gt; no es complicado.&lt;/p&gt;
&lt;p&gt;Sin embargo, usar HTTPS simplemente no es suficiente y ha de configurarse el servidor web para que utilice algoritmos de cifrado fuertes y que no tengan problemas seguridad conocidos o hoy estén ya considerados débiles. Para analizar el nivel de seguridad proporcionado en las conexiones HTTPS de un servidor web se puede utilizar la herramienta &lt;a href=&#34;https://www.ssllabs.com/&#34;&gt;Qualys SSL Labs&lt;/a&gt;. Por ejemplo, analizando la seguridad del protocolo HTTPS ofrecido por &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; basta con introducir el dominio a analizar.&lt;/p&gt;
&lt;p&gt;El informe que proporciona incluye información sobre el certificado del servidor entre ella su tiempo de validadez y fecha de expiración, y si es de confianza para los navegadores y plataformas como Mozilla, Apple, Android, Java o Windows. Los datos de configuración como protocolos soportados, &lt;em&gt;cipher suites&lt;/em&gt; y una simulación de &lt;em&gt;handshake&lt;/em&gt; con una gran variedad de versiones de navegadores en diferentes plataformas y versiones incluyendo dispositivos móviles y de escritorio que permite conocer si algún dipositivo pudiera tener algún problema con la configuración de TLS en la conexión, también otros detalle del protocolo.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/images/ssllabs_hu45897026cba3d1771fd184de0c40861a_124032_2560x1440_fit_box_2.png&#34; title=&#34;Informe de seguridad TLS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2019/06/comprobar-la-seguridad-de-un-sitio-web-que-use-ssl-tls/images/ssllabs_hu45897026cba3d1771fd184de0c40861a_124032_650x450_fit_box_2.png&#34; width=&#34;373&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Informe de seguridad TLS&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;La herramienta proporciona una nota entre A y F siendo la A la mejor calificación posible. Como se observa en la captura para GitHub Pages la herramienta proporciona una calificación de A.&lt;/p&gt;
&lt;p&gt;Hay múltiples combinaciones de algoritmos de cifrado o &lt;em&gt;cipher suites&lt;/em&gt; usados en una conexión SSL/TLS. La primera parte de los siguientes se refieren a TLS, está el tamaño de la clave y el modo y el algoritmo de autenticación del mensaje. Algunas recomendaciones de uso es usar tamaños de clave de más de 128 bits, evitar usar RC4, DES y 3DES, preferir ECDHE y DHE ya que ofrecen &lt;em&gt;forward secrecy&lt;/em&gt; que protege las comunicaciones pasadas aún habiéndose comprometida la clave privada del servidor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_RSA_WITH_AES_256_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;/li&gt;
&lt;li&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_DHE_DSS_WITH_AES_256_CBC_SHA256&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_RSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_DHE_DSS_WITH_AES_256_CBC_SHA&lt;/li&gt;
&lt;li&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y algunas propiedades de los servidores web &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTP&lt;/a&gt; y &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; que afectan a los algoritmos de cifrado soportados son las siguientes. Algunos navegadores antiguos puede que no soporten los últimos algoritmos de cifrado por lo que hay que permitir en el servidor web unos que sean considerados como seguros pero que también soporten los navegadores de los usuarios del sitio web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/mod_ssl.html&#34;&gt;Apache Module mod_ssl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;Nginx Module ngx_http_ssl_module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uan vez configurada la seguridad con TLS/SSL es recomendable &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;redirigir el tráfico del protocolo HTTP no seguro al protocolo HTTPS seguro&lt;/a&gt;.&lt;/p&gt;</content><category term="planeta-codigo"/><category term="seguridad"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/</id><title>Pruebas de carga y rendimiento de un servicio web con Apache Bench</title><updated>2019-06-14T17:00:00+02:00</updated><published>2019-06-14T17:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;En algunos que un servicio devuelva los datos esperados no es suficiente, otros requisitos no funcionales o de términos de servicio son que sus tiempos de respuesta sean menores al especificado en sus requisitos, que sea capaz de soportar cierto número de peticiones concurrentes o de atender un número de peticiones por minuto. Para asegurar que el servicio es capaz de cumplir estos requisitos funcionales hay que utilizar herramientas que permitan evaluar su desempeño, una de ellas muy fácil de utilizar y que proporciona valiosa información es Apache Bench.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Apache&#34; title=&#34;Apache&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Para hacer pruebas de carga o medir el rendimiento de cualquier servicio que funcione mediante el protocolo HTTP hay multitud de herramientas. Una de las más sencillas de utilizar y con un informe con información interesante es &lt;a href=&#34;https://httpd.apache.org/docs/current/programs/ab.html&#34;&gt;Apache Bench&lt;/a&gt; o simplemente &lt;em&gt;ab&lt;/em&gt;. Este comando se puede utilizar con simplemente tres parámetros el &lt;em&gt;endpoint&lt;/em&gt; a probar, el número de peticiones en total a realizar (&lt;em&gt;-n&lt;/em&gt;) y cuantas peticiones concurrentes al mismo tiempo (&lt;em&gt;-c&lt;/em&gt;). Otos parámetros son los datos POST a enviar, cabeceras (&lt;em&gt;-H&lt;/em&gt;) y &lt;em&gt;cookies&lt;/em&gt; (&lt;em&gt;-C&lt;/em&gt;) de las peticiones, tiempos de &lt;em&gt;timeout&lt;/em&gt; (&lt;em&gt;-s&lt;/em&gt;) o cerficado de cliente (&lt;em&gt;-E&lt;/em&gt;) entre algunos otros. En vez limitar las pruebas a un número de peticiones las pruebas se pueden limitar a un tiempo determinado por ejemplo 60 segundos (&lt;em&gt;-t&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Es una herramienta que se utiliza para medir el rendimiento de el servidor Apache pero utilizable para cualquier otro servicio por ejemplo una web o una API REST o &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;. Está disponible por supuesto para &lt;a href=&#34;https://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;https://www.linux.com/&#34;&gt;Linux&lt;/a&gt; pero también para &lt;a href=&#34;https://www.apple.com/macos/&#34;&gt;macOS&lt;/a&gt; y para &lt;a href=&#34;https://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si quisiese medir el rendimiento en mi blog alojado en &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; podría hacerlo lanzando 1000 peticiones para que sea una muestra suficientemente amplia con 20 usuarios de forma concurrente que son los que en los momentos de más tráfico tiene mi blog. Mi conexión de internet es un ADSL que no llega a 1 MB/s de subida por lo que la conexión en cierta medida limite el test.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ab -n &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; -c &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; https://picodotdev.github.io/blog-bitix/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/code/ab.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/code/ab.sh&#34; target=&#34;_blank&#34;&gt;ab.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El informe de resultado que ofrece &lt;em&gt;ab&lt;/em&gt; al finalizar la prueba incluye el tiempo dedicado en la conexión, en el procesado, esperando y en total con los valores para cada uno de ellos con mínimo y máximo, de media y la mediana. El tiempo total empleado por la prueba, el protocolo SSL/TLS usado, los bytes devueltos en la petición, el número de peticiones servidas por segundo, el tiempo de media empleado de media por cada petición y de media teniendo en cuenta la concurrencia, la tasa de transferencia en la respuesta y finalmente el tiempo de respuesta según percentil que van que desde el 50 al 100, es decir, que el 50% de las peticiones se han respondido en el tiempo en milisegundos indicado. Si las hubiera también muestra las peticiones fallidas y las que han devuelto un código de respuesta distinto de 200.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1843412 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/
Benchmarking picodotdev.github.io (be patient)
Completed 100 requests
Completed 200 requests
Completed 300 requests
Completed 400 requests
Completed 500 requests
Completed 600 requests
Completed 700 requests
Completed 800 requests
Completed 900 requests
Completed 1000 requests
Finished 1000 requests
Server Software: GitHub.com
Server Hostname: picodotdev.github.io
Server Port: 443
SSL/TLS Protocol: TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128
Server Temp Key: X25519 253 bits
TLS Server Name: picodotdev.github.io
Document Path: /blog-bitix/
Document Length: 28389 bytes
Concurrency Level: 20
Time taken for tests: 29.220 seconds
Complete requests: 1000
Failed requests: 0
Total transferred: 29007394 bytes
HTML transferred: 28389000 bytes
Requests per second: 34.22 [#/sec] (mean)
Time per request: 584.404 [ms] (mean)
Time per request: 29.220 [ms] (mean, across all concurrent requests)
Transfer rate: 969.45 [Kbytes/sec] received
Connection Times (ms)
min mean[+/-sd] median max
Connect: 149 349 149.7 303 1361
Processing: 122 225 75.5 207 586
Waiting: 53 122 68.8 108 481
Total: 329 574 174.0 512 1612
Percentage of the requests served within a certain time (ms)
50% 512
66% 534
75% 555
80% 744
90% 832
95% 915
98% 1104
99% 1171
100% 1612 (longest request)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/code/ab.out&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2019/06/pruebas-de-carga-y-rendimiento-de-un-servicio-web-con-apache-bench/code/ab.out&#34; target=&#34;_blank&#34;&gt;ab.out&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Esta herramienta puede ser utilizada para par medir el rendimiento de cualquier servicio web. Un blog de &lt;a href=&#34;https://wordpress.org/&#34;&gt;Wordpress&lt;/a&gt;, una página de una organización, un &lt;em&gt;endpoint&lt;/em&gt; de un servicio REST o GraphQL, etc&amp;hellip; Es muy sencilla de utilizar y genera un informe corto pero con interesante información sobre el rendimiento. Si se hacen cambios se puede medir el antes y el después y comparar los resultados para observar de que modo han afectado al redimiento si de forma positiva o negativa y en que grado.&lt;/p&gt;</content><category term="planeta-codigo"/><category term="software"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/</id><title>Instalar y renovar un certificado de Let&#39;s Encrypt en Nginx</title><updated>2017-08-18T17:00:00+02:00</updated><published>2017-08-12T11:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s Encrypt es una entidad que emite certificados TLS/SSL que son reconocidos como de confianza por los navegadores web. Usando esta entidad de certificación es posible obtener y renovar un certificado TLS/SSL de forma automatizada, rápida y sin coste alguno.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/lets-encrypt.svg&#34; class=&#34;right &#34; width=&#34;350&#34; alt=&#34;Let&amp;#39;s Encrypt&#34; title=&#34;Let&amp;#39;s Encrypt&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt; ha anunciado que su buscador va a considerar el uso del protocolo seguro HTTPS como un criterio de &lt;abbr title=&#34;Search Engine Optimization&#34;&gt;SEO&lt;/abbr&gt; y posicionamiento en la lista de resultados, posicionando mejor aquellas páginas web que usen el protocolo seguro. Además, el navegador &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt; va a advertir al usuario para algunas páginas que usen solo HTTP que esas páginas son inseguras. Por estos motivos y para mayor seguridad y privacidad del usuario es conveniente usar el protocolo seguro HTTPS.&lt;/p&gt;
&lt;p&gt;El mayor inconveniente de usar el protocolo seguro HTTPS es que es necesario un certificado firmado por una autoridad de confianza instalada en el navegador del usuario. Hasta ahora había que comprar el certificado que puede llegar a tener un coste de más de 100€, instalarlo en el servidor y renovarlo antes de su fecha de expiración. Tareas quizá manuales por tanto tediosas y propensas a que surjan errores o se nos olvide hacer la renovación del certificado sobre todo si son múltiples los certificados a gestionar.&lt;/p&gt;
&lt;p&gt;Para mejorar la seguridad en la web y facilitar la administración de certificados hace un tiempo se creó una entidad &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; asociado a la &lt;a href=&#34;https://www.linuxfoundation.org/&#34;&gt;Linux Foundation&lt;/a&gt; con la que es posible automatizar la obtención y renovación de un certificado TLS/SSL firmado por una autoridad de confianza para los navegadores. Además Let&amp;rsquo;s Encrypt permite obtener un certificado sin ningún coste, de forma gratuita.&lt;/p&gt;
&lt;p&gt;Los pasos para usar en un servidor web un certificado de Let&amp;rsquo;s Encrypt son los siguientes. Primero hay que instalar el &lt;a href=&#34;https://www.archlinux.org/packages/community/any/certbot/&#34;&gt;paquete certbot&lt;/a&gt; según la distribución de GNU/Linux, en &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pacman -S certbot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/pacman.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/pacman.sh&#34; target=&#34;_blank&#34;&gt;pacman.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;En el proceso de obtención del certificado demostraremos que somos los propietarios del sitio web a certificar. Usando &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; como servidor web, iniciado y el dominio a certificar con la opción &lt;em&gt;-d&lt;/em&gt; se usa el siguiente comando:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# certbot certonly --webroot -w /usr/share/nginx/html -d smaug.l5.ca&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot.sh&#34; target=&#34;_blank&#34;&gt;certbot.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El certificado obtenido tiene una fecha de expiración de únicamente tres meses periodo antes del cual hay que renovarlo. Para hacer la renovación hay que usar el comando:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# certbot renew&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew.sh&#34; target=&#34;_blank&#34;&gt;certbot-renew.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;La renovación del certificado se realiza cuando queda poco tiempo para que expire, unos 30 días, el siguiente comando permite comprobar antes si la configuración es correcta para realizar la renovación.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# certbot renew --dry-run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew-dry-run.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-renew-dry-run.sh&#34; target=&#34;_blank&#34;&gt;certbot-renew-dry-run.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;La clave privada y certificado que Let&amp;rsquo;s Encrypt genera una vez el dominio se ha validado se ubican en el directorio &lt;em&gt;/etc/letsencrypt/live/&lt;/em&gt; con una carpeta por cada dominio. También se puede ver desde la linea de comandos los certificados existentes y sus fechas de expiración.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ls /etc/letsencrypt/live/smaug.l5.ca&lt;/span&gt;
cert.pem chain.pem fullchain.pem privkey.pem&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/key-cert.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/key-cert.sh&#34; target=&#34;_blank&#34;&gt;key-cert.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo certbot certificates
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;sudo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; password &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; raspberrypi:
Saving debug log to /var/log/letsencrypt/letsencrypt.log
-------------------------------------------------------------------------------
Found the following certs:
Certificate Name: smaug.l5.ca
Domains: smaug.l5.ca
Expiry Date: &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt;-10-21 &lt;span class=&#34;m&#34;&gt;09&lt;/span&gt;:18:00+00:00 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;VALID: &lt;span class=&#34;m&#34;&gt;70&lt;/span&gt; days&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Certificate Path: /etc/letsencrypt/live/smaug.l5.ca/fullchain.pem
Private Key Path: /etc/letsencrypt/live/smaug.l5.ca/privkey.pem
-------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-certificates.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/certbot-certificates.sh&#34; target=&#34;_blank&#34;&gt;certbot-certificates.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Dado el relativo poco tiempo de validez de los certificados es recomendable automatizar la renovación empleando una &lt;a href=&#34;https://es.wikipedia.org/wiki/Cron_(Unix)&#34;&gt;expresión cron&lt;/a&gt;. La utilidad &lt;em&gt;certbot&lt;/em&gt; solo hace la renovación del certificado cuando queda menos de un més para su expiración aunque se programe su ejecución en este caso cada 6 horas y en un minuto aleatorio que Let&amp;rsquo;s Encrypt recomienda para que todos los usuarios no programen sus renovaciones al mismo tiempo:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo su
&lt;span class=&#34;c1&#34;&gt;# crontab -e&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; */6 * * * sleep &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RANDOM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;m &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; certbot renew --quiet --renew-hook &lt;span class=&#34;s2&#34;&gt;&amp;#34;systemctl restart nginx.service&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/cron.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/cron.sh&#34; target=&#34;_blank&#34;&gt;cron.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Una vez que se ha renovado el certificado hay que reiniciar el servidor web para que lo utilice y para ello está el parámetro &lt;em&gt;&amp;ndash;renew-hook&lt;/em&gt; que ejecuta un comando cuando se produce una renovación. En el ejemplo anterior está el comando para reiniciar el servicio de nginx con el sistema gestión de procesos de &lt;a href=&#34;https://www.freedesktop.org/wiki/Software/systemd/&#34;&gt;systemd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s Encrypt con &lt;em&gt;certbot&lt;/em&gt; comprueba si somos el propietario de un sitio web instalando en el servidor web un archivo que posteriormente antes de generar el certificado lo valida. Este archivo para nginx se ubica en el directorio &lt;em&gt;/usr/share/nginx/html/.well-known/acme-challenge/&lt;/em&gt; y ha de estar accesible desde internet con el protocolo HTTP en la dirección &lt;em&gt;/.well-known/acme-challenge/&lt;/em&gt; del servidor web.&lt;/p&gt;
&lt;p&gt;La siguiente configuración del servidor web nginx redirige todo el tráfico usando el procotolo HTTPS excepto el contenido del directorio &lt;em&gt;/.well-known/acme-challenge/&lt;/em&gt; que queda accesible por HTTP.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;worker_processes 1;
events {
worker_connections 64;
}
http {
include mime.types;
default_type application/octet-stream;
sendfile on;
#tcp_nopush on;
keepalive_timeout 65;
gzip on;
gzip_disable &amp;#34;msie6&amp;#34;;
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
server {
listen 80;
server_name localhost smaug.l5.ca;
location /.well-known/ {
allow all;
alias /usr/share/nginx/html/.well-known/;
}
location / {
return 301 https://$host$request_uri;
}
}
server {
listen 443 ssl http2 default_server;
server_name localhost smaug.l5.ca;
ssl_certificate /etc/letsencrypt/live/smaug.l5.ca/cert.pem;
ssl_certificate_key /etc/letsencrypt/live/smaug.l5.ca/privkey.pem;
ssl_protocols TLSv1.1 TLSv1.2;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_session_cache shared:SSL:1m;
ssl_session_timeout 3m;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Y este es el resultado al acceder con el navegador al sitio web que tengo instalado en una &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; accesible desde internet con un dominio de &lt;a href=&#34;https://freedns.afraid.org/&#34;&gt;FreeDNS&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-1.png&#34; title=&#34;Sitio web con certificado de Let&amp;#39;s Encrypt&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-1-thumb.png&#34; width=&#34;285&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-2.png&#34; title=&#34;Sitio web con certificado de Let&amp;#39;s Encrypt&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/08/instalar-y-renovar-un-certificado-de-lets-encrypt-en-nginx/images/smaug-2-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Sitio web con certificado de Let&amp;#39;s Encrypt&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;En la documentación del proyecto de Let&amp;rsquo;s Encrypt hay explicaciones más detalladas sobre &lt;a href=&#34;https://letsencrypt.org/how-it-works/&#34;&gt;como funciona&lt;/a&gt;, &lt;a href=&#34;https://letsencrypt.org/docs/rate-limits/&#34;&gt;límites de uso&lt;/a&gt;, &lt;a href=&#34;https://certbot.eff.org/docs/using.html&#34;&gt;como usarlo&lt;/a&gt; y &lt;a href=&#34;https://certbot.eff.org/&#34;&gt;varias guías según el servidor web y distribución GNU/Linux&lt;/a&gt;.&lt;/p&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="seguridad"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/</id><title>Autenticación mutua de cliente y servidor con certificados</title><updated>2017-06-18T23:30:00+02:00</updated><published>2017-06-17T02:45:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/"/><author><name>picodotdev</name></author><content type="html">
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/openssl.svg&#34; class=&#34;right &#34; width=&#34;400&#34; alt=&#34;OpenSSL&#34; title=&#34;OpenSSL&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Los certificados no solo sirven para autenticar a un servidor o acceder solo a aquellos en los que confiamos. El servidor también puede autenticar a los clientes mediante un certificado como alternativa a usar un usuario y contraseña ya sea una autenticación &lt;em&gt;BASIC&lt;/em&gt; o un formulario personalizado. Al igual que en el cliente usa el certificado de la autoridad de certificación en la que confía para validar el que presenta el servidor, el servidor puede requerir que el cliente también proporcione un certificado que el servidor valida según las autoridades de certificación en las que confía, en ambos casos el servidor o cliente usan su clave privada para iniciar la conexión segura con el &lt;em&gt;handsake&lt;/em&gt; del &lt;a href=&#34;https://es.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;protocolo TLS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para el ejemplo usaré un servidor web &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt; ejecutado como un contenedor de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; configurado de tal manera que requiere autenticación para el cliente con certificados.&lt;/p&gt;
&lt;p&gt;Inicialmente deberemos generar tres parejas de claves privadas y públicas, una para nuestra propia autoridad de certificación, una clave para el servidor y otra para el cliente. Al mismo tiempo generaré otras tres parejas de claves privadas y públicas para comprobar que cuando se proporciona un certificado incorrecto la autenticación falla.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl genrsa -out ca.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
Generating RSA private key, &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt; bit long modulus
............................................................................................................................................++
.........................................................................................................................................................................................................................................................................................................................................++
e is &lt;span class=&#34;m&#34;&gt;65537&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x010001&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
$ openssl rsa -in ca.key -pubout &amp;gt; ca.pub
$ openssl genrsa -out server.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
$ openssl rsa -in server.key -pubout &amp;gt; server.pub
$ openssl genrsa -out client.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
$ openssl rsa -in ca.key -pubout &amp;gt; client.pub&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa.sh&#34; target=&#34;_blank&#34;&gt;openssl-genrsa.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;-----BEGIN CERTIFICATE-----
MIIJeTCCBWGgAwIBAgIJAMmS/dYrpwDnMA0GCSqGSIb3DQEBBQUAMDExCzAJBgNV
BAYTAkVTMQ4wDAYDVQQIEwVTcGFpbjESMBAGA1UEChMJbG9jYWxob3N0MB4XDTE3
MDQwNzA2NTcxNVoXDTIyMDQwNjA2NTcxNVowMTELMAkGA1UEBhMCRVMxDjAMBgNV
BAgTBVNwYWluMRIwEAYDVQQKEwlsb2NhbGhvc3QwggQiMA0GCSqGSIb3DQEBAQUA
...
-----END CERTIFICATE-----&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.crt&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.crt&#34; target=&#34;_blank&#34;&gt;ca.crt&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;-----BEGIN RSA PRIVATE KEY-----
MIISJwIBAAKCBAEAyq7VfFt8LapGTtrN4zPAp5KdiHc3raAhs7MSGmrmtqYszheS
AGok/xx9RlUrLSgzjhQ22s28OgfKnqKOK1bzcjTj5Uwjc5Tr7RY724924amECHXc
ldJGc3c/BpdbyYboxsTau8BbAk45c61QKeoTGtQ+K4a2/X0oArroTtHOlRFFUB9t
yKSD20Vj80Ks4op/Q7ucEcZ8mr9zAXzhfokK72PLRGWmmvd1NBoHUzbrkNH9A8he
...
-----END RSA PRIVATE KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.key&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.key&#34; target=&#34;_blank&#34;&gt;ca.key&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;-----BEGIN PUBLIC KEY-----
MIIEIjANBgkqhkiG9w0BAQEFAAOCBA8AMIIECgKCBAEAyq7VfFt8LapGTtrN4zPA
p5KdiHc3raAhs7MSGmrmtqYszheSAGok/xx9RlUrLSgzjhQ22s28OgfKnqKOK1bz
cjTj5Uwjc5Tr7RY724924amECHXcldJGc3c/BpdbyYboxsTau8BbAk45c61QKeoT
GtQ+K4a2/X0oArroTtHOlRFFUB9tyKSD20Vj80Ks4op/Q7ucEcZ8mr9zAXzhfokK
...
-----END PUBLIC KEY-----&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.pub&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/ca.pub&#34; target=&#34;_blank&#34;&gt;ca.pub&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl genrsa -out ca-unknown.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
$ openssl rsa -in ca-unknown.key -pubout &amp;gt; ca-unknown.pub
$ openssl genrsa -out server-unknown.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
$ openssl rsa -in server-unknown.key -pubout &amp;gt; server-unknown.pub
$ openssl genrsa -out client-unknown.key &lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;
$ openssl rsa -in ca-unknown.key -pubout &amp;gt; client-unknown.pub&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa-unknown.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-genrsa-unknown.sh&#34; target=&#34;_blank&#34;&gt;openssl-genrsa-unknown.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El siguiente paso es generar los certificados y firmar con la clave y certificado de la autoridad de certificado los certificados del servidor y cliente. Como paso previo a que la autoridad de certificación emita los certificados del servidor y cliente hay que generar una petición de firma de certificado, los archivos &lt;em&gt;.csr&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl req -new -x509 -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -key ca.key -out ca.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Country Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; letter code&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;AU&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:ES
State or Province Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;full name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Some-State&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:Spain
Locality Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, city&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Organization Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, company&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:Blog Bitix Certiticate Authority
Organizational Unit Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, section&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Email Address &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
$ openssl req -new -key server.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Country Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; letter code&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;AU&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:ES
State or Province Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;full name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Some-State&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:Spain
Locality Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, city&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Organization Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, company&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:Blog Bitix
Organizational Unit Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg, section&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:localhost
Email Address &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
Please enter the following &lt;span class=&#34;s1&#34;&gt;&amp;#39;extra&amp;#39;&lt;/span&gt; attributes
to be sent with your certificate request
A challenge password &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
An optional company name &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;:
$ openssl req -new -key client.key -out client.csr
$ openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -in server.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; -out server.crt
Signature ok
&lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ES, &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Spain, &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Blog Bitix, &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; localhost
Getting CA Private Key
$ openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -in client.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; -out client.crt&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req.sh&#34; target=&#34;_blank&#34;&gt;openssl-req.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl req -new -x509 -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -key ca-unknown.key -out ca-unknown.crt
$ openssl req -new -key server-unknown.key -out server-unknown.csr
$ openssl req -new -key client-unknown.key -out client-unknown.csr
$ openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -in server-unknown.csr -CA ca-unknown.crt -CAkey ca-unknown.key -set_serial &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; -out server-unknown.crt
$ openssl x509 -req -days &lt;span class=&#34;m&#34;&gt;1825&lt;/span&gt; -in client-unknown.csr -CA ca-unknown.crt -CAkey ca-unknown.key -set_serial &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; -out client-unknown.crt&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req-unknown.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-req-unknown.sh&#34; target=&#34;_blank&#34;&gt;openssl-req-unknown.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Con la misma herramienta de &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; es posible comprobar si un certificado es válido para una autoridad de certificación en la que se confía, para ello se usa el certificado raiz de la autoridad.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl verify -CAfile ca.crt server.crt
server.crt: OK
$ openssl verify -CAfile ca.crt client.crt
client.crt: OK&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify.sh&#34; target=&#34;_blank&#34;&gt;openssl-verify.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ openssl verify -CAfile ca.crt server-unknown.crt
&lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ES, &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Spain, &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Unknown, &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; localhost
error &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; at &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; depth lookup: unable to get &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; issuer certificate
error server-unknown.crt: verification failed
$ openssl verify -CAfile ca.crt client-unknown.crt
&lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ES, &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Spain, &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Unknown Client
error &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; at &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; depth lookup: unable to get &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; issuer certificate
error client-unknown.crt: verification failed&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify-unknown.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/openssl-verify-unknown.sh&#34; target=&#34;_blank&#34;&gt;openssl-verify-unknown.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Para hacer que el servidor nginx requiera autenticación mediante certificados para el cliente hay que añadir un poco de configuración mediante las directivas &lt;em&gt;ssl&lt;/em&gt; donde se indica el certificado del servidor, la clave privada del servidor, el certificado de la autoridad de certificación contra la que se validarán los certificados de los clientes y finalmente la directiva que establece que se ha de verificar a los clientes mediante certificados.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;http {
...
server {
listen 443;
server_name localhost;
ssl on;
ssl_certificate /etc/nginx/server.crt;
ssl_certificate_key /etc/nginx/server.key;
ssl_client_certificate /etc/nginx/ca.crt;
ssl_verify_client on;
ssl_verify_depth 5;
...
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Con el siguiente archivo descriptor de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; y comando se inicia el servidor web nginx.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.sh&#34; target=&#34;_blank&#34;&gt;docker-compose.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./nginx.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/nginx.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./server.key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/server.key&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./server.crt&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/server.crt&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./ca.crt&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/ca.crt&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;443:443&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;docker-compose.yml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Iniciado el servidor web ya se pueden realizar peticiones y el servidor y el cliente se autenticarán mutuamente. El servidor devolverá el código HTML de la página de bienvenida por defecto con las cabeceras del protocolo HTTP después de realizar el &lt;em&gt;handsake&lt;/em&gt; donde se valida el certificado del servidor.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -v --cacert ca.crt --cert client.crt --key client.key &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://localhost/&amp;#34;&lt;/span&gt;
* Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Request CERT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, CERT verify &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS change cipher, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;localhost
* start date: Jun &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; GMT
* expire date: Jun &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; GMT
* common name: localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;matched&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
* issuer: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:30:06 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class=&#34;m&#34;&gt;612&lt;/span&gt;
&amp;lt; Last-Modified: Tue, &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt;:23:03 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: &lt;span class=&#34;s2&#34;&gt;&amp;#34;58ff85f7-264&amp;#34;&lt;/span&gt;
&amp;lt; Accept-Ranges: bytes
&amp;lt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
body &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
width: 35em&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
margin: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; auto&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Connection &lt;span class=&#34;c1&#34;&gt;#0 to host localhost left intact&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl.sh&#34; target=&#34;_blank&#34;&gt;curl.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Si se intenta realizar una petición sin certificado de cliente o con un certificado de cliente en el que no confié el servidor (que no esté firmado por la autoridad de certificación en la que confía) se devolverá un código de estado 400 que indica que la petición se ha rechazado. También el cliente advertirá si la autoridad de certificación en la que confía no valida el certificado del servidor con un error 400 y título &lt;em&gt;400 The SSL certificate error&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -v --cacert ca.crt &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://localhost/&amp;#34;&lt;/span&gt;
* Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Request CERT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS change cipher, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;localhost
* start date: Jun &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; GMT
* expire date: Jun &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; GMT
* common name: localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;matched&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
* issuer: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; Bad Request
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:30:49 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class=&#34;m&#34;&gt;253&lt;/span&gt;
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class=&#34;nv&#34;&gt;bgcolor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS alert, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
$ curl -v --cacert ca.crt --cert client-unknown.crt --key client-unknown.key &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://localhost/&amp;#34;&lt;/span&gt;
* Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; certificate verify locations:
* CAfile: ca.crt
CApath: none
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Request CERT &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client key exchange &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, CERT verify &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS change cipher, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Finished &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* SSL connection using TLSv1.0 / ECDHE-RSA-AES256-SHA
* ALPN, server accepted to use http/1.1
* Server certificate:
* subject: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;localhost
* start date: Jun &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; GMT
* expire date: Jun &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:16:18 &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; GMT
* common name: localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;matched&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
* issuer: &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ES&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ST&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Spain&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Blog Bitix Certiticate Authority
* SSL certificate verify ok.
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost
&amp;gt; User-Agent: curl/7.54.1
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; Bad Request
&amp;lt; Server: nginx/1.13.0
&amp;lt; Date: Fri, &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;:32:55 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: &lt;span class=&#34;m&#34;&gt;231&lt;/span&gt;
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 The SSL certificate error&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class=&#34;nv&#34;&gt;bgcolor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;The SSL certificate error&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS alert, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
$ curl -v --cacert ca-unknown.crt --cert client.crt --key client.key &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://localhost/&amp;#34;&lt;/span&gt;
* Trying ::1...
* TCP_NODELAY &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
* Connected to localhost &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; port &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#0)&lt;/span&gt;
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; certificate verify locations:
* CAfile: ca-unknown.crt
CApath: none
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Client hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Server hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;IN&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS handshake, Certificate &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* TLSv1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;OUT&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, TLS alert, Server hello &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
* SSL certificate problem: unable to get &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; issuer certificate
* stopped the pause stream!
* Closing connection &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; SSL certificate problem: unable to get &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; issuer certificate
More details here: https://curl.haxx.se/docs/sslcerts.html
curl performs SSL certificate verification by default, using a &lt;span class=&#34;s2&#34;&gt;&amp;#34;bundle&amp;#34;&lt;/span&gt;
of Certificate Authority &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CA&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; public keys &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CA certs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;. If the default
bundle file isn&lt;span class=&#34;s1&#34;&gt;&amp;#39;t adequate, you can specify an alternate file
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; using the --cacert option.
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;If this HTTPS server uses a certificate signed by a CA represented in
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; the bundle, the certificate verification probably failed due to a
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; problem with the certificate (it might be expired, or the name might
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; not match the domain name in the URL).
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;If you&amp;#39;&lt;/span&gt;d like to turn off curl&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s verification of the certificate, use
the -k &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or --insecure&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; option.
HTTPS-proxy has similar options --proxy-cacert and --proxy-insecure.&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl-unknown.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/curl-unknown.sh&#34; target=&#34;_blank&#34;&gt;curl-unknown.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El siguiente &lt;em&gt;script&lt;/em&gt; escrito en lenguaje &lt;a href=&#34;https://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; muestra como desde un programa para la plataforma Java se realiza autenticación mutua y que error da cuando alguno de los certificados es inválido ya sea el del cliente o el del servidor. Generando previamente los &lt;em&gt;keystores&lt;/em&gt; de la autoridad de certificado y del cliente introduciendo como clave en el ejemplo &lt;em&gt;password&lt;/em&gt; cuando se solicita.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ keytool -importcert -keystore ca.jks -trustcacerts -alias ca -file ca.crt
$ openssl pkcs12 -export -out client.p12 -inkey client.key -in client.crt
$ keytool -importkeystore -destkeystore client.jks -srckeystore client.p12 -srcstoretype pkcs12
$ keytool -importcert -keystore ca-unknown.jks -trustcacerts -alias ca -file ca-unknown.crt
$ openssl pkcs12 -export -out client-unknown.p12 -inkey client-unknown.key -in client-unknown.crt
$ keytool -importkeystore -destkeystore client-unknown.jks -srckeystore client-unknown.p12 -srcstoretype pkcs12&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/keytool.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/keytool.sh&#34; target=&#34;_blank&#34;&gt;keytool.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Groovy&#34; data-lang=&#34;Groovy&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Groovy&#34; data-lang=&#34;Groovy&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Grab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;javax.activation&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;activation&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1.1.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Grab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;javax&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;javaee-api&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;7.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@Grab&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;org.glassfish.jersey.core&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;jersey-client&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2.25.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.net.ssl.KeyManagerFactory&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.net.ssl.SSLContext&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.net.ssl.TrustManagerFactory&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.ws.rs.client.Client&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.ws.rs.client.ClientBuilder&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.ws.rs.client.Entity&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.ws.rs.core.Response&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.security.KeyStore&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.glassfish.jersey.SslConfigurator&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildSslClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text/html&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getStatus&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readEntity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Client&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buildSslClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClientBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sslContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildSslContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SSLContext&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buildSslContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SslConfigurator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;trustStoreFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ca.jks&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//.trustStoreFile(&amp;#34;ca-unknown.jks&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;trustStorePassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keyStoreFile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;client.jks&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//.keyStoreFile(&amp;#34;client-unknown.jks&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;keyPassword&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;createSSLContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/MutualCertAuth.groovy&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/MutualCertAuth.groovy&#34; target=&#34;_blank&#34;&gt;MutualCertAuth.groovy&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ groovy MutualCertAuth.groovy
&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
body &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
width: 35em&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
margin: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; auto&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy.sh&#34; target=&#34;_blank&#34;&gt;groovy.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;En caso de que al usar un &lt;em&gt;keystore&lt;/em&gt; con un certificado de una autoridad que no valida el certificado del servidor se producirán un error, también cuando el certificado del cliente no sea válido para el servidor.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ groovy MutualCertAuth.groovy &lt;span class=&#34;c1&#34;&gt;# with code change .trustStoreFile(&amp;#34;ca-unknown.jks&amp;#34;)&lt;/span&gt;
Caught: javax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
javax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at org.glassfish.jersey.client.internal.HttpUrlConnector.apply&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HttpUrlConnector.java:287&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.ClientRuntime.invoke&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ClientRuntime.java:252&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.JerseyInvocation&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;.call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JerseyInvocation.java:684&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.JerseyInvocation&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;.call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JerseyInvocation.java:681&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.internal.Errors.process&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Errors.java:315&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.internal.Errors.process&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Errors.java:297&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.internal.Errors.process&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Errors.java:228&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.process.internal.RequestScope.runInScope&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;RequestScope.java:444&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.JerseyInvocation.invoke&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JerseyInvocation.java:681&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.JerseyInvocation&lt;span class=&#34;nv&#34;&gt;$Builder&lt;/span&gt;.method&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JerseyInvocation.java:411&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.JerseyInvocation&lt;span class=&#34;nv&#34;&gt;$Builder&lt;/span&gt;.get&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;JerseyInvocation.java:311&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at Main.get&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;MutualCertAuth.groovy:19&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at Main&lt;span class=&#34;nv&#34;&gt;$get&lt;/span&gt;.call&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Unknown Source&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at MutualCertAuth.run&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;MutualCertAuth.groovy:43&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at org.glassfish.jersey.client.internal.HttpUrlConnector._apply&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HttpUrlConnector.java:399&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
at org.glassfish.jersey.client.internal.HttpUrlConnector.apply&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HttpUrlConnector.java:285&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
... &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; more
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
... &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
... &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; more
$ groovy MutualCertAuth.groovy &lt;span class=&#34;c1&#34;&gt;# with code change .keyStoreFile(&amp;#34;client-unknown.jks&amp;#34;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;400&lt;/span&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body &lt;span class=&#34;nv&#34;&gt;bgcolor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.13.0&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy-unknown.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/code/groovy-unknown.sh&#34; target=&#34;_blank&#34;&gt;groovy-unknown.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lo anterior es usando la herramienta &lt;em&gt;curl&lt;/em&gt; o un un programa en la plataforma Java, en el caso de querer realizar autenticación mutua con un navegador web como &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; hay que instalar el certificado del cliente y si es necesario el certificado de la autoridad de certificación para que el candado indicativo de la seguridad del protocolo HTTPS se muestre en verde y no indique ningún problema de seguridad en la autenticación del servidor. En Firefox los certificados se añaden en el menú &lt;em&gt;Preferencias &amp;gt; Avanzado &amp;gt; Ver certficados&lt;/em&gt;. En la pestaña &lt;em&gt;Sus certificados&lt;/em&gt; hay que importar el certificado del cliente en formato &lt;em&gt;PKCS12&lt;/em&gt; y en la pestaña &lt;em&gt;Autoridades&lt;/em&gt; el certificado de la autoridad que haya firmado el certificado del servidor, con el botón &lt;em&gt;Importar&lt;/em&gt; se selecciona el archivo &lt;em&gt;crt&lt;/em&gt; de la autoridad. Al introducir la URL y realizar la petición Firefox solicita mediante un diálogo seleccionar el certificado a usar para realizar la autenticación en el servidor.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-bad-request.png&#34; title=&#34;Autenticación mutua fallida&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-bad-request-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-mutual-authorized.png&#34; title=&#34;Autenticación mutua correcta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-mutual-authorized-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-server-cert.png&#34; title=&#34;Certificado del servidor validado por la CA&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-server-cert-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-certs.png&#34; title=&#34;Certificados de cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-certs-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-cas.png&#34; title=&#34;Certificados de la autoridades de certificación&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-cas-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-ca.png&#34; title=&#34;Añadir certificado de CA&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-ca-thumb.png&#34; width=&#34;200&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-select-cert.png&#34; title=&#34;Selección de certificado de cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/images/firefox-select-cert-thumb.png&#34; width=&#34;159&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Autenticación mutua de cliente y servidor con el navegador web Firefox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/MutualCertAuth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up, groovy MutualCertAuth.groovy&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas/&#34;&gt;Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="java"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="programacion"/><category term="seguridad"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/</id><title>Cómo y por que redirigir tráfico web del dominio raíz al subdominio www (o viceversa)</title><updated>2016-08-05T18:00:00+02:00</updated><published>2016-08-05T17:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;La redirección del dominio raíz al subdominio es una de las cosas básicas que es recomendable realizar en todo dominio, para ello hay que añadir algo de configuración propia de cada servidor para realizar la redirección. Junto con usar el uso del protocolo HTTPS y forzar su uso con otra redirección mejoraremos el SEO y evitaremos penalizaciones por contenido duplicado.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/html.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;HTML&#34; title=&#34;HTML&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;El nombre de un dominio está formado por varios subdominios separados por un caracter punto. Están los dominios de nivel superior, los genéricos y más antiguos &lt;em&gt;.com&lt;/em&gt;, &lt;em&gt;.org&lt;/em&gt;, &lt;em&gt;.info&lt;/em&gt;, &lt;em&gt;.net&lt;/em&gt;, los propios de cada país o territoriales &lt;em&gt;.es&lt;/em&gt;, &lt;em&gt;.fr&lt;/em&gt;, &lt;em&gt;.de&lt;/em&gt; y más recientemente un montón de &lt;a href=&#34;https://es.wikipedia.org/wiki/Dominio_de_nivel_superior&#34;&gt;nuevos dominios de nivel superior&lt;/a&gt; (&lt;em&gt;.futbol&lt;/em&gt;, &lt;em&gt;.arte&lt;/em&gt;, &lt;em&gt;.blog&lt;/em&gt;, &lt;em&gt;.madrid&lt;/em&gt;, &amp;hellip;) aunque significativamente más caros. Después del dominio de nivel superior está el subdominio de la empresa, marca o personal, por ejemplo, &lt;em&gt;empresa.com&lt;/em&gt; que es realmente lo que compramos cuando solicitamos registrar un dominio. En nuestro dominio &lt;em&gt;empresa.com&lt;/em&gt; podemos administrar múltiples subdominios los clásicos son &lt;em&gt;www.empresa.com&lt;/em&gt; para el servidor web, &lt;em&gt;smpt.empresa.com&lt;/em&gt; para el correo electrónico, &lt;em&gt;ftp.empresa.com&lt;/em&gt; para la transferencia de archivos y otros cualesquiera que deseemos.&lt;/p&gt;
&lt;p&gt;En el caso del tráfico web debemos evitar que el servidor y la página o aplicación sea accedida por &lt;em&gt;empresa.com&lt;/em&gt; y &lt;em&gt;www.empresa.com&lt;/em&gt; ya que los buscadores tratarán a la página como dos diferentes y posiblemente detectando contenido duplicado que afectará negativamente o penalizando al SEO de la web. Lo que se suele hacer es hacer una &lt;a href=&#34;https://es.wikipedia.org/wiki/HTTP_301&#34;&gt;redirección permanente&lt;/a&gt; (cuyo código de estado HTTP para la respuesta es 301) a nivel de servidor que redirija el tráfico de &lt;em&gt;empresa.com&lt;/em&gt; a &lt;em&gt;www.empresa.com&lt;/em&gt; cuando el usuario acceda con su navegador con la primera.&lt;/p&gt;
&lt;p&gt;Esta es una de las cosas básicas que debemos realizar cuando instalemos un servidor web, otras cosas recomendadas para mejorar el SEO y la seguridad de los usuarios es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;configurar el servidor web para usar el protocolo seguro HTTPS&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;configurar el servidor web para forzar el uso de HTTPS&lt;/a&gt; también haciendo una redirección cuando la petición use el protocolo no cifrado HTTP entre otras cosas que indico en la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/web/&#34;&gt;serie web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dependiendo del servidor web que utilicemos la configuración a añadir para hacer la redirección será distinta, a continuación indicaré como hacerlo en dos de los servidores web más populares como son &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt; y &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Usando Docker y el archivo de configuración completo podemos probar que funciona en local sin necesidad de instalar o cambiar la configuración de Nginx si tenemos instalado su paquete.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/nginx.conf:/etc/nginx/conf.d/default.conf:ro nginx:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/docker-run-nginx.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/docker-run-nginx.sh&#34; target=&#34;_blank&#34;&gt;docker-run-nginx.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;server {
listen 80;
server_name localhost;
return 301 http://www.$host$request_uri;
}
server {
listen 80;
server_name www.localhost;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/nginx.png&#34; title=&#34;Dominio antes de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/nginx-thumb.png&#34; width=&#34;292&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/nginx-www.png&#34; title=&#34;Dominio después de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/nginx-www-thumb.png&#34; width=&#34;292&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Dominio antes y después de acceder al sitio con Nginx&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;apache&#34;&gt;Apache&lt;/h3&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro httpd:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/docker-run-httpd.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/docker-run-httpd.sh&#34; target=&#34;_blank&#34;&gt;docker-run-httpd.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;...
ServerName www.localhost
&amp;lt;VirtualHost *:80&amp;gt;
ServerName localhost
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) http://www.%{SERVER_NAME}$1 [R,L]
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
ServerName www.localhost
DocumentRoot /usr/local/apache2/htdocs
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;httpd.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/httpd.png&#34; title=&#34;Dominio antes de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/httpd-thumb.png&#34; width=&#34;292&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/httpd-www.png&#34; title=&#34;Dominio después de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/images/httpd-www-thumb.png&#34; width=&#34;292&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Dominio antes y después de acceder al sitio con Apache HTTPD&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Si prefieriesemos hacer la redirección al revés, del subdominio www al dominio, variaríamos los valores de los nombres del servidor y los valores de las directivas de redirección. En los enlaces de referencia se incluye un ejemplo de esta configuración.&lt;/p&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/RedirigirSubdominio&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Referencia:
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://easyengine.io/tutorials/nginx/www-non-www-redirection/&#34;&gt;Nginx config for www to non-www and non-www to www redirection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thesitewizard.com/apache/redirect-domain-www-subdomain.shtml&#34;&gt;How to Redirect URLs from Your Root Domain to the WWW Subdomain and Vice Versa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/</id><title>Configurar Nginx para cachear respuestas del servidor de aplicaciones</title><updated>2016-07-31T01:00:00+02:00</updated><published>2016-07-30T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Las caches son un recurso utilizado para aumentar el rendimiento y evitar malgastar recursos. Si una petición es muy costosa pero que no cambia muy a menudo o no se necesitan que los datos estén totalmente actualizados cachear el resultado de esa petición evitará tener que recalcularla para cada petición, si se realizan muchas peticiones el aumento de rendimiento será drásticamente mejor usando además un menor número de recursos de los sistemas. Hay soluciones específicas para cacheo pero si nuestra necesidades no son extremadamente avanzadas el cacheo ofrecido por Nginx probablemente sea suficiente.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/nginx.svg&#34; class=&#34;right &#34; width=&#34;300&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Los servidores web son muy eficientes devolviendo al cliente archivos estáticos. Tradicionalmente el contenido estático formado por hojas de estilo, archivos JavaScript, imágenes o vídeos de una página o aplicación web han sido devueltos por un servidor web evitando que el servidor de aplicaciones tenga que procesar una gran cantidad de peticiones, aún hoy se sigue haciendo. En caso de que los recursos estáticos estén alojados en el servidor de aplicaciones en vez de en el servidor web, porque los recursos estáticos se empaquetan con la aplicación, el servidor web puede cachearlos evitando que peticiones lleguen al servidor de aplicaciones. En este artículo comentaré cual es la configuración necesaria a añadir en el servidor web &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt; que hace de &lt;em&gt;proxy&lt;/em&gt; para que cachee el resultado de las peticiones así indicadas del servidor de aplicaciones, la aplicación genera el contenido y establece las cabeceras de cache indicando como quiere que se cachee el contenido devuelto.&lt;/p&gt;
&lt;p&gt;Para que el servidor web realice el cacheo de los recursos en la aplicación esta ha de devolver en las cabeceras de respuesta como quiere que los recursos sean cacheados usando las cabeceras &lt;em&gt;Last-Modified&lt;/em&gt;, &lt;em&gt;Expires&lt;/em&gt;, &lt;em&gt;Cache-Control&lt;/em&gt; quizá &lt;em&gt;Etag&lt;/em&gt;. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/&#34;&gt;Las cabeceras de cache del protocolo HTTP&lt;/a&gt; establecen el comportamiento deseado para la cache.&lt;/p&gt;
&lt;p&gt;Hay que modificar el archivo de configuración de Nginx para que cachee el contenido. La directiva &lt;em&gt;proxy_cache_path&lt;/em&gt; indica donde se guardarán el contenido cacheado, cual es el tamaño de los metadatos de la caché y el tiempo de inactividad para cachear pasado el cual los recursos serán descartables. La directiva &lt;em&gt;proxy_cache_key&lt;/em&gt; permite diferenciar los recursos en la cache, &lt;em&gt;add_header X-Proxy-Cache&lt;/em&gt; añade una cabecera para la respuesta de Nginx con el resultado de cache que nos permite conocer si se produjo un acierto en la caché, un fallo o se ignoró la cache. Lo que es útil para depurar la aplicación u obtener información. Con &lt;em&gt;proxy_pass&lt;/em&gt; hacemos que Nginx haga de &lt;em&gt;proxy&lt;/em&gt; para el servidor de aplicaciones o la aplicación.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;proxy_cache_path /tmp/nginx levels=1:2 keys_zone=localhost_zone:10m inactive=60m;
proxy_cache_key &amp;#34;$scheme$request_method$host$request_uri&amp;#34;;
server {
listen 80;
location / {
proxy_cache localhost_zone;
add_header X-Proxy-Cache $upstream_cache_status;
proxy_pass http://java:4567;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;java&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;java&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;../build/libs/&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/mnt/app/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;java&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-classpath&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/mnt/app/*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;io.github.picodotdev.blogbitix.cache.Main&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./nginx.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/conf.d/default.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;links&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;java&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;docker-compose.yml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;La siguiente pequeña aplicación Java que usa el &lt;a href=&#34;https://spark.apache.org/&#34;&gt;framework Spark&lt;/a&gt; expone dos recursos para probar el funcionamiento de cache de Nginx, un recurso añade cabeceras de cacheo para la respuesta y otro no añade las cabeceras de respuesta. Atendiendo a las cabeceras establecidas por la aplicación y Nginx configurado para hacer de &lt;em&gt;proxy&lt;/em&gt; y cache devolverá el contenido deseado de su cache o solicitándolo a la aplicación y cacheándolo si así se indica en las cabeceras de respuesta.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;err&#34;&gt;package io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;picodotdev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;blogbitix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;import java&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;import java&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;util&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;import static &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Spark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;public class &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;public static void main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;String[] args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/nocache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/cache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Cache-Control&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;max-age=60&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Etag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;randomUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;private static String getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;¡Hola mundo! (%s)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/Main.java&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/Main.java&#34; target=&#34;_blank&#34;&gt;Main.java&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;La primera petición que se realiza al recurso &lt;em&gt;cache&lt;/em&gt; devuelve un &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#2xx:_Peticiones_correctas&#34;&gt;código de estado 200 de HTTP&lt;/a&gt; y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; indica que se ha producido un &lt;em&gt;MISS&lt;/em&gt; o fallo en la cache, la segunda petición realizada antes de que pase el minuto del tiempo de expiración devuelve un &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#3xx:_Redirecciones&#34;&gt;código de estado 304&lt;/a&gt; y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; un &lt;em&gt;HIT&lt;/em&gt; o acierto en la cache, finalmente pasado más de un minuto del tiempo de expiración se devuelve un código de estado 200 y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; un &lt;em&gt;EXPIRED&lt;/em&gt;. En las trazas de Nginx vemos las peticiones que se producen sus códigos de estado y después de este los bytes transferidos de contenido, nótese que en los casos de los 304 los bytes transferidos son 0, bytes de datos ahorrados y evitado que la petición llegue a la aplicación que son unos de los objetivos de las caches. En el recurso &lt;em&gt;nocache&lt;/em&gt; de la aplicación Nginx no cachea el contenido devuelto ya que en este no se establecen las cabeceras de cache en la respuesta.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-miss.png&#34; title=&#34;Fallo en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-miss-thumb.png&#34; width=&#34;207&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-hit.png&#34; title=&#34;Acierto en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-hit-thumb.png&#34; width=&#34;207&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-expired.png&#34; title=&#34;Expiración en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/nginx-cache-peticion-expired-thumb.png&#34; width=&#34;207&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/curl-cache-miss-hit-expired.png&#34; title=&#34;Fallo, acierto y expiración en la cache de Nginx con curl&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/images/curl-cache-miss-hit-expired-thumb.png&#34; width=&#34;252&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Fallo, acierto y expiración que produce en la cache de Nginx al realizar peticiones&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;nginx_1 | 172.17.0.1 - - [30/Jul/2016:10:43:20 +0000] &amp;#34;GET /cache HTTP/1.1&amp;#34; 200 50 &amp;#34;-&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0&amp;#34; &amp;#34;-&amp;#34;
nginx_1 | 172.17.0.1 - - [30/Jul/2016:10:43:56 +0000] &amp;#34;GET /cache HTTP/1.1&amp;#34; 304 0 &amp;#34;-&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0&amp;#34; &amp;#34;-&amp;#34;
nginx_1 | 172.17.0.1 - - [30/Jul/2016:10:45:04 +0000] &amp;#34;GET /cache HTTP/1.1&amp;#34; 200 50 &amp;#34;-&amp;#34; &amp;#34;Mozilla/5.0 (X11; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0&amp;#34; &amp;#34;-&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/nginx.out&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/nginx.out&#34; target=&#34;_blank&#34;&gt;nginx.out&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -X GET -I http://localhost/cache
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/curl-cache.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/code/curl-cache.sh&#34; target=&#34;_blank&#34;&gt;curl-cache.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hay servidores específicos para realizar tareas de cache como &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt; con más opciones de las que ofrece Nginx. Para los casos no complicados usando Nginx evitamos añadir una nueva pieza a la arquitectura de la aplicación. Entre los productos que ofrece Amazon está &lt;a href=&#34;https://aws.amazon.com/es/cloudfront/&#34;&gt;Cloudfront&lt;/a&gt; que es una cache para recursos estáticos con el añadido de que de forma automática está distribuida geográficamente de forma que los recursos se sirven por un servidor más cercano al cliente evitando un mal rendimiento por la latencia. En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/&#34;&gt;servir recursos estáticos de un CDN en Apache Tapestry&lt;/a&gt; comento como usar esta red de distribución de contenido ofrecida por Amazon.&lt;/p&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/NginxCache&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build, cd docker, docker-compose up&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/&#34;&gt;Servir recursos estáticos desde un CDN en Apache Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://serversforhackers.com/nginx-caching&#34;&gt;Nginx Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/</id><title>Las cabeceras de cache del protocolo HTTP</title><updated>2016-07-24T22:00:00+02:00</updated><published>2016-07-22T18:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Establecer directivas de cacheo en los recursos devueltos en una página o aplicación web tiene las ventajas de reducir el número de peticiones que llegan al servidor mejorando la latencia y el rendimiento pudiendo atender a más usuarios y mejora los tiempos de carga de las páginas. Usando varias directivas de cacheo la aplicación es capaz de determinar cómo quiere que el contenido devuelto o los recursos sean cacheados por los clientes o servidores de cache intermedios.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/html.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;HTML&#34; title=&#34;HTML&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Cachear aquella información que es costosa de generar y es muy solicitada consigue por un lado evitar que el servidor sea capaz de atender todo el tráfico reduciendo la cantidad de capacidad necesaria del servidor y por otro lado consigue que la información sea devuelta en menor tiempo. Para aquella información que no necesite estar completamente actualizada o que no cambia cada poco tiempo es candidata a cachearla en caso necesario. La cache se puede realizar en los navegadores guardando estos recursos como imágenes y hojas de estilos que consiguen reducir el número de peticiones al servidor y mostrando la página más rápidamente al usuario. La cache también se puede hacer en el lado del servidor usando soluciones específicas como &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt;, &lt;a href=&#34;https://memcached.org/&#34;&gt;memcached&lt;/a&gt; o para los casos más habituales que serán la mayoría las funcionalidades incorporadas en el servidor web como en el caso de &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El cacheo o almacenamiento temporal de datos puede hacerse a diferentes niveles sin ser exclusivos y de diferentes tipos de información. En la base de datos, en la aplicación, a nivel de página, con servidor intermedio o en el cliente.&lt;/p&gt;
&lt;p&gt;Según la cantidad de tiempo de expiración que establezcamos como cache para el contenido conseguiremos variar el número de aciertos en la cache, aumentando el tiempo unos pocos segundos el tiempo que almacenamos en la cache el contenido conseguimos aumentar el porcentaje de aciertos en mayor medida. Con un tiempo de cache de un minuto ya se consiguen porcentajes elevados de aciertos según el número de peticiones realizadas en ese periodo de tiempo.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/images/cache-hit.png&#34; title=&#34;Petición con acierto en cache&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/images/cache-hit-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/images/cache-miss.png&#34; title=&#34;Petición con fallo en cache&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/images/cache-miss-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Petición con acierto y fallo en la cache&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;En el protocolo HTTP 1.1 se definieron tres mecanismos para las caches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validez: permite usar un recurso sin hacer ninguna comprobación con el servidor ni para revalidarlo. Por ejemplo, la cabecera &lt;em&gt;Expires&lt;/em&gt; indica en que momento el recurso puede haberse quedado obsoleto y se debería revalidar. La cabecera &lt;em&gt;Cache-Control: max-age&lt;/em&gt; indica durante cuanto tiempo el recurso puede considerarse válido. Esto evita hacer peticiones al servidor si los recursos se consideran válidos.&lt;/li&gt;
&lt;li&gt;Validación: una vez que un recurso se considera que puede ser obsoleto se debería comprobar haciendo una petición al servidor para conocer si sigue siendo válido y si no lo es obtener una nueva versión. Usando las cabeceras &lt;em&gt;If-Modified-Since&lt;/em&gt; o &lt;em&gt;Etag&lt;/em&gt; puede comprobarse si el recurso ha sido modificado con posterioridad a una fecha o ha variado. Se ha de hacer una petición para comprobar la validez del recurso pero los casos que sigan siendo válidos no hará falta descargarlos de nuevo. Si el recurso sigue siendo válido el servidor responde con el &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#3xx:_Redirecciones&#34;&gt;código de estado 304&lt;/a&gt; y sin el contenido en la respuesta.&lt;/li&gt;
&lt;li&gt;Invalidación: las peticiones que usen los métodos &lt;em&gt;PUT&lt;/em&gt;, &lt;em&gt;POST&lt;/em&gt; y &lt;em&gt;DELETE&lt;/em&gt; pueden invalidar recursos ya que modifican el estado del servidor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El servidor especifica como quiere que el contenido o recursos que devuelve sean cacheados a través de varias directivas del protocolo HTTP, establecidas como cabeceras en la respuesta cuando se solicita el contenido o recurso. Algunas cabeceras realizan funciones similares habiendo cierto solapamiento de funcionalidad. Son las siguientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache-Control: private | public, no-cache, no-store, max-age, s-maxage, must-revalidate, no-transform, proxy-revalidate
&lt;ul&gt;
&lt;li&gt;El valor &lt;em&gt;private&lt;/em&gt; indica que el recurso es privado para el usuario y no debería ser cacheado. Esto no hace el recurso más seguro ya que la información no se transmite cifrada para ello hay que &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;usar un protocolo seguro con TLS/SSL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-cache&lt;/em&gt; el recurso no debería ser cacheado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-store&lt;/em&gt; el recurso no debería ser almacenado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;max-age&lt;/em&gt; normalmente se ha usado la directiva &lt;em&gt;Expires&lt;/em&gt; pero esta permite establecer el máximo tiempo especificado en segundos a cachear un recurso.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;s-maxage&lt;/em&gt; similar a max-age pero para las caches intermedias entre el cliente y el servidor.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;must-revalidate&lt;/em&gt; cuando un recurso se queda obsoleto no se debe usar sin antes validar contra el servidor si sigue siendo válido.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-transform&lt;/em&gt; indica que el contenido original no debe ser modificado, por ejemplo, modificando el recurso para optimizarlo si por ejemplo se trata de una imagen.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;proxy-revalidate&lt;/em&gt; lo mismo que &lt;em&gt;must-revalidate&lt;/em&gt; pero para las caches intermedias.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If-Modified-Since: si el recurso solicitado con su variante no ha sido modificado con posterioridad a una fecha se devolverá un código de estado 304 sin el contenido.&lt;/li&gt;
&lt;li&gt;Expires: es una marca de tiempo que indica cuando el recurso expira, dado que se basa en el tiempo no es muy precisa ya que los relojes de cada ordenador no están perfectamente sincronizados y hay variaciones incluso de minutos. Preferiblemente es mejor usar &lt;em&gt;Etag&lt;/em&gt; o &lt;em&gt;max-age&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/HTTP_ETag&#34;&gt;Etag&lt;/a&gt;: &lt;em&gt;entity-tag&lt;/em&gt; o &lt;em&gt;etag&lt;/em&gt; es un código &lt;em&gt;hash&lt;/em&gt; único del contenido que permite conocer si el recurso ha cambiado. Si el recurso no ha cambiado no hace falta devolver el recurso, si ha cambiado se devuelve en la misma petición. Al no depender de una marca de tiempo como &lt;em&gt;Expires&lt;/em&gt; o &lt;em&gt;max-age&lt;/em&gt; es más fiable.&lt;/li&gt;
&lt;li&gt;Vary: indica que el recurso varía según alguna cabecera proporcionada por el cliente como por ejemplo &lt;em&gt;User-Agent&lt;/em&gt; o &lt;em&gt;Accept-Encoding&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Pragma: esta es una directiva antigua que indicada como &lt;em&gt;pragma: no-cache&lt;/em&gt;, se interpreta como &lt;em&gt;cache-control: no-cache&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.mobify.com/blog/beginners-guide-to-http-cache-headers/&#34;&gt;A Beginner&amp;rsquo;s Guide to HTTP Cache Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&#34;&gt;Header Field Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14.html&#34;&gt;Capítulo 14. La caché de HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14/introduccion_a_la_cache_de_http.html&#34;&gt;14.3. Introducción a la caché de HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14/caducidad_y_validacion_http.html&#34;&gt;14.4. Caducidad y validación HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/</id><title>Cómo crear un proxy inverso entre el servidor web Nginx y un servidor de aplicaciones Java</title><updated>2016-07-16T13:30:00+02:00</updated><published>2016-07-15T18:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Continuando la serie de artículos sobre varios aspectos realizados muy comúnmente en las aplicaciones y servidores web en este artículo explicaré como hacer que un servidor web nginx haga de &lt;em&gt;proxy&lt;/em&gt; inverso para un servidor de aplicaciones Java en este caso Tomcat.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/nginx.svg&#34; class=&#34;right &#34; width=&#34;300&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/tomcat.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Tomcat&#34; title=&#34;Tomcat&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Las aplicaciones web dinámicas Java se despliegan en un contenedor de &lt;em&gt;servlets&lt;/em&gt; o un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/&#34;&gt;servidor de aplicaciones como WildFly&lt;/a&gt; que implementa las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;especificaciones de los estándares de Java EE&lt;/a&gt; pero es habitual que los usuarios no accedan directamente al contenedor de aplicaciones Java sino que se ponga delante un servidor web como &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; o &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt; con la tarea de que realice algunas tareas. Las tareas que puede realizar un servidor web son varias como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;Realizar la conexión TLS/SSL&lt;/a&gt; sin necesidad de que llegue al servidor de aplicaciones.&lt;/li&gt;
&lt;li&gt;Servir el contenido estático.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/&#34;&gt;Balanceo de carga&lt;/a&gt; con la que podremos tener varios servidores de aplicaciones Java en caso de que la aplicación deba soportar muchos usuarios.&lt;/li&gt;
&lt;li&gt;Cacheo de páginas y contenido.&lt;/li&gt;
&lt;li&gt;Redirecciones y reescritura de URL.&lt;/li&gt;
&lt;li&gt;Seguridad.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/&#34;&gt;Forzar el uso del protocolo seguro HTTPS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;Ofrecer el protocolo HTTP/2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/images/reverse-proxy.png&#34; title=&#34;Esquema de un proxy inverso&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/images/reverse-proxy.png&#34; width=&#34;400&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Un proxy inverso recibe las peticiones de internet y las reenvía a los servidores de una red interna sin necesidad de que los clientes conozcan la red interna&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Para que un servidor web como Nginx actúe como &lt;em&gt;proxy&lt;/em&gt; inverso o &lt;em&gt;reverse proxy&lt;/em&gt; para un servidor de aplicaciones debemos añadir unas pocas directivas al archivo de configuración del servidor web. En el caso de Nginx usando la directiva &lt;em&gt;proxy_pass&lt;/em&gt; donde indicamos para una localización la URL del servidor de aplicaciones a la que se le solicitará el contenido, en el ejemplo usando un servidor &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;server {
listen 80;
location / {
proxy_pass http://tomcat:8080;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-Proto https;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Una forma fácil de probarlo es usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; que en varios artículos introductorios siendo el primero el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/11/inicio-basico-de-docker/&#34;&gt;inicio básico de Docker&lt;/a&gt; comento como empezar a usarlo y en que consiste esta nueva forma de ejecución para las aplicaciones. Con el siguiente archivo de Docker Compose creamos dos contenedores uno para Nginx en el que proporcionamos su configuración personalizada y otro contenedor para Tomcat.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;tomcat&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./nginx.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/conf.d/default.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;links&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;docker-compose.yml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Al hacer un &lt;em&gt;proxy&lt;/em&gt; inverso debemos tener en cuenta que el servidor Tomcat si devuelve URL absolutas las haga siendo las del servidor web por las que se accede a la aplicación, si únicamente genera URL relativas no deberemos hacer nada pero en el caso de absolutas el servidor Tomcat deberá conocer el protocolo usado en el servidor web (HTTP o HTTPS) y el puerto del servidor web que suele ser 80 para HTTP y 443 para HTTPS pero que en el servidor Tomcat suele ser 8080 para HTTP y 8443 para HTTPS. Si el protocolo y puerto usado en el servidor web y servidor de aplicaciones es diferente y una aplicación genera URL absolutas el servidor de aplicaciones deberá tener esto en cuenta que es lo que se usa el en servidor web.&lt;/p&gt;
&lt;p&gt;En la documentación se comentan varios &lt;a href=&#34;https://tomcat.apache.org/tomcat-8.0-doc/config/http.html&#34;&gt;parámetros de configuración de Tomcat&lt;/a&gt; como &lt;em&gt;proxyPort&lt;/em&gt; y &lt;em&gt;scheme&lt;/em&gt; que ajustan la información devuelta por los métodos &lt;em&gt;request.getServerPort()&lt;/em&gt; y &lt;em&gt;request.getScheme()&lt;/em&gt; y que nos servirá en caso de tener que generar URLs absolutas.&lt;/p&gt;
&lt;p&gt;Arrancado los contenedores con el comando &lt;code&gt;docker-compose up&lt;/code&gt; accediendo al servidor web veremos que el contenido proporcionado es el ofrecido por Tomcat, que con la configuración del ejemplo es la página de inicio de Tomcat. En las cabeceras de respuesta Nginx añade una, &lt;em&gt;Server&lt;/em&gt;, indicando su versión.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/images/nginx-tomcat.png&#34; title=&#34;Nginx configurado como proxy inverso de un servidor de aplicaciones Tomcat&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/images/nginx-tomcat-thumb.png&#34; width=&#34;278&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Nginx configurado como proxy inverso de un servidor de aplicaciones Tomcat&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;En la &lt;a href=&#34;https://www.nginx.com/resources/admin-guide/reverse-proxy/&#34;&gt;documentación sobre &lt;em&gt;reverse proxy&lt;/em&gt; de Nginx&lt;/a&gt; se explican algunas directivas más para pasar al servidor Tomcat la dirección IP del usuario usando cabeceras HTTP, en la configuración de Nginx usando &lt;em&gt;proxy_set_header&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/NginxReverseProxy&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/admin-guide/reverse-proxy/&#34;&gt;NGINX Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elblogdepicodev.blogspot.com.es/2011/02/unir-apache-httpd-y-tomcat-mediante-un.html&#34;&gt;Unir Apache HTTPD y Tomcat mediante un reverse proxy &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/</id><title>Configurar Nginx como balanceador de carga</title><updated>2016-07-09T11:00:00+02:00</updated><published>2016-07-08T17:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Para escalar horizontalmente los servidores de aplicaciones, aumentar el rendimiento, disminuir la latencia, conseguir tolerancia a fallos y aumentar la disponibilidad podemos usar el servidor web Nginx como balanceador de carga entre varios servidores de aplicaciones. En este ejemplo muestro la configuración necesaria para añadir la funcionalidad de balanceador de carga a Nginx entre varios servidores de aplicaciones Tomcat usando además Docker.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/nginx.svg&#34; class=&#34;right &#34; width=&#34;300&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Un balanceador de carga distribuye las peticiones que llegan al servidor entre varios servidores para que las atiendan consiguiendo optimizar el uso de los recursos, aumentar el número de peticiones atendidas por unidad de tiempo, reducir la latencia y proporcionar tolerancia a fallos. Escalar un servidor que deba procesar un gran número de peticiones llegado un límite es más barato escalar horizontalmente añadiendo más servidores que escalar verticalmente usando servidores más potentes.&lt;/p&gt;
&lt;p&gt;Distribuir las peticiones ha de hacerse eficientemente para que un servidor no reciba todas las peticiones pesadas y se sature mientras hay servidores que tienen poca carga. Usando varios servidores para atender las peticiones evita que haya un único punto de fallo en la aplicación proporcionando tolerancia a fallos, si un servidor sufre un fallo el resto de servidores se encargarán de atender las peticiones. Una mejor tolerancia a fallos aumentará la disponibilidad del servicio sin que haya caídas de servicio.&lt;/p&gt;
&lt;p&gt;Hay soluciones específicas para balancear la carga como &lt;a href=&#34;https://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt; pero para los casos sencillos que son los más habituales y para no añadir una pieza más a la arquitectura de la aplicación &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt; es capaz de hacer las funciones de balanceo de carga entre varios servidores de aplicaciones.&lt;/p&gt;
&lt;p&gt;Hay tres estrategias para balancear o distribuir la carga:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;round-robin&lt;/em&gt;: las peticiones son distribuidas entre los servidores de forma cíclica. Cabe la posibilidad de que las peticiones más pesadas sean procesadas por el mismo servidor, distribuye las peticiones de forma ecuánime pero la carga no.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;least-connected&lt;/em&gt;: la siguiente petición es atendida por el servidor con menos conexiones activas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ip-hash&lt;/em&gt;: se selecciona el servidor que atenderá la petición en base a algún dato como la dirección IP, de esta forma todas las peticiones de un usuario son atendidas por el mismo servidor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esta es la configuración básica con la estrategia &lt;em&gt;round-robin&lt;/em&gt;. Los servidores balanceados se definen con la directiva &lt;em&gt;upstream&lt;/em&gt; a los que se hace de &lt;em&gt;proxy&lt;/em&gt; inverso con la directiva &lt;em&gt;proxy_pass&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;upstream app {
server app1:8080;
server app2:8080;
server app3:8080;
}
server {
listen 80;
location / {
proxy_pass http://app;
add_header X-Upstream $upstream_addr;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Para usar la estrategia &lt;em&gt;least-coneccted&lt;/em&gt; hay que indicar la directiva &lt;em&gt;least_conn&lt;/em&gt; en la directiva &lt;em&gt;upstream&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;upstream app {
least_conn;
server app1:8080;
server app2:8080;
server app3:8080;
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-least_conn.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-least_conn.conf&#34; target=&#34;_blank&#34;&gt;nginx-least_conn.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hay que tener en cuenta que en las estrategias &lt;em&gt;round-robin&lt;/em&gt; y &lt;em&gt;least-conected&lt;/em&gt; cada petición probablemente sea atendida por un servidor diferente de modo que si los servidores no comparten las sesiones se producirán comportamientos erráticos. Usando la estrategia &lt;em&gt;ip_hash&lt;/em&gt; se usará la dirección IP para redirigir todas las peticiones al mismo servidor que se conoce como &lt;em&gt;sticky session&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;upstream app {
ip_hash;
server app1:8080;
server app2:8080;
server app3:8080;
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-ip_hash.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-ip_hash.conf&#34; target=&#34;_blank&#34;&gt;nginx-ip_hash.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Para que los servidores compartan la sesión y evitar usar &lt;em&gt;sticky session&lt;/em&gt; podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/03/datos-de-sesion-externalizados-con-spring-session/&#34;&gt;usar Redis como sistema de información para guardar las sesiones de los servidores&lt;/a&gt;, si un servidor de aplicaciones deja de funcionar las sesiones que mantuviese no se perderán y las peticiones podrán ser atendida por cualquier servidor. Si hay un servidor que queremos procese más peticiones porque tiene más capacidad podemos dar más peso a este. En esta configuración de cada 5 peticiones 3 serán atendidas por el servidor &lt;em&gt;app1&lt;/em&gt;, 1 por el &lt;em&gt;app2&lt;/em&gt; y otra por &lt;em&gt;app3&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;upstream app {
server app1:8080 weight=3;
server app2:8080;
server app3:8080;
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-weight.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-weight.conf&#34; target=&#34;_blank&#34;&gt;nginx-weight.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Cuando un servidor falla al servir una petición Nginx lo marca como en estado erróneo y deja de enviarle peticiones, los chequeos de salud se hacen de forma pasiva según el resultado de las peticiones que se envían. Con &lt;em&gt;max_fails&lt;/em&gt; se establece el máximo número de fallos antes de considerar un servidor con estado erróneo, tiene un valor por defecto de 1. Con &lt;em&gt;fail_timeout&lt;/em&gt; se establece el tiempo que un servidor se considera que está en estado erróneo antes de enviar una nueva petición, si enviada una nueva petición responde correctamente se vuelve a considerar en estado correcto. Con la directiva &lt;em&gt;health_check&lt;/em&gt; se puede configurar las comprobaciones de estado que hace Nginx para determinar si el servidor de aplicaciones está funcionando correctamente.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;upstream app {
server app1:8080 max_fails=5 fail_timeout=30s;
server app2:8080 max_fails=1 fail_timeout=60s;
server app3:8080;
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-misc.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/nginx-misc.conf&#34; target=&#34;_blank&#34;&gt;nginx-misc.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Si queremos que el cliente conozca que servidor atendió la petición podemos añadir la &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header&#34;&gt;directiva &lt;em&gt;add_header&lt;/em&gt;&lt;/a&gt; usando una de las &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_upstream_module.html#variables&#34;&gt;variables añadidas por el módulo &lt;em&gt;ngx_http_upstream&lt;/em&gt;&lt;/a&gt;, nos servirá para depurar la aplicación en tiempo de desarrollo.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-1.png&#34; title=&#34;Servidor balanceado 172.17.0.2:8080&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-1-thumb.png&#34; width=&#34;224&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-2.png&#34; title=&#34;Servidor balanceado 172.17.0.3:8080&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-2-thumb.png&#34; width=&#34;224&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-3.png&#34; title=&#34;Servidor balanceado 172.17.0.4:8080&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/images/nginx-load-balancer-3-thumb.png&#34; width=&#34;224&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Nginx balanceando la carga entre 3 servidores de aplicaciones Tomcat&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;En el ejemplo de configuración usaré &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; para crear un servidor web Nginx que haga de balanceador de carga entre tres servidores de aplicaciones Tomcat. Con Docker hacer esta prueba es mucho más sencilla que instalar tres Tomcats y un servidor Nginx a travbés de los paquetes del sistema o descargando binarios, puedes leer los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;artículos de la serie Docker&lt;/a&gt; que he escrito para conocer como usarlo y que ofrece esta útil herramienta. El archivo de &lt;em&gt;docker-compose.yml&lt;/em&gt; completo es el siguiente:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;app1&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;app2&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;app3&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;image&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nginx&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;alpine&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;volumes&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./nginx.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/etc/nginx/conf.d/default.conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;ro&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;links&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;app1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;app2&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;app3&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ports&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/code/docker-compose.yml&#34; target=&#34;_blank&#34;&gt;docker-compose.yml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/NginxLoadBalancer&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/load_balancing.html&#34;&gt;Using NGINX as HTTP load balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/load-balancing-with-nginx-plus/&#34;&gt;Load Balancing with NGINX and NGINX Plus, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/load-balancing-with-nginx-plus-part2/&#34;&gt;Load Balancing with NGINX and NGINX Plus, Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/admin-guide/load-balancer/&#34;&gt;NGINX Load Balancing - HTTP Load Balancer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/</id><title>Cómo optimizar un sitio web con compresión GZIP en Nginx y Apache HTTPD</title><updated>2016-07-02T12:30:00+02:00</updated><published>2016-07-02T12:30:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Comprimir el contenido es de utilidad para aquellos usuarios a los que se les factura por los datos transmitidos o tienen límites de transferencia en sus contratos con los proveedores de banda ancha o red móvil. Modificando la configuración del servidor web que usemos haremos que nuestra página o aplicación web comprima el contenido que envía a los navegadores de los usuarios reduciendo los datos transferidos y optimizando el sitio web.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/nginx.svg&#34; class=&#34;right &#34; width=&#34;300&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Apache HTTPD&#34; title=&#34;Apache HTTPD&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Con las velocidades de transferencia que proporciona la fibra, el ADSL incluso el 4G o 3G de los móviles transmitir el contenido de una web desde el servidor al cliente ya no es el factor más determinante en el tiempo de carga de una página, lo es más la latencia de la red y el establecimiento de múltiples conexiones. Aún así hay usuarios que por una red de baja calidad o que esté saturada pueden tener tasas de transferencia bajas o puede que al usuario se le facture por la cantidad de datos que transmite. Por estos motivos aún hoy es buena idea activar en el servidor la compresión GZIP para que los datos transmitidos se compriman y reduzcan de forma significativa. La compresión GZIP es una optimización que podemos realizar para cualquier página web. Para mejorar la latencia en el establecimiento de conexiones es aconsejable &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;configurar HTTP/2 en el servidor web&lt;/a&gt; para mejorar la velocidad de carga de la página.&lt;/p&gt;
&lt;p&gt;Dependiendo del servidor web la configuración que deberemos añadir será diferente, en este artículo mostraré la configuración a usar para dos de los servidores web más populares en internet, que son &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt; y &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Usando varias &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&#34;&gt;directivas de Nginx para la compresión&lt;/a&gt; la activamos, establecemos el nivel de compresión, el tamaño de los &lt;em&gt;buffers&lt;/em&gt; dedicados a la compresión y finalmente los &lt;em&gt;mimetypes&lt;/em&gt; de los archivos que queremos sean comprimidos antes de enviarse al cliente (el texto plano, contenido CSS, JSON, XML, RSS y JavaScript). El &lt;em&gt;mimetype&lt;/em&gt; &lt;em&gt;text/html&lt;/em&gt; no hace falta indicarlo porque siempre está activo y para los formatos de archivos que ya están comprimidos es innecesario como fotos o vídeos.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;server {
listen 80;
server_name localhost;
gzip on;
gzip_disable &amp;#34;msie6&amp;#34;;
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Para probarlo usaré un contenedor de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; en el que personalizaré la configuración y usaré mi propia bitácora como página web a servir. Para conocer Docker puedes consultar otra &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;serie de artículos sobre Docker&lt;/a&gt; dedicados a esta tecnología de contenedores. Escrito el archivo de configuración, el contenedor se inicia con:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm --name nginx -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/nginx.conf:/etc/nginx/conf.d/default.conf:ro -v /home/picodotdev/Software/personal/git/blog-bitix/public:/usr/share/nginx/html:ro nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/docker-nginx.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/docker-nginx.sh&#34; target=&#34;_blank&#34;&gt;docker-nginx.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;En la siguiente captura se aprecia que Nginx devuelve la cabecera de respuesta &lt;em&gt;Content-Enconfing: gzip&lt;/em&gt; indicando que el contenido ha sido comprimido antes de su transmisión por la red. Haciendo que Nginx haga de servidor web para mi propia bitácora se pueden apreciar la significativa diferencia en kilobytes transmitidos entre el tamaño que tienen y lo transferido para algunos recursos. Por ejemplo, el HTML de la página de inicio tiene un tamaño sin comprimir de 34,11 KB y comprimido un tamaño mucho menor 8,38 KB, una diferencia de 25,73 KB aproximadamente un ratio de compresión del 75%. Para el recurso &lt;em&gt;bootstrap.min.css&lt;/em&gt; que ya está minificado eliminando caracteres innecesarios es aún más significativo de 118,43 KB a 23,36, 95,04 KB menos un 80% de reducción.&lt;/p&gt;
&lt;p&gt;Unos pocos kilobytes no son mucho para un único recurso pero si tenemos en cuenta que una página tiene varias docenas y hacemos una multiplicación por cada acceso a una página la cantidad de datos ahorrados en la transferencia es notable.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/nginx-no-gzip.png&#34; title=&#34;Nginx configurado sin compresión GZIP&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/nginx-no-gzip-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/nginx-gzip.png&#34; title=&#34;Nginx configurado con compresión GZIP&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/nginx-gzip-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Nginx configurado sin y con compresión GZIP&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;apache-httpd&#34;&gt;Apache HTTPD&lt;/h3&gt;
&lt;p&gt;Activado el módulo para realizar la compresión al igual que el caso de Nginx podemos establecer la cantidad de memoria reservada para la compresión, el nivel de compresión y los &lt;em&gt;mimetypes&lt;/em&gt; del contenido a comprimir. Con las &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_deflate.html&#34;&gt;directivas adicionales de la documentación&lt;/a&gt; se puede personalizar aún más el proceso de compresión.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;LoadModule deflate_module modules/mod_deflate.so
...
&amp;lt;VirtualHost *:80&amp;gt;
ServerName localhost
DocumentRoot /usr/local/apache2/htdocs
SetOutputFilter DEFLATE
DeflateBufferSize 8096
DeflateCompressionLevel 6
AddOutputFilterByType DEFLATE text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;httpd.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm --name apache -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro -v /home/picodotdev/Software/personal/git/blog-bitix/public:/usr/local/apache2/htdocs:ro httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/docker-httpd.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/code/docker-httpd.sh&#34; target=&#34;_blank&#34;&gt;docker-httpd.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Vemos una reducción en la transferencia similar a la conseguida en Nginx. En Apache el recurso a servir ha de tener cierto tamaño siendo de unos pocos bytes opta por servirlo sin comprimir ya que considerará que no producirá un ahorro significativo.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/apache-httpd-no-gzip.png&#34; title=&#34;Apache HTTPD configurado sin compresión GZIP&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/apache-httpd-no-gzip-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/apache-httpd-gzip.png&#34; title=&#34;Apache HTTPD configurado con compresión GZIP&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/images/apache-httpd-gzip-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Apache HTTPD configurado sin y con compresión GZIP&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;La compresión se hace en cada petición que se hace al servidor que con los avanzados procesadores actuales con eficientes instrucciones específicas para la tarea implementadas en el hardware salvo un tráfico muy elevado no tiene por que notarse en gran medida el procesado de cada recurso. Si el tráfico fuese elevado y la carga de compresión se notase Nginx y Apache ofrecen la posibilidad de &lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html&#34;&gt;precomprimir los recursos&lt;/a&gt; y de forma similar &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_deflate.html#precompressed&#34;&gt;precomprimir los recursos en apache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La compresión es otra de las configuraciones básicas aconsejable hacer en un servidor web junto con:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Añadir cifrado y autenticación con TLS/SSL.&lt;/li&gt;
&lt;li&gt;Añadir el soporte para el protocolo HTTP/2 que ya incluyen los navegadores.&lt;/li&gt;
&lt;li&gt;Redirigir el tráfico del dominio raíz al subdominio www.&lt;/li&gt;
&lt;li&gt;Redirigir el tráfico de HTTP a HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas funcionalidades las puedes consultar en el resto de artículos de la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/web/&#34;&gt;serie web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/CompresionGzip&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./docker-nginx.sh o ./docker-httpd.sh&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&#34;&gt;Module ngx_http_gzip_module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_deflate.html&#34;&gt;Apache Module mod_deflate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/&#34;&gt;How To Optimize Your Site With GZIP Compression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/</id><title>Cómo redirigir peticiones de HTTP a HTTPS en Nginx, Apache, Tomcat, Jetty y WildFly</title><updated>2016-06-18T13:00:00+02:00</updated><published>2016-06-18T13:00:00+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Usar el protocolo seguro HTTPS proporciona confidencialidad en la comunicación entre el navegador del usuario y el servidor, es una forma de mejorar la seguridad y privacidad. Por ello el buscador de Google lo tiene en cuenta como un parámetro que afecta al SEO siendo mejor usar el protocolo seguro. Sin embargo, el usuario puede estar accediendo por el protocolo no seguro a la página web al poner la dirección en la barra de direcciones o hay enlaces hacia nuestro sitio en otros que hacen uso del protocolo HTTP. Si queremos que nuestro sitio sea accedido únicamente usando el protocolo seguro deberemos hacer una redirección en el servidor.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/nginx.svg&#34; class=&#34;right &#34; width=&#34;300&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache.svg&#34; class=&#34;right &#34; width=&#34;200&#34; alt=&#34;Apache HTTPD&#34; title=&#34;Apache HTTPD&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;Si tenemos una aplicación o una bitácora que hasta el momento era accedido por el protocolo no cifrado &lt;abbr title=&#34;Hypertext Transfer Protocol&#34;&gt;HTTP&lt;/abbr&gt; ahora que Google tiene en cuenta para el &lt;abbr title=&#34;Search engine optimization&#34;&gt;SEO&lt;/abbr&gt; que usar el protocolo seguro es un parámetro que tiene en cuenta el algoritmo de posicionamiento en el buscador quizá queramos redirigir todo el tráfico de HTTP al protocolo cifrado &lt;abbr title=&#34;Hypertext Transfer Protocol Secure&#34;&gt;HTTPS&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;Para usar HTTPS deberemos primero &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;configurar el protocolo TLS/SSL en el servidor web o de aplicaciones&lt;/a&gt; usando un certificado SSL que podemos obtener ahora con &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; de forma gratuita o &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/&#34;&gt;generar un certificado&lt;/a&gt; nosotros y que sea firmado por una autoridad de confianza. Una vez que el servidor es capaz de servir el tráfico por el protocolo HTTPS estamos en condiciones de realizar la redirección al protocolo cifrado HTTPS en el puerto 443 cuando sea accedido por el protocolo no cifrado HTTP en el puerto 80.&lt;/p&gt;
&lt;p&gt;Dependiendo del servidor web o de aplicaciones que usemos la configuración será distinta, incluso lo podemos hacer a nivel de aplicación con la ayuda del &lt;em&gt;framework&lt;/em&gt; web si este ofrece algún soporte para ello. A continuación incluiré la configuración necesaria para los servidores web y de aplicaciones más populares como son &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;, &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;, &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt;, &lt;a href=&#34;https://eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt; y &lt;a href=&#34;https://wildfly.org/&#34;&gt;WildFly&lt;/a&gt; y finalmente el caso haciendo la redirección a nivel de aplicación con el &lt;em&gt;framework&lt;/em&gt; &lt;a href=&#34;https://tapestry.apache.org/&#34;&gt;Apache Tapestry&lt;/a&gt; para desarrollar aplicaciones web con el lenguaje Java.&lt;/p&gt;
&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; nos resultará más sencillo hacer la prueba que teniendo que instalar el paquete de Nginx en nuestra distribución. Puedes consultar &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;varios artículos sobre Docker&lt;/a&gt; que he escrito a modo introducción y para empezar a usarlo.&lt;/p&gt;
&lt;p&gt;En la sección del servidor que escucha en el puerto HTTP (80) realizamos la redirección permanente con el código de estado 301 hacia el protocolo HTTPS. En la sección del servidor que escucha en el pueto HTTPS (443) accitva el uso de TLS/SSL usando varias directivas y sirve los documentos de &lt;em&gt;/usr/share/nginx/html&lt;/em&gt; en la ruta &lt;em&gt;/&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;server {
listen 80;
server_name localhost;
return 301 https://$host$request_uri;
}
server {
listen 443;
server_name localhost;
ssl on;
ssl_certificate localhost.pem;
ssl_certificate_key localhost.key;
ssl_session_timeout 5m;
ssl_protocols SSLv2 SSLv3 TLSv1;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_prefer_server_ciphers on;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm --name nginx -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -p &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;:443 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/nginx.conf:/etc/nginx/conf.d/default.conf:ro -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/localhost.key:/etc/nginx/localhost.key:ro -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/localhost.pem:/etc/nginx/localhost.pem:ro nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-nginx.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-nginx.sh&#34; target=&#34;_blank&#34;&gt;docker-nginx.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/nginx-https.png&#34; title=&#34;Redirección de HTTP a HTTPS en Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/nginx-https-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Redirección de HTTP a HTTPS en Nginx&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;apache-httpd&#34;&gt;Apache HTTPD&lt;/h3&gt;
&lt;p&gt;La configuración para Apache HTTPD es similar simplemente cambian las directivas según su propia configuración. Se activan los módulos para usar TLS/SSL y el que permite hacer reescrituras de las URL.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;...
LoadModule ssl_module modules/mod_ssl.so
LoadModule rewrite_module modules/mod_rewrite.so
...
&amp;lt;VirtualHost *:80&amp;gt;
ServerName localhost
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{SERVER_NAME}$1 [R,L]
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName localhost
DocumentRoot /usr/local/apache2/htdocs
SSLEngine On
SSLCertificateFile conf/localhost.crt
SSLCertificateKeyFile conf/localhost.key
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;httpd.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker run --rm --name apache -p &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;:80 -p &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;:443 -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/localhost.key:/usr/local/apache2/conf/localhost.key:ro -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/localhost.crt:/usr/local/apache2/conf/localhost.crt:ro httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-httpd.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/docker-httpd.sh&#34; target=&#34;_blank&#34;&gt;docker-httpd.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/apache-httpd-https.png&#34; title=&#34;Redirección de HTTP a HTTPS en Apache HTTPD&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/images/apache-httpd-https-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;figcaption&gt;Redirección de HTTP a HTTPS en Apache HTTPD&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;tomcat-jetty-y-wildfly&#34;&gt;Tomcat, Jetty y WildFly&lt;/h3&gt;
&lt;p&gt;Es muy habitual que los servidores de aplicaciones como Tomcat, Jetty o WildFly sean accedidos no directamente por el navegador del usuario sino a través de un servidor web como Nginx o Apache haciendo de &lt;em&gt;proxy&lt;/em&gt;. Cuando hay un servidor web que actúa de &lt;em&gt;proxy&lt;/em&gt; para el servidor de aplicaciones es posible decidir que el establecimiento de la conexión cifrada TLS/SSL del protocolo HTTPS se realice en el servidor web y la comunicación cifrada termine al mismo tiempo en él, la comunicación entre el servidor web y el servidor de aplicaciones se realizaría usando el protocolo HTTP. Esto descarga del servidor de aplicaciones la tarea algo costosa del establecimiento de la conexión cifrada y tener que cifrar el tráfico.&lt;/p&gt;
&lt;p&gt;Para el caso de Tomcat, Jetty y WildFly habiendo configurado la posibilidad de usar el protocolo seguro la configuración para hacer la redirección es la misma para los tres, habría que añadir al archivo descriptor &lt;em&gt;web.xml&lt;/em&gt; de la aplicación el siguiente fragmento XML. Esto hace que el servidor fuerce la conexión segura para los recursos indicados, en este caso todos al usar el patrón &lt;em&gt;/*&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;security-constraint&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;web-resource-collection&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;web-resource-name&amp;gt;&lt;/span&gt;Confidential URLs&lt;span class=&#34;nt&#34;&gt;&amp;lt;/web-resource-name&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/web-resource-collection&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;user-data-constraint&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;transport-guarantee&amp;gt;&lt;/span&gt;CONFIDENTIAL&lt;span class=&#34;nt&#34;&gt;&amp;lt;/transport-guarantee&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/user-data-constraint&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/security-constraint&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/web.xml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/web.xml&#34; target=&#34;_blank&#34;&gt;web.xml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;redirección-a-nivel-de-aplicación&#34;&gt;Redirección a nivel de aplicación&lt;/h3&gt;
&lt;p&gt;Con algún mecanismo propio que empleemos al programar la aplicación (en Java por ejemplo con un filtro) o el &lt;em&gt;framework&lt;/em&gt; web que usemos para desarrollar la aplicación web quizá nos ofrezca algún mecanismo para redirigir las peticiones al puerto seguro cuando sea accedida por el puerto inseguro, por ejemplo, para que la redirección la haga la aplicación en vez del servidor con el &lt;em&gt;framework&lt;/em&gt; Apache Tapestry basta añadir la siguiente configuración en el módulo de la aplicación.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;err&#34;&gt;public void &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contributeMetaDataLocator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MappedConfiguration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;String&amp;gt; configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MetaDataConstants&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;SECURE_PAGE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/AppModule.java&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/code/AppModule.java&#34; target=&#34;_blank&#34;&gt;AppModule.java&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/RedirigirHTTPaHTTPS&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./docker-nginx.sh o ./docker-httpd.sh&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.apache.org/httpd/RedirectSSL&#34;&gt;Redirect Request to SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://confluence.atlassian.com/stashkb/redirect-http-requests-to-https-333810132.html&#34;&gt;Redirect HTTP Requests to HTTPS (in Tomcat)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html&#34;&gt;Configuring SSL/TLS (in Jetty)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/><category term="seguridad"/><category term="software"/><category term="software-libre"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/</id><title>Configurar HTTP/2 en Nginx, Apache HTTPD, WildFly o Jetty</title><updated>2016-02-26T19:00:00+01:00</updated><published>2016-02-26T19:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;HTTP/2 se puede usar ya, los principales navegadores web, servidores web y de aplicaciones ya han añadido el soporte necesario ofreciendo varias ventajas para los usuarios, desarrolladores, dispositivos cliente y los servidores. En varios de los servidores más ppulares la configuración necesaria no es complicada.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 es el protocolo que ha surgido para mejorar la experiecia de navegación de la web, proporcionará menos latencia y más velocidad siendo más eficiente. En la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;introducción al protocolo HTTP/2&lt;/a&gt; comentaba de que necesidad surge, sus ventajas, alguna diferencia con HTTP 1.1, varias cosas que los desarrolladores hacíamos que quedarán obsoletas y otras varias que deberemos seguir haciendo. Se pubicó oficialmente en 2015 y los principales navegadores como &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Mozilla Firefox&lt;/a&gt;, &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Google Chrome&lt;/a&gt; y &lt;a href=&#34;https://www.microsoft.com/es-es/windows/microsoft-edge/&#34;&gt;Microsoft Edge&lt;/a&gt; ya lo soportan.&lt;/p&gt;
&lt;p&gt;En el lado del servidor varios servidores web también han incluido el soporte para HTTP/2, entre ellos &lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;, &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;, &lt;a href=&#34;https://wildfly.org/&#34;&gt;WildFly&lt;/a&gt; y &lt;a href=&#34;https://eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt;. Tomcat añadirá el soporte en la versión 9 cuando se publique las especificación de Servlets 4.0 con el soporte de HTTP/2, este soporte necesitará de ALPN que se incluirá en la versión 9 del JDK con lo que en el momento de publicar este artículo todavía quedarán varios meses. Para usar HTTP/2 en Nginx, Apache HTTPD, WildFly y Jetty debemos hacer algunos cambios en sus configuraciones.&lt;/p&gt;
&lt;p&gt;Para usar HTTP/2 los navegadores Mozilla Firefox, Google Chrome y Microsoft Edge han anunciado que se necesitará cifrado, por lo tanto deberemos añadir el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;soporte para TLS/SSL en el servidor&lt;/a&gt; previamente.&lt;/p&gt;
&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;En Nginx es muy sencillo, deberemos modifificar el archivo de configuración &lt;em&gt;default.conf&lt;/em&gt; para que quede de forma similar a la siguiente.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;server {
listen 80;
server_name localhost;
location / {
return 301 https://$host$request_uri;
}
}
server {
listen 443 ssl http2 default_server;
ssl_certificate localhost.crt;
ssl_certificate_key localhost.key;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
# redirect server error pages to the static page /50x.html
#
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /usr/share/nginx/html;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/default.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/default.conf&#34; target=&#34;_blank&#34;&gt;default.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-nginx.png&#34; title=&#34;HTTP/2 en Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-nginx-thumb.png&#34; width=&#34;244&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;apache-httpd&#34;&gt;Apache HTTPD&lt;/h3&gt;
&lt;p&gt;En Apache HTTPD deberemos instalar el &lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/nghttp2/&#34;&gt;paquete nghttp2&lt;/a&gt; de nuestra distribución. y usar el módulo &lt;em&gt;mod_http2.so&lt;/em&gt; junto con &lt;em&gt;mod_ssl.so&lt;/em&gt; para el cifrado.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;LoadModule http2_module modules/mod_http2.so
LoadModule ssl_module modules/mod_ssl.so
...
Listen 443
&amp;lt;VirtualHost *:443&amp;gt;
ServerName localhost
SSLEngine on
SSLCertificateFile localhost.crt
SSLCertificateKeyFile localhost.key
Protocols h2 http/1.1
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/httpd-default.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/httpd-default.conf&#34; target=&#34;_blank&#34;&gt;httpd-default.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-httpd.png&#34; title=&#34;HTTP/2 en Apache HTTPD&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-httpd-thumb.png&#34; width=&#34;248&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;wildfly&#34;&gt;WildFly&lt;/h3&gt;
&lt;p&gt;El WildFly deberemos descargar un archivo jar que ofrece el soporte para la negociación de protocolo,
&lt;abbr title=&#34;Application-Layer Protocol Negotiation&#34;&gt;ALPN&lt;/abbr&gt;, según la versión del JDK que usemos de &lt;a href=&#34;http://central.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/&#34;&gt;Maven Central&lt;/a&gt;. Modificamos el archivo de configuración &lt;em&gt;bin/standalone.conf&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;if [ &amp;#34;x$JAVA_OPTS&amp;#34; = &amp;#34;x&amp;#34; ]; then
JAVA_OPTS=&amp;#34;-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Xbootclasspath/p:./alpn-boot-8.1.7.v20160121.jar&amp;#34;
JAVA_OPTS=&amp;#34;$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS -Djava.awt.headless=true&amp;#34;
else
echo &amp;#34;JAVA_OPTS already set in environment; overriding default settings with values: $JAVA_OPTS&amp;#34;
fi&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/standalone.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/standalone.conf&#34; target=&#34;_blank&#34;&gt;standalone.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Y el archivo &lt;em&gt;standalone/configuration/standalone.xml&lt;/em&gt; añadimos un nuevo listener para el subsistema de &lt;a href=&#34;http://undertow.io/&#34;&gt;undertow&lt;/a&gt; con HTTP/2 habilitado y un Realm asociado para usar TLS/SSL.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;subsystem&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;urn:jboss:domain:undertow:3.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;buffer-cache&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;server&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;http-listener&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;redirect-socket=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;https-listener&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default-https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;security-realm=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ApplicationRealm&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;enable-http2=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/standalone.xml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/standalone.xml&#34; target=&#34;_blank&#34;&gt;standalone.xml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-wildfly.png&#34; title=&#34;HTTP/2 en WildFly&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-wildfly-thumb.png&#34; width=&#34;189&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&#34;jetty&#34;&gt;Jetty&lt;/h3&gt;
&lt;p&gt;Dependiendo de la versión de Java, usaremos el módulo alpn adecuado, en el momento de escribir este artículo con la versión 1.8.0_74 del &lt;a href=&#34;https://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt;, &lt;em&gt;modules/alpn-impl/alpn-1.8.0_74.mod&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;[name]
protonego-boot
[files]
http://central.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/8.1.7.v20160121/alpn-boot-8.1.7.v20160121.jar|lib/alpn/alpn-boot-8.1.7.v20160121.jar
[exec]
-Xbootclasspath/p:lib/alpn/alpn-boot-8.1.7.v20160121.jar&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/alpn-1.8.0_74.mod&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/alpn-1.8.0_74.mod&#34; target=&#34;_blank&#34;&gt;alpn-1.8.0_74.mod&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ java -jar start.jar --add-to-startd&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https,http2
$ java -jar start.jar&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/jetty.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/code/jetty.sh&#34; target=&#34;_blank&#34;&gt;jetty.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-jetty.png&#34; title=&#34;HTTP/2 en Jetty&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/images/http2-jetty-thumb.png&#34; width=&#34;300&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/blog/nginx-1-9-5/&#34;&gt;NGINX Open Source 1.9.5 Released with HTTP/2 Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html&#34;&gt;Jetty ALPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://central.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/8.1.7.v20160121/&#34;&gt;Maven ALPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://undertow.io/blog/2015/03/26/HTTP2-In-Wildfly.html&#34;&gt;Using HTTP2 With Wildfly 9.0.0.Beta1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.jboss.org/author/display/WFLY10/Security+Realms&#34;&gt;WildFly Security Realms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/</id><title>Introducción al protocolo HTTP/2</title><updated>2016-02-26T21:10:00+01:00</updated><published>2016-02-20T20:00:00+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;La tecnología avanza inexorablemente respondiendo a nuevas necesidades o mejor a las existentes. El protocolo HTTP se ha mantenido sin grandes cambios durante más de 15 años, sin embargo, para reducir las latencias en la carga de las páginas y ser más eficiente se ha desarrollado una nueva especificación que ya promete reducir estos problemas. HTTP/2 no es compatible hacia atrás pero se puede usar junto con HTTP 1.1 y los dispositivos que usen aprovecharse de sus ventajas. Los navegadores más populares ya lo han implementado y los servidores web o de aplicaciones ya ofrecen soporte para ser usado.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La velocidad de carga de una web en el navegador es importante, tanto que añadir unos pocos cientos de milisegundos en un sitio de comercio electrónico afecta en un porcentaje significativo el abandono, la conversión y en definitiva las compras que se realizan. Un tiempo de más de 100ms ya es percibido por los usuarios. Por este motivo además Google lo tiene en cuenta a la hora del posicionamiento en su buscador, con lo que mejorar y tener un tiempo de carga bajo de las páginas producirá más compras y más visitas por tráfico orgánico que se traducirá también en más compras.&lt;/p&gt;
&lt;p&gt;Desde hace quince años el protocolo usado para la transferencia desde el servidor al navegador del HTML, CSS, JavaScript, imágenes y demás recursos de la página ha sido el &lt;a href=&#34;https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;protocolo de transferencia de hypertexto&lt;/a&gt; o HTTP. Con el cada vez mayor ancho de banda que ofrece mayores velocidades de transferencia de los dispositivos conectados a internet el tiempo de carga de una página ha dejado de estar tan limitado por la velocidad de transferencia a ser la latencia una parte importante del tiempo. Con el objetivo de disminuir la latencia y el tiempo de carga de las páginas se publicó primero el protocolo &lt;a href=&#34;https://es.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt; y posteriormente basado en él HTTP/2 en mayo de 2015 con varias mejoras.&lt;/p&gt;
&lt;p&gt;HTTP/2 no mofidifica la semántica de protocolo HTTP con lo que los conceptos de métodos HTTP, códigos de estado, URIs y cabeceras siguen siendo los mismos. Algunas de las mejoras que ofrece son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiplexación y concurrencia: solo es necesaria una conexión &lt;abbr title=&#34;Transmission Control Protocol&#34;&gt;TCP&lt;/abbr&gt; para enviar todos los recursos de la página, además la transmisión de varios recursos es posible que sea simultánea sin necesidad de que termine una para iniciar otra lo que evita el problema &lt;em&gt;head-of-line blocking&lt;/em&gt; de HTTP 1.1 que era ordenado y bloqueante.&lt;/li&gt;
&lt;li&gt;Descarga de dependencias: el cliente puede priorizar los recursos.&lt;/li&gt;
&lt;li&gt;Compresión de cabeceras: para reducir la sobrecarga de las cabeceras en cada petición se consigue de dos formas, usando un algoritmo de compresión y evitando enviarlas según los valores anteriores transmitidos.&lt;/li&gt;
&lt;li&gt;Envío desde el servidor: el servidor proactivamente puede enviar recursos al cliente para que sean cacheados.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una diferencia que lo hace incompatible hacia atras es que es binario pero se puede usar junto con la versión anterior y cuando se establezca la conexión negociando el protocolo elegir el mejor según las características de ambas partes, los protocolos binarios son más eficientes de procesar, más compactos e igual de importante menos propensos a errores comparados los los basados en texto.&lt;/p&gt;
&lt;p&gt;Establecer una conexión TCP requiere 3 paquetes entre el cliente y servidor reduciendo el número de ellas la latencia baja. Si la distancia entre el cliente y el servidor es lejana simplemente por cuestiones físicas de la velocidad a la que viaja la luz o los impulsos eléctricos, la latencia entre ellos estando situados en las antípodas es de unos 300-400ms (por paquete). Simplemente con la multiplexación y la concurrencia se reduce considerablemente esta sobrecarga en la transmisión al evitar tener que establecer varias conexiones. Además, tiene otras mejoras para los desarrolladores y hace innecesarias algunas de las optimizaciones que se realizaban con HTTP 1.1, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ya no es necesario concatenar ficheros eliminado el problema &lt;em&gt;head-of-line blocking&lt;/em&gt; y pudiendo transmitir varios ficheros simultáneamente.&lt;/li&gt;
&lt;li&gt;Ya no es necesario incluir el contenido de estilos, imágenes y JavaScript junto con el HTML para evitar conexiones TCP adicionales, igual que en la concatenación de ficheros.&lt;/li&gt;
&lt;li&gt;Ya no es necesario usar múltiples dominios para paralelizar la descarga.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algunas prácticas de optimización siguen siendo utilizables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducir consultas &lt;abbr title=&#34;Domain Name System&#34;&gt;DNS&lt;/abbr&gt; por la latencia de envío de paquetes.&lt;/li&gt;
&lt;li&gt;Seguir usando redes de descarga de contenido o &lt;abbr title=&#34;Content Delivery Network&#34;&gt;CDN&lt;/abbr&gt;, cuanto más cercano esté el servidor del cliente menor será la latencia impuesta por las leyes físicas.&lt;/li&gt;
&lt;li&gt;Seguir usando la caché del cliente evitando retransmitir el recurso.&lt;/li&gt;
&lt;li&gt;Minimizar el contenido de los recursos, menor será las cantidad de datos a transmitir y procesar.&lt;/li&gt;
&lt;li&gt;Eliminar redirecciones innecesarias.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque para usar HTTP/2 no es necesario usar cifrado &lt;abbr title=&#34;Transport Layer Security &#34;&gt;TLS&lt;/abbr&gt; los navegadores &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/es-es/windows/microsoft-edge/&#34;&gt;Micrsoft Edge&lt;/a&gt; y &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Google Chrome&lt;/a&gt; han anunciado que en sus implementaciones solo lo soportarán si se usa con cifrado TLS.&lt;/p&gt;
&lt;p&gt;En un capítulo del libro &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000545/ch12.html&#34;&gt;High Performance Browser Networking&lt;/a&gt;, en &lt;a href=&#34;https://bagder.gitbooks.io/http2-explained/content/es/index.html&#34;&gt;HTTP/2 explicado&lt;/a&gt; y en la sección de referencia del final del artículo se detallan más los conceptos del protocolo HTTP/2.&lt;/p&gt;
&lt;p&gt;En definitiva el protocolo HTTP/2 supone una mejora de rendimiento para los clientes y optimización de recursos tanto para los clientes como para los servidores. Ya está implementado por los navegadores más populares y añadiendo el soporte en lado del servidor los clientes compatibles se beneficiarán de él.&lt;/p&gt;
&lt;p&gt;En el siguiente artículo comentaré cómo poner esto en práctica y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;configurar HTTP/2 con el servidor web Nginx, Apache HTTPD y el servidor de aplicaciones Java WildFly o Jetty&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.github.io/faq/&#34;&gt;HTTP/2 FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000545/ch12.html&#34;&gt;High Performance Browser Networking - HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bagder.gitbooks.io/http2-explained/content/es/index.html&#34;&gt;Libro HTTP/2 explicado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/introducing-http2/&#34;&gt;Introducing HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/http2/&#34;&gt;CloudFlare HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/http-2-for-web-developers/&#34;&gt;HTTP/2 For Web Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/tools-for-debugging-testing-and-using-http-2/&#34;&gt;Tools for debugging, testing and using HTTP/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;Configurar SSL/TLS en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="blog-stack"/><category term="planeta-codigo"/><category term="planeta-linux"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/</id><title>Certificado SSL, de empresa, «wildcard» y de validación extendida</title><updated>2015-04-25T12:00:00+02:00</updated><published>2015-04-25T10:07:04+02:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;Usar un protocolo seguro garantiza de que los datos intercambiados entre el cliente y el servidor no son leídos ni modificados por una tercera parte además de verificar que la comunicación se está realizando entre las partes que dicen ser. Para usar un &lt;a href=&#34;https://es.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;protocolo seguro como SSL/TLS&lt;/a&gt; debemos disponer de con certificado, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/&#34;&gt;con OpenSSL podemos generar y convertirlo al formato que deseemos&lt;/a&gt;, sin embargo, para que el usuario tenga garantía de que el certificado es válido este se debe estar firmado por una &lt;a href=&#34;https://es.wikipedia.org/wiki/Autoridad_de_certificaci%C3%B3n&#34;&gt;autoridad de certificación&lt;/a&gt; (CA) en la que confíe, generalmente con una de las autoridades de certificación cuyos certificados están preinstalados en el navegador web (en Firefox podemos verlos en &lt;em&gt;Preferencias&amp;gt; Avanzado&amp;gt; Certificados&amp;gt; Ver certificados&lt;/em&gt;), los certificados autofirmados son útiles para hacer pruebas pero no son válidos para los usuarios. En este artículo comentaré que tipos de certificados hay y donde podemos obtener o comprar un certificado digital firmado por una CA que sea de confianza para el usuario.&lt;/p&gt;
&lt;p&gt;Los navegadores suelen indicar que se está usando una comunicación segura cuando en la barra de direcciones se muestra un candado y se está usando el protocolo https. Además, haciendo clic en el candado se pueden ver los detalles del certificado usado por el servidor para la comunicación cifrada.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-dominio.png&#34; title=&#34;Certificado SSL con validación de dominio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-dominio.png&#34; width=&#34;402&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado.png&#34; title=&#34;Datos de certificado de GitHub&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-thumb.png&#34; width=&#34;436&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Sin embargo, para proporcionar más seguridad y garantía de que como usuarios nos estamos comunicando con el servidor que creemos sin examinar el certificado algunos certificados permiten mostrar también en la barra de direcciones un recuadro verde con el nombre de la entidad, el recuadro verde que solemos ver también en la barra de direcciones al acceder a algunos dominios y que es proporcionado por certificados de validación extendida.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-extendida.png&#34; title=&#34;Certificado SSL con validación extendida&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificado-validacion-extendida.png&#34; width=&#34;405&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Por otra parte los certificados SSL se generan para un dominio en concreto con lo que en principio se debería comprar un certificado por cada dominio en el que deseemos usar una comunicación segura. Sin embargo, para evitar comprar múltiples certificados para los diferentes dominios o subdominios podemos comprar un certificado &lt;em&gt;wildcard&lt;/em&gt; que nos servirá para los subdominios (*.ejemplo.com) o un certificado multidominio (ejemplo.com, ejemplo.net, &amp;hellip;) para como su nombre indica varios dominios. En los certificados de empresa se solicitan datos datos adicionales al adquirirlo y en los detalles del certificado aparece el nombre de la empresa (campo Organización (O) como en el caso de GitHub).&lt;/p&gt;
&lt;p&gt;Los certificados &lt;em&gt;wildcard&lt;/em&gt; y que muestran el recuadro verde son más caros pero pueden ser útiles sobre todo para una página de comercio electrónico, el recuadro verde añade más seguridad, seguramente mejore los ratios de conversión y evite &lt;a href=&#34;https://es.wikipedia.org/wiki/Phishing&#34;&gt;suplantaciones de identidad o &lt;em&gt;phising&lt;/em&gt;&lt;/a&gt;. Además, utilizar un protocolo seguro es un nuevo criterio que utiliza el buscador Google en su algoritmo para establecer el posicionamiento en la página de resultados. Con las intrucciones que incorporan los procesadores modernos el cifrado y descifrado de los datos no tiene por que significar un aumento de carga considerable para el servidor ni el cliente ni en dispositivos móviles.&lt;/p&gt;
&lt;p&gt;¿Cómo obtener un certificado SSL firmado por una entidad raíz de certificación? Las entidades de registro de dominios aparte de dominios, &lt;em&gt;hosting&lt;/em&gt; virtual o privado algunos permiten comprar certificados SSL. Uno de los que conozco que permite comprar certificados SSL, de empresa, con recuadro verde o &lt;em&gt;wildcard&lt;/em&gt; es &lt;a href=&#34;http://www.dondominio.com/products/ssl/&#34;&gt;DonDominio&lt;/a&gt;, otro es &lt;a href=&#34;http://www.arsys.es/certificados-seguridad-ssl&#34;&gt;Arsys&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
&lt;figure&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificados-dondominio.png&#34; title=&#34;Certificados DonDominio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/images/certificados-dondominio-thumb.png&#34; width=&#34;335&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;En el caso de DonDominio dependiendo de la entidad emisora del certficado que deseemos variará el precio, también si queremos que tenga validación extendida o sea &lt;em&gt;wildcard&lt;/em&gt;. En el caso de un certificado SSL simple que valide solo el dominio es de unos 5 €, de validación de empresa unos 28 €, un certificado de validación extendida con recuadro verde desde unos 126 € y un &lt;em&gt;certificado wildcard&lt;/em&gt; de desde unos 75 €. Estos son precios desde, diferentes opciones pueden salir bastante más caras y hay que tener en cuenta que son para una validez de una año, al igual que los dominios hay que renovar su uso.&lt;/p&gt;
&lt;p&gt;Si no necesitamos el recuadro verde ni un certificado &lt;em&gt;wildcard&lt;/em&gt; una opción interesante es obtener uno gratis a través de &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Lets Encrypt&lt;/a&gt;. Esta nueva entidad de certificación nos permitirá obtener uno sin coste, de forma sencilla y automatizada, detrás de esta entidad están organizaciones como &lt;a href=&#34;https://www.linuxfoundation.org/&#34;&gt;Linux Foundation&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/&#34;&gt;Mozilla&lt;/a&gt; o &lt;a href=&#34;https://www.cisco.com/&#34;&gt;CISCO&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Una vez obtenido el certificado debemos instalarlo en el servidor, en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;Configurar SSL en un servidor Tomcat JBoss, Wildfly, Lighttpd, Nginx o Apache&lt;/a&gt; comento como usar un certificado en los principales servidores web y de aplicaciones. Si necesitamos un formato concreto podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/&#34;&gt;convertir el certificado con OpenSSL&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.genbeta.com/seguridad/que-es-un-certificado-ssl-y-por-que-deberia-importarte&#34;&gt;Qué es un certificado SSL y por qué debería importarte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="programacion"/><category term="seguridad"/><category term="blog-stack"/><category term="planeta-linux"/><category term="planeta-codigo"/></entry><entry><id>https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/</id><title>Configurar SSL/TLS en un servidor Tomcat, JBoss, WildFly, Lighttpd, Nginx o Apache</title><updated>2016-03-05T12:00:00+01:00</updated><published>2014-02-28T16:58:17+01:00</published><link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/"/><author><name>picodotdev</name></author><content type="html">
&lt;p&gt;&lt;strong&gt;Tanto en un servidor web como de aplicaciones podemos hacer que la comunicación entre el cliente y el servidor esté cifrada usando un protocolo seguro. La configuración para usar un protocolo seguro en cada servidor es diferente pero todos se basan en lo mismo, usar un certificado y un clave. En este artículo muestro la configuración necesaria en los servidores web y de aplicaciones más populares.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/openssl.svg&#34; class=&#34;right &#34; width=&#34;400&#34; alt=&#34;OpenSSL&#34; title=&#34;OpenSSL&#34;/&gt;
&lt;/div&gt;
&lt;p&gt;En entradas anteriores he explicado &lt;a href=&#34;https://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html&#34;&gt;en que consiste la criptografía y GPG&lt;/a&gt; y como podemos usarlo a nivel personal para firmar y cifrar archivos y &lt;a href=&#34;https://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html&#34;&gt;firmar correos electrónicos con el cliente de correo Evolution&lt;/a&gt;. También he comentado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/&#34;&gt;como crer un certificado con OpenSSL y como convertirlo a diferentes formatos&lt;/a&gt;. En esta entrada explicaré como usar un certificado SSL creado con OpenSSL después de conocer los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida/&#34;&gt;Certificados SSL, de empresa, «wildcard» y de validación extendida&lt;/a&gt; para proporcionar acceso cifrado al sevidor web o servidor de aplicaciones, explicaré cual es la configuración necesaria para los servidores &lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt;, &lt;a href=&#34;http://www.lighttpd.net/&#34;&gt;Lighttpd&lt;/a&gt;, &lt;a href=&#34;http://jbossas.jboss.org/&#34;&gt;JBoss&lt;/a&gt;/&lt;a href=&#34;http://wildfly.org/&#34;&gt;WildFly&lt;/a&gt;, &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; y &lt;a href=&#34;http://www.apache.org/&#34;&gt;Apache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usar una conexión &lt;abbr title=&#34;Secure Sockets Layer&#34;&gt;SSL&lt;/abbr&gt; o &lt;abbr title=&#34;Transport Layer Security&#34;&gt;TLS&lt;/abbr&gt; y un certificado de servidor evita que los datos entre el navegador del usuario y el servidor sean legibles para una tercera parte siendo mayor la seguridad en nuestras aplicaciones o dando mayor confianza al usuario y usando algunos certificados al aparecer en la barra de navegación del navegador en verde el nombre de la entidad detrás de la página evitando problemas de suplantación de identidad.&lt;/p&gt;
&lt;p&gt;Los principales navegadores han anunciado que una conexión cifrada SSL/TLS es condición necesaria para usar el ya presente &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;protocolo HTTP/2&lt;/a&gt; que es más eficiente tanto para el cliente como para el servidor y con menores latencias. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;Configurar HTTP/2 en Nginx, Apache HTTPD, WildFly o Jetty&lt;/a&gt; es sencillo y mejorará el rendimiento de nuestros sitios web o aplicaciones.&lt;/p&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-tomcat&#34;&gt;Configurar SSL/TLS en Tomcat&lt;/h3&gt;
&lt;p&gt;Tomcat es uno de los servidores de aplicaciones más usado para desplegar aplicaciones web desarrolladas con el lenguaje Java. La forma que explicaré a continuación sobre como obtener cifrado SSL con este servidor será usando APR (&lt;em&gt;Apache Portable Runtime&lt;/em&gt;). Previamente deberemos haber generado un certificado SSL con OpenSSL, una vez dispogamos del nuestro aunque sea autofirmado debemos añadir la siguiente configuración al archivo server.xml:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Connector&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;port=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;8443&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;protocol=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;SSLEnabled=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;maxThreads=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;150&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;scheme=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;secure=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;clientAuth=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;sslProtocol=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TLS&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;SSLCertificateFile=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${catalina.home}/conf/localhost.crt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;SSLCertificateKeyFile=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${catalina.home}/conf/localhost.key&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/server.xml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/server.xml&#34; target=&#34;_blank&#34;&gt;server.xml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hay que activar el conector SSL (el anterior xml) y disponer del certificado y su clave privada, ambos archivos se indican en los atributos SSLCertificateFile y SSLCertificateKeyFile. Si queremos usar el puerto estandar del protocolo HTTPS cambiaremos el valor del puerto de 8443 a 443 en el atributo port. La configuración es la misma tanto para Tomcat 7 como para Tomcat 8.&lt;/p&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-jboss&#34;&gt;Configurar SSL/TLS en JBoss&lt;/h3&gt;
&lt;p&gt;JBoss es otro de los servidores que es ampliamente usado para desplegar aplicaciones Java y que proporciona un perfil completo de las especificaciones EE al contrario que Tomcat que solo proporciona un perfil web. La configuración que hay que indicar en JBoss 7.1 es la siguiente:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;subsystem&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;urn:jboss:domain:web:1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;default-virtual-server=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default-host&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;native=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;connector&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;protocol=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;scheme=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;redirect-port=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;8443&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;connector&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;protocol=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;scheme=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;secure=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ssl&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jboss&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;certificate-key-file=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${jboss.server.config.dir}/localhost.key&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;certificate-file=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;${jboss.server.config.dir}/localhost.crt&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/connector&amp;gt;&lt;/span&gt;
...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/subsystem&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/standalone-jboss.xml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/standalone-jboss.xml&#34; target=&#34;_blank&#34;&gt;standalone-jboss.xml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-wildfly&#34;&gt;Configurar SSL/TLS en WildFly&lt;/h3&gt;
&lt;p&gt;JBoss cambió recientemente el nombre de la versión community de JBoss, esta ha pasado a llamarse WildFly y la comercial con soporte sigue llamandose JBoss. WildFly soporta las especificaciones de Java EE 7. En WildFly el contenedor web es &lt;a href=&#34;http://undertow.io/&#34;&gt;undertow&lt;/a&gt; en vez de Tomcat y cambia la configuración de SSL. Senecesita crear un keystore JKS que contenga tanto la clave como el certificado.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt;
...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SecureRealm&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;server-identities&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;ssl&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;keystore&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;localhost.keystore&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;relative-to=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jboss.server.config.dir&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;keystore-password=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wildfly&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/ssl&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/server-identities&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt;
...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;subsystem&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;urn:jboss:domain:undertow:1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;server&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;http-listener&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;https-listener&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;socket-binding=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;security-realm=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SecureRealm&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;default-host&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;alias=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;location&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;handler=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;welcome-content&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-ref&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server-header&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;filter-ref&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;x-powered-by-header&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/host&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
...
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/subsystem&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/standalone-wildfly.xml&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/standalone-wildfly.xml&#34; target=&#34;_blank&#34;&gt;standalone-wildfly.xml&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-lighttpd&#34;&gt;Configurar SSL/TLS en Lighttpd&lt;/h3&gt;
&lt;p&gt;Lighttpd es un servidor web de los denominados ligeros que aunque posiblemente no tiene toda la versatilidad de Apache ofrece un mayor rendimiento. Para activar SSL en lighttpd debemos modificar el archivo de configuración y añadir lo siguiente:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;$SERVER[&amp;#34;socket&amp;#34;] == &amp;#34;:443&amp;#34; {
ssl.engine = &amp;#34;enable&amp;#34;
ssl.pemfile = &amp;#34;localhost.pem&amp;#34;
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/lighttpd.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/lighttpd.conf&#34; target=&#34;_blank&#34;&gt;lighttpd.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Quizá debamos cambiar el propietario y permisos con:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ chown root:root /etc/lighttpd/ssl/localhost.pem
$ chmod &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; /etc/lighttpd/ssl/localhost.pem&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/script-1.sh&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/script-1.sh&#34; target=&#34;_blank&#34;&gt;script-1.sh&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El archivo localhost.pem contiene la clave y el certificado.&lt;/p&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-nginx&#34;&gt;Configurar SSL/TLS en Nginx&lt;/h3&gt;
&lt;p&gt;El proceso es similar para el servidor web Nginx aunque lógicamente se usan las directivas propias de configuración de Nginx.&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;http {
server {
listen 443;
server_name localhost;
ssl on;
ssl_certificate localhost.pem;
ssl_certificate_key localhost.key;
ssl_session_timeout 5m;
ssl_protocols SSLv2 SSLv3 TLSv1;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_prefer_server_ciphers on;
location / {
root /usr/share/nginx/html;
index index.html index.htm;
}
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/nginx.conf&#34; target=&#34;_blank&#34;&gt;nginx.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;configurar-ssl-tls-en-apache&#34;&gt;Configurar SSL/TLS en Apache&lt;/h3&gt;
&lt;p&gt;Apache es uno de los servidores web más utilizados para servir sitios web en internet. Para activar SSL en Apache debemos modificar el archivo de configuración, añadiendo la siguiente configuración que activa el soporte de SSL y especifica el archivo de clave y certificado, nada distinto de lo necesario en los servidores anteriores:&lt;/p&gt;
&lt;div class=&#34;code&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;LoadModule ssl_module modules/mod_ssl.so
Listen 443
&amp;lt;VirtualHost *:443&amp;gt;
ServerName www.example.com
SSLEngine on
SSLCertificateFile localhost.crt
SSLCertificateKeyFile localhost.key
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-meta&#34;&gt;
&lt;span class=&#34;raw&#34;&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;view raw&lt;/a&gt;&lt;/span&gt;
&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/code/httpd.conf&#34; target=&#34;_blank&#34;&gt;httpd.conf&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;reference&#34;&gt;
Referencia:&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html&#34;&gt;Tomcat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.jboss.org/jbossweb/7.0.x/ssl-howto.html&#34;&gt;JBoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.jboss.org/message/824152#824152&#34;&gt;WildFly (Undertow)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redmine.lighttpd.net/projects/1/wiki/HowToSimpleSSL&#34;&gt;Lighttpd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://httpd.apache.org/docs/current/ssl/ssl_howto.html&#34;&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content><category term="seguridad"/><category term="software"/><category term="software-libre"/><category term="planeta-linux"/><category term="planeta-codigo"/></entry></feed>