<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/planeta-codigo/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2016-10-01T11:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/custom/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/</id>
        <title>Cliente de un servicio REST autenticado con OAuth en Java</title>        
        <updated>2016-10-01T11:00:00+02:00</updated>
        <published>2016-10-01T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Teniendo un servicio REST securizado con OAuth2 al invocarlo deberemos realizar el flujo necesario para obtener un &lt;em&gt;access token&lt;/em&gt; y posteriormente enviarlo al servicio REST como forma de autenticación y autorización. Usando un cliente programado en el lenguaje Java y usando la librería HttpClient podemos hacer las peticiones HTTP necesarias para la invocación del servicio.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Explicaba como llamar a un servicio REST autenticado con OAuth2 en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;. Para ello usaba la utilidad &lt;em&gt;curl&lt;/em&gt; para hacer las peticiones HTTP &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; necesarias tanto para obtener el &lt;em&gt;access token&lt;/em&gt; usando el flujo &lt;em&gt;client_credentials&lt;/em&gt; como para una vez obtenido el &lt;em&gt;access token&lt;/em&gt; llamar al servicio REST. En una aplicación usaremos un lenguaje de programación para llmar al servicio, en este ejemplo mostraré como llamarlo usando un cliente programado en lenguaje Java que hará las mismas peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt; pero usando la librería &lt;a href=&#34;https://hc.apache.org/&#34;&gt;HttComponents&lt;/a&gt; en vez de &lt;em&gt;curl&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Primero añadiremos como dependencia del proyecto la librería HttComponents. Como en las diferentes llamadas el intercambio de datos se realiza mediante el &lt;a href=&#34;http://json.org/&#34;&gt;formato JSON&lt;/a&gt; añadiremos otro par dependencias para procesar los datos en este formato, en este caso usando la API de &lt;a href=&#34;https://jsonp.java.net/&#34;&gt;JSON-P&lt;/a&gt; y una implementación.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=build.gradle&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/b174463a576223ab9986e3b32ac9b7be/raw/build.gradle&#34;&gt;build.gradle&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Este sencillo cliente realiza varias peticiones &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;post&lt;/em&gt;. Una para obtener la configuración de los &lt;em&gt;endpoints&lt;/em&gt;, el que nos interesa es el de obtener un &lt;em&gt;access token&lt;/em&gt;, otra petición para obtener el &lt;em&gt;access token&lt;/em&gt; y finalmente con el &lt;em&gt;access token&lt;/em&gt; invocar al servicio mediante otra petición.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=ClientMain.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/b174463a576223ab9986e3b32ac9b7be/raw/ClientMain.java&#34;&gt;ClientMain.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Iniciado &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, configurado el &lt;em&gt;realm&lt;/em&gt; y creado un cliente junto con un rol e iniciado el servicio REST podemos ejecutar el cliente que invoque al servicio. El resultado de las trazas que obtendremos en la terminal será el siguiente.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/b174463a576223ab9986e3b32ac9b7be.js?file=System.out&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/b174463a576223ab9986e3b32ac9b7be/raw/System.out&#34;&gt;System.out&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;En las trazas vemos el &lt;em&gt;endpoint&lt;/em&gt; para obtener &lt;em&gt;access token&lt;/em&gt;, el &lt;em&gt;access token&lt;/em&gt; obtenido, &lt;em&gt;refresh token&lt;/em&gt; y tiempos de expiración de los mismos, finalmente los datos devueltos por el servicio. Como se observa los &lt;em&gt;access token&lt;/em&gt; son una cadena opaca bastante larga de caracteres, y es que está cifrada, firmada digitalmente y contiene información como el rol y tiempos de expiración. Enviado el &lt;em&gt;access token&lt;/em&gt; al servicio REST el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/oidc/java/java-adapters.html&#34;&gt;adaptador de Keycloak para Spring Boot&lt;/a&gt; validará la firma digital del &lt;em&gt;token&lt;/em&gt;, descifrará la información, validará su tiempo de expiración y se comprobará si tiene el rol necesario para acceder al &lt;em&gt;endpoint&lt;/em&gt; del servicio REST. Notar que con la información incluida en el token y el hecho de que está firmado digitalmente no es necesario que el servicio REST se comunique con el proveedor de OAuth para hacer la validación.&lt;/p&gt;

&lt;p&gt;El cliente no tiene más salvo que usando la clase &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/client/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt; y haciendo una petición HTTPS con un certificado autofirmado en el servidor deberemos ignorar las comprobaciones de seguridad. Para ello se usan un &lt;a href=&#34;https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html&#34;&gt;SSLConnectionSocketFactory&lt;/a&gt; que las ignore.&lt;/p&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/</id>
        <title>Gestionar los enlaces de una bitácora con Hugo</title>        
        <updated>2016-09-30T23:00:00+02:00</updated>
        <published>2016-09-30T23:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Incluir enlaces a otras web u otras páginas o artículos dentro del mismo sitio es el fundamento de internet y como tal es muy común. En el momento que queramos cambiar la URL de un enlace que haya sido incluido múltiples veces en un sitio puede que no nos sea una tarea sencilla, ni para buscarlos o por hacerlo uno a uno. Usando Hugo sigo la forma que explico a continuación para simplificar el sustituir una URL que cambia y para simplificar el hacer referencia e insertar los enlaces.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/hugo.png&#34; class=&#34;right&#34; alt=&#34;Hugo&#34; title=&#34;Hugo&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las tareas más comunes en una página web o en una bitácora es incluir enlaces a otras páginas, el enlace es uno de los elementos básicos que forman la web. Es probable que en muchas páginas o artículos incluyamos repetidamente los mismos enlaces y como resultado tendremos en muchas páginas y artículos los mismos enlaces. El día que unos de esos enlaces cambie de alguna forma su dirección URL deberíamos actualizar todas las páginas o artículos para referenciar la nueva URL y no tener enlaces rotos. Puede no ser una tarea sencilla, más si usamos &lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;, &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; o una herramienta similar. Voy a comentar como he resuelto este posible problema en mi bitácora en la que uso &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hace un par de años cambié &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;de usar Blogger a usar Octopress&lt;/a&gt; y después de un tiempo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;de usar Octopress a usar Hugo&lt;/a&gt;. &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; o &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jeckyll&lt;/a&gt; y Hugo son herramientas muy similares, básicamente los dos son generadores estáticos de páginas web o bitácoras que después de alojan en cualquier servidor web o en servicios como &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para no incluir en las páginas o artículos las mismas URLs una y otra vez tengo un archivo de referencias a enlaces en el que en formato &lt;a href=&#34;http://es.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt; a cada URL le doy un identificativo. Posteriormente hago uso de una facilidad que proporciona Hugo que son los &lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; similares a pequeños contenidos que pueden ser incluídos en los archivos de contenido u otras plantillas, este sería un trozo de un archivo de enlaces:&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/133181ba1d0df5c82369026ad1f9e350.js?file=links.html&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/133181ba1d0df5c82369026ad1f9e350/raw/links.html&#34;&gt;links.html&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;El día que un enlace cambie basta con que lo modifique en el archivo enlaces sin tener que revisar, buscar, reemplazar y editar los archivos de contenido.&lt;/p&gt;

&lt;p&gt;Esto para los enlaces externos hacia otras páginas pero de forma similar lo aplico a los enlaces internos hacia otras páginas de la bitácora. A cada artículo le asigno un número secuencial según los voy escribiendo y publicando, con esa secuencia creo un identificativo para el artículo y le asocio su URL.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/133181ba1d0df5c82369026ad1f9e350.js?file=postlinks.html&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/133181ba1d0df5c82369026ad1f9e350/raw/postlinks.html&#34;&gt;postlinks.html&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Con estos archivos usando la &lt;a href=&#34;https://daringfireball.net/projects/markdown/syntax#link&#34;&gt;sintaxis de markdown&lt;/a&gt; con &lt;code&gt;[texto enlace][identificativo-enlace]&lt;/code&gt;, por ejemplo &lt;code&gt;[¡Hola nuevo mundo!][blogbitix-0]&lt;/code&gt;, puedo hacer referencia a los enlaces con su identificativo y al generar el contenido estas referencias será sustituidas por los enlaces referenciados.&lt;/p&gt;

&lt;p&gt;Rastreando la página web o bitácora podremos encontrar y posteriormente corregir los enlaces rotos que encontremos. En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/como-buscar-los-enlaces-rotos-de-un-sitio-web/&#34;&gt;cómo buscar los enlaces rotos de un sitio web&lt;/a&gt; comento varias formas de descubrir estos enlaces que en su momento lo fueron pero han dejado de ser válidos y que proporcionan una mala experiencia al usuario.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;¡Hola nuevo mundo!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/&#34;&gt;Mi experiencia y consejos para un blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/nuevo-diseno-en-blog-bitix/&#34;&gt;Nuevo diseño en Blog Bitix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/como-buscar-los-enlaces-rotos-de-un-sitio-web/&#34;&gt;Cómo buscar los enlaces rotos de un sitio web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/</id>
        <title>Cómo instalar y probar macOS con VirtualBox en Windows o GNU/Linux</title>        
        <updated>2016-09-25T23:00:00+02:00</updated>
        <published>2016-09-25T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;¿Queres comprar un Mac, tienes dudas o deseas probar su sistema operativo antes? Aunque el rendimiento será menor que una máquina real y la experiencia de usuario será peor, usando un &lt;em&gt;hackintosh&lt;/em&gt; mediante VirtuaBox ya sea con Windows o GNU/Linux podremos probarlo en detalle y hacernos una idea de su funcionamiento.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apple.png&#34; class=&#34;right&#34; alt=&#34;Apple&#34; title=&#34;Apple&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/macos.png&#34; class=&#34;right&#34; alt=&#34;macOS&#34; title=&#34;macOS&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Estaría leyendo alguna noticia, ahora no me acuerdo que me despertaría la curiosidad pero me pregunté si es posible usar de forma virtualizada &lt;a href=&#34;http://www.apple.com/macos/&#34;&gt;macOS&lt;/a&gt; con &lt;a href=&#34;http://virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; tanto en &lt;a href=&#34;http://www.microsoft.com/es-es/windows/&#34;&gt;Windows&lt;/a&gt; como en &lt;a href=&#34;http://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt;. Usar lo que se conoce como &lt;em&gt;hackintosh&lt;/em&gt;, esto es &lt;em&gt;hackear&lt;/em&gt; el sistema operativo Macinstosh de los equipos de &lt;a href=&#34;http://www.apple.com/&#34;&gt;Apple&lt;/a&gt; para que se ejecute en cualquier un dispositivo no soportado. En la página web &lt;a href=&#34;http://www.hackintosh.com/&#34;&gt;hackintosh&lt;/a&gt; puede encontrarse información diversa sobre el tema como instrucciones, vídeos, comunidades, &amp;hellip;.&lt;/p&gt;

&lt;p&gt;Es política de Apple que su sistema operativo solo pueda ser ejecutado en sus equipos que los vende de forma conjunta a un notable precio, no se si alguien usa macOS en un sistema no Mac con garantías de que en alguna actualización el sistema deje de funcionar teniendo en cuenta la política de Apple para con sus productos.&lt;/p&gt;

&lt;p&gt;Los pasos para instalar macOS en una máquina virtual con VirtualBox son los siguientes, hay que descargar un &lt;a href=&#34;https://drive.google.com/drive/folders/0B1zbCptv-EMWc0ZfeUFLaldvUm8&#34;&gt;archivo con la imagen del disco duro de macOS&lt;/a&gt; y una vez creada la máquina virtual en VirtualBox ejecutar unos comandos para cambiar algunos parámetros del sistema de arranque EFI. Deberemos descomprimir la imagen del disco duro para obtener el archivo de extensión &lt;em&gt;vmdk&lt;/em&gt; y proceder a crear la máquina virtual. Elegimos crear una máquina virtual de tipo macOS, cambiaremos algunas opciones, asignando unos 2 o 3 GiB de memoria, seleccionaremos el disco duro con la imagen &lt;em&gt;vmdk&lt;/em&gt; descomprimida y cambiaremos la memoria asignada a la pantalla.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-vm.png&#34; title=&#34;Configuración máquina virtual macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-vm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-pantalla.png&#34; title=&#34;Configuración pantalla VirtualBox&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/configuracion-virtualbox-macos-pantalla-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Configuración de la máquina virtual&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si usamos Windows deberemos ejecutar los siguientes comandos en modo administrador, sustituyendo &lt;em&gt;macOS Sierra 10.12&lt;/em&gt; por el nombre que le hayamos dado a la máquina virtual al crearla:&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/588b2cd99be69d340c79cafb55f9b334.js?file=windows.cmd&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/588b2cd99be69d340c79cafb55f9b334/raw/windows.cmd&#34;&gt;windows.cmd&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;En el caso de Linux el archivo de comandos es similar e igualmente sustituiremos &lt;em&gt;macOS Sierra 10.12&lt;/em&gt; por el nombre que le hayamos dado a la máquina virtual al crearla:&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/588b2cd99be69d340c79cafb55f9b334.js?file=linux.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/588b2cd99be69d340c79cafb55f9b334/raw/linux.sh&#34;&gt;linux.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Hecho estos dos pasos podemos proceder a iniciar la máquina virtual, veremos que empiezan a salir unos cuantos mensajes hasta que se inicia el sistema gráfico con la instalación y su asistente que constará de varios pasos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/1-instalacion-inicio.png&#34; title=&#34;Inicio instalación macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/1-instalacion-inicio-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/2-instalacion-welcome.png&#34; title=&#34;Asistente instalación macOS&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/2-instalacion-welcome-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/3-instalacion-keyboard.png&#34; title=&#34;Teclado&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/3-instalacion-keyboard-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/4-instalacion-location.png&#34; title=&#34;Localización&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/4-instalacion-location-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/5-instalacion-transfer.png&#34; title=&#34;Transferencia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/5-instalacion-transfer-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/6-instalacion-apple-id.png&#34; title=&#34;Apple ID&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/6-instalacion-apple-id-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/7-instalacion-terms-conditions.png&#34; title=&#34;Términos y condiciones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/7-instalacion-terms-conditions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/8-instalacion-account.png&#34; title=&#34;Cuenta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/8-instalacion-account-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/9-instacion-timezone.png&#34; title=&#34;Zona horaria&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/9-instacion-timezone-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/10-instalacion-diagnostics.png&#34; title=&#34;Diagnósticos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/10-instalacion-diagnostics-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/11-instalacion-siri.png&#34; title=&#34;Siri&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/11-instalacion-siri-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/12-instalacion-setting-up.png&#34; title=&#34;Configurando&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/12-instalacion-setting-up-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Terminada la instalación entramos en el escritorio con el aspecto clásico y fondo de pantalla de macOS y las aplicaciones incorporadas en el propio sistema por defecto.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/13-macos-start.png&#34; title=&#34;Inicio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/13-macos-start-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/14-macos-help.png&#34; title=&#34;Ayuda&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/14-macos-help-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/15-macos-overview.png&#34; title=&#34;Resumen&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/15-macos-overview-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/16-macos-finder.png&#34; title=&#34;Finder&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/16-macos-finder-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/17-macos-photos.png&#34; title=&#34;Fotos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/17-macos-photos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/18-macos-preferences.png&#34; title=&#34;Preferencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/181/18-macos-preferences-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Como partidario del software libre y la privacidad además de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/&#34;&gt;los ínfimos impuestos que paga Apple&lt;/a&gt; usando reprobable ingeniería fiscal y su software privativo no recomiendo usar un Mac pero si alguien quiere probar este sistema operativo antes de decidirse a hacer una compra usarlo de forma virtualizado es una buena ayuda para tomar una decisión y ver si nos gusta su sistema operativo aparte del propio equipo junto con su precio que podemos ver en las tiendas. Si no nos convence ni su software ni su abultado precio podemos optar por un portátil de &lt;a href=&#34;https://slimbook.es/&#34;&gt;Slimbook&lt;/a&gt; mucho más económico y con características notables con los que no tendremos que pagar tampoco el &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/05/impuesto-windows.html&#34;&gt;impuesto Windows&lt;/a&gt; ya que podemos elegir entre varias la distribución GNU/Linux preinstalada que deseamos.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OQ2I4GK&amp;linkId=cb28136e0fe9b53cc2f70659a332a802&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01ET2K6SU&amp;linkId=0e5bd11129416c356bc34a6aefbcfff7&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01EWWHFOU&amp;linkId=a06a014a2d694cd3a57c629904fbba42&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00ULPMPF2&amp;linkId=90349519a4fe5c650bd8ca6d64f05302&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Deberemos tener en cuenta al probar macOS con VirtualBox que el rendimiento de la máquina virtual no será exactamente el mismo que en un equipo real por la sobrecarga impuesta por la virtualización realizada. La experiencia de usuario puede cambiar significativamente junto con el hecho de que los portátiles Mac tiene una pantalla bastante mejor y con más resolución que la mayoría de portátiles diseñados para Windows o GNU/Linux y un SSD de gran rendimiento además de la falta de su &lt;em&gt;touchpad&lt;/em&gt;, todo esto puede marcar alguna diferencia.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wikigain.com/install-macos-sierra-10-12-virtualbox/&#34;&gt;How to Install macOS Sierra 10.12 on VirtualBox?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="apple"/>
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/</id>
        <title>Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot</title>        
        <updated>2016-10-01T10:30:00+02:00</updated>
        <published>2016-09-24T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Keycloak es un proveedor de OAuth que podemos usar en nuestras aplicaciones y servicios para proporcionar autenticación, autorización, SSO y también añadir seguridad a los servicios REST que desarrollemos como muestro en este artículo. OAuth tiene varias ventajas sobre usar autenticación &lt;em&gt;Basic&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una forma de autenticar a los clientes de un servicio REST es usar &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;autenticación Basic&lt;/a&gt; que se basa en añadir una cabecera en la petición en la que se incluye un usuario y contraseña. La autenticación Basic es sencilla pero para que sea segura ha de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;usar el protocolo seguro HTTPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, presenta otros inconvenientes y es que si al servicio van a acceder varios clientes y a uno queremos impedirle el acceso no podremos hacerlo sin cambiar el usuario y contraseña lo que obligará al resto de clientes actualizarse para usar las nuevas credenciales si las comparten, que no siempre es posible sobre todo si esos clientes están fuera de nuestro control. Para solventar el segundo problema tenemos la posibilidad de segurizar el servicio REST con el &lt;a href=&#34;https://oauth.net/&#34;&gt;protocolo OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Teniendo un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt; añadirle seguridad con OAuth mediante el proveedor &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; es lo que muestro en este artículo. En el servicio REST bastará que usemos el &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/latest/topics/oidc/java/java-adapters.html&#34;&gt;adaptador para Spring Boot de Keycloak&lt;/a&gt; y añadamos en Keycloak cierta configuración que consistirá en un &lt;em&gt;realm&lt;/em&gt; y el registro de un cliente. Para acceder al servicio REST usaremos el flujo &lt;em&gt;client_credentials&lt;/em&gt; que nos permitirá obtener un &lt;em&gt;token&lt;/em&gt; usando las credenciales del cliente.&lt;/p&gt;

&lt;p&gt;Iniciado Keycloak con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; accedemos al panel de administración con el navegador, en mi caso en &lt;em&gt;&lt;a href=&#34;http://localhost:9080&#34;&gt;http://localhost:9080&lt;/a&gt;&lt;/em&gt; con el usuario &lt;em&gt;admin&lt;/em&gt; y contraseña &lt;em&gt;admin&lt;/em&gt; según lo indicado en el archivo &lt;em&gt;docker-compose.yml&lt;/em&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=docker-compose-up.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/docker-compose-up.sh&#34;&gt;docker-compose-up.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login.png&#34; title=&#34;Inicio de sesión de Keycloak&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Creamos un &lt;em&gt;realm&lt;/em&gt;, en el ejemplo llamado &lt;em&gt;springbootjaxrs&lt;/em&gt; y un cliente con id &lt;em&gt;client&lt;/em&gt;, además crearemos un rol &lt;em&gt;api&lt;/em&gt; y se lo asignaremos al cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client.png&#34; title=&#34;Registro del cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role.png&#34; title=&#34;Creación de rol&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-add-role-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles.png&#34; title=&#34;Asignación de roles al cliente&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-service-account-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Una vez realizada la configuración en el servidor de OAuth/Keycloak obtendremos la configuración para el adaptador de Keycloak para el servicio REST desde la pestaña &lt;em&gt;Installation&lt;/em&gt; que añadiremos en el fichero de configuración de Spring Boot &lt;em&gt;application.yml&lt;/em&gt;. Además, indicaremos que el cliente solo aceptará &lt;em&gt;access tokens&lt;/em&gt; mediante la opción &lt;em&gt;bearer-only&lt;/em&gt; de modo que no hará redirecciones para autenticar.&lt;/p&gt;

&lt;p&gt;Indicaremos también el rol que deberá poseer el cliente para acceder al servicio REST junto que URLs del servicio estarán autenticadas por OAuth. Añadida la configuración al archivo &lt;em&gt;application.yml&lt;/em&gt; el servicio REST es totalmente inconsciente de la autenticación que se realizará con OAuth y Keycloak.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=application.yml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/application.yml&#34;&gt;application.yml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/MessageResource.java&#34;&gt;MessageResource.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Iniciado Keycloak y el servicio REST con el comando &lt;code&gt;./gradlew run&lt;/code&gt; podemos iniciar el proceso de obtención de un &lt;em&gt;access token&lt;/em&gt; y llamar al servicio proporcionando el &lt;em&gt;access token&lt;/em&gt; obtenido y ver que pasa si no proporcionamos &lt;em&gt;token&lt;/em&gt; o uno modificado o inválido. Para obtener el &lt;em&gt;access token&lt;/em&gt; podemos emplear &lt;em&gt;curl&lt;/em&gt; accediendo al &lt;em&gt;endpoint&lt;/em&gt; de Keycloak para obtenerlos.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-token.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/curl-token.sh&#34;&gt;curl-token.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token.png&#34; title=&#34;Obtención de un token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/keycloak-access-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Obtenido el &lt;em&gt;access token&lt;/em&gt; si no lo proporcionamos en la llamada al servicio REST observaremos que la respuesta que obtenemos es un &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#34;&gt;código de estado HTTP 401&lt;/a&gt; indicando que se necesitan proporcionar las credenciales que con OAuth es un &lt;em&gt;token&lt;/em&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl-401.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/curl-401.sh&#34;&gt;curl-401.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token.png&#34; title=&#34;Llamada al servicio REST sin token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-no-token-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Proporcionando el token mediante una cabecera de la petición el servicio nos devolverá los datos que proporciona. Si el &lt;em&gt;token&lt;/em&gt; no es válido obtendremos un error HTTP 401.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=curl.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/curl.sh&#34;&gt;curl.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath.png&#34; title=&#34;Llamada al servicio REST con token&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-ouath-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered.png&#34; title=&#34;Llamada al servicio REST con token inválido&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/180/client-token-tampered-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Para usar Keycloak en una aplicación Java con Spring Boot deberemos añadir algunas dependencias al proyecto que usando &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt; como herramienta de construcción serían las siguientes.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/d3cd61c429b60c83531b624245f77bd4.js?file=build.gradle&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/d3cd61c429b60c83531b624245f77bd4/raw/build.gradle&#34;&gt;build.gradle&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;En el siguiente artículo mostraré un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente del servicio REST autenticado con OAuth en Java&lt;/a&gt; que haga las mismas llamadas que con &lt;em&gt;curl&lt;/em&gt; pero usando código Java mediante la librería &lt;a href=&#34;http://hc.apache.org/&#34;&gt;HttpComponents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrsOauth&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Servicio web REST implementado con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pivotal.io/pivotal-cloud-foundry/products/securing-restful-web-services-with-oauth2&#34;&gt;Securing RESTful Web Services with OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.apigee.com/api-services/content/oauth-20-client-credentials-grant-type&#34;&gt;Implementing the client credentials grant type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/28658735/what-are-keycloaks-oauth2-openid-connect-endpoints&#34;&gt;What are Keycloak&amp;rsquo;s OAuth2 / OpenID Connect endpoints?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/</id>
        <title>Monitorizar con eventos de Google Analytics una página web</title>        
        <updated>2016-09-19T23:00:00+02:00</updated>
        <published>2016-09-18T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Conociendo cómo usar los eventos de Analytics podemos conocer información interesante acerca de qué forma los usuarios interactúan con nuestra propia página web. Cualquier cosa que podamos realizar con JavaScript o ante cualquier evento que podamos reaccionar podemos medirla con Analytics.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/google-analytics.png&#34; class=&#34;right&#34; alt=&#34;Google Analytics&#34; title=&#34;Google Analytics&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;No se mucho de &lt;a href=&#34;https://www.google.es/intl/es/analytics/&#34;&gt;Google Analytics&lt;/a&gt; únicamente lo que he aprendido aplicándolo en mi propia bitácora. Cuando &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/&#34;&gt;cambié de herramienta para generar de forma estática la bitácora&lt;/a&gt; pude personalizar en mucha mayor medida que lo que podía primeramente con &lt;a href=&#34;https://www.blogger.com/&#34;&gt;Blogger&lt;/a&gt; y después tenía con &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Google Analytics además de proporcionarnos diversa información interesante sobre las visitas que recibimos en una página web puede servirnos para analizar el comportamiento de los usuarios, como interaccionan con la página, qué acciones realizan o que funcionalidades son usadas. La forma con la que podemos agregar información propia de la aplicación o página web es mediante los eventos de Analytics. Después de &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/analyticsjs/&#34;&gt;instalar el &lt;em&gt;script&lt;/em&gt; de Analytics&lt;/a&gt; podemos enviar eventos simplemente con la siguiente linea de código JavaScript.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/c66532a6eaab846b579ff55b902e874f.js?file=ad-enter.js&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/c66532a6eaab846b579ff55b902e874f/raw/ad-enter.js&#34;&gt;ad-enter.js&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;La información del evento de compone de categoría (&lt;em&gt;category&lt;/em&gt;), acción (&lt;em&gt;action&lt;/em&gt;), etiqueta (&lt;em&gt;opt_label&lt;/em&gt;), valor  (&lt;em&gt;opt_value&lt;/em&gt;) y si no supone interacción (&lt;em&gt;opt_noninteraction&lt;/em&gt;). Deberemos proporcionar valores según queramos estructurar los eventos obligatoriamente para categoría y acción siendo el resto opcionales. En mi bitácora uso Analytics para además de visualizar la información que proporciona sobre visitas, ubicación de los usuarios, idioma, plataforma y navegador que usan, páginas más visitadas, origen de las visitas para lanzar unos cuantos eventos que me proporcionen información sobre las pulsaciones que se realizan en el menú de categorías y en los enlaces de redes sociales, en la lista de artículos recientes, artículos destacados y en el &lt;em&gt;widget&lt;/em&gt; de ShareThis y si se hace en el del inicio del artículo o en el del final. En la sección &lt;em&gt;Comportamiento &amp;gt; Eventos&lt;/em&gt; se agrega toda la información de los eventos, además podremos monitorizar en tiempo real los eventos que se estén produciendo en la sección &lt;em&gt;Tiempo real &amp;gt; Eventos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El parámetro _opt&lt;em&gt;noninteraction&lt;/em&gt; afecta al porcentaje de rebote, un evento interactivo se considerará como una acción que ha realizado el usuario después de visitar la página, si ese evento lo consideramos como un objetivo podemos hacer que esa interacción no se considere en el porcentaje de rebote. Por ejemplo, si el usuario permanece en la página 30 segundos podemos lanzar un evento que indique tal circunstancia con un &lt;em&gt;timeout&lt;/em&gt; y esa visita no se considere en el porcentaje de rebote.&lt;/p&gt;

&lt;p&gt;Podemos medir cualquier cosa que deseemos incluso podemos conocer cuantos usuarios usan un bloqueador de anuncios como &lt;a href=&#34;https://adblockplus.org/es/&#34;&gt;AdBlock&lt;/a&gt;. Este es el código JavaScript que uso para conocer cuantos usuarios lo tiene activado o no.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/c66532a6eaab846b579ff55b902e874f.js?file=ad-block.js&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/c66532a6eaab846b579ff55b902e874f/raw/ad-block.js&#34;&gt;ad-block.js&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;En la sección &lt;a href=&#34;https://developers.google.com/analytics/devguides/collection/analyticsjs/events&#34;&gt;Seguimiento de eventos&lt;/a&gt; de la documetación de Google Analytics y en el resto de secciónes hay más detalles sobre esta herramienta. Para cualquier cosa que podamos reaccionar mediente un evento con JavaScript podemos medirla con Analytics, sirviéndonos para extraer información valiosa sobre los usuarios que nos permitan medir, entender y luego mejorar la experiencia de usuario de nuestra propia página web.&lt;/p&gt;

&lt;p&gt;Como para cualquier otra cosa en la que queramos profundizar una buena forma es con algunos libros específicos dedicados al tema. Los siguientes son dos libros de los &lt;a href=&#34;http://amzn.to/2cH8SXR&#34;&gt;muchos libros sobre Google Analytics&lt;/a&gt; disponibles en &lt;a href=&#34;http://www.amazon.es/&#34;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596158009&amp;linkId=4babfb60d80236251c0ef398bc3ab757&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=148420266X&amp;linkId=c179f357fbd31e18d25e93fd13c9729e&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/</id>
        <title>Ejemplo de API REST en Java con JAX-RS y Spring Boot</title>        
        <updated>2016-09-17T12:00:00+02:00</updated>
        <published>2016-09-17T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/spring.png&#34; class=&#34;right&#34; alt=&#34;Spring Framework&#34; title=&#34;Spring Framework&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En Java a través de JAX-RS, una de entre las varias &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;especificaciones de JavaEE&lt;/a&gt;, podemos desarrollar servicios web basados en &lt;a href=&#34;http://es.wikipedia.org/wiki/Representational_State_Transfer&#34;&gt;&lt;abbr title=&#34;Representational State Transfer&#34;&gt;REST&lt;/abbr&gt;&lt;/a&gt; y &lt;a href=&#34;http://json.org/&#34;&gt;&lt;abbr title=&#34;JavaScript Object Notation&#34;&gt;JSON&lt;/abbr&gt;&lt;/a&gt;. Estos servicios web al usar la infraestructura de la web y el protocolo HTTP podemos hacer uso de facilidades que proporciona como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;cacheo&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;protocolo seguro&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;HTTP/2&lt;/a&gt;, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/&#34;&gt;compresión&lt;/a&gt; o autenticación. Usando &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; podemos desarrollar servicios web autocontenidos al igual que podemos hacer con las aplicaciones web tradicionales.&lt;/p&gt;

&lt;p&gt;Para facilitar el inicio de los proyectos podemos usar &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; seleccionando los módulos web y JAX-RS con la implementación de referencia &lt;a href=&#34;https://jersey.java.net/&#34;&gt;Jersey&lt;/a&gt;. Al proyecto creado deberemos añadir los servicios que queramos proporcionar. En el ejemplo añadiré uno muy sencillo que devuelva un nuevo mensaje creado en un servicio inyectado en la clase del recurso del servicio REST.&lt;/p&gt;

&lt;p&gt;Esta es la definición del &lt;em&gt;bean&lt;/em&gt; del servicio que creará el mensaje para el contenedor de inversión de control, también definimos el recurso del servicio REST para Jersey.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Main.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/Main.java&#34;&gt;Main.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=JerseyConfig.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/JerseyConfig.java&#34;&gt;JerseyConfig.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;El servicio lo definimos en una interfaz y una clase que la implementa.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageService.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/MessageService.java&#34;&gt;MessageService.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=DefaultMessageService.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/DefaultMessageService.java&#34;&gt;DefaultMessageService.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=Message.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/Message.java&#34;&gt;Message.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Es habitual que los servicios REST produzca como resultado un JSON como formato para devolver los datos. No necesitaremos hacer nada especial para convertir el &lt;em&gt;Java Bean&lt;/em&gt; de la clase &lt;em&gt;Message&lt;/em&gt; a JSON, de ello se encargará automáticamente JAX-RS. Con anotaciones como &lt;a href=&#34;http://docs.oracle.com/javaee/7/api/javax/ws/rs/QueryParam.html&#34;&gt;@QueryParam&lt;/a&gt; podemos obtener los parámetros del &lt;em&gt;query string&lt;/em&gt;, de la URL o cabeceras enviadas.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=MessageResource.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/MessageResource.java&#34;&gt;MessageResource.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Iniciada la aplicación con &lt;code&gt;./gradlew run&lt;/code&gt; y con la siguiente comando de &lt;code&gt;curl&lt;/code&gt; y URL obtendremos el mensaje en formato JSON en la salida.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=curl.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/curl.sh&#34;&gt;curl.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/76862386194b211fc775b5fb36732bc9.js?file=out.txt&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/76862386194b211fc775b5fb36732bc9/raw/out.txt&#34;&gt;out.txt&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Al diseñar APIs REST más complejas que este sencillo ejemplo conviene conocer el término &lt;a href=&#34;https://en.wikipedia.org/wiki/HATEOAS&#34;&gt;HATEOAS&lt;/a&gt;. Deberemos definir como organizar la información devuelta por los diferentes que los libros &lt;a href=&#34;http://amzn.to/2cxWMRo&#34;&gt;RESTful Web APIs&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2cEzQz5&#34;&gt;REST in Practice&lt;/a&gt; además de &lt;a href=&#34;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;artículos con consejos sobre como diseñar APIs RESTful&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1449358063&amp;linkId=e0cd589f357dfc1c77cfb004e6668fa5&amp;internal=1&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0596805829&amp;linkId=3b1ee2b6ff595b6b3c2fd7c70eb35cc7&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Una vez que disponemos del servicio REST podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;añadir autenticación y autorización con Keycloak como proveedor de OAuth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringBootJaxrs&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;Introducción y nuevas características de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/&#34;&gt;Aplicación de ejemplo usando varias especificaciones de Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/buenas-practicas-para-el-diseno-de-una-api-restful-pragmatica/&#34;&gt;Buenas prácticas para el diseño de una API RESTful pragmática&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/09/articulo-2-de-yo-apoyo-al-software-libre/</id>
        <title>Artículo #2 de Yo apoyo al software libre</title>        
        <updated>2016-09-09T23:30:00+02:00</updated>
        <published>2016-09-09T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/09/articulo-2-de-yo-apoyo-al-software-libre/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Recibidas nuevas transferencias de Google y Amazon por la publicidad AdSense y los enlaces de afiliado respectivamente que incluyo en esta bitácora he realizado unas pequeñas nuevas donaciones económicas a varios proyectos de software libre que uso habitualmente.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/firefox.png&#34; class=&#34;right&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/wikipedia.png&#34; class=&#34;right&#34; alt=&#34;Wikipedia&#34; title=&#34;Wikipedia&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En diciembre de 2015 escribía un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/12/yo-apoyo-al-software-libre-tu-tambien/&#34;&gt;artículo sobre la primera donación económica&lt;/a&gt; que hacía un proyecto de software libre. En esa primera donación compré un par de camisetas a la &lt;a href=&#34;https://fsfe.org/index.en.html&#34;&gt;Free Software Foundation Europe&lt;/a&gt; o FSFE. Pasados ocho nuevos meses desde entonces me llegó una nueva transferencia de Google por la publicidad AdSense que incluyo en esta bitácora de alrededor de 80€, hace unos meses recibí otra por los enlaces de afiliado de Amazon que en este caso fue de alrededor de 25€. Como la bitácora no me genera ningún tipo de gasto ni para el hospedaje ni para el dominio (salvo buena parte de mi tiempo, que no es poco) me planteo hacer una nueva donación a algún proyecto o algunos proyectos.&lt;/p&gt;

&lt;p&gt;Pensando que proyectos serían los siguientes y que cantidad me he decidido por los siguientes &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt;, &lt;a href=&#34;http://archlinuxarm.org/&#34;&gt;Arch Linux ARM&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; y &lt;a href=&#34;https://es.wikipedia.org/wiki/Wikipedia:Portada&#34;&gt;Wikipedia&lt;/a&gt; con 10€ cada uno para un total de 40€, que al final solo han sido 20€ porque el medio para hacer el pago utilizando de &lt;a href=&#34;http://spi-inc.org/&#34;&gt;Software in the Public Interest&lt;/a&gt; tanto en Arch Linux como en Arch Linux ARM por algún motivo no me acepta la tarjeta bancaria virtual, en la siguiente donación quizá lo intente de nuevo o de otra forma por ejemplo comprando una camiseta en &lt;a href=&#34;https://www.freewear.org/?page=list_items&amp;amp;org=Archlinux&#34;&gt;FreeWear&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como sistema sistema operativo uso GNU/Linux y la distribución Arch Linux tanto a modo personal en mi portátil y en el trabajo y a pesar de ser una distribición &lt;em&gt;rolling release&lt;/em&gt; o en constante actualización raras han sido las veces que he tenido algún problema desde hace ya más de 6 años. Esta es la distribución con la que al final personalmente he acabado más contento después de pasar por &lt;a href=&#34;https://fedoraproject.org/&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; y &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;. Arch Linux ARM lo utilizo en una Raspberry Pi 1 modelo B (la que tiene 256 MiB de memoria) para hacer descargas y también muy contento ya que tampoco me da problemas. Firefox es el navegador de mi preferencia después de una no muy extensa época usando &lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt;, lo uso a modo personal y en el trabajo como desarrollador web. Finalmente, aunque no sea un proyecto de software libre es un proyecto colaborativo de libre acceso y desde hace tiempo una gran fuente de conocimiento acumulada de la que suelo incluir muchos enlaces en esta bitácora, es la Wikipedia.&lt;/p&gt;

&lt;p&gt;Las cantidades que he donado no son muy elevadas pero espero que ayuden a estos proyectos a continuar su desarrollo y seguir mejorando. Esta de las pocas veces que «pago» algo por el software que utilizo exceptuando las veces en las que lo he hecho por el &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/05/impuesto-windows.html&#34;&gt;impuesto Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hubo una época que usaba el sistema operativo de Microsoft sin licencia de Windows XP. Hoy en día &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/windows-10-y-office-2016-tan-faciles-de-usar-sin-licencia-como-siempre/&#34;&gt;Windows 10 y Office 2016 siguen siendo fáciles de usar sin licencia&lt;/a&gt; un buen porcentaje de usuarios tampoco pagará por el software que usa lo que en realidad afecta negativamente al software libre ya que le impide ganar cuota de uso. El software libre no es sinónimo de gratis, aunque en la mayoría de los casos lo es, sino que proporciona a sus usuarios las 4 libertades explicadas en &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.es.html&#34;&gt;¿Qué es el software libre?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estas son las pruebas fehacientes que muestran las donaciones que he hecho a los dos proyectos anteriores.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-mozilla.png&#34; title=&#34;Donación Mozilla&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-mozilla-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-mozilla-email.png&#34; title=&#34;Donación Mozilla&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-mozilla-email-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Donación Mozilla&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-wikipedia.png&#34; title=&#34;Donación Wikipedia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-wikipedia-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-wikipedia-email.png&#34; title=&#34;Donación Wikipedia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/177/donacion-wikipedia-email-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Donación Wikipedia&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Probablemente dentro de alrededor de otros 8 meses cuando reciba nuevas transferencias de Google y Amazon haré una nueva donación a otra serie de proyectos que uso quizá en ese caso a &lt;a href=&#34;http://www.libreoffice.org/&#34;&gt;LibreOffice&lt;/a&gt;, &lt;a href=&#34;http://www.videolan.org/vlc/&#34;&gt;VLC&lt;/a&gt;, &lt;a href=&#34;http://gnome.org/&#34;&gt;GNOME&lt;/a&gt;, &lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt;, &amp;hellip; o lo intente de nuevo con Arch Linux. Y estos serán proyectos muy conocidos que no necesiten tanta colaboración económica seguro que hay muchos proyectos menos conocidos pero muy importantes que también necesitan financiación.&lt;/p&gt;

&lt;p&gt;Puede que ni siquiera uses GNU/Linux o software libre pero al visitar esta bitácora puedes considerar que tú también has colaborado con el software libre ;) y simplemente usarlo o promocionarlo ya es una buena forma de apoyarlo. Si lo hicieses, ¿a que proyectos harías tú una donación?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/&#34;&gt;Yo apoyo al software libre&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wikimediafoundation.org/wiki/Donaciones&#34;&gt;Donaciones Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.mozilla.org/Donate&#34;&gt;Donaciones Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/</id>
        <title>Sobre los ínfimos impuestos que paga Apple</title>        
        <updated>2016-09-02T23:30:00+02:00</updated>
        <published>2016-08-31T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/apple.png&#34; class=&#34;right&#34; alt=&#34;Apple&#34; title=&#34;Apple&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El 30 de agosto de 2016 la Comisión Europea anunciaba que &lt;a href=&#34;http://www.apple.com/&#34;&gt;Apple&lt;/a&gt; debía devolver a Irlanda la cantidad correspondiente obtenida por las ventajas fiscales que considera irregulares, una cantidad astronómica de unos 13000 millones de euros mas los intereses desde 2003. Si ya Irlanda ofrece una fiscalidad ventajosa al tener un tipo impositivo del 12,5% de los beneficios, Apple con acuerdos conseguía pagar un 1% y un 0,005%. Acuerdos que la comisión Europea considera irregulares porque solo se aplica a algunas empresas como Apple siendo una desventaja y trato de favor respecto a otras empresas establecidas en Irlanda. Esta fiscalidad ventajosa es el motivo de que otras muchas empresas tecnológicas de EEUU tengan su sede europea en Irlanda, en España por ejemplo debería haber pagado un 25%.&lt;/p&gt;

&lt;p&gt;Algunos medios informaban así de la noticia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eldiario.es/economia/Bruselas-Apple-fiscales-ilegales-Irlanda_0_553644787.html&#34;&gt;Bruselas obliga a Apple a devolver 13.000 millones por ayudas fiscales ilegales en Irlanda &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://economia.elpais.com/economia/2016/08/30/actualidad/1472548799_072096.html&#34;&gt;Bruselas sanciona a Apple con la devolución de 13.000 millones por ventajas fiscales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elespanol.com/economia/macroeconomia/20160830/151735181_0.html&#34;&gt;Así es como defraudan a Hacienda las grandes tecnológicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eldiario.es/economia/cifras-detras-impuestos-debe-Apple_0_553645153.html&#34;&gt;Ocho cifras que explican qué supone para Apple pagar 13.000 millones a Irlanda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://economia.elpais.com/economia/2016/08/31/actualidad/1472634892_118904.html&#34;&gt;¿Por qué Irlanda no quiere recuperar el dinero de Apple? Las claves de la sanción de Bruselas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elespanol.com/economia/empresas/20160901/152235690_0.html&#34;&gt;Apple y su ridícula factura fiscal en España: 19 millones en 10 años&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Horas después Apple en su web publicaba una carta firmada por Tim Cook indicando lo mucho que contribuye en empleos e inversiones en Europa que se verán amenazadas además de afirmar que no ha recibido ninguna ventaja fiscal de la que se le acusa.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apple.com/es/customer-letter/&#34;&gt;Un mensaje para la comunidad de Apple en Europa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/175/apple-tim-cook-letter.png&#34; title=&#34;Carta de Apple a su comunidad en Europa&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/175/apple-tim-cook-letter-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Carta de Apple a su comunidad en Europa&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Hasta aquí los hechos.&lt;/p&gt;

&lt;p&gt;Lo primero que hay que destacar es que en realidad la Comisión Europea no le pone una multa a Apple ni a Irlanda por cometer una irregularidad sino que simplemente le obliga a devolver lo que debería haber pagado y no durante todo el tiempo que cometió la irregularidad sino simplemente desde el 2003, las ventajas fiscales se remontan a 1991. Pagar menos impuestos de los que debe le sale barato a Apple, si no le obligan esos miles de millones que no paga en impuestos, si le obligan solo tiene que devolver lo que debería haber pagado igual que si no hubiera hecho la trampa y solo a partir de una fecha en que la situación no ha prescrito. Toda una oportunidad para obtener máximos beneficios.&lt;/p&gt;

&lt;p&gt;La carta de Tim Cook demuestra el tono con el que actúa y por el medio en el que la publica, en su propio sitio web, parece más bien dirigida a salvar su imagen entre sus usuarios y clientes que a la Comisión Europea. «la dirección de Apple supo ver un lugar rico en talento» a lo que seguidamente se atribuye también ser ejemplo para otras multinacionales, ya sería más bien por las ventajas fiscales del lugar. Un buena parte de la carta está dirigida a expresar la cantidad de empleos e inversión que según Apple genera ya sea directamente, que solo son unos paupérrimos 6000 para su volumen de negocio, y un millón y medio según ellos entre desarrolladores de aplicaciones y pequeñas y medianas empresas que dependen de Apple. Por este mensaje parece que Apple se debe consentir su irregularidad en aras de mantener esta actividad que alardea de generar. En la carta por supuesto dice que su ingeniería fiscal está de acuerdo a la legalidad y que no ha recibido las ventajas fiscales de las que le acusa la Comisión Europea. Comisión Europea que no debe estar de acuerdo después de años de observación e investigación.&lt;/p&gt;

&lt;p&gt;Apple junto con Estados Unidos e Irlanda recurrirán la resolución. Irlanda con su tipo impositivo reducido y prácticamente inexistente para Apple &lt;a href=&#34;http://economia.elpais.com/economia/2010/12/07/actualidad/1291710775_850215.html&#34;&gt;en 2010 fué rescatada&lt;/a&gt; por importe de 45000 millones de euros. Estados Unidos interviniendo en un asunto para proteger los intereses de una de sus empresas más grandes. Y todo esto sin el infame &lt;a href=&#34;http://economia.elpais.com/economia/2015/03/02/actualidad/1425256390_372094.html&#34;&gt;acuerdo de inversiones y libre comercio TTIP&lt;/a&gt; que el estado norteamericano quiere acordar con la Unión Europea con el que esta disputa se resolvería en un tribunal supranacional que reduciría la soberanía de la Unión Europea y sus estados miembro. Parece que son los EEUU los que más intereses tienen y rápido en aprobar el TTIP ya que con seguridad les sea muy y más ventajoso para ellos y sus empresas. En época de paz una forma de dominio y nueva forma de guerra fría es la económica. Si EEUU es capaz de espiar a ciudadanos y &lt;a href=&#34;http://www.20minutos.es/noticia/2503946/0/eeuu-espia/bce-merkel/wikileaks/&#34;&gt;presidentes de gobiernos aliados&lt;/a&gt; no sería de extrañar que espiase también a empresas extranjeras para proteger a la suyas y darles ventajas competitivas o su economía capitalista.&lt;/p&gt;

&lt;p&gt;En este caso la elegida ha sido Apple siendo la empresa de referencia pero otras empresas tecnológicas norteamericanas emplean la misma ingeniería fiscal para reducir a la mínima expresión los impuestos que pagan en sus actividades en todo el continente europeo. ¿Habrá alguna siguiente obligada a pagar los impuestos que le correpondían?. Ingeniería fiscal que no está al alcance de las pequeñas y medianas empresas ni de los ciudadanos y por ello es injusta. No es casualidad y tampoco es porque los irlandeses sean especialmente listos, talentosos o más trabajadores que otras empresas como &lt;a href=&#34;http://www.microsoft.com/&#34;&gt;Microsoft&lt;/a&gt;, &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.es/&#34;&gt;Amazon&lt;/a&gt; o &lt;a href=&#34;https://www.facebook.com/&#34;&gt;Facebook&lt;/a&gt; entre otras grandes también tengan su sede europea en Irlanda.&lt;/p&gt;

&lt;p&gt;Hay otras disputas como en el caso de &lt;a href=&#34;http://www.adslzone.net/2016/04/20/europa-acusa-oficialmente-google-monopolio-android/&#34;&gt;Google acusada de monopolio en Europa&lt;/a&gt; que puede acarrearle en este caso sí alguna cuantiosa sanción económica. O la &lt;a href=&#34;https://es.globalvoices.org/2016/02/15/netizen-report-la-ue-se-enfrenta-a-facebook-en-materia-de-privacidad/&#34;&gt;privacidad de los ciudadanos europeos por parte de Facebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Es tu decisión y responsabilidad también sabiendo esta información de que empresas y productos consumes. Si esta es la legalidad no se a que esperan los políticos honestos, con coraje y determinación para cambiarla y hacerla justa.&lt;/p&gt;



        </content>
        
            
                <category term="apple"/>
            
                <category term="blog-stack"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/08/eligiendo-proveedor-de-internet-finalmente-pepephone/</id>
        <title>Eligiendo proveedor de internet, finalmente Pepephone</title>        
        <updated>2016-08-14T22:30:00+02:00</updated>
        <published>2016-08-14T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/eligiendo-proveedor-de-internet-finalmente-pepephone/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Cada unos de los operadores de telecomunicaciones más conocidos e importantes ofrecen internet ya sean con fibra óptica, ADSL o incluso 4G. Junto con la forma de ofrecer internet que en la mayoría es mediante fibra las diferencias están en el precio y las diferencias son significativas. En este artículo comentaré que opciones he barajado y por cual me he decidido finalmente.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/pepephone.png&#34; class=&#34;right&#34; alt=&#34;Pepephone&#34; title=&#34;Pepephone&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Después de hacer unos cuantos temas ha llegado el turno de elegir un proveedor de internet. Como en todos los casos en los que hay que tomar alguna decisión he empezado por recopilar que opciones ofrece cada compañía, con que características y precios. Hay diferencias importantes entre algunas de las ofertas de los operadores que dependiendo de nuestras necesidades alguna se adaptará mejor, no hay una oferta que de forma absoluta sea la mejor aunque puede que si para una mayoría.&lt;/p&gt;

&lt;p&gt;Mis necesidades era simplemente de internet sin combinar con algún plan de móvil, así que con este simple requisito empecé a informarme. Varios operadores ofrecen internet ya sea con &lt;abbr title=&#34;Asymmetric Digital Subscriber Line&#34;&gt;ADSL&lt;/abbr&gt; si no tienen cobertura de fibra entre ellos &lt;a href=&#34;http://www.movistar.es/&#34;&gt;Movistar&lt;/a&gt;, &lt;a href=&#34;http://www.vodafone.es&#34;&gt;Vodafone&lt;/a&gt;, &lt;a href=&#34;http://www.orange.es/&#34;&gt;Orange&lt;/a&gt;, &lt;a href=&#34;http://www.amena.com/&#34;&gt;Amena&lt;/a&gt;, &lt;a href=&#34;http://www.pepephone.com/&#34;&gt;Pepephone&lt;/a&gt; o &lt;a href=&#34;http://www.euskaltel.com&#34;&gt;Euskaltel&lt;/a&gt;. De entre estos debía buscar la oferta que más me convenciera. Una de las primeras diferencias que encontré y que me llamaron la atención aunque ya estaba informado es que en los casos de Pepephone y Amena ofrecen una modalidad de internet sin teléfono fijo lo que evita el abultado coste de la línea o ya está incluido en el precio haciendo que sean algo más baratas. Todas las ofertas que vi del resto de operadores incluían la instalación del obsoleto teléfono fijo que en mi caso no iba a utilizar. Como con el móvil tengo más que suficiente para llamadas de voz las opciones de Amena y Pepephone que no necesitan instalar teléfono junto con el precio ya era un par de buenos motivos para posicionar las opciones.&lt;/p&gt;

&lt;p&gt;Aún con dos buenos motivos revisé cuales eran los precios de cada uno de los operadores. Conociéndolos la verdad es que algunos operadores se exceden en sus precios. ¿60€ o más mensuales por tener internet? Por mucho ancho de banda simétrico y megas que ofrezcan me parecía muy caro, además aún descargando mediante &lt;abbr title=&#34;Peer-to-peer&#34;&gt;P2P&lt;/abbr&gt; gran cantidad de cosas es innecesario la cantidad de ancho de banda que ofrecen. 300, 100, 50, incluso 30 o menos son más de lo que necesita un porcentaje altísimo de gente para navegar por internet e incluso para hacer un uso moderado descargas por P2P el menor ancho de banda contratable es suficiente. No se quien necesitará 300 megas simétricos de bajada y subida para uso residencial, me parece más que una necesidad publicidad para endosar una factura de más de 60 €/mes a los clientes.&lt;/p&gt;

&lt;p&gt;Estos son los precios aproximados finales y fuera de promociones que los operadores mayoritarios se encargan de ocultar con promociones durante unos meses para desinformar a sus futuros clientes. Salvo Pepephone y la opción de Amena en casa que lo dejan bastante claro además de ser de los mejores precios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.movistar.es/particulares/internet/adsl-fibra-optica?pid=PA-home-NuestrosProductos-2&#34;&gt;Movistar: 32,30 + 17,40 (linea), 53,40 €/mes, fibra 30Mb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vodafone.es/tienda/particulares/es/internet-y-fijo/tarifas-cobertura-fibra-adsl/?mostrarGE=true&#34;&gt;Vodafone: 31,85 + 18,15 (linea), 50 €/mes, fibra 30Mb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.orange.es/adsl/&#34;&gt;Orange 25,95 + 18,15 (linea), 44,1 €/mes, fibra 50Mb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.euskaltel.com/CanalOnline/particulares/tienda/fijo/modalidades-internet&#34;&gt;Euskaltel: 44 €/mes (línea incluída), cable/fibra 30 Mb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jazztel.com/internet/fibra.html&#34;&gt;Jazztel: 19,32 + 19,34, 38,64 €/mes, fibra 20 Mb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amena.com/tarifas/&#34;&gt;Amena en casa: 29,95 €/mes, 4G&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pepephone.com/adsl&#34;&gt;Pepephone: 23,6 €/mes, ADSL hasta 20 Mb (la máxima que permita la linea)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así que las opciones mejor posicionadas como candidatas era el &lt;a href=&#34;https://www.pepephone.com/adsl&#34;&gt;ADSL de Pepephone&lt;/a&gt; o la opción de &lt;a href=&#34;http://tiendaonline2.amena.com/tarifas/amena-en-casa&#34;&gt;Amena en casa&lt;/a&gt;, sin teléfono fijo y de las opciones más baratas que hay. Comparando estas opciones la de Amena en casa me gustaba que no necesitaba instalación ya que funciona las redes de telefonía 4G al igual que los móviles ofreciendo velocidades similares a la fibra y mayores incluso que el ADSL. En contra de Amena en casa es que es unos 6 euros al mes más cara que el ADSL de Pepephone y que tiene un límite de tráfico de 40 GiB mensuales que no creo que la mayoría de meses superase pero alguno que hiciese descargas con P2P o alguna descarga directa puede que si, superando ese límite de tráfico no se incurre en ningún gasto adicional pero se limita la velocidad a unos ridículos 128 Kbps. Por los mismos motivos a favor de el ADSL de Pepephone tenía el precio y en su contra que necesita instalación de línea nueva que cuesta unos 90 € mas 39 € del coste del &lt;em&gt;router&lt;/em&gt; ADSL, aunque adquirir el &lt;em&gt;router&lt;/em&gt; es opcional y nos puede servir el de algún otro operador si ya disponemos con anterioridad, yo no tenía. Con Pepephone el coste de instalación y el &lt;em&gt;router&lt;/em&gt; llega a 129 € con iva incluido, la opción de Amena en casa solo tiene el coste del &lt;em&gt;router&lt;/em&gt; que es de 59 €. Una diferencia de 70 € que con el menor precio de Pepephone se compensa en 12 meses (mucho antes si lo comparamos con otra opción), 15 si incluyésemos el que nos diésemos de baja en Pepephone y la línea que tendría un coste administrativo de 18€. Finalmente por el precio de 23,6 € al mes, por no tener límite de tráfico y por su forma de trato a sus clientes me decidí por Pepephone. El coste inicial es significativo pero pasados unos meses compensa.&lt;/p&gt;

&lt;p&gt;Otro aspecto de Pepephone que me gustaba es el reconocimiento en el trato que ofrecen a los clientes que ellos mismos destacan. Mi experiencia anterior era con Euskaltel y estos tienen la mala costumbre cada año sin que lo pidas subir los megas pero también la factura. En vez de más megas preferiría internet más barato, los accionistas de esa empresa al igual que otras no deben pensar lo mismo. Me parece que los operadores dominantes tratan de exprimir a sus clientes con «ofertas» envenenadas, ahora están con las que incluyen televisión de pago y el fútbol. Los incautos se darán cuenta de que les llegan facturas de entre 50 y 80 euros mensuales, alguien tiene que pagar (que no cuenten conmigo) las obscenas fichas y cláusulas de rescisión de las estrellas del fútbol aunque sean &lt;a href=&#34;http://www.eldiario.es/catalunya/Messi-condenados-carcel-fraude-fiscal_0_534396864.html&#34;&gt;condenados a 21 meses de cárcel por fraude fiscal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Volviendo a Pepephone, el &lt;em&gt;router&lt;/em&gt; ADSL2+ que proporciona Pepephone está bastante bien en el momento de mi contratación es un &lt;a href=&#34;https://www.asus.com/es/Networking/DSLN14U/&#34;&gt;ASUS DSL-N14U&lt;/a&gt; del que en &lt;a href=&#34;http://www.redeszone.net/&#34;&gt;RedesZone&lt;/a&gt; han hecho varios artículos con un análisis muy detallado. Estas son su características principales:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WiFi 802.11 b/g/n de hasta 300 Mbps&lt;/li&gt;
&lt;li&gt;Cuatro puertos Fast-Ethernet&lt;/li&gt;
&lt;li&gt;Un puerto USB 2.0&lt;/li&gt;
&lt;li&gt;64 MB memoria RAM y 16 MB de memoria &lt;em&gt;flash&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;CPU Ralink RT63365E&lt;/li&gt;
&lt;li&gt;Soporta descargas por torrent y compartición con CIFS/SAMBA, FTP, DLNA, VPN PPTP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Artículos analizándo el &lt;em&gt;router&lt;/em&gt; ASUS DSL-N14U:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redeszone.net/2016/07/25/analisis-del-router-asus-dsl-n14u-del-operador-pepephone/&#34;&gt;Análisis del &lt;em&gt;router&lt;/em&gt; ASUS DSL-N14U del operador Pepephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redeszone.net/pepephone/asus-dsl-n14u-analisis/&#34;&gt;ASUS DSL-N14U: Análisis del nuevo &lt;em&gt;router&lt;/em&gt; de Pepephone para su ADSL2+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redeszone.net/pepephone/asus-dsl-n14u-manual-configuracion/&#34;&gt;ASUS DSL-N14U: Manual de configuración del nuevo &lt;em&gt;router&lt;/em&gt; de Pepephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redeszone.net/pepephone/asus-dsl-n14u-manual-servidor-vpn-pptp/&#34;&gt;ASUS DSL-N14U: Manual de configuración del servidor VPN PPTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solicitada la instalación en unos días un técnico de Movistar me instaló la línea nueva (linea que realmente es de Vodafone) y el &lt;em&gt;router&lt;/em&gt; me llegó por mensajero al día siguiente, en una semana ya disponía de internet sin complicaciones en la instalación. La velocidad bruta no es la misma que tenía con el cable de Euskaltel y será menor que la fibra pero para navegar no hay mucha diferencia y si en el precio. Como dice Pepephone el ADSL es algo más feo que la fibra y tiene razón de que hay mucha tontería con los megas, para navegar no noto apenas diferencia. Lo noto cuando actualizo &lt;a href=&#34;https://www.archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; o cuando pongo la &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; a descargar por P2P. Aún llegando solo a 630 KiB/s en la descarga cuando con Euskaltel llegaba a 2 MiB/s me es más que suficiente, la RPi la dejo el tiempo que haga falta y en unas horas no hay película que no pueda descargar y la actualización de Arch lleva algo más de tiempo en la descarga pero no algo excesivo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/169/57b048f847e0d91df7ed6dcc.png&#34; title=&#34;Test de velocidad de ADSL Pepephone&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/169/57b048f847e0d91df7ed6dcc.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Test de velocidad de ADSL Pepephone&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Estos 9 MiB de bajada y 400 KiB de subida son algo menos de la mitad teórica del ADSL y en algunas &lt;a href=&#34;http://www.testdevelocidad.es/&#34;&gt;pruebas de velocidad&lt;/a&gt; que he hecho me ha dado resultados de 4 MiB / 200 KiB pero aún en el peor de los casos en la navegación no es perceptible. Respecto a la estabilidad de la linea sin ningún problema, en las pruebas de &lt;em&gt;ping&lt;/em&gt; que he hecho no se pierden paquetes. Esta menor velocidad que la teórica es algo que no era una sorpresa para mí que ya me lo esperaba aunque pensaba que sería algo mejor y como he comentado la velocidad no es a lo que más importancia le he dado, si al precio.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/169/pepephone.jpg&#34; title=&#34;Router ADSL de Pepephone&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/169/pepephone-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Router ADSL de Pepephone&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="desempaquetado"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/</id>
        <title>Por qué guardar las fechas en UTC en la base de datos</title>        
        <updated>2016-08-14T02:30:00+02:00</updated>
        <published>2016-08-13T01:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/postgresql.png&#34; class=&#34;right&#34; alt=&#34;PostgreSQL&#34; title=&#34;PostgreSQL&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Es rara la aplicación que trabajado con bases de datos no maneje fechas, quizá es menos habitual aplicaciones que trabajan con fechas y diferentes horarias, esto es haciendo alguna conversión entre zonas horarias. Si se nos presenta el caso de trabajar con fechas y diferentes zonas horarias haremos bien en hacer que las fechas que guardemos en la base de datos estén en la misma zona horaria al menos y convertirla posteriormente a la zona horaria que necesite la aplicación. &lt;abbr title=&#34;Coordinated Universal Time&#34;&gt;UTC&lt;/abbr&gt; además de ser una zona horaria neutra evita el problema de que algunas bases de datos o lenguajes de programación para los campos fecha no guarda las zonas horarias con lo que puede ocurrirnos que guardemos la fecha en una zona horaria y la recuperemos en otra produciendo posiblemente incoherencias en las fechas por una hora.&lt;/p&gt;

&lt;h3 id=&#34;por-qué-elegir-utc&#34;&gt;¿Por qué elegir UTC?&lt;/h3&gt;

&lt;p&gt;Principalmente porque es una zona horaria neutra, universal y que elimina ambigüedades ya que que no tiene &lt;abbr title=&#34;Daily Saving Time&#34;&gt;DST&lt;/abbr&gt; o horario de verano y podremos guardar las fechas sin temor a que al recuperarlas estén en otra zona horaria si la base de datos o el lenguaje de programación para guardarlas no las soporta.&lt;/p&gt;

&lt;p&gt;Otros motivos que se mencionan en un comentario en inglés &lt;a href=&#34;http://ideas.kentico.com/forums/239189-kentico-product-ideas/suggestions/6825844-always-store-dates-times-in-utc-in-the-database&#34;&gt;Always store dates/times in UTC (in the database)&lt;/a&gt; y algún otro en &lt;a href=&#34;http://blog.abodit.com/2010/02/datetime-values-should-always-be-stored-in-utc/&#34;&gt;DateTime values should always be stored in UTC&lt;/a&gt; son que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calcular duraciones de tiempo es simple. El periodo de tiempo entre la 2:30 AM UTC y las 3:30 AM UTC es siempre una hora cosa que no ocurre en las horas que hay cambio de horario pudiendo ser el periodo entre cero y dos horas.&lt;/li&gt;
&lt;li&gt;No hay fechas inválidas cuando se adelanta la hora por ejemplo de las 2:00 AM a las 3:00 AM, pudiendo ser que las 2:30 AM en esa zona horaria no exista.&lt;/li&gt;
&lt;li&gt;Se evitan problemas al ordenar o agrupar fechas pudiendo ser el caso de que una fecha con tiempo 2:59 AM sea antes que las 2:01 AM por causa del cambio horario.&lt;/li&gt;
&lt;li&gt;Los cambios horarios están sujetos a cambios nada predecibles y varían a lo largo del tiempo con relativa frecuencia con lo para calcular de forma fiable cuantas horas hay entre dos fechas se necesita guardar las variaciones históricas de DST. Ni las fechas de cambios DST son constantes ni las zonas horarias se mantienen fijas para las localizaciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez recuperada la fecha en UTC podemos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/&#34;&gt;convertir de diferentes formas una fecha de una zona horaria a otra en Java&lt;/a&gt; y en cualquier otro lenguaje con las facilidades que proporcione según la zona horaria a visualizar la fecha.&lt;/p&gt;

&lt;h3 id=&#34;cúal-es-el-caso-que-puede-dar-problemas&#34;&gt;¿Cúal es el caso que puede dar problemas?&lt;/h3&gt;

&lt;p&gt;Uno en el que la hora a guardar coincida con un cambio de hora de la zona horaria en la que guardemos las fechas. Por ejemplo, en España el año 2016 el cambio de horario de verano (DST/CEST) a horario de invierno (CET) se hará el 30 de octubre momento en el que a las 3:00 (CEST) volverán a ser las 02:00 pero con diferente zona horaria (CET).&lt;/p&gt;

&lt;h3 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h3&gt;

&lt;p&gt;Supongamos que tenemos la fecha 30 de octubre a las 02:30 CEST y la guardamos en la base de datos pero sin la zona horaria pasando a estar implícita. En esta fecha y hora se produce un cambio horario de horario de verano a horario de invierno en España. Al recuperar la fecha será 30 de octubre a las 02:30 CET, la diferencia está entre el &lt;abbr title=&#34;Central European Summer Time&#34;&gt;CEST&lt;/abbr&gt; y &lt;abbr title=&#34;Central European Time&#34;&gt;CET&lt;/abbr&gt; o la diferencia horaria +02:00 y +01:00. Una hora de diferencia entre la original y la que recuperamos de la base de datos después de hacer la conversión.&lt;/p&gt;

&lt;p&gt;Esto puede probarse con el siguiente ejemplo de código de un programa Java que guarda y recupera de una base de datos &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; una fecha que está en el intervalo de cambio horario. En el ejemplo utilizaré &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=Main.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7/raw/Main.java&#34;&gt;Main.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=System.out&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7/raw/System.out&#34;&gt;System.out&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/795512b5f0cb61bf88b16dfff519f4e7/raw/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Tabajar con fechas no es simple, es muy curioso y no debemos hacer &lt;a href=&#34;http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time&#34;&gt;suposiciones sobre las fechas que son incorrectas&lt;/a&gt; en las aplicaciones.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/DateTimeDatabase&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;cd misc/docker/postgresql/ &amp;amp;&amp;amp; docker-compose up &amp;amp;&amp;amp; ./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/01/convertir-fechas-y-husos-horarios-en-java/&#34;&gt;Convertir fechas y husos horarios en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ideas.kentico.com/forums/239189-kentico-product-ideas/suggestions/6825844-always-store-dates-times-in-utc-in-the-database&#34;&gt;Always store dates/times in UTC (in the database)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/</id>
        <title>Cómo y por que redirigir tráfico web del dominio raíz al subdominio www (o viceversa)</title>        
        <updated>2016-08-05T18:00:00+02:00</updated>
        <published>2016-08-05T17:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La redirección del dominio raíz al subdominio es una de las cosas básicas que es recomendable realizar en todo dominio, para ello hay que añadir algo de configuración propia de cada servidor para realizar la redirección. Junto con usar el uso del protocolo HTTPS y forzar su uso con otra redirección mejoraremos el SEO y evitaremos penalizaciones por contenido duplicado.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/html.png&#34; class=&#34;right&#34; alt=&#34;HTML&#34; title=&#34;HTML&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El nombre de un dominio está formado por varios subdominios separados por un caracter punto. Están los dominios de nivel superior, los genéricos y más antiguos &lt;em&gt;.com&lt;/em&gt;, &lt;em&gt;.org&lt;/em&gt;, &lt;em&gt;.info&lt;/em&gt;, &lt;em&gt;.net&lt;/em&gt;, los propios de cada país o territoriales &lt;em&gt;.es&lt;/em&gt;, &lt;em&gt;.fr&lt;/em&gt;, &lt;em&gt;.de&lt;/em&gt; y más recientemente un montón de &lt;a href=&#34;https://es.wikipedia.org/wiki/Dominio_de_nivel_superior&#34;&gt;nuevos dominios de nivel superior&lt;/a&gt; (&lt;em&gt;.futbol&lt;/em&gt;, &lt;em&gt;.arte&lt;/em&gt;, &lt;em&gt;.blog&lt;/em&gt;, &lt;em&gt;.madrid&lt;/em&gt;, &amp;hellip;) aunque significativamente más caros. Después del dominio de nivel superior está el subdominio de la empresa, marca o personal, por ejemplo, &lt;em&gt;empresa.com&lt;/em&gt; que es realmente lo que compramos cuando solicitamos registrar un dominio. En nuestro dominio &lt;em&gt;empresa.com&lt;/em&gt; podemos administrar múltiples subdominios los clásicos son &lt;em&gt;www.empresa.com&lt;/em&gt; para el servidor web, &lt;em&gt;smpt.empresa.com&lt;/em&gt; para el correo electrónico, &lt;em&gt;ftp.empresa.com&lt;/em&gt; para la transferencia de archivos y otros cualesquiera que deseemos.&lt;/p&gt;

&lt;p&gt;En el caso del tráfico web debemos evitar que el servidor y la página o aplicación sea accedida por &lt;em&gt;empresa.com&lt;/em&gt; y &lt;em&gt;www.empresa.com&lt;/em&gt; ya que los buscadores tratarán a la página como dos diferentes y posiblemente detectando contenido duplicado que afectará negativamente o penalizando al SEO de la web. Lo que se suele hacer es hacer una &lt;a href=&#34;https://es.wikipedia.org/wiki/HTTP_301&#34;&gt;redirección permanente&lt;/a&gt; (cuyo código de estado HTTP para la respuesta es 301) a nivel de servidor que redirija el tráfico de &lt;em&gt;empresa.com&lt;/em&gt; a &lt;em&gt;www.empresa.com&lt;/em&gt; cuando el usuario acceda con su navegador con la primera.&lt;/p&gt;

&lt;p&gt;Esta es una de las cosas básicas que debemos realizar cuando instalemos un servidor web, otras cosas recomendadas para mejorar el SEO y la seguridad de los usuarios es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;configurar el servidor web para usar el protocolo seguro HTTPS&lt;/a&gt; y &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/como-redirigir-peticiones-de-http-a-https-en-nginx-apache-tomcat-jetty-y-wildfly/&#34;&gt;configurar el servidor web para forzar el uso de HTTPS&lt;/a&gt; también haciendo una redirección cuando la petición use el protocolo no cifrado HTTP entre otras cosas que indico en la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/web/&#34;&gt;serie web&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dependiendo del servidor web que utilicemos la configuración a añadir para hacer la redirección será distinta, a continuación indicaré como hacerlo en dos de los servidores web más populares como son &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; y &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache HTTPD&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nginx&#34;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;Usando Docker y el archivo de configuración completo podemos probar que funciona en local sin necesidad de instalar o cambiar la configuración de Nginx si tenemos instalado su paquete.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9.js?file=docker-run-nginx.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9/raw/docker-run-nginx.sh&#34;&gt;docker-run-nginx.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9.js?file=nginx.conf&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9/raw/nginx.conf&#34;&gt;nginx.conf&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/nginx.png&#34; title=&#34;Dominio antes de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/nginx-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/nginx-www.png&#34; title=&#34;Dominio después de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/nginx-www-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Dominio antes y después de acceder al sitio con Nginx&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&#34;apache&#34;&gt;Apache&lt;/h3&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9.js?file=docker-run-httpd.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9/raw/docker-run-httpd.sh&#34;&gt;docker-run-httpd.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9.js?file=httpd.conf&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/82d3c361c947d57a25b346b386bdf3a9/raw/httpd.conf&#34;&gt;httpd.conf&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/httpd.png&#34; title=&#34;Dominio antes de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/httpd-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/httpd-www.png&#34; title=&#34;Dominio después de acceder al sitio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/166/httpd-www-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Dominio antes y después de acceder al sitio con Apache HTTPD&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Si prefieriesemos hacer la redirección al revés, del subdominio www al dominio, variaríamos los valores de los nombres del servidor y los valores de las directivas de redirección. En los enlaces de referencia se incluye un ejemplo de esta configuración.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/RedirigirSubdiminio&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Referencia:
&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://easyengine.io/tutorials/nginx/www-non-www-redirection/&#34;&gt;Nginx config for www to non-www and non-www to www redirection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thesitewizard.com/apache/redirect-domain-www-subdomain.shtml&#34;&gt;How to Redirect URLs from Your Root Domain to the WWW Subdomain and Vice Versa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/</id>
        <title>Configurar Nginx para cachear respuestas del servidor de aplicaciones</title>        
        <updated>2016-07-31T01:00:00+02:00</updated>
        <published>2016-07-30T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Las caches son un recurso utilizado para aumentar el rendimiento y evitar malgastar recursos. Si una petición es muy costosa pero que no cambia muy a menudo o no se necesitan que los datos estén totalmente actualizados cachear el resultado de esa petición evitará tener que recalcularla para cada petición, si se realizan muchas peticiones el aumento de rendimiento será drásticamente mejor usando además un menor número de recursos de los sistemas. Hay soluciones específicas para cacheo pero si nuestra necesidades no son extremadamente avanzadas el cacheo ofrecido por Nginx probablemente sea suficiente.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/nginx.png&#34; class=&#34;right&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Los servidores web son muy eficientes devolviendo al cliente archivos estáticos. Tradicionalmente el contenido estático formado por hojas de estilo, archivos JavaScript, imágenes o vídeos de una página o aplicación web han sido devueltos por un servidor web evitando que el servidor de aplicaciones tenga que procesar una gran cantidad de peticiones, aún hoy se sigue haciendo. En caso de que los recursos estáticos estén alojados en el servidor de aplicaciones en vez de en el servidor web, porque los recursos estáticos se empaquetan con la aplicación, el servidor web puede cachearlos evitando que peticiones lleguen al servidor de aplicaciones. En este artículo comentaré cual es la configuración necesaria a añadir en el servidor web &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; que hace de &lt;em&gt;proxy&lt;/em&gt; para que cachee el resultado de las peticiones así indicadas del servidor de aplicaciones, la aplicación genera el contenido y establece las cabeceras de cache indicando como quiere que se cachee el contenido devuelto.&lt;/p&gt;

&lt;p&gt;Para que el servidor web realice el cacheo de los recursos en la aplicación esta ha de devolver en las cabeceras de respuesta como quiere que los recursos sean cacheados usando las cabeceras &lt;em&gt;Last-Modified&lt;/em&gt;, &lt;em&gt;Expires&lt;/em&gt;, &lt;em&gt;Cache-Control&lt;/em&gt; quizá &lt;em&gt;Etag&lt;/em&gt;. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/&#34;&gt;Las cabeceras de cache del protocolo HTTP&lt;/a&gt; establecen el comportamiento deseado para la cache.&lt;/p&gt;

&lt;p&gt;Hay que modificar el archivo de configuración de Nginx para que cachee el contenido. La directiva &lt;em&gt;proxy_cache_path&lt;/em&gt; indica donde se guardarán el contenido cacheado, cual es el tamaño de los metadatos de la caché y el tiempo de inactividad para cachear pasado el cual los recursos serán descartables. La directiva &lt;em&gt;proxy_cache_key&lt;/em&gt; permite diferenciar los recursos en la cache, &lt;em&gt;add_header X-Proxy-Cache&lt;/em&gt; añade una cabecera para la respuesta de Nginx con el resultado de cache que nos permite conocer si se produjo un acierto en la caché, un fallo o se ignoró la cache. Lo que es útil para depurar la aplicación u obtener información. Con &lt;em&gt;proxy_pass&lt;/em&gt; hacemos que Nginx haga de &lt;em&gt;proxy&lt;/em&gt; para el servidor de aplicaciones o la aplicación.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c.js?file=nginx.conf&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c/raw/nginx.conf&#34;&gt;nginx.conf&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c/raw/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;La siguiente pequeña aplicación Java que usa el &lt;a href=&#34;http://spark.apache.org/&#34;&gt;framework Spark&lt;/a&gt; expone dos recursos para probar el funcionamiento de cache de Nginx, un recurso añade cabeceras de cacheo para la respuesta y otro no añade las cabeceras de respuesta. Atendiendo a las cabeceras establecidas por la aplicación y Nginx configurado para hacer de &lt;em&gt;proxy&lt;/em&gt; y cache devolverá el contenido deseado de su cache o solicitándolo a la aplicación y cacheándolo si así se indica en las cabeceras de respuesta.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c.js?file=Main.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c/raw/Main.java&#34;&gt;Main.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;La primera petición que se realiza al recurso &lt;em&gt;cache&lt;/em&gt; devuelve un &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#2xx:_Peticiones_correctas&#34;&gt;código de estado 200 de HTTP&lt;/a&gt; y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; indica que se ha producido un &lt;em&gt;MISS&lt;/em&gt; o fallo en la cache, la segunda petición realizada antes de que pase el minuto del tiempo de expiración devuelve un &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#3xx:_Redirecciones&#34;&gt;código de estado 304&lt;/a&gt; y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; un &lt;em&gt;HIT&lt;/em&gt; o acierto en la cache, finalmente pasado más de un minuto del tiempo de expiración se devuelve un código de estado 200 y Nginx en la cabecera &lt;em&gt;X-Proxy-Cache&lt;/em&gt; un &lt;em&gt;EXPIRED&lt;/em&gt;. En las trazas de Nginx vemos las peticiones que se producen sus códigos de estado y después de este los bytes transferidos de contenido, nótese que en los casos de los 304 los bytes transferidos son 0, bytes de datos ahorrados y evitado que la petición llegue a la aplicación que son unos de los objetivos de las caches. En el recurso &lt;em&gt;nocache&lt;/em&gt; de la aplicación Nginx no cachea el contenido devuelto ya que en este no se establecen las cabeceras de cache en la respuesta.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-miss.png&#34; title=&#34;Fallo en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-miss-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-hit.png&#34; title=&#34;Acierto en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-hit-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-expired.png&#34; title=&#34;Expiración en la cache de Nginx&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/nginx-cache-peticion-expired-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/curl-cache-miss-hit-expired.png&#34; title=&#34;Fallo, acierto y expiración en la cache de Nginx con curl&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/165/curl-cache-miss-hit-expired-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Fallo, acierto y expiración que produce en la cache de Nginx al realizar peticiones&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c.js?file=nginx.out&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c/raw/nginx.out&#34;&gt;nginx.out&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c.js?file=curl-cache.sh&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/9bc353ad2c84bfd320c4819f2a91b98c/raw/curl-cache.sh&#34;&gt;curl-cache.sh&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Hay servidores específicos para realizar tareas de cache como &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt; con más opciones de las que ofrece Nginx. Para los casos no complicados usando Nginx evitamos añadir una nueva pieza a la arquitectura de la aplicación. Entre los productos que ofrece Amazon está &lt;a href=&#34;https://aws.amazon.com/es/cloudfront/&#34;&gt;Cloudfront&lt;/a&gt; que es una cache para recursos estáticos con el añadido de que de forma automática está distribuida geográficamente de forma que los recursos se sirven por un servidor más cercano al cliente evitando un mal rendimiento por la latencia. En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/&#34;&gt;servir recursos estáticos de un CDN en Apache Tapestry&lt;/a&gt; comento como usar esta red de distribución de contenido ofrecida por Amazon.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/NginxCache&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build &amp;amp;&amp;amp; cd docker &amp;amp;&amp;amp; docker-compose up&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry/&#34;&gt;Servir recursos estáticos desde un CDN en Apache Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://serversforhackers.com/nginx-caching&#34;&gt;Nginx Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/</id>
        <title>No, un tag JSP o un tag de Grails no es equivalente a un componente de Tapestry</title>        
        <updated>2016-07-25T12:00:00+02:00</updated>
        <published>2016-07-25T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Alguna vez que he dado una presentación sobre Apache Tapestry después de la misma me comentaron que eso mismo que explicaba se podía hacer con el &lt;em&gt;framework&lt;/em&gt; que esa persona usaba. En un proyecto la tecnología no es es lo más importante pero es una herramienta que puede facilitar en gran medida el desarrollo. Respecto a los componentes de Tapestry alguien puede pensar que son iguales a los &lt;em&gt;tag&lt;/em&gt; que existen en las tecnologías de presentación como JSP o Grails. En este artículo comentaré algunas diferencias importantes que los hace más y muy interesantes junto con otras características de &lt;em&gt;framework&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Viendo el panel &lt;a href=&#34;https://es.wikipedia.org/wiki/Kanban_(desarrollo)&#34;&gt;Kanban&lt;/a&gt; de la herramienta de peticiones &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;JIRA&lt;/a&gt; que usamos para registrar y priorizar las siguiente tareas en la empresa que trabajo hay unas cuantas que consisten en dado un listado de compras poder realizar operaciones sobre múltiples filas sin salir de la pantalla del listado. La necesidad es evitar que los usuarios de la aplicación hagan las acciones de forma individual de forma repetitiva, evitarles esto harán que sean más productivos y podrán desarrollar su trabajo mejor y más rápido. Así de sencillo, aparentemente.&lt;/p&gt;

&lt;p&gt;Esta necesidad que en la realidad será implementada con &lt;a href=&#34;https://grails.org/&#34;&gt;Grails&lt;/a&gt; quería compararla con una implementación equivalente usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; porque como en muchas otras necesidades intuyo que con Tapestry implementarlas es significativamente más sencillo y con un resultado de implementación como en este caso con el que quedo más a gusto.&lt;/p&gt;

&lt;h3 id=&#34;la-necesidad&#34;&gt;La necesidad&lt;/h3&gt;

&lt;p&gt;Definiendo más la necesidad hasta ahora cada fila del listado tiene un conjunto de botones para realizar acciones individuales y ahora se quiere al final del listado otro conjunto de botones para realizar acciones sobre las compras que se seleccionen de forma múltiple. Para seleccionar las compras se usará un &lt;em&gt;checkbox&lt;/em&gt; colocado al inicio de cada fila. Para algunas acciones el usuario ha de introducir información adicional cosa que hará con un diálogo modal que ya existe pero que hasta ahora solo permitía hacer la acción de forma individual. Las mismas acciones se realizarán en varias páginas de la aplicación (después de la acción se deberá volver a la página en la que se estaba), solo se podrán hacer las acciones múltiples si en todas las compras seleccionadas es posible realizar esa acción y el contenido de los diálogos solicitando información adicional podrán depender de las compras seleccionadas. Las acciones en el ejemplo serán habilitar o deshabilitar. Determinar las acciones posibles de una compra es compleja y saber si una acción es posible no depende solo de información en la propia compra sino de otras entidades del sistema, en el ejemplo no será así pero se tendrá en cuenta en la implementación.&lt;/p&gt;

&lt;p&gt;Esta sería una imagen del prototipo de los botones para hacer acciones múltiples, seleccionar compras y el diálogo modal para introducir información adicional.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/listado.png&#34; title=&#34;Listado de productos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/listado-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/modal.png&#34; title=&#34;Modal solicitando información adicional&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/modal-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Listado y modal de la necesidad expuesta&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En la necesidad real las filas son compras pero en el ejemplo usaré la entidad &lt;em&gt;Product&lt;/em&gt;. Las acciones en el ejemplo serán habilitar para la que no será necesaria información adicional, la otra acción será deshabilitar para la que se necesitará introducir una razón con un modal.&lt;/p&gt;

&lt;h3 id=&#34;las-posibilidades&#34;&gt;Las posibilidades&lt;/h3&gt;

&lt;p&gt;Para implementar técnicamente el que solo se puedan hacer las acciones múltiples según los productos seleccionadas se habilitarán o deshabilitarán los botones con JavaScript sin peticiones AJAX adicionales al servidor para ello toda la información necesaria deberá estar en el cliente. En este caso bastará habilitar o deshabilitar cada botón según si esa acción es posible en todas los productos seleccionadas pero eso podría no bastar ya que se podría requerir que productos fuesen del mismo vendedor. En el ejemplo con un atributo en un elemento HTML de la fila que contenga las acciones posibles separadas por comas bastará. De esta forma no habrá que hacer consultas adicionales al servidor mediante peticiones AJAX en cada nueva selección.&lt;/p&gt;

&lt;p&gt;Sin embargo, como el contenido de los diálogos depende del producto o productos seleccionadas se hará una petición AJAX para obtener su contenido. De esta forma el contenido de los diálogos no tendrá que estar precargado (el número de acciones podría ser una decena) en el cliente ni generarlo con JavaScript en cliente que sería algo más complicado que usar la propia tecnología para generar contenido que está presente en el servidor y posiblemente más propenso a errores por usar JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;la-implementación-con-apache-tapestry&#34;&gt;La implementación con Apache Tapestry&lt;/h3&gt;

&lt;p&gt;Definida la necesidad y unas pocas notas voy a poner el código de como con Apache Tapestry implementar la solución. La página del listado será la siguiente. En el &lt;em&gt;checkbox&lt;/em&gt; de selección se añade el atributo &lt;em&gt;data-product-actions&lt;/em&gt; con las acciones posibles que se obtienen del servicio &lt;em&gt;AppService&lt;/em&gt; con el método &lt;em&gt;getAvaliableActions&lt;/em&gt;. El componente de Tapestry &lt;em&gt;actions&lt;/em&gt; generará el código de los botones tanto para los individuales en su uso &lt;em&gt;&amp;lt;t:actions&amp;gt;&lt;/em&gt; con el parámetro &lt;em&gt;product&lt;/em&gt; como múltiples en su uso con el parámetro &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Index.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/Index.java&#34;&gt;Index.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Index.tml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/Index.tml&#34;&gt;Index.tml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;El código para mostrar las acciones con botones para un determinado producto o para los productos es el siguiente. El mismo componente se encargará de realizar en el servidor la acción habilitar que no necesita modal. Con un poco de &lt;a href=&#34;http://es.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; y &lt;a href=&#34;http://underscorejs.org/&#34;&gt;Underscore&lt;/a&gt; se habilitarán o deshabilitarán los botones y se mostrará el diálogo para la acción deshabilitar.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Actions.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/Actions.java&#34;&gt;Actions.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=Actions.tml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/Actions.tml&#34;&gt;Actions.tml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=actions.js&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/actions.js&#34;&gt;actions.js&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;El código del modal para deshabilitar sería el siguiente. En el método &lt;em&gt;show&lt;/em&gt; recibe los &lt;em&gt;ids&lt;/em&gt; de los productos a deshabilitar y recupera del servidor el contenido de diálogo con una petición AJAX. El componente del modal se encargará de hacer el deshabilitado de los productos y la recarga de la página si finaliza correctamente o de mostar los errores de validación que se produzcan si no se ha introducido el motivo.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=DisableProductsModal.java&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/DisableProductsModal.java&#34;&gt;DisableProductsModal.java&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=DisableProductsModal.tml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/DisableProductsModal.tml&#34;&gt;DisableProductsModal.tml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/11715e0799339d0335a30ce30a17ee58.js?file=modals.js&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/11715e0799339d0335a30ce30a17ee58/raw/modals.js&#34;&gt;modals.js&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/TapestryMultipleActions&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;h3 id=&#34;algunas-diferencias-con-servlets-jsp-y-grails&#34;&gt;Algunas diferencias con Servlets/JSP y Grails&lt;/h3&gt;

&lt;p&gt;La tecnología de presentación de páginas web Java con &lt;em&gt;Java Server Pages&lt;/em&gt; o JSP permiten encapsular con un &lt;em&gt;tag&lt;/em&gt; la generación de un trozo de HTML no en el propio JSP sino en ese &lt;em&gt;tag&lt;/em&gt; que en código Java pudiendo incluir la llamada a un JSP. Los &lt;em&gt;tags&lt;/em&gt; y librerías de &lt;em&gt;tags&lt;/em&gt; son una forma de reutilizar esas partes de generación de código en el mismo proyecto y entre proyectos. Los &lt;em&gt;tags&lt;/em&gt; además son una forma de abstraernos del funcionamiento interno del &lt;em&gt;tag&lt;/em&gt; haciendo que solo necesitemos conocer sus parámetros.&lt;/p&gt;

&lt;p&gt;Si usamos JSP usar librerías de &lt;em&gt;tags&lt;/em&gt; es una buena idea, sin embargo, tiene algunas limitaciones como que requieren un archivo descriptor en formato XML que las defina y aunque pudiendo saber que parámetros definen y cuáles son requeridos no define el tipo de los parámetros que requiere. Los archivos XML en la época actual han caído en desuso porque son propensos a errores, errores que no son detectados hasta tiempo de ejecución, de los peores tipos de errores. Por otro lado, que los &lt;em&gt;tags&lt;/em&gt; no especifiquen el tipo de parámetro que requiere cada uno hace que debamos inspeccionar el código fuente del &lt;em&gt;tag&lt;/em&gt; con lo que la ventaja de abstraerse del funcionamiento no es del todo completa. Si por algún cambio el tipo de parámetro cambia hay que adaptar todos los usos del &lt;em&gt;tag&lt;/em&gt;, si alguno no se hace nuevamente se producirán errores en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;Grails usa GSP, una tecnología de presentación similar a los JSP. También dispone de &lt;em&gt;tags&lt;/em&gt; que no requieren definir los &lt;em&gt;tags&lt;/em&gt; en un archivo XML simplificando su uso pero que igualmente adolecen de algunos problemas como los JSP. Por un lado, los &lt;em&gt;tags&lt;/em&gt; de Grails no disponen un mecanismo para hacer requerido un determinado parámetro con lo que deberemos incluir la comprobación con código nosotros, tampoco define el tipo de parámetros que requiere. También aunque hacer más simple su desarrollo al no tener un descriptor XML como en los &lt;em&gt;tag&lt;/em&gt; JSP hace que haya que inspeccionar el código fuente para saber qué parámetros tiene, si son requeridos y cuál es el tipo del parámetro. Todo esto hace que puedan producirse errores en tiempo de ejecución y errores que no son producidos hasta que se ejercita el &lt;em&gt;tag&lt;/em&gt; con un mal uso o un uso desactualizado al igual que usando los &lt;em&gt;tag&lt;/em&gt; JSP.&lt;/p&gt;

&lt;p&gt;En Apache Tapestry todo son componentes, las páginas también son componentes con la característica de que no están embebidos en otro componente. Un componente de Apache Tapestry sería similar a un &lt;em&gt;tag&lt;/em&gt; de JSP o un &lt;em&gt;tag&lt;/em&gt; de Grails, con ciertas similitudes pero no iguales en aspectos importantes. De pronto, un componente de Tapestry define los parámetros que necesita y si son requeridos pero también define el tipo del parámetro. Como se aprecia en las páginas de documentación de los &lt;a href=&#34;http://tapestry.apache.org/component-reference.html&#34;&gt;componentes integrados de serie en Apache Tapestry&lt;/a&gt; se puede conocer esta información sin necesidad de conocer el código fuente del componente, documentación que podemos generar para los componentes que nosotros desarrollemos. Los parámetros, si son requeridos y sus tipos forman el contrato del componente y es lo único que deberemos conocer para usarlos, su funcionamiento interno nos es irrelevante que incluye el código JavaScript que necesite, podría que CSS y literales internacionalizados.&lt;/p&gt;

&lt;p&gt;Pero esas no son las únicas diferencias con los &lt;em&gt;tags&lt;/em&gt; de JSP o de Grails y es que estas son solo tecnologías de presentación, la V del &lt;a href=&#34;https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93controlador&#34;&gt;patrón MVC&lt;/a&gt;. Los componentes de Tapestry aparte de encapsular la lógica de presentación también pueden encapsular lógica de controlador, en el conocido patrón MVC además de V pueden ser C con lo que encapsulan aún más funcionalidad. La lógica de presentación y controlador en los JSP y Grails está separada pero ambas lógicas no son independientes, están relacionadas, en Tapestry está encapsulada en el mismo componente.&lt;/p&gt;

&lt;p&gt;Los componentes de Tapestry usan el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/&#34;&gt;modelo pull en vez del modelo push&lt;/a&gt; haciendo innecesario construir un objeto &lt;em&gt;Map&lt;/em&gt; que pasar a la vista, haciendo que sea la plantilla la que solicite al controlador los datos que necesita y haciendo que el controlador no sepa que datos necesita la vista. El controlador solo deberá tener las propiedades y métodos que necesite la vista. Dado que en las plantillas &lt;em&gt;tml&lt;/em&gt; de la vista no se pueden incluir expresiones complejas hace que no contengan lógica que estará en el controlador asociado que es código Java donde tendremos la ayuda del compilador para detectar errores.&lt;/p&gt;

&lt;p&gt;Para volver a la misma página en &lt;a href=&#34;https://spring.io/&#34;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Struts&lt;/a&gt; o &lt;a href=&#34;https://grails.org/&#34;&gt;Grails&lt;/a&gt; posiblemente deberíamos recibir además información para retornar a la misma página en la que estabamos cosa que es innecesaria en Tapestry por su &lt;a href=&#34;http://tapestry.apache.org/page-navigation.html&#34;&gt;concepto de contexto de activación de página&lt;/a&gt; y el patrón &lt;em&gt;Redirect-After-Post&lt;/em&gt; hará que al recargar la página por código con &lt;code&gt;window.localtion.reload();&lt;/code&gt; después de una petición POST el navegador no muestre un diálogo modal informando al usuario de que se reenviarán datos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/dialogo-recargar.png&#34; title=&#34;Diálogo recargar después de petición POST en Firefox&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/164/dialogo-recargar-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Diálogo recargar después de petición POST en Firefox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://www.polymer-project.org/1.0/&#34;&gt;Polymer&lt;/a&gt; son tecnologías de cliente en algunos aspectos similares a los componentes de Apache Tapestry pero con la diferencia de que unos son para el navegador del cliente y otros para el servidor, nada nos impide en la misma aplicación usar en el cliente React y Polymer y en el servidor Apache Tapestry. Nótese en el código del caso anterior que Tapestry ofrece integración con JavaScript de un modo que no existe ni en Spring MVC, Struts o Grails e incorpora de serie &lt;a href=&#34;http://requirejs.org/&#34;&gt;RequireJS&lt;/a&gt;, Undercore y jQuery, un componente de Tapestry puede requerir la cargar de un recurso de JavaScript y desde el componente es posible pasar datos al JavaScript usando el servicio &lt;a href=&#34;http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/services/javascript/JavaScriptSupport.html&#34;&gt;JavaScriptSupport&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esto es solo un pequeño ejemplo de las posibilidades de Apache Tapestry me dejo muchas otras como los eventos, &lt;em&gt;translators&lt;/em&gt;, &lt;em&gt;encoders&lt;/em&gt;, &lt;em&gt;coerces&lt;/em&gt;, librerías de componentes, &lt;em&gt;inversion of control&lt;/em&gt;, AJAX, validaciones de formularios, &amp;hellip; En un proyecto las herrramientas no son lo más importante pero &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/06/el-lenguaje-de-programacion-framework-y-librerias-importan/&#34;&gt;el lenguaje de programación, framework y librerías importan&lt;/a&gt;, hay &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/05/10-razones-para-seguir-usando-java/&#34;&gt;10 razones para seguir usando Java&lt;/a&gt; y varios &lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html&#34;&gt;motivos para elegir Apache Tapestry&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;finalizando&#34;&gt;Finalizando&lt;/h3&gt;

&lt;p&gt;Lamentablemente hasta el momento no he tenido una oportunidad laboral de comprobar y demostrar que como en este ejemplo pero basado en una necesidad real que con Tapestry la implementación de la solución es más sencilla, menos propensa a errores y que la productividad no está relacionado con escribir unas pocas líneas de código menos con un lenguaje menos verboso o dejar de escribir puntos y comas al final de las líneas, más aún con las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades de Java 8&lt;/a&gt;. Quizá un día llegue esa oportunidad :|.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/Qv1Ym&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="opinion"/>
            
                <category term="planeta-codigo"/>
            
                <category term="tapestry"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/</id>
        <title>Las cabeceras de cache del protocolo HTTP</title>        
        <updated>2016-07-24T22:00:00+02:00</updated>
        <published>2016-07-22T18:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Establecer directivas de cacheo en los recursos devueltos en una página o aplicación web tiene las ventajas de reducir el número de peticiones que llegan al servidor mejorando la latencia y el rendimiento pudiendo atender a más usuarios y mejora los tiempos de carga de las páginas. Usando varias directivas de cacheo la aplicación es capaz de determinar cómo quiere que el contenido devuelto o los recursos sean cacheados por los clientes o servidores de cache intermedios.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/html.png&#34; class=&#34;right&#34; alt=&#34;HTML&#34; title=&#34;HTML&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Cachear aquella información que es costosa de generar y es muy solicitada consigue por un lado evitar que el servidor sea capaz de atender todo el tráfico reduciendo la cantidad de capacidad necesaria del servidor y por otro lado consigue que la información sea devuelta en menor tiempo. Para aquella información que no necesite estar completamente actualizada o que no cambia cada poco tiempo es candidata a cachearla en caso necesario. La cache se puede realizar en los navegadores guardando estos recursos como imágenes y hojas de estilos que consiguen reducir el número de peticiones al servidor y mostrando la página más rápidamente al usuario. La cache también se puede hacer en el lado del servidor usando soluciones específicas como &lt;a href=&#34;https://varnish-cache.org/&#34;&gt;Varnish&lt;/a&gt;, &lt;a href=&#34;http://memcached.org/&#34;&gt;memcached&lt;/a&gt; o para los casos más habituales que serán la mayoría las funcionalidades incorporadas en el servidor web como en el caso de &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El cacheo o almacenamiento temporal de datos puede hacerse a diferentes niveles sin ser exclusivos y de diferentes tipos de información. En la base de datos, en la aplicación, a nivel de página, con servidor intermedio o en el cliente.&lt;/p&gt;

&lt;p&gt;Según la cantidad de tiempo de expiración que establezcamos como cache para el contenido conseguiremos variar el número de aciertos en la cache, aumentando el tiempo unos pocos segundos el tiempo que almacenamos en la cache el contenido conseguimos aumentar el porcentaje de aciertos en mayor medida. Con un tiempo de cache de un minuto ya se consiguen porcentajes elevados de aciertos según el número de peticiones realizadas en ese periodo de tiempo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/162/cache-hit.png&#34; title=&#34;Petición con acierto en cache&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/162/cache-hit-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/162/cache-miss.png&#34; title=&#34;Petición con fallo en cache&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/162/cache-miss-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Petición con acierto y fallo en la cache&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En el protocolo HTTP 1.1 se definieron tres mecanismos para las caches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validez: permite usar un recurso sin hacer ninguna comprobación con el servidor ni para revalidarlo. Por ejemplo, la cabecera &lt;em&gt;Expires&lt;/em&gt; indica en que momento el recurso puede haberse quedado obsoleto y se debería revalidar. La cabecera &lt;em&gt;Cache-Control: max-age&lt;/em&gt; indica durante cuanto tiempo el recurso puede considerarse válido. Esto evita hacer peticiones al servidor si los recursos se consideran válidos.&lt;/li&gt;
&lt;li&gt;Validación: una vez que un recurso se considera que puede ser obsoleto se debería comprobar haciendo una petición al servidor para conocer si sigue siendo válido y si no lo es obtener una nueva versión. Usando las cabeceras &lt;em&gt;If-Modified-Since&lt;/em&gt; o &lt;em&gt;Etag&lt;/em&gt; puede comprobarse si el recurso ha sido modificado con posterioridad a una fecha o ha variado. Se ha de hacer una petición para comprobar la validez del recurso pero los casos que sigan siendo válidos no hará falta descargarlos de nuevo. Si el recurso sigue siendo válido el servidor responde con el &lt;a href=&#34;https://es.wikipedia.org/wiki/Anexo:C%C3%B3digos_de_estado_HTTP#3xx:_Redirecciones&#34;&gt;código de estado 304&lt;/a&gt; y sin el contenido en la respuesta.&lt;/li&gt;
&lt;li&gt;Invalidación: las peticiones que usen los métodos &lt;em&gt;PUT&lt;/em&gt;, &lt;em&gt;POST&lt;/em&gt; y &lt;em&gt;DELETE&lt;/em&gt; pueden invalidar recursos ya que modifican el estado del servidor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El servidor especifica como quiere que el contenido o recursos que devuelve sean cacheados a través de varias directivas del protocolo HTTP, establecidas como cabeceras en la respuesta cuando se solicita el contenido o recurso. Algunas cabeceras realizan funciones similares habiendo cierto solapamiento de funcionalidad. Son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache-Control: private | public, no-cache, no-store, max-age, s-maxage, must-revalidate, no-transform, proxy-revalidate

&lt;ul&gt;
&lt;li&gt;El valor &lt;em&gt;private&lt;/em&gt; indica que el recurso es privado para el usuario y no debería ser cacheado. Esto no hace el recurso más seguro ya que la información no se transmite cifrada para ello hay que &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;usar un protocolo seguro con TLS/SSL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-cache&lt;/em&gt; el recurso no debería ser cacheado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-store&lt;/em&gt; el recurso no debería ser almacenado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;max-age&lt;/em&gt; normalmente se ha usado la directiva &lt;em&gt;Expires&lt;/em&gt; pero esta permite establecer el máximo tiempo especificado en segundos a cachear un recurso.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;s-maxage&lt;/em&gt; similar a max-age pero para las caches intermedias entre el cliente y el servidor.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;must-revalidate&lt;/em&gt; cuando un recurso se queda obsoleto no se debe usar sin antes validar contra el servidor si sigue siendo válido.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;no-transform&lt;/em&gt; indica que el contenido original no debe ser modificado, por ejemplo, modificando el recurso para optimizarlo si por ejemplo se trata de una imagen.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;proxy-revalidate&lt;/em&gt; lo mismo que &lt;em&gt;must-revalidate&lt;/em&gt; pero para las caches intermedias.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If-Modified-Since: si el recurso solicitado con su variante no ha sido modificado con posterioridad a una fecha se devolverá un código de estado 304 sin el contenido.&lt;/li&gt;
&lt;li&gt;Expires: es una marca de tiempo que indica cuando el recurso expira, dado que se basa en el tiempo no es muy precisa ya que los relojes de cada ordenador no están perfectamente sincronizados y hay variaciones incluso de minutos. Preferiblemente es mejor usar &lt;em&gt;Etag&lt;/em&gt; o &lt;em&gt;max-age&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/HTTP_ETag&#34;&gt;Etag&lt;/a&gt;: &lt;em&gt;entity-tag&lt;/em&gt; o &lt;em&gt;etag&lt;/em&gt; es un código &lt;em&gt;hash&lt;/em&gt; único del contenido que permite conocer si el recurso ha cambiado. Si el recurso no ha cambiado no hace falta devolver el recurso, si ha cambiado se devuelve en la misma petición. Al no depender de una marca de tiempo como &lt;em&gt;Expires&lt;/em&gt; o &lt;em&gt;max-age&lt;/em&gt; es más fiable.&lt;/li&gt;
&lt;li&gt;Vary: indica que el recurso varía según alguna cabecera proporcionada por el cliente como por ejemplo &lt;em&gt;User-Agent&lt;/em&gt; o &lt;em&gt;Accept-Encoding&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Pragma: esta es una directiva antigua que indicada como &lt;em&gt;pragma: no-cache&lt;/em&gt;, se interpreta como &lt;em&gt;cache-control: no-cache&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.mobify.com/blog/beginners-guide-to-http-cache-headers/&#34;&gt;A Beginner&amp;rsquo;s Guide to HTTP Cache Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&#34;&gt;Header Field Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14.html&#34;&gt;Capítulo 14. La caché de HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14/introduccion_a_la_cache_de_http.html&#34;&gt;14.3. Introducción a la caché de HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://librosweb.es/libro/symfony_2_x/capitulo_14/caducidad_y_validacion_http.html&#34;&gt;14.4. Caducidad y validación HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/</id>
        <title>Cómo crear un proxy inverso entre el servidor web Nginx y un servidor de aplicaciones Java</title>        
        <updated>2016-07-16T13:30:00+02:00</updated>
        <published>2016-07-15T18:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Continuando la serie de artículos sobre varios aspectos realizados muy comúnmente en las aplicaciones y servidores web en este artículo explicaré como hacer que un servidor web nginx haga de &lt;em&gt;proxy&lt;/em&gt; inverso para un servidor de aplicaciones Java en este caso Tomcat.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/nginx.png&#34; class=&#34;right&#34; alt=&#34;Nginx&#34; title=&#34;Nginx&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/logotipos/tomcat.png&#34; class=&#34;right&#34; alt=&#34;Tomcat&#34; title=&#34;Tomcat&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las aplicaciones web dinámicas Java se despliegan en un contenedor de servlets o un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/&#34;&gt;servidor de aplicaciones como WildFly&lt;/a&gt; que implementa las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/&#34;&gt;especificaciones de los estándares de Java EE&lt;/a&gt; pero es habitual que los usuarios no accedan directamente al contenedor de aplicaciones Java sino que se ponga delante un servidor web como &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; o &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt; con la tarea de que realice algunas tareas. Las tareas que puede realizar un servidor web son varias como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/&#34;&gt;Realizar la conexión TLS/SSL&lt;/a&gt; sin necesidad de que llegue al servidor de aplicaciones.&lt;/li&gt;
&lt;li&gt;Servir el contenido estático.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/&#34;&gt;Balanceo de carga&lt;/a&gt; con la que podremos tener varios servidores de aplicaciones Java en caso de que la aplicación deba soportar muchos usuarios.&lt;/li&gt;
&lt;li&gt;Cacheo de páginas y contenido.&lt;/li&gt;
&lt;li&gt;Redirecciones y reescritura de URL.&lt;/li&gt;
&lt;li&gt;Seguridad.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry/&#34;&gt;Forzar el uso del protocolo seguro HTTPS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/configurar-http-2-en-nginx-apache-httpd-wildfly-o-jetty/&#34;&gt;Ofrecer el protocolo HTTP/2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/159/reverse-proxy.png&#34; title=&#34;Esquema de un proxy inverso&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/159/reverse-proxy.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Un proxy inverso recibe las peticiones de internet y las reenvía a los servidores de una red interna sin necesidad de que los clientes conozcan la red interna&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Para que un servidor web como Nginx actúe como &lt;em&gt;proxy&lt;/em&gt; inverso o &lt;em&gt;reverse proxy&lt;/em&gt; para un servidor de aplicaciones debemos añadir unas pocas directivas al archivo de configuración del servidor web. En el caso de Nginx usando la directiva &lt;em&gt;proxy_pass&lt;/em&gt; donde indicamos para una localización la URL del servidor de aplicaciones a la que se le solicitará el contenido, en el ejemplo usando un servidor &lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/6dd14f54a22db38e07e9935189461a27.js?file=nginx.conf&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/6dd14f54a22db38e07e9935189461a27/raw/nginx.conf&#34;&gt;nginx.conf&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Una forma fácil de probarlo es usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; que en varios artículos introductorios siendo el primero el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/11/inicio-basico-de-docker/&#34;&gt;inicio básico de Docker&lt;/a&gt; comento como empezar a usarlo y en que consiste esta nueva forma de ejecución para las aplicaciones. Con el siguiente archivo de Docker Compose creamos dos contenedores uno para Nginx en el que proporcionamos su configuración personalizada y otro contenedor para Tomcat.&lt;/p&gt;

&lt;div&gt;
  &lt;script src=&#34;https://gist.github.com/picodotdev/6dd14f54a22db38e07e9935189461a27.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
  &lt;noscript&gt;&lt;pre&gt;&lt;a href=&#34;https://gist.githubusercontent.com/picodotdev/6dd14f54a22db38e07e9935189461a27/raw/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/pre&gt;&lt;/a&gt;&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Al hacer un &lt;em&gt;proxy&lt;/em&gt; inverso debemos tener en cuenta que el servidor Tomcat si devuelve URL absolutas las haga siendo las del servidor web por las que se accede a la aplicación, si únicamente genera URL relativas no deberemos hacer nada pero en el caso de absolutas el servidor Tomcat deberá conocer el protocolo usado en el servidor web (HTTP o HTTPS) y el puerto del servidor web que suele ser 80 para HTTP y 443 para HTTPS pero que en el servidor Tomcat suele ser 8080 para HTTP y 8443 para HTTPS. Si el protocolo y puerto usado en el servidor web y servidor de aplicaciones es diferente y una aplicación genera URL absolutas el servidor de aplicaciones deberá tener esto en cuenta que es lo que se usa el en servidor web.&lt;/p&gt;

&lt;p&gt;En la documentación se comentan varios &lt;a href=&#34;https://tomcat.apache.org/tomcat-8.0-doc/config/http.html&#34;&gt;parámetros de configuración de Tomcat&lt;/a&gt; como &lt;em&gt;proxyPort&lt;/em&gt; y &lt;em&gt;scheme&lt;/em&gt; que ajustan la información devuelta por los métodos &lt;em&gt;request.getServerPort()&lt;/em&gt; y &lt;em&gt;request.getScheme()&lt;/em&gt; y que nos servirá en caso de tener que generar URLs absolutas.&lt;/p&gt;

&lt;p&gt;Arrancado los contenedores con el comando &lt;em&gt;docker-compose up&lt;/em&gt; accediendo al servidor web veremos que el contenido proporcionado es el ofrecido por Tomcat, que con la configuración del ejemplo es la página de inicio de Tomcat. En las cabeceras de respuesta Nginx añade una, &lt;em&gt;Server&lt;/em&gt;, indicando su versión.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/159/nginx-tomcat.png&#34; title=&#34;Nginx configurado como proxy inverso de un servidor de aplicaciones Tomcat&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/custom/posts/159/nginx-tomcat-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Nginx configurado como proxy inverso de un servidor de aplicaciones Tomcat&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;En la &lt;a href=&#34;https://www.nginx.com/resources/admin-guide/reverse-proxy/&#34;&gt;documentación sobre &lt;em&gt;reverse proxy&lt;/em&gt; de Nginx&lt;/a&gt; se explican algunas directivas más para pasar al servidor Tomcat la dirección IP del usuario usando cabeceras HTTP, en la configuración de Nginx usando &lt;em&gt;proxy_set_header&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/NginxReverseProxy&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/resources/admin-guide/reverse-proxy/&#34;&gt;NGINX Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2011/02/unir-apache-httpd-y-tomcat-mediante-un.html&#34;&gt;Unir Apache HTTPD y Tomcat mediante un reverse proxy &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
        
    </entry>
    
</feed>