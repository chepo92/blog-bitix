<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/post/</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>2017-10-22T12:00:00+02:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/</id>
        <title>Visualizar datos y generar gráficas en Java con JFreeChart</title>        
        <updated>2017-10-22T12:00:00+02:00</updated>
        <published>2017-10-22T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/visualizar-datos-y-generar-graficas-en-java-con-jfreechart/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Visualizar datos de forma gŕafica ayuda a comprender un conjunto de datos grande mucho mejor que leyendo los valores en una tabla con varias columnas. En Java con la librería JFreeChart podemos generar gráficas de diferentes tipos que podremos incluir en los archivos &lt;em&gt;pdf&lt;/em&gt; que generemos en un aplicación o podremos mostrar en forma de imagen en el navegador si se trata de una aplicación web.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las principales tareas de las aplicaciones informáticas es manejar información, almacenar y recuperar datos de diversos tipos según sea el ámbito de la información tratada. Ejemplos podrían ser datos meteorológicos como temperatura, presión, velocidad y dirección del viento o datos poblacionales como número de personas, hombres y mujeres, nativos y extranjeros, &amp;hellip; todos estos datos se pueden recoger a lo largo del tiempo. Al recuperar los datos y presentarlos los datos se pueden presentar de forma tabular con las cifras tal y como están guardadas, sin embargo, esta forma hace difícil comprender los datos ¿si queremos ver como han evolucionado los datos meteorológicos durante un periodo de tiempo? ¿si queremos ver el porcentaje de población que le corresponde a cada comunidad autónoma respecto al total o como ha variado en varios años? Visualizar la información de forma gráfica nos ayuda a visualizar y comprender mejor un gran volumen de datos en mucho menos tiempo. Una vez comprendida la información se extraem tendencias de algunos datos e información útil que ayuden a tomar decisiones.&lt;/p&gt;

&lt;p&gt;En Java, existe una librería que permite generar gráficas de diferentes tipos con la que visualizar datos, &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;. Con esta librería de software libre que tiene una &lt;a href=&#34;http://www.gnu.org/licenses/lgpl.html&#34;&gt;licencia LGPL&lt;/a&gt; es posible generar gráficas de área, de barras, de barras apiladas, con ejes combinados, financieras, de Gantt, de líneas, diales, con múltiples ejes, sobrepuestas, tartas, estadísticas, de series temporales, xy y otros tipos, a algunas es posible darles un aspecto en tres dimensiones. Las gráficas las podemos exportar a archivos de imagen &lt;em&gt;png&lt;/em&gt;, &lt;em&gt;jpg&lt;/em&gt; o formatos escalares como &lt;em&gt;svg&lt;/em&gt; con lo que serán utilizables de múltiples formas, por ejemplo, incluyendo las gráficas en archivos PDF o si la aplicación es una aplicación web devolver las imágenes al navegador para que las visualice, usando &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; para generar informes es posible incluir las imágenes generadas por JFreeChart.&lt;/p&gt;

&lt;p&gt;Desde la propia página web de JFreeChart es posible ejecutar una &lt;a href=&#34;http://www.jfree.org/jfreechart/jfreechart-1.0.16-demo.jnlp&#34;&gt;aplicación Java Web Start de demostración&lt;/a&gt; que contiene múltiples ejemplos con datos para ver como son los diferentes tipos de gráficas, en la librería hay un archivo &lt;em&gt;jar&lt;/em&gt; con la misma aplicación de demostración junto con el código fuente de algunos ejemplos. En el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/overview-summary.html&#34;&gt;Javadoc&lt;/a&gt; está la documentación con la API ofrecida por la librería. El autor de la librería ofrece una &lt;a href=&#34;http://object-refinery.com/jfreechart/guide.html&#34;&gt;guía en formato PDF y el código fuente de los ejemplos&lt;/a&gt; pero estos son de pago. La última versión tiene unos años pero es compatible con Java 1.6.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=demo.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart.png&#34; title=&#34;Gráfica de tarta&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/pie-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart.png&#34; title=&#34;Gráfica de coordenadas polares&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/polar-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar.png&#34; title=&#34;Gráfica de barras apiladas&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/stacked-xy-bar-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/time-series-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Ejemplos de gŕaficas&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Este sería el código fuente de un ejemplo sencillo para una gŕafica varias series detaos. En el ejemplo primeramente se crear el conjunto de datos, el &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/Dataset.html&#34;&gt;Dataset&lt;/a&gt; de la gráfica, se establecen algunos estilos de visualización con &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.html&#34;&gt;XYLineAndShapeRenderer&lt;/a&gt;, con la clase factoría &lt;a href=&#34;http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/ChartFactory.html&#34;&gt;ChartFactory&lt;/a&gt; se obtiene la gráfica proporcionándole los datos y finalmente generan un archivo en formato &lt;em&gt;png&lt;/em&gt; en un archivo, también se podría generar en un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/OutputStream.html&#34;&gt;OutputStream&lt;/a&gt; si fuese el caso de una aplicación web que quisiera enviar la imagen al navegador del cliente o también para incluir la imagen en un archivo PDF.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/18cdca2f8b06c7be3f225f5561db9eb4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart.png&#34; title=&#34;Gráfica de series&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/273/xy-chart-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Gráfica de series&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En JavaScript también hay librerías para generar gráficas pero para casos complejos y con muchos datos probablemente sea mejor idea generar las gráficas en el lado del servidor que enviar todos los datos que necesite la gráfica al cliente. En GNU/Linux disponemos del programa &lt;a href=&#34;http://gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt; usable desde la línea de comandos y por tanto desde cualquier lenguaje que tenga la capacidad de ejecutar comandos del sistema, &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/&#34;&gt;ejecutar un comando del sistema con Java&lt;/a&gt; de gnuplot para que nos generase la gráfica. Hay varias posibilidades para visualizar de forma gráfica la información.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JFreeChart&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javascan.com/chapter/jfreechart&#34;&gt;JFreeChart Program Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/jfreechart/index.htm&#34;&gt;JFreeChart Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/</id>
        <title>Implementar funcionalidades comunes en Java con la librería Lombok</title>        
        <updated>2017-10-21T11:00:00+02:00</updated>
        <published>2017-10-21T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/implementar-funcionalidades-comunes-en-java-con-la-libreria-lombok/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java es un lenguaje verboso además requerir realizar las definiciones de forma explícita y con poco azúcar sintáctico (o como diría algún otro, poco veneno para ratas), esto hace que el número de líneas de código necesarias sea mayor que en otros lenguajes. Que Java sea verboso, explícito y con poco azúcar sintáctico no es necesariamente un inconveniente ya que la mayor parte del tiempo los programadores la dedicamos a leer código ya escrito sin embargo a mayor número de líneas mayor tiempo se requiere en mantenerlas. Un ejemplo claro está en los &lt;em&gt;beans&lt;/em&gt; con múltiples propiedades donde por cada propiedad es necesario definir un método &lt;em&gt;get&lt;/em&gt; y un método &lt;em&gt;set&lt;/em&gt; además &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/&#34;&gt;implementar de forma correcta los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;&lt;/a&gt;, el método &lt;em&gt;toString&lt;/em&gt;, utilizar el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-del-patron-de-diseno-builder/&#34;&gt;patrón builder&lt;/a&gt;, múltiples constructores con combinaciones de propiedades o comprobaciones para valores no nulos en parámetros.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt; es una pequeña librería Java que hace posible eliminar todo ese código repetitivo necesario en cada &lt;em&gt;bean&lt;/em&gt; o clase Java utilizando varias anotaciones. Usarla no requiere ninguna complicación basta añadirla a la lista de dependencias de compilación y las anotaciones serán procesadas. Los IDEs serán conscientes de los métodos implementados por las anotaciones instalando un complemento.&lt;/p&gt;

&lt;p&gt;Las anotaciones proporcionadas por Lombok son las siguientes, en la documentación se explica detalladamente que hace cada una de ellas y un ejemplo de código bastante ilustrativo comparando el código usando las anotaciones y el código Java equivalente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterSetter&#34;&gt;@Getter/@Setter&lt;/a&gt;: proporciona una implementación de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/ToString&#34;&gt;@ToString&lt;/a&gt;: proporciona una implementación del método &lt;em&gt;toString&lt;/em&gt; generando una cadena con información de las propiedades.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/EqualsAndHashCode&#34;&gt;@EqualsAndHashCode&lt;/a&gt;: proporciona una implementación correcta de los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/constructor&#34;&gt;@NoArgsConstructor, @RequiredArgsConstructor y @AllArgsConstructor&lt;/a&gt;: implementan varios métodos de constructores.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/NonNull&#34;&gt;@NonNull&lt;/a&gt;: valida que un argumento no es nulo lanzando una excepción &lt;em&gt;NullPointerException&lt;/em&gt; o &lt;em&gt;IllegalArgumentException&lt;/em&gt; en caso de que lo sea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Data&#34;&gt;@Data&lt;/a&gt;: es una combinación de varias anotaciones, &lt;em&gt;@ToString&lt;/em&gt;, &lt;em&gt;@EqualsAndHashCode&lt;/em&gt;, &lt;em&gt;@Getter&lt;/em&gt; en todos las propiedades y &lt;em&gt;@Setter&lt;/em&gt; en todas las propiedades no finales y &lt;em&gt;@RequiredArgsConstructor&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Value&#34;&gt;@Value&lt;/a&gt;: hace una clase inmutable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Builder&#34;&gt;@Builder&lt;/a&gt;: una API para la creación de objetos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Cleanup&#34;&gt;@Cleanup&lt;/a&gt;: facilita la gestión de recursos de forma automática.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/SneakyThrows&#34;&gt;@SneakyThrows&lt;/a&gt;: posibilita lanzar excepciones sin declararlas en los métodos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/Synchronized&#34;&gt;@Synchronized&lt;/a&gt;: otra forma de implementar la sincronización&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/GetterLazy&#34;&gt;@Getter(lazy=true)&lt;/a&gt;: calcula el valor de una propiedad la primera vez que se llama y la cachea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projectlombok.org/features/log&#34;&gt;@Log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando algunas de estas anotaciones en una clase Java y su uso en un programa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Car.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; hay que añadir en el archivo de construcción del proyecto &lt;em&gt;build.gradle&lt;/em&gt; la dependencia en el ámbito de &lt;em&gt;compileOnly&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/2201bb036c0bf22827ed01148234c70d.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando un IDE, su complemento para Lombok y añadida la dependencia los métodos que implementa Lombok con las anotaciones son visualizados con el asistente de código.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij.png&#34; title=&#34;Soporte de Lombok en IntelliJ&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-intellij-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok.png&#34; title=&#34;Ejecución del ejemplo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/272/lombok-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Soporte de Lombok en IntelliJ y ejecución del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Las anotaciones de Lombok permiten escribir menos código repetitivo en &lt;em&gt;beans&lt;/em&gt; o objetos de transferencia de datos o DTO pero conviene conocer lo que hacen esas anotaciones. Una de las características por las que algunas personas usan otros lenguajes más recientes como &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; es que en estos requieren menos líneas código para hacer lo mismo que en Java como el caso de los métodos &lt;em&gt;get&lt;/em&gt; y &lt;em&gt;set&lt;/em&gt; de las propiedades que en Groovy se proporcionan de forma implícita y en Java de forma explícita, con Lombok en Java estos métodos también se pueden proporcionar con anotaciones sin tener que codificarlos.&lt;/p&gt;

&lt;p&gt;En el momento de escribir este artículo Lombok no es compatible con Java 9 aunque ya se está trabajando en su soporte y en algún momento lo será.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Lombok&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/</id>
        <title>Obtener información de la pila de las excepciones</title>        
        <updated>2017-10-15T12:15:00+02:00</updated>
        <published>2017-10-15T12:15:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-informacion-de-la-pila-de-las-excepciones/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo incorporado en algunos lenguajes como Java para el manejo de errores y condiciones de error. En la implementación de las excepciones en los lenguajes hay diferencias, por ejemplo, en Java hay &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/&#34;&gt;excepciones checked y uncheked&lt;/a&gt; y en lenguajes como &lt;a href=&#34;http://www.microsoft.com/net&#34;&gt;C#&lt;/a&gt; o &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt; todas las excepciones son consideradas &lt;em&gt;unchecked&lt;/em&gt;. En cualquier caso son una mejor forma de forzar a gestionar las condiciones de error que se producen que el comprobar no obligatoriamente el valor de retorno de una función, incluso JavaScript incorpora excepciones.&lt;/p&gt;

&lt;p&gt;Las palabras reservadas en Java para el manejo de excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt; , &lt;em&gt;finally&lt;/em&gt;, &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt;. El manejo de algunas excepciones consiste en emitir su pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt; en la terminal o en el sistema de &lt;em&gt;logging&lt;/em&gt;. El &lt;em&gt;stacktrace&lt;/em&gt; contiene un mensaje de error, los métodos de la pila de llamadas del &lt;em&gt;thread&lt;/em&gt; que la causó junto con el número de la línea. Además, las excepciones puede tener asociada una excepción causa por ejemplo un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/sql/SQLException.html&#34;&gt;SQLException&lt;/a&gt; puede ser causado por un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/io/IOException.html&#34;&gt;IOException&lt;/a&gt; por fallo de comunicación con el servidor de base de datos.&lt;/p&gt;

&lt;p&gt;Todas las excepciones en Java heredan de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; y entre los métodos que tiene esta clase está &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#getStackTrace--&#34;&gt;getStackTrace()&lt;/a&gt; que devuelve un &lt;em&gt;array&lt;/em&gt; de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackTraceElement.html&#34;&gt;StackTraceElement&lt;/a&gt; ordenado del último método llamado al primero. Con los métodos de la clase &lt;em&gt;StackTraceElement&lt;/em&gt; obtenemos el nombre de la clase, el archivo, el nombre del método y la linea de código de esa llamada.&lt;/p&gt;

&lt;p&gt;Con esta información podemos imprimir en la terminal un informe de excepción diferente del que genera el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html#printStackTrace--&#34;&gt;printStackTrace()&lt;/a&gt;. En el ejemplo limitando el informe de la pila de llamadas a los tres últimos métodos del &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=Throwable.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/5138b0297f96eb67687316bdbe0482fa.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Si en una aplicación manejamos varios hilos con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getAllStackTraces--&#34;&gt;Thread.getAllStackTraces()&lt;/a&gt; obtenemos las pilas de llamadas de todos los hilos y con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#getStackTrace--&#34;&gt;Thread.getStackTrace()&lt;/a&gt; el del hilo en concreto que con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#currentThread--&#34;&gt;Thread.currentThread()&lt;/a&gt; sería el actual. Con el &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;StackTraceElement&lt;/em&gt; obtenidos de los hilos podemos obtener un informe personalizado y la situación de cada uno, el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.html#dumpStack--&#34;&gt;dumpStack()&lt;/a&gt; genera el &lt;em&gt;stacktrace&lt;/em&gt; en la salida de error.&lt;/p&gt;

&lt;p&gt;Entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;las novedades de Java 9&lt;/a&gt; está la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; para procesar los elementos de la pila del &lt;em&gt;thread&lt;/em&gt; actual usando &lt;em&gt;streams&lt;/em&gt; y funciones &lt;em&gt;lambda&lt;/em&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="java"/>
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/</id>
        <title>Las excepciones del lenguaje Java</title>        
        <updated>2017-10-15T11:30:00+02:00</updated>
        <published>2017-10-15T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/las-excepciones-del-lenguaje-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las excepciones son un mecanismo para capturar y producir condiciones de error en un programa. Es una alternativa al retorno de valores especiales que indique errores y que en estos no son obligatorios su correcta comprobación.&lt;/p&gt;

&lt;p&gt;En Java las excepciones están incorporadas en el lenguaje desde la primera versión y que en posteriores se han mejorado. Las palabras reservadas del lenguaje para las excepciones son &lt;em&gt;try&lt;/em&gt;, &lt;em&gt;catch&lt;/em&gt;, &lt;em&gt;finally&lt;/em&gt; para la captura y &lt;em&gt;throw&lt;/em&gt; y &lt;em&gt;throws&lt;/em&gt; para lanzar excepciones en los métodos.&lt;/p&gt;

&lt;p&gt;Las excepciones son objetos que extienden la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; de la que en el JDK es extendida por la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Error.html&#34;&gt;Error&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Exception.html&#34;&gt;Exception&lt;/a&gt; de la que de esta última a su vez hereda &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/RuntimeException.html&#34;&gt;RuntimeException&lt;/a&gt;. Entre las comprobaciones que realiza el compilador está que las excepciones &lt;em&gt;checked&lt;/em&gt; lanzadas por un método son capturadas por el código que lo llama.&lt;/p&gt;

&lt;p&gt;Solo los objetos que hereden de &lt;em&gt;Throwable&lt;/em&gt; pueden ser lanzados y capturados en los bloques &lt;em&gt;try-catch&lt;/em&gt;. Las excepciones que heredan de &lt;em&gt;Error&lt;/em&gt; son empleadas para casos en los que se han agotado recursos del sistema como la memoria o condiciones de error en el sistema que generalmente impiden el correcto funcionamiento del programa y de difícil tratamiento salvo terminar la ejecución. Las excepciones que heredan de &lt;em&gt;RuntimeExcepcion&lt;/em&gt; también se les conoce como &lt;em&gt;uncheked exception&lt;/em&gt; y no necesitan declararse en los métodos para ser lanzadas, son empleadas para advertir de errores de programación como dividir por cero produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArithmeticException.html&#34;&gt;ArithmeticException&lt;/a&gt;, desreferenciar un puntero nulo produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPointerException&lt;/a&gt; o acceder a una posición inválida de una array produciendo &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&#34;&gt;ArrayIndexOutOfBoundsException&lt;/a&gt;. Las excepciones que heredan de &lt;em&gt;Exception&lt;/em&gt; pero no de &lt;em&gt;RuntimeException&lt;/em&gt; se denominan &lt;em&gt;cheked exceptions&lt;/em&gt; y han declararse en los métodos siendo de obligada captura o relanzado para su tratamiento en el método anterior en la pila de llamadas.&lt;/p&gt;

&lt;p&gt;Este sería un ejemplo de código que hace uso de una excepción propia para detectar una condición de error mostrando una excepción &lt;em&gt;checked&lt;/em&gt; y &lt;em&gt;unchecked&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=Account.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidAmountException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=InvalidOperationException.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/3afac242293790ee2794c2eb35019392.js?file=jshell.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;Aunque las excepciones son un buen mecanismo para el tratamiento de errores se les critica que rompen el flujo de ejecución de un programa y tienen un coste en rendimiento, aunque esta penalización de rendimiento en la mayoría de programas es irrelevante. Algunas recomendaciones que se hace para usar de forma efectiva las excepciones son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Las excepciones no deben reemplazar comprobaciones simples con sentencias &lt;em&gt;if&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben microgestionar las excepciones. Los bloques &lt;em&gt;try-catch&lt;/em&gt; deben contener bloques de código de varias líneas de código en vez una única sentencia por cada bloque &lt;em&gt;try-catch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Se debe hacer un buen uso de la jerarquía de excepciones y capturar la excepción que se vaya a tratar en el bloque &lt;em&gt;catch&lt;/em&gt;. Una excepción se puede convertir en otra por ejemplo convertir un &lt;em&gt;NumberFormatException&lt;/em&gt; a &lt;em&gt;IOException&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;No se deben capturar excepciones para no hacer nada con ellas, esto es no debe haber bloques &lt;em&gt;catch&lt;/em&gt; vacíos.&lt;/li&gt;
&lt;li&gt;En algunos casos es mejor lanzar una excepción que un valor &lt;em&gt;null&lt;/em&gt; que posiblemente produzca un &lt;em&gt;NullPointerException&lt;/em&gt; en otra parte distante del código de dónde se devolvió el valor &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Propagar excepciones no es un signo de poca sabiduría, puede haber motivos para ello sobre todo si no se le puede dar un tratamiento adecuado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando se produce una excepción la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html&#34;&gt;Throwable&lt;/a&gt; posee métodos para emitir en la salida un informe de la pila de llamadas, también se puede personalizar la salida. Esta información es esencial y muy útil para conocer la causa de un error ya que indica entre otras cosas cada uno de los métodos, línea en el código fuente y clases donde se ha producido la excepción.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/</id>
        <title>Obtener el mínimo o máximo de dos, una lista o stream de valores en Java</title>        
        <updated>2017-10-12T11:00:00+02:00</updated>
        <published>2017-10-12T11:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/obtener-el-minimo-o-maximo-de-dos-una-lista-o-stream-de-valores-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Si tenemos dos valores y queremos obtener el menor con una línea de código, podemos obtenerlo con un a sentencia &lt;em&gt;if&lt;/em&gt; o con el operador condicional &lt;em&gt;? :&lt;/em&gt;. Si queremos obtener el menor de tres valores con sentencias &lt;em&gt;if&lt;/em&gt; o el operador &lt;em&gt;? :&lt;/em&gt;  el problema aparentemente sencillo se complica y si optamos por usar una lista de valores tratándola como si el tamaño fuese desconocido quizá usemos un bucle &lt;em&gt;for&lt;/em&gt; junto con una variable que mantenga el menor valor encontrado hasta el momento usando un &lt;em&gt;if&lt;/em&gt; que compare el valor menor encontrado con el valor actual de la lista.&lt;/p&gt;

&lt;p&gt;Sin embargo, en la API de Java hay dos métodos que permiten simplificar esta tarea, para dos valores podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#min-int-int-&#34;&gt;Math.min()&lt;/a&gt; y para una lista de valores de tamaño desconocido podemos usar el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#min-java.util.Collection-&#34;&gt;Collections.min()&lt;/a&gt;. Usando un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; aún es más sencillo ya que estos poseen un método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-&#34;&gt;Stream.min()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt; que devuelven el valor mínimo y máximo.&lt;/p&gt;

&lt;p&gt;Este sería el código para los casos de comparar dos elementos, una lista y un stream de valores. Se que se puede probar con &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; incluída entre &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;otras novedades de Java 9&lt;/a&gt;. En la lista de 20 valores aleatorios el menor es el 2 y entre la variable &lt;em&gt;a&lt;/em&gt; y &lt;em&gt;b&lt;/em&gt; el valor mínimo es 19.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/82b8c88dc3d00080eb6087d9af481ec9.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max.png&#34; title=&#34;Diferentes formas de obtener el valor mínimo y máximo&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/269/min-max-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Diferentes formas de obtener el valor mínimo y máximo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para obtener el máximo sería similar pero usando el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#max-int-int-&#34;&gt;Math.max()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#max-java.util.Collection-&#34;&gt;Collections.max()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-&#34;&gt;Stream.max()&lt;/a&gt;.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/</id>
        <title>Ejemplo con el cliente HTTP/2 de Java</title>        
        <updated>2017-10-08T12:00:00+02:00</updated>
        <published>2017-10-08T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/ejemplo-con-el-cliente-http-2-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Otra de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/&#34;&gt;nuevas funcionalidades incluidas en Java 9&lt;/a&gt; aunque en modo incubación es el cliente con soporte para HTTP/2 para realizar peticiones a recursos usando este protocolo más eficiente y rápido. Al mismo tiempo se ha simplificado el código necesario para realizar una petición y obtener el resultado de una URL. También se ha añadido la funcionalidad de realizar peticiones asíncronas y creación de conexiones de &lt;em&gt;WebSockets&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Las clases importantes de esta nueva API con &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.html&#34;&gt;HttpClient&lt;/a&gt;, &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpRequest.html&#34;&gt;HttpRequest&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.html&#34;&gt;HttpResponse&lt;/a&gt;. Estas clases se encuentran en el módulo de incubación &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk.incubator.httpclient-summary.html&#34;&gt;jdk.incubator.httpclient&lt;/a&gt;, una vez que sea definitiva la API se renombrará el módulo.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo realiza una petición a la página del buscador Google con unas cabeceras y obtiene el código de estado, las cabeceras devueltas y el cuerpo de la página de resultado. En la declaración del módulo para usar el cliente hay que indicar que tiene como requerimiento su módulo de &lt;em&gt;jdk.incubator.httpclient&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=module-info.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2.png&#34; title=&#34;Petición con el cliente de Java para HTTP/2&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/268/java-http2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Petición con el cliente de Java para HTTP/2&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Otras fomas de manejadores del resultado de la petición son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asString--&#34;&gt;BodyHandler.asString()&lt;/a&gt;: almacena el resultado de la petición en un String&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asByteArray--&#34;&gt;BodyHandler.asByteArray()&lt;/a&gt;: almacena el resultado de la petición en un array de bytes como sería el caso de obtener una imagen o un archivo PDF&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#asFile-java.nio.file.Path-&#34;&gt;BodyHandler.asFile(Path)&lt;/a&gt;: almacena el resultado en un archivo del disco&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpResponse.BodyHandler.html#discard-U-&#34;&gt;BodyHandler.discard()&lt;/a&gt;: descarta la respuesta y devuelve el valor indicado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se puede definir la política de cómo procesar las redirecciones para seguirlas, no seguirlas o solo si son seguras o utilizan el mismo protocolo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#ALWAYS&#34;&gt;HttpClient.Redirect.ALWAYS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#NEVER&#34;&gt;HttpClient.Redirect.NEVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SAME_PROTOCOL&#34;&gt;HttpClient.Redirect.SAME_PROTOCOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/HttpClient.Redirect.html#SECURE&#34;&gt;HttpClient.Redirect.SECURE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con la clase &lt;a href=&#34;http://docs.oracle.com/javase/9/docs/api/javax/net/ssl/SSLContext.html&#34;&gt;SSLContext&lt;/a&gt; es posible establecer autenticación para el cliente usando un certificado como muestro en el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/06/autenticacion-mutua-de-cliente-y-servidor-con-certificados/&#34;&gt;Autenticación mutua de cliente y servidor con certificados&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para ejecutar el ejemplo usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; y Java 9 hay que añadir un poco de configuración al &lt;em&gt;script&lt;/em&gt; de construcción que posiblemente en un futuro no será necesaria cuando se mejore el soporte.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/c3f0bea0d89da4ec3a81235e479d069b.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/JavaHttp2&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/</id>
        <title>Evitar niveles de anidación de sentencias condicionales con guard clauses</title>        
        <updated>2017-10-07T12:00:00+02:00</updated>
        <published>2017-10-07T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/evitar-niveles-de-anidacion-de-sentencias-condicionales-con-guard-clauses/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Al escribir el código de un método es habitual hacer algunas comprobaciones sobre los parámetros, por ejemplo, para comprobar que el parámetro tiene una referencia, si es nulo o cumple alguna condición, si es una lista que no esté vacía o para validar mediante alguna otra regla. Estas validaciones o aserciones se realizan al inicio del método con sentencias &lt;em&gt;if&lt;/em&gt; que añaden un nivel de tabulación al código si se anidan. Estos niveles de tabulación con sentencias &lt;em&gt;if&lt;/em&gt; anidadas hacen poco legible el código.&lt;/p&gt;

&lt;p&gt;Este código que comprueba algunos parámetros no es tan sencillo de entender por los varios niveles de anidación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=NestedIf.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En vez de crear este nivel de anidación y crear varios flujos distintos por donde se bifurca el código, con aserciones, sentencias &lt;em&gt;if&lt;/em&gt; o &lt;em&gt;guard clauses&lt;/em&gt;  el código queda más legible. Después de cada cláusula &lt;em&gt;if&lt;/em&gt; es seguro que la aserción que realiza se cumple.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/3d7a363d68b6b193addd8511954cf538.js?file=GuardClauses.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;También es una recomendación que los métodos solo tengan una sentencia &lt;em&gt;return&lt;/em&gt;, de hecho en la enseñanza de programación se explica pero para estos casos de comprobaciones la ventaja de no tener varios &lt;em&gt;if&lt;/em&gt; anidados es justificable tener varios &lt;em&gt;return&lt;/em&gt;, el código queda más legible.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html&#34;&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/</id>
        <title>La triste realidad de Java, versiones antiguas</title>        
        <updated>2017-10-04T19:30:00+02:00</updated>
        <published>2017-10-01T11:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/10/la-triste-realidad-de-java-versiones-antiguas/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Algunos desarrolladores que utilizan el lenguaje de programación Java desearían que el tiempo que pasa entre publicación de una nueva versión y la siguiente fuese menor. Las nuevas versiones incorporan modificaciones en el lenguaje y en la API que facilitan el trabajo de los desarrolladores haciendo que escriban menos líneas de código, haciendo que el código fuente sea más legible que al final redunda en software con menos &lt;em&gt;bugs&lt;/em&gt;, con más funcionalidades, un tiempo de desarrollo menor y con menos costes.&lt;/p&gt;

&lt;p&gt;La versión de Java 9 fue publicada en septiembre de 2017 con algunos aplazamientos hasta estar todas las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; listas, principalmente la nueva modularidad. La versión de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 también con importantes novedades&lt;/a&gt; fue publicada con tres años de anterioridad, en marzo de 2014. En las últimas versiones entre cada una han pasado algunos años.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 1.0 (Enero 23, 1996)&lt;/li&gt;
&lt;li&gt;JDK 1.1 (Febrero 19, 1997)&lt;/li&gt;
&lt;li&gt;J2SE 1.2 (Diciembre 8, 1998)&lt;/li&gt;
&lt;li&gt;J2SE 1.3 (Mayo 8, 2000)&lt;/li&gt;
&lt;li&gt;J2SE 1.4 (Febrero 6, 2002)&lt;/li&gt;
&lt;li&gt;J2SE 5.0 (Septiembre 30, 2004)&lt;/li&gt;
&lt;li&gt;Java SE 6 (Diciembre 11, 2006)&lt;/li&gt;
&lt;li&gt;Java SE 7 (Julio 28, 2011)&lt;/li&gt;
&lt;li&gt;Java SE 8 (Marzo 18, 2014)&lt;/li&gt;
&lt;li&gt;Java SE 9 (Septiembre 21, 2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y de otros de los populares &lt;em&gt;frameworks&lt;/em&gt; para programación de aplicaciones web de servidor como &lt;a href=&#34;https://struts.apache.org/&#34;&gt;Apache Struts&lt;/a&gt; y &lt;a href=&#34;https://spring.io/&#34;&gt;Spring Framework&lt;/a&gt; que aún se siguen utilizando en versiones como 1 y 3 respectivamente en algunos casos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Struts 1.1 (2003)&lt;/li&gt;
&lt;li&gt;Struts 1.2 (2004)&lt;/li&gt;
&lt;li&gt;Struts 1.3 (2008)&lt;/li&gt;
&lt;li&gt;Struts 2 (2007)&lt;/li&gt;
&lt;li&gt;Struts 2.1 (2009)&lt;/li&gt;
&lt;li&gt;Struts 2.2 (2010)&lt;/li&gt;
&lt;li&gt;Struts 2.3 (2011)&lt;/li&gt;
&lt;li&gt;Struts 2.5 (2016)&lt;/li&gt;
&lt;li&gt;Spring Framework 1 (2004)&lt;/li&gt;
&lt;li&gt;Spring Framework 2 (2006)&lt;/li&gt;
&lt;li&gt;Spring Framework 2.5 (2007)&lt;/li&gt;
&lt;li&gt;Spring Framework 3 (2009)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.1 (2011)&lt;/li&gt;
&lt;li&gt;Spring Framework 3.2.5 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4 (2013)&lt;/li&gt;
&lt;li&gt;Spring Framework 4.2 (2015)&lt;/li&gt;
&lt;li&gt;Spring Framework 5 (2017)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En Java 9 el calendario de publicaciones va a cambiar optando por un modelo basado en fechas fijas cada seis meses y cada tres años para las versiones con soporte de largo plazo. Cada una de estas nuevas versiones incorporará las características que estén listas para ser publicadas lo que evitará que si una novedad se retrasa no retrase al resto de novedades que ya estén listas, simplemente se publicará en la siguiente versión al cabo de unos meses. Esto va a hacer que el número de versiones aumente significativamente a lo que hasta ahora ha ocurrido.&lt;/p&gt;

&lt;p&gt;Sin embargo, y a pesar de que algunos desarrolladores se han quejado de el tiempo que pasa entre versión y versión y que ahora con el nuevo calendario se le dará solución, ¿en algunos entornos va a cambiar algo? Si resulta que algunas organizaciones ya sean entes públicos o empresas privadas siguen utilizando versiones de Java como la 6 e incluso la 5 que fueron publicadas hace ya más de una década. Una década en el ámbito tecnológico es una eternidad. O de Spring como la 3 del 2009 o incluso de Struts como la 1 en el mejor de los casos del 2008 que ya incluso ni siquiera tiene soporte ni se siguen desarrollando lo que implica falta de soporte de seguridad. Y no es por que cada nueva versión de Java sea incompatible con la anterior, precisamente lo contrario, la compatibilidad hacia atrás es una de las cosas que siempre se le da una gran importancia en la plataforma a veces incluso por encima de nuevas características, tanto que aún código compilado a &lt;em&gt;bytecode&lt;/em&gt; en las versiones 1.0, 1.1 y 1.2 funcionaría perfectamente con la JVM de Java 9.&lt;/p&gt;

&lt;p&gt;Algunas de estas organizaciones pueden tener necesidad de utilizar versiones durante un periodo de tiempo largo ya sea por el número y tamaño de las aplicaciones que manejan pudiendo ser de un servicio crítico o por el coste que supone reemplazarlas o adaptarlas a tiempos más modernos. Pero usar software de hace una década parece algo excesivo para las aplicaciones nuevas que se desarrollan hoy, aún así si siguen usando versiones antiguas seguro que tendrán motivos. Versiones antiguas de librerías y sin posibilidad de usar las que no estén homologadas en la organización que por desgracia la lista es muy limitada. Generar gráficas con &lt;a href=&#34;http://www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt;, PDF con &lt;a href=&#34;https://community.jaspersoft.com/project/jasperreports-library&#34;&gt;JasperReports&lt;/a&gt; o &lt;a href=&#34;https://pdfbox.apache.org/&#34;&gt;PDFBox&lt;/a&gt;, Excel con &lt;a href=&#34;https://poi.apache.org/&#34;&gt;Apache POI&lt;/a&gt; son solo algunas de las necesidades habituales pero para otras es raro no encontrar alguna librería que lo facilite en gran medida.&lt;/p&gt;

&lt;p&gt;O usan &lt;em&gt;frameworks&lt;/em&gt; propios que a mi no me interesa aprender porque además de usar librerías ya antiguas fuera de esa organizaciones no tienen ninguna validez con lo que uno queda encadenado profesionalmente al menos en parte a esa organización y no me parece recomendable para un futuro profesional.&lt;/p&gt;

&lt;p&gt;El resultado es que aún celebrando la publicación de una nueva versión de Java en muchas organizaciones pasarán muchos años, quizá algún lustro o una ¡década! antes de que la utilicen como ya pasa ahora. Y esta es la triste realidad de Java en algunos sitios. Posiblemente solo en algunas &lt;em&gt;startups&lt;/em&gt; que no tienen una carga tan grande puedan utilizar la última versión de Java al contrario de lo ocurre en otras organizaciones y entornos corporativos mayores.&lt;/p&gt;

&lt;p&gt;Algunas empresas se quejan de que faltan trabajadores para cubrir puestos técnicos pero para completar el asunto digamos también que faltan salarios, condiciones laborales dignas, menos subcontratación o externalización u &lt;em&gt;outsourcing&lt;/em&gt; y proyectos interesantes en algún aspecto como podría ser el tecnológico que a uno le motive a postular a un puesto de trabajo. Yo al menos aparte del sueldo también valoro en buena medida la tecnología que se vaya a usar en el proyecto buscando que no esté obsoleta y que me permita seguir aprendiendo, al menos con la posibilidad de elegir trabajo.&lt;/p&gt;

&lt;p&gt;Y como escuché en cierta charla en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/01/conferencia-bilbostack-2016/&#34;&gt;una de las BilboStack&lt;/a&gt;, luego dirán que Java es una mierda, ya, una mierda, ¿del 2006?, ¿hablamos de Java 9, &lt;a href=&#34;https://www.jooq.org/&#34;&gt;jOOQ&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt;, &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;, &lt;a href=&#34;http://www.vavr.io/&#34;&gt;Vavr&lt;/a&gt;, &lt;a href=&#34;https://spring.io/&#34;&gt;Spring 5&lt;/a&gt;, &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE 8&lt;/a&gt;, &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt;, &lt;a href=&#34;http://wildfly.org/&#34;&gt;WildFly&lt;/a&gt;, &lt;em&gt;frameworks&lt;/em&gt; de servidor basados en componentes desde hace años con similitudes con los que ahora a la gente se le &lt;em&gt;hace el culo pepsi-cola&lt;/em&gt; en JavaScript con &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt; y &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt;?&amp;hellip; por mencionar algunas pocas.&lt;/p&gt;

&lt;p&gt;Quizá en la capital del reino de súbditos o en la capital de la nación que quiere votar sí o no a su independencia haya más posibilidades de encontrar un trabajo más interesante tecnológicamente pero en el páramo de la periferia no hay tantas posibilidades o de incluso crearlas&amp;hellip; quizá algún día.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="opinion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/</id>
        <title>JShell la herramienta REPL incorporada en Java 9</title>        
        <updated>2017-09-29T22:00:00+02:00</updated>
        <published>2017-09-29T21:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Una de las &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;novedades de Java 9&lt;/a&gt; es la incorporación de una herramienta &lt;em&gt;Read-Evaluation-Print-Loop&lt;/em&gt; o REPL similar a las disponibles en otros lenguajes dinámicos para permitir evaluar pequeños ejemplos de código, hacer pruebas o como herramienta para alguien que esté aprendiendo a programar sin la necesidad de utilizar un entorno integrado de desarrollo, una herramienta de construcción y los varios archivos y comandos necesarios para compilar y ejecutar el código Java.&lt;/p&gt;

&lt;p&gt;El comando de la herramienta &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell&lt;/a&gt; es &lt;em&gt;jshell&lt;/em&gt; que inicia un símbolo del sistema donde empezar a introducir las expresiones, se sale de &lt;em&gt;jshell&lt;/em&gt; con el comando &lt;code&gt;/exit&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Se pueden crear variables, crear y modificar definiciones de métodos y clases. Cada una de estas expresiones crea un &lt;em&gt;snippet&lt;/em&gt; de código que pueden listarse con el comando &lt;code&gt;/list&lt;/code&gt;. Al introducir las expresiones se soporta completado y asistencia de código con la tecla tabulador como ayuda para saber que métodos tiene un objeto.&lt;/p&gt;

&lt;p&gt;Se pueden crear clases y métodos como en el ejemplo de la serie de Fibonacci implementada con un &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html&#34;&gt;Stream&lt;/a&gt; de la cual se muestran los elementos de la serie menores que el número 100.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions.png&#34; title=&#34;Expresiones&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-expressions-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion.png&#34; title=&#34;Asistencia de código&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-completion-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Expresiones y asistencia de código&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods.png&#34; title=&#34;Serie de Fibonacci con un Stream en un método&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-methods-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Serie de Fibonacci con un Stream en un método&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para diferenciar las expresiones de código de los comandos estos últimos son precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Hay varios como los ya citados para listar los &lt;em&gt;snippets&lt;/em&gt; de código y salir de &lt;em&gt;jshell&lt;/em&gt;, otros son para listar las definiciones de variables con &lt;code&gt;/vars&lt;/code&gt;, métodos con &lt;code&gt;/methods&lt;/code&gt;, tipos con &lt;code&gt;/types&lt;/code&gt; e &lt;em&gt;imports&lt;/em&gt; con &lt;code&gt;/imports&lt;/code&gt;. La lista completa de comandos puede obtenerse pulsando la tecla tabulador después de la barra de comando.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands.png&#34; title=&#34;Comandos&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/265/jshell-commands-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Comandos&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para los &lt;em&gt;snippets&lt;/em&gt; multilínea o algo complejos puede utilizarse un editor externo con el comando &lt;code&gt;/edit&lt;/code&gt;. El editor de nuestra preferencia se establece con el comando &lt;code&gt;/set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;También se pueden &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/external-code.htm&#34;&gt;añadir módulos o librerías&lt;/a&gt; para usar las clases y tipos que contengan con el comando &lt;code&gt;/env&lt;/code&gt; y las opciones &lt;code&gt;&amp;ndash;add-modules&lt;/code&gt;  &lt;code&gt;&amp;ndash;module-path&lt;/code&gt; y &lt;code&gt;&amp;ndash;class-path&lt;/code&gt;. Los &lt;em&gt;snippets&lt;/em&gt; creados en una sesión pueden guardarse en un archivo con el comando &lt;code&gt;/save&lt;/code&gt; y ser cargados al inicio de JShell o con el comando &lt;code&gt;/open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/toc.htm&#34;&gt;guía oficial de JShell&lt;/a&gt; se comenta algunas opciones más de esta nueva herramienta.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/guides/java-and-j2ee/getting-started-with-jshell&#34;&gt;Getting Started with JShell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/</id>
        <title>Novedades de Java 9, más allá de la modularidad</title>        
        <updated>2017-10-07T12:15:00+02:00</updated>
        <published>2017-09-24T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-de-java-9-mas-alla-de-la-modularidad/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;La modularidad introducida en Java 9 no es la única novedad incorporada en esta nueva versión. Aunque haya llegado a eclipsar al resto hay otra buena colección de mejoras que sin duda facilitarán la programación con uno de los lenguajes más empleados por los programadores aún después de más de 20 años.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La última versión mayor de Java fue publicada en el año 2014, hace ya mucho tiempo para la época actual donde las cosas avanzan a un ritmo muy rápido. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;Java 8 introdujo en el lenguaje notables cambios&lt;/a&gt; como las expresiones &lt;em&gt;lambda&lt;/em&gt; dotándolo de capacidades funcionales y mayor expresividad en menos líneas de código junto con referencias a métodos e interfaces funcionales que permite crear implementaciones anónimas de interfaces con una &lt;em&gt;lambda&lt;/em&gt;, se añaden los &lt;em&gt;streams&lt;/em&gt; como nueva forma de iterar sobre las colecciones, interfaces con métodos por defecto o estáticos que aumentan la compatibilidad hacia atrás que siempre se le ha dado gran importancia en la plataforma o una nueva API para fechas que solventa las deficiencias de la anterior. Grandes cambios en el lenguaje tan importantes como los que supusieron Java 5.&lt;/p&gt;

&lt;p&gt;Después de algunos aplazamientos principalmente por implementar la modularización de la forma correcta sin que en un futuro suponga un problema ha sido publicada en septiembre de 2017 la versión de Java 9. La característica más llamativa es &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/&#34;&gt;la modularización de la plataforma con Java 9&lt;/a&gt; que supone grandes mejoras como una mejor encapsulación de los paquetes, interfaces entre módulos bien definidas y dependencias explícitas que proporcionan optimización al usarse sólo los módulos que se necesitan, mayor seguridad al ser menor la superficie de ataque y configuración confiable al comprobar las dependencias al compilar o iniciarse la máquina virtual.&lt;/p&gt;

&lt;p&gt;Pero Java 9 además de los módulos incorpora en la plataforma otros cambios destacables. Esta no es una lista exhaustiva pero si contiene muchas de ellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/index.html&#34;&gt;Oracle JDK 9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What’s New in Oracle JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/javase-docs.htm&#34;&gt;Guías descargables con documentación del JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Varios &lt;em&gt;screencasts&lt;/em&gt; sobre varias de las novedades de Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/SeptOct2017&#34;&gt;Java Magazine Sep/Oct 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/tabla-novedades-java-9.jpg&#34; title=&#34;Tabla de novedades de Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/tabla-novedades-java-9-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Tabla de novedades de Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/duke-java-9.png&#34; width=&#34;300&#34; alt=&#34;Duke Java 9&#34; title=&#34;Duke Java 9&#34;&gt;
&lt;/div&gt;

&lt;h3 id=&#34;métodos-factoría-para-colecciones&#34;&gt;Métodos factoría para colecciones&lt;/h3&gt;

&lt;p&gt;Aún Java no incorpora en el lenguaje una forma de definir como literales elementos tan comunes como listas, conjuntos o mapas. Como alternativa se proporcionan métodos factoría estáticos para crear este tipo de estructuras de datos usando métodos por defecto en sus respectivas interfaces. Además, estos métodos crean colecciones inmutables.&lt;/p&gt;

&lt;p&gt;Aparte de definir este tipo de colecciones de una forma mucho más sencilla que hasta Java 8, las colecciones además son significativamente más eficientes. En el caso de Java 8 un &lt;em&gt;Set&lt;/em&gt; con dos elementos de capacidad 3 requiere un objeto &lt;em&gt;wrapper&lt;/em&gt; para la colección inmodificable, 1 &lt;em&gt;HashSet&lt;/em&gt;, 1 &lt;em&gt;HashMap&lt;/em&gt;, 1 Object[] de longitud 3, 2 dos nodos uno para cada elemento requiriendo en total unos 152 bytes. En el caso de Set creado con Java 9 requiere solo 20 bytes que comparados con los 152 es una mejora significativa más al tener en cuenta que este tipo de estructuras de datos son utilizadas de forma numerosa en cualquier programa. Aún estando hablando de bytes multiplicado por cada uso en algunos casos la reducción de memoria puede ser apreciable.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Collections.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582422289001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;mejoras-en-la-clase-optional&#34;&gt;Mejoras en la clase &lt;em&gt;Optional&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or-java.util.function.Supplier-&#34;&gt;or()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse-java.util.function.Consumer-java.lang.Runnable-&#34;&gt;ifPresentOrElse()&lt;/a&gt; así como &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream--&#34;&gt;stream()&lt;/a&gt; mejoran la experiencia de uso en esta clase que contiene o no un objeto. El método &lt;em&gt;or()&lt;/em&gt; en caso de no contener el &lt;em&gt;Optional&lt;/em&gt; un objeto permite proporcionar un &lt;em&gt;Optional&lt;/em&gt; alternativo. Los métodos &lt;em&gt;ifPresent()&lt;/em&gt; y &lt;em&gt;ifPresentOrElse()&lt;/em&gt; permiten realizar una acción con el objeto del opcional si está presente u otra acción con un valor vacío si no está presente. El método &lt;em&gt;stream()&lt;/em&gt; convierte el &lt;em&gt;Optional&lt;/em&gt; en un &lt;em&gt;stream&lt;/em&gt; de cero o un elemento.&lt;/p&gt;

&lt;h3 id=&#34;mejoras-en-la-api-de-streams&#34;&gt;Mejoras en la API de &lt;em&gt;streams&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los nuevos métodos de los &lt;em&gt;streams&lt;/em&gt; &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#dropWhile-java.util.function.Predicate-&#34;&gt;dropWhile()&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#takeWhile-java.util.function.Predicate-&#34;&gt;takeWhile()&lt;/a&gt; permiten descartar o tomar elementos del &lt;em&gt;stream&lt;/em&gt; mientras se comprueba una condición. El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#ofNullable-T-&#34;&gt;ofNullable()&lt;/a&gt; devuelve un &lt;em&gt;stream&lt;/em&gt; de un elemento o vacío dependiendo de si el objeto es &lt;em&gt;null&lt;/em&gt; o no. Los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-&#34;&gt;iterate()&lt;/a&gt; permiten generar un secuencia de valores similar a un bucle &lt;em&gt;for&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;repl-con-jshell&#34;&gt;REPL con jshell&lt;/h3&gt;

&lt;p&gt;Otra de las características destacables es la incorporación de &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;la herramienta JShell&lt;/a&gt; para evaluar código siguiendo el patrón &lt;em&gt;Read-Evaluate-Print-Loop&lt;/em&gt; o REPL para hacer pruebas de código sin la necesidad de un IDE, una herramienta de construcción o toda la infraestructura de un proyecto. Esta herramienta es el comando &lt;em&gt;jshell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se pueden introducir expresiones que son evaluadas y comandos precedidos por el caracter &lt;em&gt;/&lt;/em&gt;. Soporta asistencia de código con la tecla tabulador.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm#JSHEL-GUID-630F27C8-1195-4989-9F6B-2C51D46F52C8&#34;&gt;Guía de usuario de jshell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell.png&#34; title=&#34;jshell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;jshell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429016001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;jlink-para-generar-runtimes-mínimos&#34;&gt;jlink para generar &lt;em&gt;runtimes&lt;/em&gt; mínimos&lt;/h3&gt;

&lt;p&gt;Java 8 proporciona varios &lt;em&gt;runtimes&lt;/em&gt; reducidos con los &lt;em&gt;compact profiles&lt;/em&gt; que contienen algunas clases menos de las que incluye el JDK completo. Sin embargo, estos &lt;em&gt;runtimes&lt;/em&gt; están preconfigurados y las aplicaciones deben optar por el que ofrezca todas las clases que necesita.&lt;/p&gt;

&lt;p&gt;En Java 9 se proporciona &lt;a href=&#34;http://openjdk.java.net/jeps/282&#34;&gt;jlink&lt;/a&gt; que un sustituto más capaz que los &lt;em&gt;compact profiles&lt;/em&gt;. Permite generar &lt;em&gt;runtimes&lt;/em&gt; aprovechando la nueva modularidad del JDK con únicamente los módulos que necesite la aplicación.&lt;/p&gt;

&lt;p&gt;Esto es especialmente útil para los contenedores de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y los entornos &lt;em&gt;cloud&lt;/em&gt; ya que permite generar imágenes de contenedores con un tamaño significativamente menor. Por ejemplo, una imagen de Docker basada en la distribución &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt; con el JDK completo ocupa unos 360 MiB, con &lt;em&gt;jlink&lt;/em&gt; si una aplicación solo necesita del módulo &lt;em&gt;java.base&lt;/em&gt; se puede generar un &lt;em&gt;runtime&lt;/em&gt; con únicamente ese módulo, con este &lt;em&gt;runtime&lt;/em&gt; adaptado la imagen del contenedor tiene un tamaño mucho menor, en este caso de únicamente de unos 40 MiB.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582437011001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;concurrencia&#34;&gt;Concurrencia&lt;/h3&gt;

&lt;p&gt;Se añade un &lt;em&gt;framework&lt;/em&gt; con un conjunto de clases para programación reactiva de publicación-subscripción con las clases &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html&#34;&gt;Flow&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Processor&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html&#34;&gt;Flow.Subscriber&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Publisher&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Processor.html&#34;&gt;Flow.Subscription&lt;/a&gt;. La clase &lt;em&gt;Subsription&lt;/em&gt; posee dos métodos: &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#cancel--&#34;&gt;cancel()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscription.html#request-long-&#34;&gt;request()&lt;/a&gt; para dejar de recibir mensajes y solicitar recibir &lt;em&gt;n&lt;/em&gt; mensajes en la siguientes llamadas de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html#onNext-T-&#34;&gt;onNext​()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#copy--&#34;&gt;copy()&lt;/a&gt; de la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html&#34;&gt;CompletableFuture&lt;/a&gt; permite obtener un copia completándose con el mismo valor cuando la operación se completa normalmente.&lt;/p&gt;

&lt;h3 id=&#34;variable-handles&#34;&gt;Variable Handles&lt;/h3&gt;

&lt;p&gt;Una de las justificaciones de la modularidad es el uso que hasta ahora se le ha dado a la famosa clase interna del JDK &lt;em&gt;sun.misc.Unsafe&lt;/em&gt;. Para proporcionar parte de la funcionalidad de esta clase en una API pública se introduce la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html&#34;&gt;VarHandle&lt;/a&gt; para referenciar a variables estáticas y no estáticas así como a &lt;em&gt;arrays&lt;/em&gt;. Estas instancias se obtienen mediante la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/MethodHandles.Lookup.html&#34;&gt;MethodHandle.Lookup&lt;/a&gt;. Una vez obtenida una instancia de &lt;em&gt;VarHandle&lt;/em&gt; se pueden realizar operaciones de bajo nivel sobre la variable que referencia como operaciones atómicas comparar y establecer pero sin la sobrecarga de rendimiento con las clases equivalentes del paquete &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/atomic/package-summary.html&#34;&gt;java.util.concurrent.atomic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para la mayoría de los programadores esto no les afectará directamente pero sí será una mejora para los desarrolladores de librerías importantes muy populares que si usan la clase &lt;em&gt;Unsafe&lt;/em&gt; y deberían aprovechar estas nuevas capacidades para dejar de usar la clase interna del JDK en la medida de lo posible.&lt;/p&gt;

&lt;h3 id=&#34;actualizaciones-en-la-api-para-procesos&#34;&gt;Actualizaciones en la API para procesos&lt;/h3&gt;

&lt;p&gt;Ahora es posible obtener el identificador del proceso o &lt;em&gt;pid&lt;/em&gt; con el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#pid--&#34;&gt;pid()&lt;/a&gt; y los procesos hijos y descendientes con los métodos &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#children--&#34;&gt;children​()&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/Process.html#descendants--&#34;&gt;descendants​()&lt;/a&gt; respectivamente.&lt;/p&gt;

&lt;h3 id=&#34;stackwalker&#34;&gt;StackWalker&lt;/h3&gt;

&lt;p&gt;La clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.html&#34;&gt;StackWalker&lt;/a&gt; permite obtener un &lt;em&gt;stream&lt;/em&gt; secuencial de &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/StackWalker.StackFrame.html&#34;&gt;StackWalker.StackFrames&lt;/a&gt; del &lt;em&gt;thread&lt;/em&gt; actual para procesar la pila de llamadas o &lt;em&gt;stacktrace&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=StackWalker.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;strings-compactos&#34;&gt;Strings compactos&lt;/h3&gt;

&lt;p&gt;Internamente los la clase &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/String.html&#34;&gt;String&lt;/a&gt; contiene un array de &lt;em&gt;char&lt;/em&gt;, cada &lt;em&gt;char&lt;/em&gt; se representa en formato con la codificación UTF-8 ocupando 16 bits o 2 bytes por cada caracter. Para cadenas en aquellos lenguajes como inglés los caracteres pueden ser representados usando un único &lt;em&gt;byte&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una buena parte de la memoria ocupada en la JVM por cualquier aplicación es debido a las cadenas de modo que tiene sentido compactar aquellas cadenas en las que sea posible representándolas con un único &lt;em&gt;byte&lt;/em&gt; por caracter.&lt;/p&gt;

&lt;p&gt;Lo mejor de todo es que esta optimización será transparente para los programadores y para las aplicaciones proporcionando una reducción en el uso de la memoria y aumento del rendimiento, también en el recolector de basura.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.javagists.com/compact-strings-java-9&#34;&gt;Compact Strings In Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;recolector-de-basura-g1-por-defecto&#34;&gt;Recolector de basura G1 por defecto&lt;/h3&gt;

&lt;p&gt;Se cambia el recolector de basura por defecto al llamado &lt;em&gt;G1&lt;/em&gt; optimizado para una balance adecuado entre alto rendimiento y baja latencia. En los siguientes artículos se explica de forma más detallada. Al igual que los &lt;em&gt;string&lt;/em&gt; compactos para la mayoría de los programadores será un cambio transparente que no tenga repercusión en la forma de programar las aplicaciones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html&#34;&gt;Getting Started with the G1 Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Make-G1-Default-Garbage-Collector-in-Java-9&#34;&gt;Case for Defaulting to G1 Garbage Collector in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582428191001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;identificador-para-variables&#34;&gt;Identificador para variables _&lt;/h3&gt;

&lt;p&gt;El identificador &lt;em&gt;_&lt;/em&gt; queda reservado para en un futuro usarlo en parámetros a los que no se les dé un uso y no sean relevantes como por ejemplo en las &lt;em&gt;lambdas&lt;/em&gt;. También se evaluará en el &lt;a href=&#34;http://openjdk.java.net/projects/amber/&#34;&gt;proyecto Amber&lt;/a&gt; usar este identificador para tipos diamante parciales como &lt;em&gt;Foo&amp;lt;String, _&amp;gt;&lt;/em&gt; o en referencias a métodos &lt;em&gt;foo.&amp;lt;String, _&amp;gt;bar()&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.takipi.com/project-amber-the-future-of-java-exposed/&#34;&gt;Project Amber: The Future of Java Exposed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;métodos-privados-en-interfaces&#34;&gt;Métodos privados en interfaces&lt;/h3&gt;

&lt;p&gt;Ahora se pueden crear métodos privados en interfaces como utilidad a las implementaciones de los métodos por defecto.&lt;/p&gt;

&lt;h3 id=&#34;mejor-try-with-resource&#34;&gt;Mejor &lt;em&gt;try-with-resource&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Ahora las variables finales o efectivamente finales pueden ser colocadas en los bloques &lt;em&gt;try-with-resource&lt;/em&gt; simplificando  algunos usos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=TryWithResources.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;javadoc&#34;&gt;Javadoc&lt;/h3&gt;

&lt;p&gt;Ahora la documentación Javadoc se genera con marcado de HTML 5 e incluye un cuadro de búsqueda para encontrar más fácilmente tipos y métodos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc.png&#34; title=&#34;Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/264/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h3 id=&#34;archivos-jar-multiversión&#34;&gt;Archivos Jar multiversión&lt;/h3&gt;

&lt;p&gt;Los desarrolladores de librerías para dar soporte a varias versiones de Java debían optar entre generar un artefacto para cada versión o un único archivo &lt;em&gt;jar&lt;/em&gt; limitándose a usar la mínima versión soportada y sin aprovechar las nuevas capacidades de siguientes versiones. Esto es un impedimento para el uso de nuevas versiones.&lt;/p&gt;

&lt;p&gt;Con Java 9 se puede generar un único archivo &lt;em&gt;jar&lt;/em&gt; con algunas clases para una o varias versiones de Java. Por ejemplo, en un archivo &lt;em&gt;jar&lt;/em&gt; con las clases &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; y &lt;em&gt;D&lt;/em&gt; compatibles con Java 6 el desarrollador ahora puede decidir que para la versión 9 la clase &lt;em&gt;A&lt;/em&gt; y &lt;em&gt;B&lt;/em&gt; sean unas optimizadas para esta versión. Esto se consigue con una estructura específica de directorios en el archivo &lt;em&gt;jar&lt;/em&gt;, ubicándose la clase optimizada para Java 9 &lt;em&gt;A&lt;/em&gt; en &lt;em&gt;META-INF/versions/9/A.class&lt;/em&gt; y para Java 10 en &lt;em&gt;META-INF/versions/10/A.class&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/543bdd4dad7311efbc80a298db328b73.js?file=Multirelease.out&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238: Multi-Release JAR Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;nuevo-modelo-de-publicación&#34;&gt;Nuevo modelo de publicación&lt;/h3&gt;

&lt;p&gt;A partir de la publicación de Java 9 se cambia el modelo de publicación de nuevas versiones optando por una basada en calendario en vez de una por características a incluir. El caso de versiones que han de incluir las características previstas ocasiona el problema que si una se retrasa provoca un retraso en la versión. Con el modelo basado en fechas fijas preestablecidas la versión se liberará con aquellas características que estén listas en la fecha planificada de publicación sin ser retrasadas por aquellas que no.&lt;/p&gt;

&lt;p&gt;Se ha optado por producir una nueva versión cada seis meses con el &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; y &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;licencia GPL&lt;/a&gt; para satisfacer las necesidades de los desarrolladores y una versión con soporte de largo plazo cada tres años para satisfacer las necesidades de tiempo de soporte prolongado de las empresas, &lt;em&gt;Oracle JDK&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582439790001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar un par de libros, &lt;a href=&#34;http://amzn.to/2g0qu6t&#34;&gt;Java 9 Revealed&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2fY3wwT&#34;&gt;Java 9 Modularity Revealed&lt;/a&gt; que explican detalladamente las novedades de la modularidad, las novedades incluídas en este artículo y algunas otras más.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484225910&amp;linkId=9c7874501bb32fa3318e285022e0207a&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484227123&amp;linkId=59d96101c25f9c16c4427b8ee9daef1a&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Y unos buenos vídeos sobre las nuevas características de Java 9, uno en español y otro en inglés.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/CkmB86pCV6A&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/9EiLRD95zDg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/the-best-java-9-language-and-api-improvements/&#34;&gt;The best Java 9 Language and API improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/new-features-in-java-9-137344.html&#34;&gt;New Java 9 features at a glance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2ylsidI&#34;&gt;Modern Java Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/try-with-resources-enhancement-in-java-9&#34;&gt;Try-With-Resource Enhancements in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2017&#34;&gt;Revista Java Magazine Jul/Aug 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-9-and-intellij-idea&#34;&gt;Java 9 and IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.autentia.com/2017/09/13/java-9-mas-alla-de-la-modularidad/&#34;&gt;Java 9 más allá de la modularidad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;JShell la herramienta REPL incorporada en Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/</id>
        <title>Novedades y nuevas características de Java 9, los módulos</title>        
        <updated>2017-10-07T12:10:00+02:00</updated>
        <published>2017-09-23T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/novedades-y-nuevas-caracteristicas-de-java-9-los-modulos/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Si en Java 8 la característica más destacada fue la incorporación al lenguaje de las &lt;em&gt;lambdas&lt;/em&gt; y los &lt;em&gt;streams&lt;/em&gt; en Java 9 la característica que más destaca es la definición de los módulos que proporciona varios importantes beneficios.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Después de unos cuantos aplazamientos de fechas finalmente ha sido publicado el 21 de septiembre de 2017 la &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34;&gt;versión 9 del lenguaje y plataforma Java&lt;/a&gt;, tres años después de las también importantes &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/&#34;&gt;novedades y nuevas características de Java 8&lt;/a&gt;. Al mismo tiempo se ha publicado versión de &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/downloads/index.html&#34;&gt;Java EE 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La incorporación de los módulos a la plataforma con Java 9 es una de las modificaciones más importantes en esta versión mayor del lenguaje. Aún siendo una de las características más destacadas y que ha eclipsado a otras modificaciones más allá de los módulos también importantes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/index.html&#34;&gt;Oracle JDK 9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What’s New in Oracle JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/javase-docs.htm&#34;&gt;Guías descargables con documentación del JDK 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Varios &lt;em&gt;screencasts&lt;/em&gt; sobre varias de las novedades de Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/SeptOct2017&#34;&gt;Java Magazine Sep/Oct 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/tabla-novedades-java-9.jpg&#34; title=&#34;Tabla de novedades de Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/tabla-novedades-java-9-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Tabla de novedades de Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;
&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/duke-java-9.png&#34; width=&#34;300&#34; alt=&#34;Duke Java 9&#34; title=&#34;Duke Java 9&#34;&gt;
&lt;/div&gt;

&lt;p&gt;Los módulos van a mejorar una de las deficiencias existentes en la visibilidad de las clases entre paquetes. Los módulos de Java proporcionan una mayor encapsulación de las clases contenidas en un paquete y las librerías. Esta encapsulación evita que una aplicación u otra librería haga uso y dependa de clases y paquetes de los que no debería lo que mejora la compatibilidad con versiones futuras. Los desarrolladores de una librería con los módulos ahora tienen un mayor control de los paquetes que expone una librería y que forma parte de su API pública. Con lo que se evita casos que se han dado hasta ahora como que librerías y programas dependan de clases internas en la API de Java como &lt;em&gt;sun.misc.BASE64Encoder&lt;/em&gt; o la famosa &lt;em&gt;sun.misc.Unsafe&lt;/em&gt;, para la primera en Java se añadió un reemplazo con &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/Base64.html&#34;&gt;java.util.Base64&lt;/a&gt;, para la segunda con Java 9 para parte de su funcionalidad se ha añadido algunas nuevas clases.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-version.png&#34; title=&#34;Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-version-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jshell.png&#34; title=&#34;JShell&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jshell-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Java 9 y JShell&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Los módulos proporcionan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encapsulación fuerte: se diferencia entre que es la API pública y usable y la parte privada a la que impide su uso accidental y acoplamiento indeseado entre módulos. La parte privada está encapsulado y de esta forma puede modificarse libremente con la seguridad de no afectar a los usuarios del módulo.&lt;/li&gt;
&lt;li&gt;Interfaces bien definidas: el código no encapsulado forma parte de la API del módulo, dado que otros módulos pueden usar esta API pública hay que tener especial cuidado al modificarlo al introducir cambios que sean incompatibles. Los módulos deben exportar una API bien definida y estable.&lt;/li&gt;
&lt;li&gt;Dependencias explícitas: los módulos necesitan a menudo otros módulos, estas dependencias son parte de la definición del módulo. Las dependencias explícitas forman un grafo que es importante conocer para entender las necesidades de una aplicación y para ejecutarla con todas sus dependencias.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los beneficios son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuración confiable: el sistema de módulos comprueba si una combinación de módulos satisface todas las dependencias antes de compilar o ejecutar una aplicación.&lt;/li&gt;
&lt;li&gt;Encapsulación fuerte: se evitan dependencias sobre detalles internos de implementación.&lt;/li&gt;
&lt;li&gt;Desarrollo escalable: se crean límites entre el equipo que desarrolla un módulo y el que lo usa.&lt;/li&gt;
&lt;li&gt;Optimización: dado que el sistema de módulos sabe que módulos necesita cada uno solo se consideran los necesarios mejorándose tiempos de inicio y memoria consumida.&lt;/li&gt;
&lt;li&gt;Seguridad: la encapsulación y optimización limita la superficie de ataque.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La modularización afecta al diseño, compilación, empaquetado y despliegue es mucho más que una nueva característica del lenguaje. Los módulos son artefactos con su propia entidad que contienen código y metadados para describir el módulo y como se relaciona con otros módulos.&lt;/p&gt;

&lt;p&gt;Hasta ahora se seguía una convención de poner clases en paquetes de nombre &lt;em&gt;.impl&lt;/em&gt; o &lt;em&gt;.internal&lt;/em&gt; pero realmente la gente seguía usando esas clases porque simplemente se podía. No había ninguna forma de ocultar las implementaciones de esos paquetes más allá del los modificadores de accesibilidad &lt;em&gt;protected&lt;/em&gt; y &lt;em&gt;private&lt;/em&gt; que no son satisfactorios para ocultar las implementaciones.&lt;/p&gt;

&lt;p&gt;Java desde sus inicios ha hecho un buen trabajo en la definición de interfaces usando la palabra reservada &lt;em&gt;interface&lt;/em&gt;. En el apartado de dependencias es donde había deficiencias. Sí, hay sentencias &lt;em&gt;import&lt;/em&gt; explícitas pero desafortunadamente son únicamente para el tiempo de compilación.&lt;/p&gt;

&lt;p&gt;En tiempo ejecución no hay ninguna noción de archivos JAR o agrupación lógica. En el &lt;em&gt;classpath&lt;/em&gt; todas las clases son puestas en una lista plana. Cuando la JVM carga una clase la encuentra recorriendo esa lista en orden secuencial, tan pronto como la clase es encontrada la búsqueda finaliza y la clase es cargada. Si la clase no se encuentra se obtiene una excepción en tiempo de ejecución y dado que las clases son cargadas bajo demanda en el momento de uso esa excepción potencialmente puede ser lanzada en un momento posterior de haber iniciado la aplicación. La JVM no puede verificar eficientemente la corrección del &lt;em&gt;classpath&lt;/em&gt; en el inicio o si se debería añadir otra librería &lt;em&gt;jar&lt;/em&gt;. Otros problemas insidiosos suceden cuando hay clases duplicadas en el &lt;em&gt;classpath&lt;/em&gt; por versiones diferentes de una misma librería.&lt;/p&gt;

&lt;p&gt;Antes del sistema de módulos de Java la librería de tiempo de ejecución consistía en un gran archivo &lt;em&gt;rt.jar&lt;/em&gt; con un tamaño de más de 60 MiB. Este archivo contiene la mayor parte de clases de la plataforma en forma de monolito. Para conseguir mayor flexibilidad y ser una plataforma de futuro se decidió modularizar el JDK.&lt;/p&gt;

&lt;p&gt;Eliminar algunas tecnologías en desuso del JDK no era una opción viable. La compatibilidad hacia atrás es uno de los principios más importantes para Java que guían su desarrollo. Eliminar estas APIs rompería esta compatibilidad hacia atrás, a pesar de que afectaría a un pequeño porcentaje de usuarios todavía hay una buena cantidad de gente usando tecnologías como CORBA.&lt;/p&gt;

&lt;p&gt;Descomponer el JDK en módulos ha sido un trabajo inmenso. Con más de 20 años de código heredado acumulados separar una enmarañada y grande base de código conteniendo cientos de clases en módulos bien definidos con límites claros mientras se mantiene la compatibilidad hacia atrás. Esto toma tiempo siendo el motivo de tomar tanto tiempo el incorporar un sistema de módulos en Java. Pero en el futuro este esfuerzo será recompensado en términos de velocidad de desarrollo y aumento de flexibilidad para el JDK.&lt;/p&gt;

&lt;p&gt;Con el tiempo las dependencias entre los propios paquetes y clases de la API de Java estaba enmarañada, con Java 9 las dependencias entre paquetes se ha simplificado en gran medida.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-8-modules.jpg&#34; title=&#34;Módulos de Java 8&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-8-modules-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-modules.jpg&#34; title=&#34;Módulos de Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-modules-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Módulos de Java 8 y Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El entorno de ejecución de Java y el compilador conocen exactamente ahora que módulo resolver al buscar los tipos para un paquete dado. Previamente la única forma de obtener un tipo arbitrario era hacer una búsqueda en todo el &lt;em&gt;classpath&lt;/em&gt;. Por ejemplo, dos módulos con el mismo nombre producen un error en inicio de la aplicación, en vez de en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;Los módulos permiten definir a cada librería los paquetes de clases que exporta como su API accesible por otra librería o programa que la requiera. Además, cada librería debe al mismo tiempo definir qué paquetes requiere. Las exportaciones y requerimientos permiten ahora detectar al iniciar la máquina virtual si el grafo de dependencias está completo cosa que antes se producía en un mayor número de casos en tiempo de ejecución posiblemente con la excepción &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/NoClassDefFoundError.html&#34;&gt;NoClassDefFound&lt;/a&gt;. Una de los efectos que se mejoran en Java y que ya es una característica a la que se le da mucha importancia es la compatibilidad hacia atrás y también la encapsulación ya que los desarrolladores de las librerías tienen mayor control de que paquetes se permite su uso evitando dependencias no deseadas que impidan en un futuro que aplicaciones que hipotéticamente las usasen dejasen de ser compatibles con nuevas versiones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=java-list-modules.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;La definición de un módulo se realiza con un nuevo archivo de código fuente de nombre &lt;em&gt;module-info.java&lt;/em&gt;. Con la palabra reservada &lt;em&gt;requires&lt;/em&gt; y una línea por paquete se definen qué paquetes requiere el módulo, con la palabra reservada &lt;em&gt;exports&lt;/em&gt; se define que paquetes del módulo se exportan y son visibles por algún otro módulo que lo requiera. También se han añadido las palabras reservadas &lt;em&gt;provides&lt;/em&gt; y &lt;em&gt;uses&lt;/em&gt; para proporcionar y usar definiciones de servicios que con anterioridad se realizaba en archivos ubicados en &lt;em&gt;META-INF/services&lt;/em&gt; como muestro en el ejemplo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader/&#34;&gt;Aplicación Java extensible con la clase ServiceLoader&lt;/a&gt;. También se puede hacer que la directiva &lt;em&gt;requires&lt;/em&gt; sea de forma transitiva para que el módulo que lo use pueda usar ese paquete sin requerirlo de forma explícita, la directiva &lt;em&gt;opens&lt;/em&gt; permite hacer uso de reflectividad usando el método &lt;a href=&#34;https://docs.oracle.com/javase/9/docs/api/java/lang/reflect/AccessibleObject.html&#34;&gt;setAccesible&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dado que la transición hacia el uso de los módulos puede generar problemas de compatibilidad con aplicaciones existentes se han añadido algunos parámetros para la máquina virtual en el comando &lt;em&gt;java&lt;/em&gt; e incluso en el caso más grave desactivar completamente el sistema de módulos, aunque lógicamente esto está desaconsejado. En la &lt;a href=&#34;http://docs.oracle.com/javase/9/migrate/toc.htm&#34;&gt;guía de migración a Java 9&lt;/a&gt; están detallados los aspectos a tener en cuenta en la migración de una versión anterior a Java 9.&lt;/p&gt;

&lt;p&gt;Este es el típico ejemplo &lt;em&gt;Hola Mundo&lt;/em&gt; con Java 9 en que que muestro como compilar un programa usando los módulos y como ejecutarlo directamente desde la linea de comandos. En el código de la clase &lt;em&gt;Main&lt;/em&gt; no hay ningún cambio respecto al que sería con una versión anterior de Java sin embargo se añade el nuevo archivo de código fuente &lt;em&gt;module-info.java&lt;/em&gt; donde se definen sus dependencias que este programa no tiene salvo la implícita sobre el módulo &lt;em&gt;java.base&lt;/em&gt;. Los comandos para compilar y ejecutar el ejemplo directamente con los comandos &lt;em&gt;javac&lt;/em&gt; y &lt;em&gt;java&lt;/em&gt; si cambian, ahora se usa en vez de &lt;em&gt;classpath&lt;/em&gt; la opción &lt;em&gt;module-path&lt;/em&gt; y se indica la clase del módulo que contiene el método &lt;em&gt;main&lt;/em&gt; del programa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=module-info.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/9f69c721f4186e3eb005a6cfebdf6dfd.js?file=java.sh&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-helloworld.png&#34; title=&#34;Hola Mundo con Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/java-9-helloworld-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Hola Mundo con Java 9&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El comando &lt;em&gt;jdeps&lt;/em&gt; muestra las dependencias de los módulos muy útil para tareas de análisis o depuración.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps.png&#34; title=&#34;Dependencias del ejemplo Hola Mundo con Java 9&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-java-sql.png&#34; title=&#34;Dependencias del módulo java.sql&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/263/jdeps-java-sql-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Análisis de dependencais con jdeps&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para profundizar más en los detalles de la modularidad y el resto de novedades de Java 9 están los libros &lt;a href=&#34;http://amzn.to/2g0qu6t&#34;&gt;Java 9 Revealed&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2fY3wwT&#34;&gt;Java 9 Modularity Revealed&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484225910&amp;linkId=9c7874501bb32fa3318e285022e0207a&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1484227123&amp;linkId=59d96101c25f9c16c4427b8ee9daef1a&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Para finalizar este artículo incluyo un vídeo sobre los módulos que comenta los aspectos más destacados. Hay &lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;otros vídeos sobre las novedades de Java 9&lt;/a&gt; de no más de 15 minutos cada uno.&lt;/p&gt;

&lt;div class=&#34;media media-video&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;//players.brightcove.net/1460825906/VkKNQZg6x_default/index.html?videoId=5582429007001&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJava9&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./java.sh&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-9-its-heeeere&#34;&gt;Java 9: It&amp;rsquo;s Heeeere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/9/migrate/toc.htm&#34;&gt;Java Platform, Standard Edition Oracle JDK 9 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/java-9-modules-jpms-basics-135885.html&#34;&gt;Java 9 modules – JPMS basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/jshell-la-herramienta-repl-incorporada-en-java-9/&#34;&gt;JShell la herramienta REPL incorporada en Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/</id>
        <title>Cambiar y personalizar los estilos de la documentación Javadoc</title>        
        <updated>2017-09-16T22:00:00+02:00</updated>
        <published>2017-09-16T22:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La documentación generada por &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;la herramienta Javadoc&lt;/a&gt; se puede adaptar a las necesidades propias ya que tiene mecanismos para extenderla. &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;Crear un &lt;em&gt;taglet&lt;/em&gt; propio&lt;/a&gt; es una forma pero también se pueden modificar los estilos aplicados al HTML generado, por ejemplo, para adaptar el Javadoc a los colores de la organización o para incluir un logotipo en la cabecera o un texto en el pie de página.&lt;/p&gt;

&lt;p&gt;El comando &lt;em&gt;javadoc&lt;/em&gt; con el que se genera la documentación posee opciones para modificar la cabecera, el pie de página o usar una hoja de estilos propia. Estas opciones son  &lt;em&gt;-header&lt;/em&gt;, &lt;em&gt;-footer&lt;/em&gt; y &lt;em&gt;-stylesheetfile&lt;/em&gt;. Un punto de partida para modificar los estilos es usar la hoja de estilos generada por defecto, realizar en ella las modificaciones oportunas y finalmente indicar que se use con el opción &lt;em&gt;-stylesheetfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En el caso de este ejemplo en vez de usar el color azul por defecto he modificado la hoja de estilos para que sea uno verde. En los cambios he partido de la hoja de estilos original del &lt;em&gt;javadoc&lt;/em&gt; e inspeccionando los elementos con las herramientas del navegador para sustituir sus colores por otros de una paleta de colores basada en el verde en la que cambia la tonalidad de color hacia más claro. También se puede modificar la cabecera y el pie de página para incluir una nota con un mensaje de derechos de autor o un enlace y añadir nuevos estilos para el &lt;em&gt;taglet&lt;/em&gt; &lt;em&gt;todo&lt;/em&gt;.&lt;/p&gt;

&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(96, 177, 79);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(116, 197, 99);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(136, 217, 119);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(156, 237, 139);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(176, 255, 159);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(196, 255, 179);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(216, 255, 199);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;float: left; width: 50px; height: 50px; background: rgb(236, 255, 219);&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=stylesheet.css&#34;&gt;&lt;/script&gt;

&lt;p&gt;La &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html&#34;&gt;tarea de Gradle para generar la documentación Javadoc&lt;/a&gt; posee &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html&#34;&gt;opciones&lt;/a&gt; equivalentes al comando &lt;em&gt;javadoc&lt;/em&gt;, unas de ellas como ejemplo son &lt;em&gt;footer&lt;/em&gt; y &lt;em&gt;bottom&lt;/em&gt; que añaden un texto en en el pie de página de cada página.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-1.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-2.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-3.png&#34; title=&#34;Estilos personalizados de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-3-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Estilos personalizados de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-1.png&#34; title=&#34;Estilos por defecto de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-2.png&#34; title=&#34;Estilos por defecto de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/262/javadoc-jdk-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Estilos por defecto de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;El comando &lt;em&gt;javadoc&lt;/em&gt; tiene una buena cantidad de opciones, con la opción &lt;em&gt;-help&lt;/em&gt; se obtiene una listado y descripción de cada una de ellas. Dependiendo del destinatario de la documentación, se pueden limitar las clases que son incluidas en el Javadoc si por ejemplo solo se quiere ofrecer la documentación de la parte pública.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/cd18c123cd34d6eaa266b0354266cd8c.js?file=javadoc-help.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;Documentacion Javadoc del JDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/</id>
        <title>Crear anotaciones de Javadoc personalizadas con taglets</title>        
        <updated>2017-09-16T10:00:00+02:00</updated>
        <published>2017-09-16T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;La herramienta de documentación es Javadoc de Java&lt;/a&gt; permite a partir del código fuente de un programa o librería generar un conjunto de documentos en formato HTML enlazados entre si consultables con un navegador web y accesibles desde internet si son accesibles con un servidor web. La documentación se genera a partir de las clases y métodos del código fuente y también a partir de los comentarios de las clases y métodos.&lt;/p&gt;

&lt;p&gt;En los comentarios se pueden incluir anotaciones que enriquecen la documentación, por ejemplo, para indicar el autor o en qué versión se incluyó una clase o método, incluir enlaces, &amp;hellip; en el propio JDK ya se incluye un amplio &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;conjunto completo de anotaciones&lt;/a&gt;. Pero además de usar las anotaciones ya incorporados por defecto en la herramienta también es posible añadir nuevos propios, escribiendo un &lt;em&gt;taglet&lt;/em&gt;. Con la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;API de los &lt;em&gt;taglets&lt;/em&gt;&lt;/a&gt; basta implementar una clase que implemente la interfaz &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html&#34;&gt;Taglet&lt;/a&gt;. La &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html&#34;&gt;interfaz Taglet de Java 9&lt;/a&gt; ha sido modificada ligeramente pero en esencia proporciona la misma información, en vez de un método para indicar si es posible el &lt;em&gt;taglet&lt;/em&gt; en una localización hay un único método que devuelve un &lt;em&gt;Set&lt;/em&gt; con todas las posibles localizaciones, en vez de necesitar un método &lt;em&gt;register&lt;/em&gt; hay un método &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#init-jdk.javadoc.doclet.DocletEnvironment-jdk.javadoc.doclet.Doclet-&#34;&gt;init&lt;/a&gt; y un único método para generar el contenido, &lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/jdk/javadoc/doclet/Taglet.html#toString-java.util.List-javax.lang.model.element.Element-&#34;&gt;toString&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La clase tiene varios métodos uno que indica el nombre único del &lt;em&gt;taglet&lt;/em&gt; que identificará la anotación en los comentarios de Javadoc, varios métodos para indicar en que localizaciones es usable y dos métodos que generan el contenido a incluir en el HTML resultante. Las clases &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/Tag.html&#34;&gt;Tag&lt;/a&gt; que recibe el método &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/jdk/api/javadoc/taglet/com/sun/tools/doclets/Taglet.html#toString-com.sun.javadoc.Tag-&#34;&gt;Taglet.toString()&lt;/a&gt; o &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javadoc/doclet/com/sun/javadoc/ParamTag.html&#34;&gt;ParamTag&lt;/a&gt; permite obtener diversa información utilizable para generar el contenido apropiado.&lt;/p&gt;

&lt;p&gt;Los &lt;em&gt;taglets&lt;/em&gt; pueden ser de tipo bloque con su propia entidad o ser embebidos en linea en un comentario del &lt;em&gt;javadoc&lt;/em&gt;. En ejemplo de &lt;em&gt;taglet&lt;/em&gt; de bloque siguiente consiste en permitir incluir elementos que quedan por hacer en el código, una anotación &lt;em&gt;todo&lt;/em&gt;. Con esta anotación el desarrollador incluye un comentario descriptivo de cuales son las cosas pendientes para un futuro. El código del &lt;em&gt;taglet&lt;/em&gt; sería el siguiente.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=TodoTaglet.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=Main.java&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;p&gt;Una vez escrito el código fuente del &lt;em&gt;taglet&lt;/em&gt; hay que compilarlo e indicar su ubicación al generar la documentación con la herramienta &lt;em&gt;javadoc&lt;/em&gt;. Hay que indicar varias opciones (&lt;em&gt;tagletPath&lt;/em&gt; y &lt;em&gt;taglets&lt;/em&gt;) que también se usarían como parámetros empleando directamente la herramienta &lt;em&gt;javadoc&lt;/em&gt;, los comandos serían los siguientes usando &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;. También hay que incluir de forma explícita como dependencia la librería &lt;em&gt;tools.jar&lt;/em&gt; ubicado en el JDK.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/picodotdev/6a669ccc50047e8e9394d593f079ac9d.js?file=build.gradle&#34;&gt;&lt;/script&gt;}&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet.png&#34; title=&#34;Contenido del taglet todo en el javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/261/javadoc-taglet-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Contenido del taglet todo en el javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/index.html&#34;&gt;Javadoc Technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/taglet/overview.html&#34;&gt;Taglet Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/</id>
        <title>Cómo generar la documentación Javadoc con Gradle</title>        
        <updated>2017-09-14T10:00:00+02:00</updated>
        <published>2017-09-14T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/como-generar-la-documentacion-javadoc-con-gradle/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Habiendo explicado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/&#34;&gt;que es la herramienta Javadoc&lt;/a&gt;, y en otros artículos &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;como crear taglets&lt;/a&gt; para incluirlos en los comentarios y generar contenido con los mecanismos de extensión que ofrece y explicado &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/&#34;&gt;como cambiar los estilos que se usan por defecto en el Javadoc&lt;/a&gt; para por ejemplo cambiar los colores según la organización o incluir un texto de derechos de autor en el pie de página, hay que generar la documentación &lt;em&gt;javadoc&lt;/em&gt; usando la herramienta de construcción que usemos. En este artículo muestro como generar la documentación &lt;em&gt;javadoc&lt;/em&gt; con &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo primero es incluir en el proyecto el &lt;em&gt;plugin&lt;/em&gt; de java. Con el &lt;em&gt;plugin&lt;/em&gt; incluido se añade una tarea con la que generar la documentación &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=gradle.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para indicar en Gradle &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#options&#34;&gt;las opciones del comando javadoc&lt;/a&gt; hay que ver cuales son en las clases &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/MinimalJavadocOptions.html&#34;&gt;MinimalJavadocOptions&lt;/a&gt;, &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/CoreJavadocOptions.html&#34;&gt;CoreJavadocOptions&lt;/a&gt; y &lt;a href=&#34;https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html&#34;&gt;StandardJavadocDocletOptions&lt;/a&gt;. Las opciones permiten indicar la clase de &lt;em&gt;taglet&lt;/em&gt; propio y lo mismo para usar una hoja de estilos propia que puede estar basada pero con pequeñas modificaciones sobre la que usa &lt;em&gt;javadoc&lt;/em&gt; por defecto, también para incluir un texto en cada página en el pie. Lo mismo sería para usar cualquiera de las otras opciones que tiene el comando &lt;em&gt;javadoc&lt;/em&gt;. En el ejemplo se usan dos opciones para la codificación de caracteres.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-1.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para generar un artefacto con la documentación comprimida en un archivo &lt;em&gt;zip&lt;/em&gt; hay que incluir la siguiente configuración en el archivo &lt;em&gt;build.gradle&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/7ff59112d8aa479d455e56c131dc5cee.js?file=build-2.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Gradle la documentación Javadoc se genera en el directorio &lt;em&gt;build/xxx&lt;/em&gt; y el artefacto en el directorio &lt;em&gt;build/xxx&lt;/em&gt;. Con las opciones anteriores este es el resultado del HTML generado.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc.png&#34; title=&#34;Artefacto generado con la documentación javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/260/javadoc-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Artefacto generado con la documentación javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew build&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo&#34;"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/</id>
        <title>La herramienta de documentación Javadoc de Java</title>        
        <updated>2017-09-11T13:00:00+02:00</updated>
        <published>2017-09-11T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/09/la-herramienta-de-documentacion-javadoc-de-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Programar y desarrollar requiere además de poseer diversos conocimientos disponer de una buena documentación de consulta y referencia. Una de las cosas buenas que me gustaron de Java cuando empecé a programar en este lenguaje, cuando aún estaba lejos de tener internet y aún me lo sigue pareciendo, fue su &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/&#34;&gt;documentación Javadoc&lt;/a&gt; de toda la API de clases incluidas en el JDK.&lt;/p&gt;

&lt;p&gt;La documentación Javadoc es una colección de páginas HTML de todas las clases, métodos, parámetros y retornos junto con la información y especificaciones que quiera incluir el desarrollador de la API que en el caso de las clases de JDK incluye abundantes e interesantes detalles de implementación a tener en cuenta al usar las clases.&lt;/p&gt;

&lt;p&gt;Se genera a partir del propio código fuente de las clases con los comentarios incluidos que siguen cierto formato precediendo la definición de las clases y métodos. Al estar código y documentación en el propio archivo de código fuente es más fácil mantener sincronizados el código y su documentación.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk.png&#34; title=&#34;Documentación Javadoc del JDK&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-jdk-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Documentación Javadoc del JDK&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación en el código fuente se incluye en comentarios que preceden una clase o método, además, con anotaciones se pueden documentar los parámetros y el valor de retorno. Se pueden incluir etiquetas HTML junto con algunas de las anotaciones o &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt;, algunas &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#javadoctags&#34;&gt;anotaciones Javadoc incluidas en el JDK&lt;/a&gt; son las siguientes pero también se pueden &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/crear-anotaciones-de-javadoc-personalizadas-con-taglets/&#34;&gt;desarrollar &lt;em&gt;doclets&lt;/em&gt;/&lt;em&gt;taglets&lt;/em&gt; propios&lt;/a&gt; o &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2017/09/cambiar-y-personalizar-los-estilos-de-la-documentacion-javadoc/&#34;&gt;personalizar los estilos de la documentación&lt;/a&gt; para cambiar el contenido, información incluida o adaptar los estilos a unos según los colores de la organización.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;@author&lt;/em&gt;: indica el autor de la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@code}&lt;/em&gt;: incluye en el comentario un trozo de código que se formatea de forma especial.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@docRoot}&lt;/em&gt;: incluye una ruta relativa al directorio raíz donde se genera la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@deprecated&lt;/em&gt;: indica que un método ha quedado obsoleto, se desaconseja su uso y puede que en futuras versiones desaparezca.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@exception&lt;/em&gt;: es sinónima de throws.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@inheritDoc}&lt;/em&gt;: hereda el comentario Javadoc de la clase o método superior en la jerarquía de clases.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@link}&lt;/em&gt;: incluye un enlace a otra sección de la documentación, método o clase.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@linkplain}&lt;/em&gt;: es idéntica a @link pero el enlace es un texto plano.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@literal}&lt;/em&gt;: muestra un texto sin interpretar el texto como HTML.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@param&lt;/em&gt;: documenta un parámetro de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@return&lt;/em&gt;: documenta el valor de retorno de un método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@see&lt;/em&gt;: incluye un enlace con documentación adicional en la sección final de la documentación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serial&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialData&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@serialField&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@since&lt;/em&gt;: indica a partir de que versión de la API fue incluida la clase o método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@throws&lt;/em&gt;: documenta una posible excepción que puede ser lanzada por el método.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;{@value}&lt;/em&gt;: muestra el valor de un campo estático.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;@version&lt;/em&gt;: para documentar la versión de cuando se hizo &lt;em&gt;checkout&lt;/em&gt; del sistema de control de versiones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un ejemplo usando estas anotaciones en una clase sería el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez documentado el código fuente hay que usar la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;herramienta Javadoc&lt;/a&gt; para generar la documentación. Mediante la herramienta de construcción &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; se hace con la tarea &lt;em&gt;javadoc&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=gradle.sh&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/1a1ee2ee7dc1a33daa5b16e59070f908.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;La propia documentación de las clases del JDK está generada con la herramienta Javadoc. Este es el aspecto de la documentación de este ejemplo que tiene exactamente el mismo aspecto que la del JDK.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2.png&#34; title=&#34;Documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Documentación Javadoc del ejemplo&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos.png&#34; title=&#34;Archivos de la documentación Javadoc&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/2017/259/javadoc-archivos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  
  &lt;figcaption&gt;Archivos de la documentación Javadoc&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;La documentación Javadoc al ser una colección de archivos HTML y demás recursos estáticos pueden copiarse a cualquier servidor web si es necesario que estén disponibles a través de internet y accesibles con cualquier navegador web.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Javadoc&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew javadoc&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html&#34;&gt;Javadoc 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html&#34;&gt;How to Write Doc Comments for the Javadoc Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>