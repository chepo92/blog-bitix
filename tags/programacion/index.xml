<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://picodotdev.github.io/blog-bitix/tags/programacion/index.xml</id>
    <title type="text">Blog Bitix</title>
    <subtitle>Recent content on Blog Bitix</subtitle>
    <updated>0001-01-01T00:00:00+00:00</updated>
    <author><name>pico.dev</name></author>
    <generator>Hugo</generator>
    <icon>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</icon>
    <logo>https://picodotdev.github.io/blog-bitix//assets/images/logotipos/hugo.png</logo>
    <rights>https://creativecommons.org/licenses/by-sa/4.0/</rights>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/</id>
        <title>Desempaquetado del kit de iniciación a la electrónica para la Raspberry Pi</title>        
        <updated>2017-02-25T23:30:00+01:00</updated>
        <published>2017-02-25T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/02/desempaquetado-del-kit-de-iniciacion-a-la-electronica-para-la-raspberry-pi/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/raspberrypi.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Raspberry Pi&#34; title=&#34;Raspberry Pi&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En el año 2012 compré una de las primeras Raspberry Pi que estuvieron disponibles a la venta, una placa modelo B de 256 MiB. La Raspberry Pi es un pequeño computador en una placa del tamaño de una tarjeta de crédito a un precio que aún se sigue manteniendo en las nuevas versiones de unos 40€ a los que hay que sumar algunos complementos necesarios como una tarjeta SD o microSD y un cargador con conector miniUSB. Las versiones iniciales que es la que tengo se componían de:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU 700 Mhz, un núcleo ARM11 de 32 bits&lt;/li&gt;
&lt;li&gt;Memoria de 256 MiB&lt;/li&gt;
&lt;li&gt;Ethernet 100 MB&lt;/li&gt;
&lt;li&gt;Lector tarjeta SD&lt;/li&gt;
&lt;li&gt;2 x USB 2.0&lt;/li&gt;
&lt;li&gt;HDMI&lt;/li&gt;
&lt;li&gt;26 pines, 17 de propósito general o GPIO&lt;/li&gt;
&lt;li&gt;Salida de audio&lt;/li&gt;
&lt;li&gt;Salida de vídeo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Después de unos años se han lanzado versiones notablemente mejoradas, hasta la fecha la última es la &lt;a href=&#34;http://amzn.to/2mmu6Os&#34;&gt;Raspberry Pi 3&lt;/a&gt; de esta placa que multiplica por 4 la cantidad de memoria RAM hasta 1 GiB y con una CPU de 4 núcleos a una frecuencia de 1.2 Ghz basados en los procesadores ARM Cortex-A53 de 64 bits, incluyendo WIFI N y Bluetooth 4.1, 4 conectores USB, lector microSD y 26 pines GPIO. Aunque la finalidad original de este computador es el aprendizaje de programación y electrónica el uso principal que le he dado hasta ahora ha sido para hacer descargas P2P via torrent. Esta placa es muy popular debido a su bajo coste aunque hay que sumarle posteriormente el precio de una tarjeta microSD y el cargador para proporcionarle energía, su éxito no solo es debido a su coste ya que hay opciones aún más potentes en algunos aspectos a precio similar que no son tan populares, el valor diferenciador de la Raspberry Pi es el apoyo y soporte de la comunidad.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b.jpg&#34; title=&#34;Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b.jpg&#34; title=&#34;Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Placas modelos Raspberry Pi 1 B y 3 B&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01CD5VC92&amp;linkId=8984621587929046662fba2b79079f5e&#34;&gt;&lt;/iframe&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01DDFFOYK&amp;linkId=079335c8a813f0df668ada2e897b7562&#34;&gt;&lt;/iframe&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00J29BR3Y&amp;linkId=4c06245cfc2383a7972edcbe3e42333a&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Hace unas semanas compré un &lt;a href=&#34;http://amzn.to/2mgnpko&#34;&gt;kit de electrónica básico para la Raspberry Pi&lt;/a&gt; pero que incluye una buena cantidad de sensores y elementos de electrónica y sirve para cualquier placa con pines GPIO. Como el &lt;em&gt;kit&lt;/em&gt; es para la Raspberry Pi 3 y viene con un cable de extensión de 40 pines (cantidad de pines que tiene la Raspberry Pi 3) y yo tengo la 1 debí comprar también un &lt;a href=&#34;http://amzn.to/2lSYiDF&#34;&gt;cable de extensión de 26 pines&lt;/a&gt; (los que tiene la Raspberry Pi 1) para la matriz de puntos con la que hacer pruebas sin soldar los elementos. El precio del &lt;em&gt;kit&lt;/em&gt; no es muy caro, de unos 30€ y el barómetro no venía soldado con sus pines por lo que si queremos usarlo deberemos hacer la soldadura primero con un &lt;a href=&#34;http://amzn.to/2mtXv8L&#34;&gt;soldador de electrónica&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2lSTYUU&#34;&gt;estaño&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El contenido del &lt;em&gt;kit&lt;/em&gt; es el siguiente que viene en una estupenda caja de plástico para guardar todos los componentes de forma ordenada:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 x GPIO to breadboard 40-pin breakout interface&lt;/li&gt;
&lt;li&gt;1 x solderless prototype breadboard&lt;/li&gt;
&lt;li&gt;40 x pin jumper wires (male to male 15cm)&lt;/li&gt;
&lt;li&gt;2 x 8 pin Jumper Wires (female to female 20cm)&lt;/li&gt;
&lt;li&gt;24 x LED (6 x Bright White, 6 x Red, 6 x Yellow, 6 x Green)&lt;/li&gt;
&lt;li&gt;65 x resistors (200ohm x 20pcs, 1Kohm x 20pcs, 10Kohm x 20pcs, 1Mohm x 5pcs)&lt;/li&gt;
&lt;li&gt;3 x photoresistor (light sensor)&lt;/li&gt;
&lt;li&gt;5 x push buttons&lt;/li&gt;
&lt;li&gt;3 x potentiometer (10kilohm adjustable resistor)&lt;/li&gt;
&lt;li&gt;1 x A/D converter&lt;/li&gt;
&lt;li&gt;1 x DHT11 Temperature/Humidity sensor&lt;/li&gt;
&lt;li&gt;1 x motion sensor&lt;/li&gt;
&lt;li&gt;1 x mercury tilt switch sensor&lt;/li&gt;
&lt;li&gt;1 x I2C 1602 alphanumeric LCD&lt;/li&gt;
&lt;li&gt;1 x servo motor&lt;/li&gt;
&lt;li&gt;1 x piezo Buzzer&lt;/li&gt;
&lt;li&gt;1 x BMP180 Pressure/Temperature Sensor&lt;/li&gt;
&lt;li&gt;1 x relay&lt;/li&gt;
&lt;li&gt;1 x Infrared Remote Controller and Receiver(VS1838B)&lt;/li&gt;
&lt;li&gt;1 x Raspberry Pi/Arduino 8-Channel TTL Logic Level Converter&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/caja.jpg&#34; title=&#34;Caja&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/caja-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/componentes-1.jpg&#34; title=&#34;Componentes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/componentes-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Caja, componentes y sensores&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/display-1.jpg&#34; title=&#34;Display 16x02&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/display-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/display-2.jpg&#34; title=&#34;Display 16x02 con adaptador I2C&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/display-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Display 16x02 y adaptador I2C&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/breadboard-1.jpg&#34; title=&#34;Breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/breadboard-1-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/breadboard-2.jpg&#34; title=&#34;Breadboard y adaptador&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/breadboard-2-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Breadboard y adaptador&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/adaptador-breadboard.jpg&#34; title=&#34;Breadboard&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/adaptador-breadboard-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/diodos-resistencias.jpg&#34; title=&#34;Diodos, botones, resistencias y fotoresistores&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/diodos-resistencias-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Adaptador breadboard, diodos, botones, resistencias y fotoresistores&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01MDUP97N&amp;linkId=a16adfaf3d471a1e94dc0590c0d615be&#34;&gt;&lt;/iframe&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00W9F5LR6&amp;linkId=5668053b0c5cb1aa9ff20db0e39790e8&#34;&gt;&lt;/iframe&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01KC2AQJK&amp;linkId=e45d6edd69dac157bd5ddf58be2cb301&#34;&gt;&lt;/iframe&gt;
  &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B008DEYEAW&amp;linkId=1f3f2cae44a45a28da37ac44749ed329&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;La matriz de conexiones o &lt;em&gt;breadboard&lt;/em&gt; es una forma cómoda de hacer pruebas sin tener que hacer soldaduras, los puntos en vertical de la mitad superior e inferior están conectados entre si de modo que con los cables macho-macho podamos poner y quitar conexiones. La matriz está numerada horizontalmente con números y verticalmente con letras de forma que cada punto sea identificable individualmente. Las dos filas de puntos superiores suelen usarse para proporcionar un voltaje de 5V y la conexión de tierra, las dos filas de puntos inferiores para proporcionar un voltaje de 3.3V y tierra. La placa está dividida en dos mitades verticalmente de las letras A-D y E-F formando columnas verticales de puntos conectadas en grupos de 5.&lt;/p&gt;

&lt;p&gt;Mi intención para este &lt;em&gt;kit&lt;/em&gt; es hacer unos pequeños ejemplos usando en cada uno de ellos uno o varios elementos y con el lenguaje de programación Java y la librería &lt;a href=&#34;http://rtd.diozero.com/en/latest/&#34;&gt;Diozero&lt;/a&gt;. Entre los ejemplos estará encender y apagar un LED, usar el &lt;em&gt;display&lt;/em&gt; de 16x2 caracteres, el sensor de temperatura y humedad, el sensor de infrarrojos, el motor, los pulsadores, el sensor de movimiento, los detectores de luz, el detector de golpes, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;En la página del fabricante o distribuidor mayorista &lt;a href=&#34;http://osoyoo.com/&#34;&gt;Osoyoo&lt;/a&gt; hay colgados varios ejemplos usando varios de estos elementos. También deberemos hacernos con las referencias de los pines para saber las conexiones que debemos hacer con los cables junto con la tabla de referencia de colores de las resistencias. Para usar las tablas de referencia debemos saber que hay varias formas de numerar los pines. Está la del &lt;em&gt;header&lt;/em&gt; del 1 al 26 o del 1 al 40 secuencialmente según la disposición en el &lt;em&gt;header&lt;/em&gt;, la que utiliza la librería &lt;a href=&#34;http://wiringpi.com/&#34;&gt;wiringPi&lt;/a&gt; y &lt;a href=&#34;http://pi4j.com/&#34;&gt;Pi4J&lt;/a&gt; para numerar los pines GPIO y la de Broadcom que utiliza la librería Diozero. Estas tablas de referencia de nomenclatura son importantes porque cada una numera los pines de forma diferente, por ejemplo, según la numeración de wiringPi el pin número 3 corresponde al GPIO 8 cuando según la nomenclatura de Broadcom corresponde al GPIO 0 en el modelo RPi 1 modelo B rev1 y al GPIO 2 en la RPi 3.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b-header-rev1.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b-header-rev1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b-header.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b-header-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Header de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura wiringPi&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b-header-rev1-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 1 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi1b-header-rev1-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b-header-broadcom.png&#34; title=&#34;Header de pines Raspberry Pi 3 B&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi3b-header-broadcom-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Headers de pines Raspberry Pi 1 B y Raspberry Pi 3 B, nomenclatura Broadcom&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/codigo-colores-resistencias.jpg&#34; title=&#34;Código de colores de las resistencias&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/codigo-colores-resistencias-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Código de colores de las resistencias&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Un ejemplo básico sin necesidad de programar nada es encender un diodo LED. Los elementos a usar son el diodo LED, una resistencia, los cables macho-macho, el cable de extensión y la matriz de puntos. Para ello conectamos el cable de extensión a la matriz de puntos donde con los cables macho-macho haremos las conexiones en los agujeros de la matriz de puntos. Usaremos la conexión de voltaje de 3.3V y una resistencia de 200 ohmios para que el LED no reciba demasiada intensidad. Los diodos LED tienen dos patitas, una más corta que la otra que indican la polaridad, la corta es el polo negativo y se conecta a tierra, la larga es el polo positivo que se conecta a uno de los extremos de la resistencia y el otro extremo de esta la voltaje de 3.3V.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/hola-mundo-led.jpg&#34; title=&#34;Ejemplo conexión LEDs&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/hola-mundo-led-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi.jpg&#34; title=&#34;Raspberry Pi&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/raspberrypi-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Ejemplo conexión LEDs y Raspberry Pi&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Con el programa &lt;a href=&#34;http://fritzing.org/home/&#34;&gt;Fritzing&lt;/a&gt; podremos prototipar y documentar el esquema de  conexiones que realicemos de los proyectos. Posee numerosos modelos, elementos electrónicos y dispositivos de entrada y salida aunque no he encontrado el correspondiente la placa de extensión de wiringPi.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/fritzing.png&#34; title=&#34;Fritzing&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/212/fritzing-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Fritzing&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En el siguiente artículo explicaré como crear un programa Java para encender y apagar varias veces un diodo LED con la librería Doizero. Además explicaré como con &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://es.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt; y &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; hacerlo de forma cómoda desde nuestra máquina de desarrollo y no directamente desde la más lenta Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Software. Hardware. Complete.&lt;/em&gt;&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="gnu-linux"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/</id>
        <title>Ejemplo de RabbitMQ con Java para enviar y recibir mensajes</title>        
        <updated>2017-02-18T10:00:00+01:00</updated>
        <published>2017-02-18T10:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/02/ejemplo-de-rabbitmq-con-java-para-enviar-y-recibir-mensajes/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Entre las ventajas de integrar dos aplicaciones mediante el envío de mensajes están que evita que estén acopladas y la comunicación es asíncrona. Con RabbitMQ también podremos implementar cada uno de ellas con el lenguaje de programación que prefiramos de entre las varias posibilidades para las que ofrece clientes y por esto último podemos preferir usarlo en vez de las especificación JMS propia de Java EE que nos obligaría a usar un servidor de aplicaciones que lo implemente, posiblemente JBoss/Wildfly o Weblogic en vez de Tomcat o Jetty. En el artículo incluyo un ejemplo para el lenguaje Java mostrando el envío y recepción de mensajes junto con la aplicación de administración que nos proporcionará información útil.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/rabbitmq.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;RabbitMQ&#34; title=&#34;RabbitMQ&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.svg&#34; class=&#34;right&#34; width=&#34;200&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Las aplicaciones que se integran mediante el envío y recepción de mensajes evitan el acoplamiento y sincronía junto con la posibilidad de implementar cada una de ellas con diferentes lenguajes o plataformas. Entre las especificaciones que componen Java EE está &lt;abbr title=”Java Message Service”&gt;JMS&lt;/abbr&gt; pero tanto la aplicación que envía como la que recibe mensajes deben estar programadas en el lenguaje Java, a menos que incluyamos un adaptador que permita a la aplicación no Java interactuar con JMS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; es un software que proporciona una funcionalidad similar a JMS pero con la ventaja que ofrece soporte para los lenguajes más populares como &lt;a href=&#34;http://www.oracle.com/technetwork/java/index.html&#34;&gt;Java&lt;/a&gt; y &lt;a href=&#34;http://es.wikipedia.org/wiki/M%C3%A1quina_virtual_Java&#34;&gt;&lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/es/&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://www.microsoft.com/net&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; y varias más. Usa varios conceptos similares a los presentes en JMS como que el emisor envía los mensajes a una cola y el receptor los lee de ella de modo que ni el emisor ni receptor se conocen consiguiendo de este modo el desacoplamiento entre ellos. Los mensajes son leídos de las colas con la posibilidad de que cada mensaje sea recibido por un único receptor o por cada uno de ellos.&lt;/p&gt;

&lt;p&gt;Realmente en RabbitMQ los mensajes no son enviados directamente por el emisor a las colas sino que se envían a un &lt;em&gt;exchange&lt;/em&gt; que finalmente lo enruta y encola en la cola destino. Los &lt;em&gt;exchanges&lt;/em&gt; pueden ser directos basando su lógica de encolado según el valor del &lt;em&gt;binding key&lt;/em&gt; enviada junto con el mensaje y un &lt;em&gt;routing key&lt;/em&gt; asociada con la cola o basados en temas en los que se usa una cadena formada por una lista de palabras separada por puntos, la lógica de enrutado se toma según si el &lt;em&gt;binding key&lt;/em&gt; cumple el patrón del &lt;em&gt;routing key&lt;/em&gt; que puede contener sustituidores de palabras, siendo un &lt;em&gt;*&lt;/em&gt; una palabra exacta y &lt;em&gt;#&lt;/em&gt; varias palabras contiguas.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;http://www.rabbitmq.com/documentation.html&#34;&gt;documentación de RabbitMQ&lt;/a&gt; hay 6 tutoriales en diferentes lenguajes para el envío y recepción de mensajes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-one-java.html&#34;&gt;Tutorial 1, Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-two-java.html&#34;&gt;Tutorial 2, Work Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-three-java.html&#34;&gt;Tutorial  3, Publish/Subscribe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-four-java.html&#34;&gt;Tutorial 4, Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-five-java.html&#34;&gt;Tutorial 5, Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/tutorial-six-java.html&#34;&gt;Tutorial 6, Remote procedure call (RPC)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basándome en estos ejemplos he creado un proyecto uno muy similar al Tutorial 1, ejecutable más fácilmente con &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; y &lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tanto en el emisor como en el receptor deberemos declarar las colas que van a usar (si una no existe se creará y si existe se usará), a la cola se le asigna un nombre y el receptor define un manejador para recibir los mensajes según se envían.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=Send.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=Receive.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para ejecutar el ejemplo usaré el &lt;a href=&#34;https://hub.docker.com/_/rabbitmq/&#34;&gt;contenedor de Docker para RabbitMQ&lt;/a&gt; iniciándolo con &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt; y el siguiente archivo descriptor. Puedes consultar la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;serie de artículos sobre Docker&lt;/a&gt; que escribí para conocer cómo usarlo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0f1299cc2ed2316cce49418e555443f4.js?file=docker-run.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una vez iniciado el contenedor y con el código fuente del ejemplo, iniciamos en cualquier orden la parte receptora de los mensajes y la parte emisora de mensajes con los comandos &lt;code&gt;./gradlew receive&lt;/code&gt; y &lt;code&gt;./gradlew send&lt;/code&gt; respectivamente, momento en el cual veremos que en la consola salen las notificaciones de recepción y envío.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/send.png&#34; title=&#34;Aplicación de ejemplo enviando mensajes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/send-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/receive.png&#34; title=&#34;Aplicación de ejemplo reciviendo mensajes&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/receive-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En la comunicación con RabbitMQ se puede usar &lt;a href=&#34;http://www.rabbitmq.com/ssl.html&#34;&gt;TLS/SSL&lt;/a&gt; así como mecanismos de &lt;a href=&#34;http://www.rabbitmq.com/authentication.html&#34;&gt;autenticación&lt;/a&gt; y &lt;a href=&#34;http://www.rabbitmq.com/access-control.html&#34;&gt;autorización&lt;/a&gt; para mayor seguridad. Usando confirmaciones si el receptor falla en el procesado el mensaje no se pierde ya que no se habrá declarado como &lt;em&gt;acknowledge&lt;/em&gt; aún así si RabbitMQ falla los mensajes se perderán a menos que las colas se declaren como persistentes las cuales se guardarán en disco perdurando a una catástrofe.&lt;/p&gt;

&lt;p&gt;RabbitMQ posee un &lt;a href=&#34;https://www.rabbitmq.com/management.html&#34;&gt;&lt;em&gt;plugin&lt;/em&gt; para la administración&lt;/a&gt; con el que podemos administrar permisos, tener una vista global, ver ratios de mensajes, estadísticas, colas, &lt;em&gt;exchanges&lt;/em&gt; y más información, nos da información muy interesante sobre el estado del procesamiento de mensajes. Es accesible mediante el navegador y la URL &lt;em&gt;http://localhost:15672/&lt;/em&gt;. En la captura del estado de la cola &lt;em&gt;hello&lt;/em&gt; hay 10 mensajes encolados pendientes de entregar a algún receptor.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/rabbitmq-management.png&#34; title=&#34;Aplicación web de administración de RabbitMQ&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/rabbitmq-management-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/rabbitmq-queue.png&#34; title=&#34;Información de estado de una cola&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/210/rabbitmq-queue-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Para profundizar más en las aplicaciones basadas en mensajes con RabbitMQ dos buenos libros son &lt;a href=&#34;http://amzn.to/2lTGMQc&#34;&gt;Learning RabbitMQ&lt;/a&gt; y &lt;a href=&#34;http://amzn.to/2lW9qwF&#34;&gt;Matering RabbitMQ&lt;/a&gt; cubriendo temas más avanzados como &lt;em&gt;clustering&lt;/em&gt;, alta disponibilidad, arquitectura, patrones de diseño, seguridad y rendimiento.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783984562&amp;linkId=9bb0705e8a34f246d5530b141b0a690e&#34;&gt;&lt;/iframe&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1783981520&amp;linkId=e87eebb622314cdf0c2c14fc32940264&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoRabbitMQ&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;docker-compose up &amp;amp;&amp;amp; ./gradlew receive &amp;amp;&amp;amp; ./gradle send&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rabbitmq.com/documentation.html&#34;&gt;Documentación RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/docker/&#34;&gt;Serie de artículos sobre Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/&#34;&gt;Introducción y ejemplo sencillo de Java Message Service (JMS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/</id>
        <title>Cursos de formación de KeepCoding</title>        
        <updated>2017-02-03T23:00:00+01:00</updated>
        <published>2017-02-03T23:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/02/cursos-de-formacion-de-keepcoding/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/keepcoding.png&#34; class=&#34;right&#34; alt=&#34;KeepCoding&#34; title=&#34;KeepCoding&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En internet hay cantidad de recursos disponibles para aprender de prácticamente cualquier cosas que queramos. También con libros técnicos como los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/&#34;&gt;8 libros que recomiendo para mejorar como programadores&lt;/a&gt; de los que es posible aprender de forma profunda sobre un tema en concreto. Estando suscritos a blogs como este también se pueden apreciar ciertos detalles sobre un tema o obtener una pequeña introducción con en ocasiones un ejemplo de código funcional.&lt;/p&gt;

&lt;p&gt;Sin embargo, algunos recursos de los que se encuentran disponibles en internet no están bien estructurados y de forma didáctica para aprender, los libros requieren de bastante atención y de una buena cantidad de tiempo además no tienen un tutor al que preguntar, los blogs como el mío son muy específicos en el tema de los artículos o introductorios sin cubrir tampoco un tema de forma completa y profunda. Asistir a conferencias también es una buena forma de obtener una introducción sobre el tema que se trate, en algunas sus entradas son gratuitas y otras tienen un coste de algunos cientos de euros a los que hay que sumar el transporte y alojamiento si son de varios días y en ocasiones no coinciden en fechas en las que podamos asistir.&lt;/p&gt;

&lt;p&gt;Hay webs en las que se ofrecen cursos de formación a distancia que podemos completar según nuestro tiempo disponible y aprender a nuestro ritmo. Además cuentan con tutores a los que hacer preguntas para resolver las dudas. Una de ellas es &lt;a href=&#34;http://keepcoding.es/?affcode=897_eznkgvrg&#34;&gt;KeepCoding&lt;/a&gt; que ofrece varios cursos con un temario bastante completo y de varias decenas de horas de formación. Algunos cursos de los que en este momento tienen disponibles son sobre varias de las tecnologías más demandadas actualmente y conocerlas son un buen punto a incluir en el &lt;em&gt;curriculum vitae&lt;/em&gt;. Algunos cursos de los que ofrecen que posiblemente en el futuro amplíen son los siguientes de los que puedes consultar su temario:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/intruduccion-javascript-node-js-express-mongodb-gratis/?affcode=897_eznkgvrg&#34;&gt;Introducción a JavaScript y Node.js&lt;/a&gt; (gratuito)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/git-github-sourcetree-agbotraining/?product_id=12902&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;Curso git, GitHub &amp;amp; SourceTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/fundamentos-android-online/?product_id=6517&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;Aprende Android ¡Desarrollando una App Completa!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/megacurso-ios/?affcode=897_eznkgvrg&#34;&gt;Megacurso iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/fundamentos-ios-online/?affcode=897_eznkgvrg&#34;&gt;Programación iOS para iPhone y iPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/programacion-ios-avanzada/?affcode=897_eznkgvrg&#34;&gt;Programación iOS Avanzada&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/python-django-y-rest/?affcode=897_eznkgvrg&#34;&gt;Python, Django y REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/curso-fundamentos-de-swift-3/?affcode=897_eznkgvrg&#34;&gt;Curso Fundamentos de Swift 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/curso-javascript-node-js-express-mongodb-completo/?affcode=897_eznkgvrg&#34;&gt;JavaScript + Node.js + Express + MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keepcoding.es/p/ruby-on-rails/?affcode=897_eznkgvrg&#34;&gt;Aprende Ruby on Rails y servicios REST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los cursos constan de varias horas lectivas con vídeos explicativos narrados en español como si un profesor estuviese dándonos una clase magistral que podrás revisar siempre que desees. Cada vídeo del curso no suele exceder de diez minutos siendo la mayoría de entre tres minutos y cinco minutos de forma que podamos visionarlos según el tiempo y momento que tengamos disponible. Creada la cuenta en KeepCoding e inscritos a un curso podremos ver nuestro progreso del mismo.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/207/keepcoding-course.png&#34; title=&#34;Curso online de KeepCoding&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/207/keepcoding-course-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Curso online de KeepCoding&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Algunos cursos de que ofrece KeepCoding son gratuitos y puedes inscribirte en ellos libremente para conocer la metodología de los cursos. Los cursos de pago tienen un precio de entre 100€ y 300€, precio no muy diferente de los cursos presenciales. Si la empresa en la que trabajas tiene interés en formar a sus empleados (y debería) posiblemente también esté interesada en costear el curso si el trabajo que desarrollas coincide con la temática de los cursos, este puede ser el caso de los &lt;a href=&#34;http://keepcoding.es/p/fundamentos-android-online/?product_id=6517&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;Aprende Android ¡Desarrollando una App Completa!&lt;/a&gt;, del &lt;a href=&#34;http://keepcoding.es/p/git-github-sourcetree-agbotraining/?product_id=12902&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;Curso git, GitHub &amp;amp; SourceTree&lt;/a&gt;, del &lt;a href=&#34;http://keepcoding.es/p/megacurso-ios/?affcode=897_eznkgvrg&#34;&gt;Megacurso iOS&lt;/a&gt; o de &lt;a href=&#34;http://keepcoding.es/p/python-django-y-rest/?affcode=897_eznkgvrg&#34;&gt;Python, Django y REST&lt;/a&gt;. También a nivel personal es una buena opción de formación para optar a puestos de trabajo de nuestro interés y demandados en el mercado laboral. El pago se puede hacer mediante tarjeta de crédito y tienen un derecho de desistimiento de 72 horas según las &lt;a href=&#34;http://keepcoding.es/p/condiciones-generales-contratacion/?affcode=897_eznkgvrg&#34;&gt;Condiciones Generales de Contratación de KeepCoding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A modo de promoción KeepCoding te ofrece dos cupones con un importante &lt;strong&gt;descuento de casi el 75%&lt;/strong&gt; sobre el precio original en los cursos de &lt;a href=&#34;http://keepcoding.es/p/fundamentos-android-online/?product_id=6517&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;Aprende Android ¡Desarrollando una App Completa!&lt;/a&gt; y &lt;a href=&#34;http://keepcoding.es/p/git-github-sourcetree-agbotraining/?product_id=12902&amp;amp;coupon_code=PICO-DEV&amp;amp;affcode=897_eznkgvrg&#34;&gt;curso git, GitHub &amp;amp; SourceTree&lt;/a&gt; con lo que se quedan en unos modestos y asequibles &lt;strong&gt;79€ + IVA usando los enlaces de afiliación&lt;/strong&gt; que incluyo en este artículo.&lt;/p&gt;

&lt;p&gt;Si quieres aprender reservate una hora o dos al día para dedicarle al curso que desees, de modo que tengas ese tiempo para completarlo y puedas empezarlos, acabarlos y que te resulten provechosos.&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="promocion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/</id>
        <title>Registro y descubrimiento de servicios con Spring Cloud y Consul</title>        
        <updated>2017-01-28T11:00:00+01:00</updated>
        <published>2017-01-28T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2017/01/registro-y-descubrimiento-de-servicios-con-spring-cloud-y-consul/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Tradicionalmente el conectar un servicio con sus servicios dependientes se ha realizado por configuración, normalmente mediante un nombre de dominio y su puerto. Esta configuración estática es suficiente para unos pocos servicios y que no varían durante su funcionamiento. Con el advenimiento de los microservicios con su estado y número cambiantes en el tiempo han surgido varias herramientas para en vez de usar configuración usar descubrimiento. Una de estas herramientas Consul para la que Spring Cloud proporciona integración.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/spring.png&#34; class=&#34;right&#34; alt=&#34;Spring&#34; title=&#34;Spring&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En una aplicación con una arquitectura de microservicios esta se compone de múltiples partes cambiantes. Los microservicios pueden aparecer, desaparecer, variar en número o cambiar de ubicación, la aplicación debe ser tolerante a esos cambios y seguir proporcionando su servicio. Por tanto, la configuración de red de los servicios no se puede realizar usando direcciones &lt;abbr title=&#34;Internet Protocol&#34;&gt;IP&lt;/abbr&gt; ya que no se conocen las que utilizarán los microservicios y usar nombres de dominio de &lt;abbr title=&#34;Domain Name System&#34;&gt;DNS&lt;/abbr&gt; puede no ser viable ya que los cambios tardan en propagarse. Conocer el nombre de &lt;em&gt;host&lt;/em&gt; y puerto reales de los microservicios es proporcionado por la funcionalidad de descubrimiento de servicios o &lt;em&gt;service discovery&lt;/em&gt; que proporcionan algunos servicios como &lt;a href=&#34;https://github.com/Netflix/eureka&#34;&gt;Eureka&lt;/a&gt;, &lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; o &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache Zookeper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En este artículo explicaré como usar la parte de descubrimiento de servicios de Consul usando una aplicación con &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; y  con &lt;a href=&#34;http://projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;. Spring Cloud proporciona varias cosas comunes para aplicaciones basadas en microservicios. Si aún no conoces las herramientas en las que se basará el ejemplo puedes consultar los siguientes artículos específicos como introducción:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elblogdepicodev.blogspot.com.es/2012/03/herramienta-de-construccion-gradle.html&#34;&gt;Herramienta de construcción Gradle &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/09/ejemplo-de-multiproyecto-con-gradle/&#34;&gt;Ejemplo de multiproyecto con Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/10/aplicacion-java-autocontenida-con-spring-boot/&#34;&gt;Aplicación Java autocontenida con Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config/&#34;&gt;Configuración de una aplicación en diferentes entornos con Spring Cloud Config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consul además de descubrimiento de servicios proporciona otras funcionalidades como detección de fallos o caídas para prevenir enviar peticiones a máquinas fuera de servicio y almacenamiento básico clave/valor para configuración dinámica o activación de características. Dispone de una aplicación web en la que podemos ver el estado de los servicios, una &lt;a href=&#34;https://www.consul.io/docs/agent/http.html&#34;&gt;API REST&lt;/a&gt; con la que comunicarse con Consul en una aplicación o en cada microservicio y un servidor de nombres &lt;abbr&gt;DNS&lt;/abbr&gt;, podemos usar cualquiera de las dos interfaces de consulta, la basada en la &lt;abbr&gt;API&lt;/abbr&gt; &lt;abbr&gt;REST&lt;/abbr&gt; o la basada en DNS para obtener las direcciones IP con la ubicación de los servicios.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/206/consul.png&#34; alt=&#34;Consul&#34; title=&#34;Consul&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Instalar Consul es muy sencillo basta con &lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;descargar un binario&lt;/a&gt; y descargar la interfaz web si queremos tener el &lt;em&gt;dashboard&lt;/em&gt; con la información del servicio. Descargados y descomprimidos Consul se inicia con el siguiente comando. Podemos acceder al panel &lt;em&gt;dashboard&lt;/em&gt; con la dirección &lt;a href=&#34;http://localhost:8500&#34;&gt;http://localhost:8500&lt;/a&gt; con un navegador web. Inicialmente en el panel de servicios solo se encuentra el propio de Consul cuando aún no se ha registrado ningún servicio, aplicación o microservicio.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=consul.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Una aplicación que use Spring Boot y que quiera hacer pública su disponibilidad en Consul basta con que use la anotación &lt;code&gt;@EnableDiscoveryClient&lt;/code&gt; en la clase de inicio de la aplicación junto con las dependencias adecuadas. Con la declaración de esta anotación y la dependencia &lt;em&gt;spring-cloud-starter-consul-all&lt;/em&gt; Spring se comunicará con Consul a través de la API REST para registrar cuando se inicie la aplicación, su nombre, nombre de máquina y puerto en el que estará disponible.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=Main.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Spring Cloud proporciona además un servicio que podemos usar para conocer los servicios registrados en Consul, con la clase &lt;em&gt;DiscoveryClient&lt;/em&gt; podemos conocer los nombres de los servicios, su nombre de máquina y puerto desde una aplicación Java. En el método &lt;em&gt;run&lt;/em&gt; de la clase &lt;em&gt;Main&lt;/em&gt; se usa en este ejemplo para imprimir en la salida el listado de servicios registrados en Consul. Uno de esos servicios esta aplicación de ejemplo, ya que se registra en Consul cuando se inicia.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/206/consul-services.png&#34; title=&#34;Servicios registrados en Consul&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/206/consul-services-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Servicios registrados en Consul&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Consul para conocer que los servicios siguen en funcionamiento hace una petición &lt;abbr&gt;HTTP&lt;/abbr&gt; cada ciertos segundos a una ruta de la aplicación, Spring Boot proporciona una dependencia, &lt;em&gt;spring-boot-starter-actuator&lt;/em&gt;, que usada provee del &lt;em&gt;endpoint /health&lt;/em&gt; para que Consul monitorice el estado del servicio.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=build.gradle&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/206/service-health.png&#34; title=&#34;Endpoint de estado de servicio&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/206/service-health-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;Endpoint de estado de servicio&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Esta es la salida en la consola listando los servicios disponibles, siendo uno de ellos esta aplicación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/69ebe9c83419447cdcfc4692988938a2.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/SpringCloudConsul&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./consul/consul.sh y ./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-cloud/&#34;&gt;Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloud.spring.io/spring-cloud-consul/&#34;&gt;Spring Cloud Consul&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/</id>
        <title>Hemeroteca #10</title>        
        <updated>2016-12-24T12:00:00+01:00</updated>
        <published>2016-12-24T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/hemeroteca-10/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Echando un vistazo a estos seis últimos meses han sido buenos, en número de artículos que he escrito y publicado como en el aumento de número de páginas vistas mensuales con respecto a inicios de 2016 y en similar proporción los ingresos mensuales por publicidad AdSense. De esta forma el esfuerzo en tiempo que supone escribir los artículos me es recompensado de alguna forma.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;p&gt;Otros seis meses acumulados de vida, ya son poco menos de 7 años desde que tengo un blog y 3 desde que empecé a escribir en Blog Bitix. A pesar de la gran cantidad de tiempo que me requiere escribir y publicar artículos, tanto como entre 3 y 10 horas de dedicación por artículo, es una de las cosas que más me alegro de haber empezado en el año 2010. Lo que aprendo con cada artículo de las cosas que me motivan y compartirlo por si a alguien más le resultan interesantes me resulta muy satisfactorio.&lt;/p&gt;

&lt;p&gt;En estos seis meses en vez de publicar un solo artículo por semana he estado publicando dos artículos y algunas semanas incluso 3. El número de páginas vistas mensuales han aumentado hasta el punto de multiplicar por cuatro las páginas vistas que tenía a inicios de año siendo ahora unas 26K/mes. Y no son muchas, otros blogs personales tienen muchas más, dos o tres veces más. La mala noticia es que un porcentaje importante de las visitas provienen de unos pocos artículos bien posicionados en Google. En cualquier caso en una proporción similar que han aumentado las páginas vistas han aumentado los ingresos por publicidad de &lt;a href=&#34;https://www.google.com/adsense/&#34;&gt;Google AdSense&lt;/a&gt; que incluyo en el blog, e incluso los últimos meses los ingresos han sido de alrededor de 20€ y 25€, con lo que podré hacer más &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/donacion/&#34;&gt;donaciones al software libre&lt;/a&gt; y más frecuentemente. En definitiva este ha sido un buen año en este aspecto, si el siguiente fuera similar sería estupendo.&lt;/p&gt;

&lt;p&gt;A pesar de la gran mejora en número de visitas mensuales durante este año cuesta un horror hacer crecer al blog y escribir y publicar al ritmo que lo he estado haciendo durante estos últimos meses. Hay que tener un poco de intuición y algo de suerte para acertar con artículos que se posicionen bien en los buscadores si lo que queremos es aumentar las visitas.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/analytics-2016.png&#34; title=&#34;Analytics 2016 de Blog Bitix&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/analytics-2016-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/adsense-2016.png&#34; title=&#34;AdSense 2016 de Blog Bitix&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/adsense-2016-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Evolución visitas e ingresos de AdSense en 2016&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Una de las cosas que me estoy arrepintiendo ahora es no de tener dominio propio, no lo hice porque con &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; me ofrecía el hospedaje gratis y sin complicaciones. Ahora me plantearía hospedar el blog en una máquina de &lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt;, &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; o en la reciente competencia de estos con &lt;a href=&#34;https://amazonlightsail.com/&#34;&gt;Amazon Lightsail&lt;/a&gt;. Mas que por necesidad por practicar con &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; e implementar en el blog HTTPS/2 o usar &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s encrypt&lt;/a&gt; asi como aprender sobre esos servicios en la nube. La migración es posible pero posiblemente no perfecta.&lt;/p&gt;

&lt;p&gt;Durante este periodo de tiempo he realizado algunos cambios a nivel de diseño en el blog como el buscador de contenido con &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;, he quitado del panel lateral los artículos recientes, he creado una nueva página por si alguna organización quisiera contactarme por publicidad e incluido un mensaje para aquellos que tengan un bloqueador de anuncios. Para tratar de monetizar algo más el blog también he estado considerando en inscribirme en páginas como &lt;a href=&#34;https://www.publisuites.com/&#34;&gt;Publisuites&lt;/a&gt; o &lt;a href=&#34;http://coobis.com/&#34;&gt;Coobis&lt;/a&gt; para escribir artículos patrocinados esporádicamente y siempre con artículos escritos por mi, con mi opinión y de la forma más honesta que pueda. Finalmente, me decidí por Publisuites pero aún no he recibido ninguna proposición de artículo patrocinado.&lt;/p&gt;

&lt;p&gt;Esta es la recapitulación de artículos que he escrito durante estos seis últimos meses organizados por temática empezando por unos pocos artículos más de la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/web/&#34;&gt;serie web&lt;/a&gt;, algunos sobre &lt;a href=&#34;http://www.gnu.org/&#34;&gt;GNU&lt;/a&gt;/&lt;a href=&#34;http://www.linux.com/&#34;&gt;Linux&lt;/a&gt; con varios artículos sobre juegos y otro sobre varias de las distribuciones más importantes y usadas, otros cuantos sobre programación relacionados con el lenguaje Java, por supuesto y de los que más gratificantes me resultan aunque no sean muy visitados relacionados de alguna forma con &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; o algunos de opinión como repaso a las motivaciones que me llevaron a elegir a &lt;a href=&#34;http://www.pepephone.com/&#34;&gt;Pepephone&lt;/a&gt; como proveedor de internet y otro de opinión sobre el rápido avance de la tecnología. En total han sido 47 artículos cuando en otros periodos de tiempo solo hubiese publicado unos 26.&lt;/p&gt;

&lt;p&gt;He añadido a la serie de artículos sobre desarrollo web varios interesantes que forman parte de lo esencial a conocer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-optimizar-un-sitio-web-con-compresion-gzip-en-nginx-y-apache-httpd/&#34;&gt;Cómo optimizar un sitio web con compresión GZIP en Nginx y Apache HTTPD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-como-balanceador-de-carga/&#34;&gt;Configurar Nginx como balanceador de carga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-un-proxy-inverso-entre-el-servidor-web-nginx-y-un-servidor-de-aplicaciones-java/&#34;&gt;Cómo crear un proxy inverso entre el servidor web Nginx y un servidor de aplicaciones Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/las-cabeceras-de-cache-del-protocolo-http/&#34;&gt;Las cabeceras de cache del protocolo HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/configurar-nginx-para-cachear-respuestas-del-servidor-de-aplicaciones/&#34;&gt;Configurar Nginx para cachear respuestas del servidor de aplicaciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-y-por-que-redirigir-trafico-web-del-dominio-raiz-al-subdominio-www/&#34;&gt;Cómo y por que redirigir tráfico web del dominio raíz al subdominio www (o viceversa)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La sección de artículos sobre GNU/Linux destaca la &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/series/juegos/&#34;&gt;serie sobre juegos&lt;/a&gt; en el sistema del pingüino. He empezado a usar por obligación en el trabajo macOS que me ha servido como excusa para escribir un par de artículos sobre el sistema operativo de Apple.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/comandos-basicos-de-gnu-linux/&#34;&gt;Comandos básicos de GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/guia-basica-del-interprete-de-comandos-bash/&#34;&gt;Guía básica del intérprete de comandos Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/jugar-al-ajedrez-en-gnu-linux-con-gnome/&#34;&gt;Jugar al ajedrez en GNU/Linux con GNOME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/como-crear-vistas-previas-de-imagenes-con-imagemagick/&#34;&gt;Cómo crear vistas previas de imágenes con ImageMagick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/jugar-al-clasico-de-estrategia-de-tablero-go-en-gnu-linux/&#34;&gt;Jugar al clásico de estrategia de tablero Go en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/juegos-incluidos-en-el-entorno-de-escritorio-gnome/&#34;&gt;Juegos incluidos en el entorno de escritorio GNOME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/jugar-a-videojuegos-clasicos-y-miticos-de-arcade-con-mame-en-gnu-linux/&#34;&gt;Jugar a videojuegos clásicos y míticos de arcade con Mame en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/descargar-paquetes-a-actualizar-sin-instalarlos-en-arch-linux/&#34;&gt;Descargar paquetes a actualizar sin instalarlos en Arch Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/22-plus-buenos-juegos-en-gnu-linux/&#34;&gt;22+ buenos juegos en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/varios-juegos-de-culto-con-scummvm-en-gnu-linux/&#34;&gt;Varios juegos de culto con ScummVM en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/como-configurar-una-impresora-hp-en-red-en-arch-linux/&#34;&gt;Cómo configurar una impresora HP en red en Arch Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/localizacion-de-un-comando-y-paquete-propietario-de-un-archivo-en-gnu-linux/&#34;&gt;Localización de un comando y paquete propietario de un archivo en GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/como-instalar-y-probar-macos-con-virtualbox-en-windows-o-gnu-linux/&#34;&gt;Cómo instalar y probar macOS con VirtualBox en Windows o GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/elegir-una-distribucion-gnu-linux-segun-el-usuario-uso-o-equipo/&#34;&gt;Elegir una distribución GNU/Linux según el usuario, uso o equipo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/guardar-contrasenas-de-forma-segura-con-keepassx/&#34;&gt;Guardar contraseñas de forma segura con KeePassX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He escrito otros cuantos artículos de programación en algunos casos relacionados de alguna forma con &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt;, Java y JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/07/no-un-tag-jsp-o-un-tag-de-grails-no-es-equivalente-a-un-componente-de-tapestry/&#34;&gt;No, un tag JSP o un tag de Grails no es equivalente a un componente de Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/por-que-guardar-las-fechas-en-utc-en-la-base-de-datos/&#34;&gt;Por qué guardar las fechas en UTC en la base de datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/ejemplo-de-api-rest-en-java-con-jax-rs-y-spring-boot/&#34;&gt;Ejemplo de API REST en Java con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/monitorizar-con-eventos-de-google-analytics-una-pagina-web/&#34;&gt;Monitorizar con eventos de Google Analytics una página web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;Autenticación con OAuth y Keycloak en un servicio REST con JAX-RS y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;Cliente de un servicio REST autenticado con OAuth en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/&#34;&gt;Generación de código en tiempo de ejecución con Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/&#34;&gt;Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/&#34;&gt;Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/&#34;&gt;Componente select múltiple en Apache Tapestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/&#34;&gt;Añadir botones selectores de opciones a select múltiple de bootsrap-select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/&#34;&gt;Histórico de datos, auditoría y diferencias entre objetos con Javers en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/&#34;&gt;Usar una imagen de fondo aleatoria al cargar una página web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/&#34;&gt;Introducción al JavaScript de ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/&#34;&gt;Cómo implementar correctamente y por qué los métodos equals y hashCode de los objetos Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/&#34;&gt;Transpiling de ECMAScript 6 a 5, Uglify y ESLint con Gulp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la categoría de artículos de opinion junto con otros de teḿatica variada han sido los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/eligiendo-proveedor-de-internet-finalmente-pepephone/&#34;&gt;Eligiendo proveedor de internet, finalmente Pepephone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/08/sobre-los-infimos-impuestos-que-paga-apple/&#34;&gt;Sobre los ínfimos impuestos que paga Apple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/articulo-2-de-yo-apoyo-al-software-libre/&#34;&gt;Artículo #2 de Yo apoyo al software libre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/gestionar-los-enlaces-de-una-bitacora-con-hugo/&#34;&gt;Gestionar los enlaces de una bitácora con Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/sobre-el-rapido-avance-de-la-tecnologia/&#34;&gt;Sobre el rápido avance de la tecnología&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/3-formas-sencillas-de-monetizar-un-blog/&#34;&gt;3 formas sencillas de monetizar un blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/mi-primer-mac-yo-usuario-de-gnu-linux/&#34;&gt;Mi primer Mac, yo usuario de GNU/Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/instalar-programas-con-homebrew-en-macos/&#34;&gt;Instalar programas con Homebrew en macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/11/desempaquetado-bombillas-led-de-philips/&#34;&gt;Desempaquetado bombillas LED de PHILIPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/la-fabrica-de-blog-bitix/&#34;&gt;La fábrica de Blog Bitix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¡Felices fiestas! ¡A por el 2017!&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/christmas-tux-2016.jpg&#34; title=&#34;¡Felices fiestas y buen 2017!&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/202/christmas-tux-2016-thumb.jpg&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;¡Felices fiestas y buen 2017!&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog"/>
            
                <category term="blog-stack"/>
            
                <category term="hemeroteca"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="planeta-linux"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="software-libre"/>
            
                <category term="tapestry"/>
            
                <category term="gnu-linux"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/</id>
        <title>Transpiling de ECMAScript 6 a 5, Uglify y ESLint con Gulp</title>        
        <updated>2016-12-11T01:35:00+01:00</updated>
        <published>2016-12-09T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/javascript.png&#34; class=&#34;right&#34; alt=&#34;JavaScript&#34; title=&#34;JavaScript&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Este artículo es una combinación de varias cosas que forman el actual estado del arte en JavaScript. &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; como ejecutor de tareas, traducción o &lt;em&gt;transpiling&lt;/em&gt; de ECMAScript 6 a ECMAcript 5 con &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/uglify-js&#34;&gt;Uglify&lt;/a&gt; como minificador y ofuscador de código y &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; como verificador del código.&lt;/p&gt;

&lt;p&gt;Dos de los navegadores web más importantes como &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt; y &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; ya soportan gran parte de la especificación de ECMAScript 6 que añade nuevas funcionalidades al lenguaje JavaScript que comento en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/&#34;&gt;Introducción al JavaScript de ECMAScript 6&lt;/a&gt;. Sin embargo, hasta que prácticamente toda la totalidad de dispositivos soporten ECMAScript 6, formada por la diversidad actual de dispositivos en las que se incluyen los dispositivos móviles es necesario traducir el código JavaScript a la especificación ECMAScript 5. Haciendo esta traducción podemos usar ES6 y al mismo tiempo soportar todos los dispositivos. Hacer &lt;em&gt;transpiling&lt;/em&gt; es necesario si el código será accedido desde internet de forma pública para cualquiera y queremos usar las nuevas características de ECMAScript 6. Si se tratase de una aplicación en un entorno controlado de uso interno en el que se usasen los navegadores que soporten ES6 el &lt;em&gt;transpiling&lt;/em&gt; no sería imprescindible.&lt;/p&gt;

&lt;p&gt;El tamaño de una página afecta al tiempo de carga de la misma, dada las velocidades de incluso los dispositivos móviles la velocidad ya no es tan importante como cuando el ancho de banda era significativamente menor y ahora importa más la latencia que &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/02/introduccion-al-protocolo-http-2/&#34;&gt;el protocolo HTTP/2&lt;/a&gt; trata de mejorar. En cualquier caso tanto comprimir con gzip el contenido devuelto por el servidor como minificar se consigue la mayor reducción en el tamaño de una página.&lt;/p&gt;

&lt;p&gt;Minificar el código y ofuscarlo hace que depurar sea más complicado al no tener el código fuente original. Para que los depuradores tengan la información de los nombres originales al minificar se pueden generar archivos &lt;em&gt;.map&lt;/em&gt; que los contengan y que los depuradores obtienen y usan cuando es necesario.&lt;/p&gt;

&lt;p&gt;ESLint es un verificador estático de código que nos informará de aquellas reglas que se no se respetan según las normas de estilos que definamos. En ESLint hay cantidad de &lt;a href=&#34;https://eslint.org/docs/rules/&#34;&gt;reglas&lt;/a&gt; que podemos aplicar al código y personalizar según nuestras preferencias, por ejemplo, requerir que las cadenas de texto se usen mediante comillas simples o que las llaves de bloques de código estén en la misma linea que la expresión &lt;em&gt;if&lt;/em&gt;, &lt;em&gt;else&lt;/em&gt;, &lt;em&gt;while&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Gulp define las tareas de un proyecto en un archivo de nombre &lt;em&gt;gulpfile.js&lt;/em&gt; que usando &lt;em&gt;gulp-balbel&lt;/em&gt;, &lt;em&gt;eslint&lt;/em&gt;, &lt;em&gt;gulp-uglify&lt;/em&gt; y &lt;em&gt;gulp-sourcemaps&lt;/em&gt; obtenemos todas las funcionalidades anteriores. Con Gulp los archivos son transformados en varios pasos y finalmente enviados a un directorio destino del sistema de archivos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=gulpfile.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para usar Gulp deberemos tener instalado &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; que en Arch Linux sería instalar su paquete:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=npm.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Instalar Gulp a nivel global en el sistema:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=gulp.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Y finalmente instalar en el proyecto las dependencias definidas en el archivo &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=npm-install.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;El archivo JavaScript original con ECMAScript 6 es el siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=main.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Transformado a ECMAScript 5 queda lo siguiente.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=main-babel.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Estos son los archivos de configuración para ESLint donde indicaremos las reglas que queremos aplicar al código JavaScript y la configuración para Babel donde indicamos a que versión de JavaScript haremos la transformación.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=.eslintrc.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=.babelrc&#34;&gt;&lt;/script&gt;

&lt;p&gt;Transformado con Uglify queda algo ilegible pero con el archivo &lt;em&gt;.map&lt;/em&gt; podremos depurar en el navegador mostrándose los nombres de las variables originales.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=main-uglify.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=main.js.map&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/ECMAScript6&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;npm install &amp;amp;&amp;amp; gulp &amp;amp;&amp;amp; node ./build/dist/main.js&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;El resultado son los siguientes mensajes en la terminal tanto para la ejecución del archivo ECMAScript 6 original con &lt;code&gt;node src/main/js/main.js&lt;/code&gt; como para el &lt;em&gt;transpilado&lt;/em&gt; con &lt;code&gt;node ./build/dist/main.js&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/0cf6306cf3a7770953946e94618578b8.js?file=System.out&#34;&gt;&lt;/script&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/</id>
        <title>Cómo implementar correctamente y por qué los métodos equals y hashCode de los objetos Java</title>        
        <updated>2016-12-07T14:00:00+01:00</updated>
        <published>2016-12-07T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/como-implementar-correctamente-y-por-que-los-metodos-equals-y-hashcode-de-los-objetos-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt; son esenciales en las colecciones de objetos. Para su correcta implementación es necesario conocer unas cuantas propiedades que han de cumplir estos métodos. Pueden parecer sencillos pero no lo son tanto y una mala implementación posiblemente produzca algún tipo de error o comportamiento anómalo indeseado. En el siguiente artículo comento varias formas de implementarlos de forma sencilla y correcta.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;En Java los métodos &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-&#34;&gt;equals&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--&#34;&gt;hashCode&lt;/a&gt; están definidos en la raíz de la jerarquía de clases, esto es en la clase &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&#34;&gt;Object&lt;/a&gt;, lo que significa que todas las instancias de objetos los poseen. Estos métodos son especialmente importantes ya que afectan al correcto funcionamiento de las colecciones como &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html&#34;&gt;Collection&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&#34;&gt;List&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Set.html&#34;&gt;Set&lt;/a&gt; y &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Map.html&#34;&gt;Map&lt;/a&gt;, colecciones, listas, conjuntos y mapas que es difícil que cualquier programa no use alguna implementación de ellas.&lt;/p&gt;

&lt;p&gt;El método &lt;em&gt;equals&lt;/em&gt; es usado en las colecciones de tipo &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, y también &lt;em&gt;Map&lt;/em&gt; para determinar si un objeto ya está incluida en la colección, el método &lt;em&gt;hashCode&lt;/em&gt; es usado en los &lt;em&gt;Map&lt;/em&gt; para encontrar el objeto asociado a la clave. Dado que las colecciones son ampliamente usadas en cualquier programa la correcta implementación implementación de los métodos &lt;em&gt;equals&lt;/em&gt; y &lt;em&gt;hashCode&lt;/em&gt; es fundamental ya que de lo contrario descubriremos errores poco agradables.&lt;/p&gt;

&lt;p&gt;Una de las cosas que tenemos que tener cuenta es que siempre que sobreescribamos el método &lt;em&gt;equals&lt;/em&gt; también debemos sobreescribir el método &lt;em&gt;hashCode&lt;/em&gt;. Según el &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&#34;&gt;contrato definido en la clase Object&lt;/a&gt; deberemos saber que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Durante la ejecución del programa el método &lt;em&gt;hashCode&lt;/em&gt; debe retornar el mismo valor siempre que no se modifique la información usada en el método &lt;em&gt;equals&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Si dos objetos son iguales según sus métodos &lt;em&gt;equals&lt;/em&gt; entonces el valor devuelto por &lt;em&gt;hashCode&lt;/em&gt; en cada uno de los dos objetos debe devolver el mismo valor.&lt;/li&gt;
&lt;li&gt;Si dos objetos son distintos según sus métodos &lt;em&gt;equals&lt;/em&gt; el valor devuelto no ha de ser necesariamente distinto aunque se recomienda para mejorar el rendimiento de las colecciones &lt;em&gt;Map&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cómo-implementar-el-método-equals&#34;&gt;Cómo implementar el método &lt;em&gt;equals&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Según la &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-&#34;&gt;especificación del método equals&lt;/a&gt; definido en la clase &lt;em&gt;Object&lt;/em&gt; debe tener las siguientes propiedades:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es reflexiva: para cualquier referencia no nula de x, &lt;code&gt;x.equals(x)&lt;/code&gt; debe retornar &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Es simétrica: para cualquier referencia no nula de x e y, &lt;code&gt;x.equals(y)&lt;/code&gt; debe retornar &lt;em&gt;true&lt;/em&gt; si y solo si &lt;code&gt;y.equals(x)&lt;/code&gt; retorna &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Es transitiva: para cualquier referencia no nula de x, y y z, si &lt;code&gt;x.equals(y)&lt;/code&gt; debe retorna &lt;em&gt;true&lt;/em&gt; y &lt;code&gt;y.equals(z)&lt;/code&gt; retorna &lt;em&gt;true&lt;/em&gt; entonces &lt;code&gt;x.equals(z)&lt;/code&gt; debe retornar &lt;em&gt;true&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Es consistente: para cualquier referencia no nula de x e y, múltiples invocaciones de &lt;code&gt;x.equals(y)&lt;/code&gt; consistentemente debe retornar &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt;, si no se ha modificado la información utilizada en la comparación.&lt;/li&gt;
&lt;li&gt;Para para cualquier referencia no nula de x, &lt;code&gt;x.equals(null)&lt;/code&gt; debe retornar &lt;em&gt;false&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La implementación del método &lt;em&gt;equals&lt;/em&gt; de la clase &lt;em&gt;Object&lt;/em&gt; usa la equivalencia más restrictiva posible, esto es, para cualquier referencia no nula de &lt;em&gt;x&lt;/em&gt; e &lt;em&gt;y&lt;/em&gt; este método retorna &lt;em&gt;true&lt;/em&gt; si y solo si son el mismo objeto (&lt;em&gt;x == y&lt;/em&gt; tienen la misma referencia).&lt;/p&gt;

&lt;p&gt;Según estas reglas una implementación del método &lt;em&gt;equals&lt;/em&gt; tiene la siguiente forma:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/906be34ee509940d9025c689fa50bb20.js?file=PhoneNumber-equals.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando la clase &lt;a href=&#34;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html&#34;&gt;EqualsBuilder&lt;/a&gt; de la librería &lt;a href=&#34;https://commons.apache.org/proper/commons-lang/&#34;&gt;commons-lang&lt;/a&gt; la implementación es aparentemente similar pero en el caso de necesitar hacer comparaciones con datos de tipo &lt;em&gt;float&lt;/em&gt;, &lt;em&gt;double&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt; u objetos hace la implementación un poco más sencilla. En los &lt;em&gt;float&lt;/em&gt; y &lt;em&gt;double&lt;/em&gt; para hacer la comparación deberíamos usar los métodos &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Float.html#compare-float-float-&#34;&gt;Float.compare&lt;/a&gt; y &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#compare-double-double-&#34;&gt;Double.commpare&lt;/a&gt; y en los objetos deberemos tener en cuenta si la referencia es posible que se a nula para evitar la excepción &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&#34;&gt;NullPinterException&lt;/a&gt; cosas que la clase &lt;em&gt;EqualsBuilder&lt;/em&gt; ya tiene en cuenta.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/906be34ee509940d9025c689fa50bb20.js?file=PhoneNumber-equals-commons-lang.java&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;como-implementar-el-método-hashcode&#34;&gt;Como implementar el método &lt;em&gt;hashCode&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;La implementación del &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--&#34;&gt;método hashCode&lt;/a&gt; se debe realizar según los siguientes pasos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Almacenar un valor constante distinto de 0 en una variable int, por ejemplo 17.&lt;/li&gt;
&lt;li&gt;Por cada campo usado en el método &lt;em&gt;equals&lt;/em&gt; se debe obtener un &lt;em&gt;hash code&lt;/em&gt; (int) realizando:

&lt;ul&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;boolean&lt;/em&gt; se debe calcular &lt;code&gt;(f ? 1 : 0)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;byte&lt;/em&gt;, &lt;em&gt;char&lt;/em&gt;, &lt;em&gt;short&lt;/em&gt; o &lt;em&gt;int&lt;/em&gt; se debe calcular &lt;code&gt;(int) f&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;long&lt;/em&gt; se debe calcular &lt;code&gt;(int) (f ^ (f &amp;gt;&amp;gt;&amp;gt; 32))&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;float&lt;/em&gt; se debe calcular &lt;code&gt;Float.floatToIntBits(f)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;double&lt;/em&gt; se debe calcular &lt;code&gt;Double.doubleToLongBits(f)&lt;/code&gt; y calcular el &lt;em&gt;hash&lt;/em&gt; del &lt;em&gt;long&lt;/em&gt; obtenido en el paso para los tipos &lt;em&gt;long&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Si el campo es una referencia a un objeto y el método &lt;em&gt;equals&lt;/em&gt; de esta clase compara recursivamente invocando el método &lt;em&gt;equals&lt;/em&gt; del campo, invocar su método &lt;em&gt;hashCode&lt;/em&gt;. si el valor de campo es nulo se debe retornar una constante que tradicionalmente es 0.&lt;/li&gt;
&lt;li&gt;Si el campo es un &lt;em&gt;array&lt;/em&gt; se debe tratar individualmente cada elemento aplicando estas reglas a cada elemento. Si cada elemento del array es significativo se puede usar &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#hashCode-java.lang.Object:A-&#34;&gt;Arrays.hashCode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Combinar los &lt;em&gt;hash code&lt;/em&gt; obtenidos de la siguiente forma, &lt;code&gt;result = 31 * result + c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/906be34ee509940d9025c689fa50bb20.js?file=PhoneNumber-hashcode.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Implementar este método en cada clase de una aplicación es tedioso, repetitivo y propenso a errores, para hacer más sencilla su implementación existe el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#hash-java.lang.Object...-&#34;&gt;Objects.hash&lt;/a&gt; desde la versión 7 de Java. Si usamos una versión anterior a Java 7 disponemos de la clase &lt;a href=&#34;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html&#34;&gt;HashCodeBuilder&lt;/a&gt; en la librería &lt;em&gt;commons-lang&lt;/em&gt;. La misma implementación anterior quedaría.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/906be34ee509940d9025c689fa50bb20.js?file=PhoneNumber-hashcode-java.java&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/906be34ee509940d9025c689fa50bb20.js?file=PhoneNumber-hashcode-commons-lang.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el libro &lt;a href=&#34;http://amzn.to/2g9N1bi&#34;&gt;Effective Java&lt;/a&gt; se explican con un poco más detalle estas dos cosas y muchas otras otras sobre Java que son muy interesantes conocer, el libro es una buena y recomendada lectura para todo programador Java que está entre los &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/&#34;&gt;8+ libros para mejorar como programadores&lt;/a&gt; que recomiendo.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=0321356683&amp;linkId=9145a271e7886cea526d9fcbe9edb707&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/2074996/hashcode-and-equals-method-in-java-object---a-pragmatic-concept.html&#34;&gt;HashCode and Equals method in Java object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/</id>
        <title>Introducción al JavaScript de ECMAScript 6</title>        
        <updated>2016-12-09T13:50:00+01:00</updated>
        <published>2016-12-03T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/12/introduccion-al-javascript-de-ecmascript-6/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Con ECMAScript 6 se han incorporado al lenguaje varias novedades como nuevas palabras reservadas para definir variables y constantes, símbolos, interpolación de variables en cadenas, desestructuración, forma abreviada para declarar funciones, nueva sintaxis más sencilla para definir clases, objetos de tipo &lt;em&gt;Map&lt;/em&gt; y &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;Promises&lt;/em&gt; como alternativa a &lt;em&gt;callbacks&lt;/em&gt;, el protocolo &lt;em&gt;Iterator&lt;/em&gt; y generadores, además de algunas otras cosas que si como yo no habías dedicado tiempo a aprender mejor JavaScript aún te resulten novedosas.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/javascript.png&#34; class=&#34;right&#34; alt=&#34;JavaScript&#34; title=&#34;JavaScript&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Hasta ahora como desarrollador web durante prácticamente toda mi vida laboral no había dedicado tiempo a conocer en más detalle el lenguaje de programación &lt;a href=&#34;http://es.wikipedia.org/wiki/JavaScript&#34;&gt;JavaScript&lt;/a&gt; usado en los navegadores web. Mucho de lo que necesitaba me era suficiente con librerías como &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; o &lt;a href=&#34;http://underscorejs.org/&#34;&gt;underscore&lt;/a&gt;. Ahora algunas páginas web tienen un peso importante en el lado cliente y ante esta necesidad el lenguaje JavaScript está evolucionando e incorporando nuevas características como las definidas en sus especificaciones de &lt;a href=&#34;https://es.wikipedia.org/wiki/ECMAScript&#34;&gt;ECMAScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para aprender en mucho más en detalle lo poco que conocía de JavaScript he leído el libro &lt;a href=&#34;http://amzn.to/2g3TV52&#34;&gt;Learning JavaScript&lt;/a&gt; que cubre las novedades de ECMAScript 2015 también conocido como ECMAScript 6 (ES6). Después de leerlo diré que es un libro que me ha gustado mucho y considero que es adecuado tanto para alguien que pueda estar aprendiendo a programar como para alguien que ya conoce otros lenguajes de programación explicando los conceptos sin complicaciones.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1491914912&amp;linkId=3ea3a8ae787fc5f9cdd9ca6934c7d635&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Las últimas versiones de los navegadores &lt;a href=&#34;https://www.google.es/chrome/browser/desktop/&#34;&gt;Chrome&lt;/a&gt; y &lt;a href=&#34;https://www.mozilla.org/es-ES/firefox/new/&#34;&gt;Firefox&lt;/a&gt; ya soportan todo lo que describo a continuación y que está más detalladamente explicado en el libro. Para los navegadores que aún no soportan todo como en los dispositivos móviles hay compiladores o &lt;em&gt;transpilers&lt;/em&gt; para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/12/transpiling-de-ecmascript-6-a-5-uglify-y-eslint-con-gulp/&#34;&gt;traducir de ECMAScript 6 a ECMAScript 5&lt;/a&gt;. En un entorno en el que sepamos se usa solo Chrome o Firefox como en una intranet o una aplicación de uso interno en una organización podemos utilizar estas novedades y si es una aplicación accesible por cualquier usuario desde internet podemos hacer la conversión de ECMAScript 6 a ECMAScript 5 con &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt; o &lt;a href=&#34;http://gruntjs.com/&#34;&gt;grunt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estas son gran parte de las novedades que he anotado al leer el libro Learning JavaScript. Para profundizar sobre JavaScript la documentación de &lt;a href=&#34;https://developer.mozilla.org/es/&#34;&gt;Mozilla Developer Network&lt;/a&gt; está muy bien como manual de referencia donde hay más ejemplos y comentarios más extensos de los que hago en cada sección.&lt;/p&gt;

&lt;h3 id=&#34;definición-de-variables&#34;&gt;Definición de variables&lt;/h3&gt;

&lt;p&gt;Para solventar las deficiencias de las variables declaradas con &lt;em&gt;var&lt;/em&gt; hay dos nuevas palabras reservadas &lt;em&gt;let&lt;/em&gt; para &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Declarations&#34;&gt;declarar variables&lt;/a&gt; que cambian de valor y &lt;em&gt;const&lt;/em&gt; para constantes. También se pueden declarar símbolos que son identificadores de tipos únicos e inmutables.&lt;/p&gt;

&lt;p&gt;El problema de las variables declaradas con &lt;em&gt;var&lt;/em&gt; está en que tienen ámbito de función con &lt;em&gt;let&lt;/em&gt; no existe hasta que es declarada. Las variables con &lt;em&gt;var&lt;/em&gt; son declaradas al principio del ámbito de la función o en el ámbito global.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=variables.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;interpolación-de-variables-en-cadenas&#34;&gt;Interpolación de variables en cadenas&lt;/h3&gt;

&lt;p&gt;La &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&#34;&gt;interpolación de variables en cadenas&lt;/a&gt; facilita la construcción de &lt;em&gt;strings&lt;/em&gt; y hace el código más legible. Las plantillas se definen con comillas de acento grave `.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=interpolation.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;desestructuración&#34;&gt;Desestructuración&lt;/h3&gt;

&lt;p&gt;Se ha incorporado la &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;asignación desestructurada&lt;/a&gt; pudiendo hacer cosas como las siguientes en las asignaciones y en las llamadas a las funciones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=destructuring.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;operador-spread&#34;&gt;Operador &lt;em&gt;spread&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;El &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&#34;&gt;operador &lt;em&gt;spread&lt;/em&gt;&lt;/a&gt; permite a una expresión se expandida en lugares donde se esperan múltiples argumentos como en llamadas a funciones, múltiples elementos para literales de &lt;em&gt;arrays&lt;/em&gt; o múltiples variables para asignación desestructurada.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=spread.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;bucles-con-in-y-of&#34;&gt;Bucles con &lt;em&gt;in&lt;/em&gt; y &lt;em&gt;of&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Usando el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&#34;&gt;iterador &lt;em&gt;in&lt;/em&gt;&lt;/a&gt; en un bucle recorremos las propiedades de un objeto y con el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&#34;&gt;iterador &lt;em&gt;of&lt;/em&gt;&lt;/a&gt; podemos recorrer cualquier objeto iterable. Cualquier objeto que definamos podemos hacerlo iterable cumpliendo el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&#34;&gt;protocolo Iterable&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=iterator-in-of.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;funciones&#34;&gt;Funciones&lt;/h3&gt;

&lt;p&gt;En JavaScript &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&#34;&gt;definir funciones&lt;/a&gt; es una parte muy importante de la esencia del lenguaje, ahora hay una forma corta de definir funciones.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=arrow-functions.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;

&lt;p&gt;El &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;tipo Array&lt;/a&gt; tiene muchos métodos y funciones adecuadas para la programación funcional como &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; o &lt;em&gt;reduce&lt;/em&gt; y también &lt;em&gt;push&lt;/em&gt;, &lt;em&gt;pop&lt;/em&gt;, &lt;em&gt;shift&lt;/em&gt;, &lt;em&gt;unshift&lt;/em&gt;, &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;slice&lt;/em&gt;, &lt;em&gt;splice&lt;/em&gt;, &lt;em&gt;fill&lt;/em&gt;, &lt;em&gt;copyWithin&lt;/em&gt;, &lt;em&gt;findIndex&lt;/em&gt;, &lt;em&gt;lastIndexOf&lt;/em&gt;, &lt;em&gt;indexOf&lt;/em&gt;, &lt;em&gt;reverse&lt;/em&gt;, &lt;em&gt;sort&lt;/em&gt;, &lt;em&gt;some&lt;/em&gt;, &lt;em&gt;every&lt;/em&gt;, &lt;em&gt;join&lt;/em&gt; o &lt;em&gt;concat&lt;/em&gt;. Funciones que antes no estaban presentes y para suplir su ausencia usábamos la librería &lt;em&gt;underscore&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;métodos-de-la-clase-function&#34;&gt;Métodos de la clase &lt;em&gt;Function&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Teniendo en una variable de &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&#34;&gt;tipo Function&lt;/a&gt; podemos llamarla con &lt;em&gt;call&lt;/em&gt; incluyendo un parámetro que se considerará el valor de la referencia &lt;em&gt;this&lt;/em&gt; dentro de la función. Con &lt;em&gt;apply&lt;/em&gt; los argumentos serán los definidos en un array aunque con la sintaxis &lt;em&gt;spread&lt;/em&gt; esta función puede caer en desuso. Con &lt;em&gt;bind&lt;/em&gt; podemos asociar a la función la referencia que siempre se tomará como &lt;em&gt;this&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;nueva-sintaxis-para-clases&#34;&gt;Nueva sintaxis para clases&lt;/h3&gt;

&lt;p&gt;Anteriormente en JavaScript ya se podían &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&#34;&gt;definir clases&lt;/a&gt; haciendo uso de la propiedad &lt;em&gt;prototype&lt;/em&gt; aunque su sintaxis ahora se ha simplificado y hecho más parecida a otros lenguajes además de definir propiedades con su método &lt;em&gt;getter&lt;/em&gt; y &lt;em&gt;setter&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=classes.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;objetos-map-y-set&#34;&gt;Objetos Map y Set&lt;/h3&gt;

&lt;p&gt;Los objetos pueden ser utilizados como mapas pero a veces utilizar un objeto no es deseable como contenedor de datos, para ello se definen los &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&#34;&gt;Map&lt;/a&gt; que son clases que a través de una clave se accede a un valor y &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&#34;&gt;Set&lt;/a&gt; para colecciones sin elementos repetidos.&lt;/p&gt;

&lt;p&gt;Algunas funciones de la clase Map son &lt;em&gt;get&lt;/em&gt;, &lt;em&gt;set&lt;/em&gt;, &lt;em&gt;has&lt;/em&gt;, &lt;em&gt;size&lt;/em&gt;, &lt;em&gt;keys&lt;/em&gt;, &lt;em&gt;values&lt;/em&gt;, &lt;em&gt;entries&lt;/em&gt;, &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt;, &lt;em&gt;clear&lt;/em&gt; y &lt;em&gt;size&lt;/em&gt;. Algunas de la clase Set son &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;has&lt;/em&gt;, &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt; y &lt;em&gt;size&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;operadores-instanceof-y-typeof&#34;&gt;Operadores &lt;em&gt;instanceof&lt;/em&gt; y &lt;em&gt;typeof&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Con &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof&#34;&gt;instanceof&lt;/a&gt; se puede comprobar si una variable es de un cierto tipo, si su cadena de prototipos incluye la función indicada. Con &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&#34;&gt;typeof&lt;/a&gt; se puede conocer el tipo de dato de una variable.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=instanceof-typeof.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;excepciones&#34;&gt;Excepciones&lt;/h3&gt;

&lt;p&gt;JavaScript soporta gestionar ciertas circunstancias de error con excepciones y con la construcción &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&#34;&gt;try catch finally&lt;/a&gt; similar a la existente en lenguajes como Java.&lt;/p&gt;

&lt;h3 id=&#34;callback-y-promise&#34;&gt;&lt;em&gt;Callback&lt;/em&gt; y &lt;em&gt;Promise&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Algunas tareas las manejamos usando &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/js-ctypes/Using_js-ctypes/Declaring_and_Using_Callbacks&#34;&gt;funciones &lt;em&gt;callback&lt;/em&gt;&lt;/a&gt;, funciones que se pasan como argumento y que son llamadas en algún momento. La programación con &lt;em&gt;callback&lt;/em&gt; se hace complicada en la programación asíncrona cuando se anidan varias funciones. Con los &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;objetos Promise&lt;/a&gt; el código de la programación asíncrona es más legible.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=callback-promise.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;generators&#34;&gt;&lt;em&gt;Generators&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Los &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&#34;&gt;objetos Generator&lt;/a&gt; que se basan en el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&#34;&gt;protocolo &lt;em&gt;Iterator&lt;/em&gt;&lt;/a&gt; pueden establecer una comunicación entre el generador y el código que lo llama con la palabra reservada &lt;em&gt;yield&lt;/em&gt; que retorna el valor del generador y la función &lt;em&gt;next()&lt;/em&gt; del iterador que puede proporcionar una parámetro usable en el generador. Las funciones generadoras se declaran poniendo un * después de la palabra &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/e2d39c688ee437367ff2c2e89b791ed2.js?file=generator.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Otros métodos nuevos de la &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&#34;&gt;clase &lt;em&gt;Object&lt;/em&gt;&lt;/a&gt; son &lt;em&gt;freeze&lt;/em&gt; que impide añadir nuevas propiedades al objeto, eliminar existentes o modificar sus valores haciendo al objeto inmutable. Con &lt;em&gt;seal&lt;/em&gt; se previene únicamente añadir nuevas propiedades.&lt;/p&gt;

&lt;h3 id=&#34;misc&#34;&gt;Misc&lt;/h3&gt;

&lt;p&gt;Declarando el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&#34;&gt;modo esctricto&lt;/a&gt; con &lt;em&gt;&amp;lsquo;use strict&amp;rsquo;;&lt;/em&gt; evitamos algunos de los errores que podemos cometer al usar JavaScript como declarar una variable en un ámbito global cuando no es nuestra intención. Con el método &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&#34;&gt;toString()&lt;/a&gt; de los objetos podremos proporcionar una representación de un objeto más descriptiva.&lt;/p&gt;

&lt;h3 id=&#34;manipulación-dom&#34;&gt;Manipulación DOM&lt;/h3&gt;

&lt;p&gt;Es raro que para manipular el árbol &lt;a href=&#34;https://es.wikipedia.org/wiki/Document_Object_Model&#34;&gt;DOM&lt;/a&gt; que representa el HTML cargado en el navegador no usemos la librería jQuery pero para casos básicos o cuando no podemos usar esa librería o queremos esa dependencia podemos hacer uso de las funciones incorporadas en el propio navegador y algunas funciones declaradas en el &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document&#34;&gt;objeto Document&lt;/a&gt;. Algunos métodos del objeto Documento son &lt;em&gt;getElementById&lt;/em&gt;, &lt;em&gt;getElementsByClassName&lt;/em&gt;, &lt;em&gt;getElementsByTagName&lt;/em&gt;, &lt;em&gt;querySelector&lt;/em&gt; y &lt;em&gt;querySelectorAll&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para manipular el texto de un nodo se usa la propiedad &lt;em&gt;textContent&lt;/em&gt; de la &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Node&#34;&gt;interfaz Node&lt;/a&gt; y para incluir en el nodo contenido HTML la propiedad &lt;em&gt;innerHTML&lt;/em&gt; de la &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/element&#34;&gt;interfaz Element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Con &lt;em&gt;createElement&lt;/em&gt; de Document mediante código podemos crear nuevos elementos y con &lt;em&gt;appendChild&lt;/em&gt; o &lt;em&gt;insertBefore&lt;/em&gt; de Node insertarlos en el árbol DOM. Con la propiedad &lt;em&gt;classList&lt;/em&gt; y los métodos &lt;em&gt;add&lt;/em&gt; y &lt;em&gt;remove&lt;/em&gt; podemos añadir clases a un nodo y con &lt;em&gt;dataset&lt;/em&gt; acceder a los atributos &lt;em&gt;data-&lt;/em&gt; de la etiqueta.&lt;/p&gt;

&lt;h3 id=&#34;eventos&#34;&gt;Eventos&lt;/h3&gt;

&lt;p&gt;Los navegadores definen más de 200 eventos ante los que podemos reaccionar, uno de los más típicos es el &lt;em&gt;click&lt;/em&gt; en un botón. A un &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/element&#34;&gt;Element&lt;/a&gt; de la página y con el método &lt;em&gt;addEventListener()&lt;/em&gt; se pueden asociar eventos.&lt;/p&gt;

&lt;p&gt;Eventos como el &lt;em&gt;click&lt;/em&gt; en algunos elementos tienen definido un comportamiento por defecto, para evitar ejecutar ese comportamiento por defecto disponemos de la función &lt;em&gt;preventDefault&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Los manejadores de eventos se van recorriendo primero en modo captura desde la raíz hasta el nodo del árbol DOM donde se ha producido el evento y posteriormente en modo burbuja desde el nodo donde se ha producido el evento hasta la raíz. Con &lt;em&gt;stopPropagation&lt;/em&gt; se puede cancelar la propagación del evento, realmente la propagación se sigue realizando pero el evento se marca como cancelado. Con &lt;em&gt;stopImmediatePropagation&lt;/em&gt; se puede parar la propagación completamente, parando incluso la propagación con el evento cancelado.&lt;/p&gt;

&lt;p&gt;Todos estos ejemplos funcionan en los navegadores Firefox y Chrome pudiendo probarlos en la consola JavaScript que incorporan para los desarrolladores. En la página &lt;a href=&#34;http://es6-features.org/&#34;&gt;es6-features&lt;/a&gt; hay una lista completa de todas las nuevas características de ECMAScript 6.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/es/&#34;&gt;Mozilla Developer Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://es6-features.org/&#34;&gt;es6-features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/</id>
        <title>Usar una imagen de fondo aleatoria al cargar una página web</title>        
        <updated>2016-11-13T12:00:00+01:00</updated>
        <published>2016-11-13T12:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/11/usar-una-imagen-de-fondo-aleatoria-al-cargar-una-pagina-web/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;p&gt;Para darle un toque de estilo a la bitácora he usado unas cuantas texturas de fondo obtenidas de &lt;a href=&#34;http://subtlepatterns.com/&#34;&gt;Subtle Patterns&lt;/a&gt;. Son unas imágenes con un patrón repetitivo de colores suaves y poco llamativos que podemos usar como fondo de una página web, son de libre uso respetando la &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;licencia Creative Commons - Reconocimiento - Compartir igual&lt;/a&gt;. Podemos encontrar texturas en las siguientes categorías y motivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/light/&#34;&gt;Light&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/dark/&#34;&gt;Dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/paper/&#34;&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/stripes/&#34;&gt;Stripes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/wall/&#34;&gt;Wall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/fabric/&#34;&gt;Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/noise/&#34;&gt;Noise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/diamond/&#34;&gt;Diamond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/grid/&#34;&gt;Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/tag/carbon/&#34;&gt;Carbon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En el momento de escribir este artículo hay 400+ texturas con diferentes patrones para temas claros, oscuros, &amp;hellip; Como tenemos muchas podemos usar varias y hacer que se cargue una diferente de forma aleatoria cada vez que se visualiza una página variando un poco el estilo de la página cada vez que se carga. En el momento de escribir este artículo es lo que hago en Blog Bitix con el siguiente código JavaScript, puedes probar a recargar la página y verás que se carga otra textura de fondo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/5a071fff1edbd801b8a984b9c8bb310c.js?file=app-theme.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Otra página que podemos para obtener una textura en este caso con ruido es &lt;a href=&#34;http://www.noisetexturegenerator.com/&#34;&gt;Noise Texture Generator&lt;/a&gt;. Indicamos unos cuantos parámetros y podemos obtener la textura generada.&lt;/p&gt;

&lt;p&gt;Si lo que queremos son fotos de buena calidad en la página en &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt; se publican 10 fotos cada 10 días que también podemos usar libremente, deberemos tener en cuenta que como son fotos de alta calidad y en formato jpg ocupan bastante más y si las usamos en una web deberemos reducir su tamaño para que la carga de la página no se ralentice demasiado en conexiones lentas o consuma demasiados datos, también podemos usarlas como fondo de pantalla de nuestro escritorio.&lt;/p&gt;

&lt;p&gt;Una buena textura o imagen pueden darle a una página un aspecto mucho más atractivo y si además hacemos que se use una diferente cada cierto tiempo o de forma aleatoria hacemos que la página sea algo diferente cada vez que se visualiza.&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://subtlepatterns.com/&#34;&gt;Subtle Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.noisetexturegenerator.com/&#34;&gt;Noise Texture Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/</id>
        <title>Histórico de datos, auditoría y diferencias entre objetos con Javers en Java</title>        
        <updated>2016-11-05T11:00:00+01:00</updated>
        <published>2016-11-05T11:00:00+01:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/11/historico-de-datos-auditoria-y-diferencias-entre-objetos-con-javers-en-java/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;Por seguridad, por auditoría o histórico de datos una aplicación puede requerir no solo guardar los valores actuales de los datos que maneja sino también las versiones anteriores y los cambios en cada valor de los mismos. En Java hay una librería llamada Javers que nos proporciona funcionalidades como comparación, &lt;em&gt;snapshots&lt;/em&gt;, persistencia y un lenguaje de consulta para hacer búsquedas.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Por necesidades de negocio y requerimientos funcionales puede ser necesario guardar un histórico de ciertos datos de una aplicación en vez de solo la última versión de los datos. Tener solo la última versión de algunos datos puede no ser lo que se necesita. Por ejemplo, supongamos que una aplicación maneja una entidad de dominio producto y esta tiene un campo que es el precio y queremos guardar los cambios que se hacen a esta entidad para conocer el cambio de precio que han sufrido los productos. Otras necesidades pueden ser por auditoría o seguridad para saber que usuario ha hecho que cambios en los datos, para disponer de versiones anteriores de una entidad, comparar dos versiones de la misma entidad o lanzar consultas para obtener información de los cambios que se han producido.&lt;/p&gt;

&lt;p&gt;Una librería que en Java nos ofrece toda esta información de auditoría es &lt;a href=&#34;http://javers.org/&#34;&gt;Javers&lt;/a&gt; con la posibilidad de persistirla en diferentes sistemas, en las tradicionales base de datos relacionales o en una base de datos no SQL como &lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;. En la documentación encontramos como podemos &lt;a href=&#34;http://javers.org/documentation/diff-examples/&#34;&gt;comparar dos objetos&lt;/a&gt;, &lt;a href=&#34;http://javers.org/documentation/repository-examples/&#34;&gt;persistir cambios&lt;/a&gt; o &lt;a href=&#34;http://javers.org/documentation/jql-examples/&#34;&gt;lanzar consultas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Javers diferencia dos tipos de objetos &lt;a href=&#34;http://javers.org/documentation/diff-examples/#compare-entities&#34;&gt;Entities&lt;/a&gt; o &lt;a href=&#34;http://javers.org/documentation/diff-examples/#compare-valueobjects&#34;&gt;ValueObjects&lt;/a&gt;. Los ValueObjects son objetos &lt;em&gt;java bean&lt;/em&gt; tradicionales de Java que no tenen identificador asignado y no son persistibles pero se pueden usar para hacer comparaciones entre dos objetos según las propiedades de los &lt;em&gt;java beans&lt;/em&gt;. Los objetos &lt;em&gt;java bean&lt;/em&gt; Entities tienen una propiedad que representa el identificativo de la entidad y las comparaciones se pueden hacer entre diferentes versiones del mismo.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo muestro como hacer comparaciones, como hacer cambios y persistirlos, como lanzar una consulta para obtener los cambios que se han producido u obtener &lt;em&gt;snapshots&lt;/em&gt; de versiones anteriores y como persistir estos cambios en una base de datos &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; en la que utilizaré &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;. En la primera sección del ejemplo se comparan dos objetos y obtienen sus diferencias, posteriormente se persisten varios cambios y finalmente se realiza una consulta para obtener los cambios que haya habido en la propiedad &lt;em&gt;price&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Main.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Category.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=Product.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=System.out&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;La información se persistirán en varias tablas en este caso en un base de datos relacional PostgreSQL que Javers creará al iniciarse la aplicación, ejecutada la aplicación encontraremos datos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/37deac8aa12db051e08a8253695e5fb4.js?file=tables.sql&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJavers&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/</id>
        <title>Añadir botones selectores de opciones a select múltiple de bootsrap-select</title>        
        <updated>2016-10-26T14:30:00+02:00</updated>
        <published>2016-10-25T15:30:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;La librería &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; nos permite crear elementos &lt;em&gt;select&lt;/em&gt; enriquecidos con más funcionalidades que las propias ofrecidas por el navegador para seleccionar una única opción o para seleccionar múltiples opciones. Usando esta librería y añadiendo algunos atributos a las etiquetas HTML &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;optgroup&lt;/em&gt; y &lt;em&gt;option&lt;/em&gt; añadirá varias funcionalidades interesantes como comento en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/&#34;&gt;Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una de las opciones que añade es poniendo en la etiqueta &lt;em&gt;select&lt;/em&gt; el atributo &lt;em&gt;data-actions-box&lt;/em&gt; son dos botones para seleccionar todas las opciones o para deseleccionar todas las opciones.&lt;/p&gt;

&lt;p&gt;Este es el aspecto de un elemento de selección con los botones de seleccionar todas las opciones y ninguna que son muy útiles para el usuario evitándose seleccionar una a una cada una de las opciones.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-todos.png&#34; title=&#34;Multiselect con opciones Todos y Ninguno&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-todos-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect.png&#34; title=&#34;Opciones seleccionadas de Multiselect&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;MultiSelect con opciones Todos y Ninguno&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;A pesar de todas las opciones adicionales que añade &lt;em&gt;bootstrap-select&lt;/em&gt; incluidas los botones de seleccionar todas las opciones y ninguna aún quizá queramos personalizar más el comportamiento, por ejemplo, permitir seleccionar con botones adicionales un grupo de opciones relacionadas. Supongamos que tenemos un componente de selección múltiple de países y queremos seleccionar los países de Europa, América o Asia además de las opciones que &lt;em&gt;bootstrap-select&lt;/em&gt; de todos y ninguno.&lt;/p&gt;

&lt;p&gt;Un atributo que usa &lt;em&gt;bootstrap-select&lt;/em&gt; para la opción de filtrado es el atributo &lt;em&gt;data-tokens&lt;/em&gt;, si el valor introducido en el filtro coincide con este atributo la opción se muestra y en las que no coincide se oculta. Para no añadir más atributos usaré este atributo para asociar a la opción a los grupos que pertenecen o los &lt;em&gt;tokens&lt;/em&gt; que tiene asociados. Dada una serie de &lt;em&gt;tokens&lt;/em&gt; para los que queremos botón de filtrado en el atributo &lt;em&gt;data-tokens-selectors&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este sería un ejemplo de código JavaScript junto con el uso del componente de Tapestry en la aplicación que podríamos emplear para añadir al elemento selector este comportamiento de selección de grupos de opciones que básicamente añade de forma dinámica un pequeño trozo de HTML similar al que el componente utiliza para mostrar los botones de todos y ninguno. Cuando se haga clic en un botón de selección con el evento &lt;em&gt;loaded.bs.select&lt;/em&gt; se buscan las opciones que contiene el &lt;em&gt;token&lt;/em&gt; asociado al botón y se seleccionan teniendo en cuenta también las opciones que estén deshabilitadas. Además, cuando todas las opciones de un botón selector están seleccionadas queda como pulsado como indicativo, lógica que se realiza en el evento &lt;em&gt;change&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=multiselect.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=Index.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;Y este sería el aspecto de componente en el navegador.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-europa.png&#34; title=&#34;Multiselect con opciones Europa&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-europa-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-asia.png&#34; title=&#34;Multiselect con opciones Asia&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/189/multiselect-asia-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;MultiSelect con opciones Europa, America y Asia&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Si usásemos el &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/&#34;&gt;componente de selección múltiple con Apache Tapetstry y bootstrap-select&lt;/a&gt; sería el propio componente &lt;em&gt;MultiSelect&lt;/em&gt; el que se encargaría de incluir el JavaScript en la página cuando en ella se usase lo que nos evita incluir el JavaScript de forma global en la aplicación y en todas las páginas cuando realmente no se usa.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/97ab5029147f0bf58bb741775af69e1a.js?file=MultiSelect.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/</id>
        <title>Componente select múltiple en Apache Tapestry</title>        
        <updated>2016-10-25T13:45:00+02:00</updated>
        <published>2016-10-25T13:45:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El &lt;em&gt;framework&lt;/em&gt; basado en componentes Apache Tapestry incorpora una amplia &lt;a href=&#34;http://tapestry.apache.org/component-reference.html&#34;&gt;colección de componentes&lt;/a&gt; que nos bastarán en la mayoría de casos que necesitemos. Para los casos en que deseemos un componente con un comportamiento específico podemos construir uno completamente nuevo basado en otros existentes incluyendo los propios nuestros, de una librería o incluidos en Tapestry.&lt;/p&gt;

&lt;p&gt;En Tapestry hay múltiples componentes con los que construir formularios para que el usuario pueda introducir datos, ser enviados por el navegador y procesados en el servidor. Hay componentes de formulario desde &lt;em&gt;checkboxes&lt;/em&gt;, &lt;em&gt;radios&lt;/em&gt;, &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;inputs&lt;/em&gt;, &amp;hellip; con soporte para &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; 5.&lt;/p&gt;

&lt;p&gt;Observando en detalle la lista de componentes ofrecidos nos daremos cuenta de que está un componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt; pero que solo se puede utilizar para que el usuario seleccione una única opción, sin embargo, en el estándar de HTML los campos de selección pueden utilizarse para seleccionar múltiples opciones. Como se no ofrece un componente &lt;em&gt;select&lt;/em&gt; para seleccionar múltiples opciones a la vez si lo necesitamos deberemos implementar uno que nos ofrezca esta funcionalidad. Con el codigo fuente de Tapestry la tarea es mucho más sencilla y prácticamente es copiar y pegar, el código completo del componente &lt;em&gt;MultiSelect&lt;/em&gt; será lo que muestre a continuación.&lt;/p&gt;

&lt;p&gt;Todo componente de formulario en este &lt;em&gt;framework&lt;/em&gt; hereda de &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html&#34;&gt;AbstracField&lt;/a&gt; en el que básicamente deberemos proporcionar una implementación del método &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/base/AbstractField.html#processSubmission(java.lang.String)&#34;&gt;processSubmission()&lt;/a&gt; donde procesaremos los datos recibidos en este caso con un método equivalente al tradicional en Java EE &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameterValues-java.lang.String-&#34;&gt;ServletRequest.getParameterValues&lt;/a&gt;. La otra parte que deberemos implementar es la generación de etiquetas HTML del componente en el método de ciclo de vida &lt;em&gt;beginRender()&lt;/em&gt; que en gran parte nos servirá lo implementado en el código fuente del componente &lt;em&gt;Select&lt;/em&gt; de Tapestry pero incluyendo el atributo &lt;em&gt;multiple&lt;/em&gt; que requiere HTML para los &lt;em&gt;selects&lt;/em&gt; de múltiples opciones.&lt;/p&gt;

&lt;p&gt;Esta sería una implementación de un componente &lt;em&gt;select&lt;/em&gt; múltiple. La mayor diferencia entre el componente &lt;em&gt;Select&lt;/em&gt; y este &lt;em&gt;MultiSelect&lt;/em&gt; está en la propiedad &lt;em&gt;value&lt;/em&gt; que en el primero es de tipo &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&#34;&gt;Object&lt;/a&gt; donde se guardará el dato seleccionado y &lt;em&gt;selected&lt;/em&gt; en el segundo que es un &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/List.html&#34;&gt;List&lt;/a&gt; de objetos donde se guardarán los datos seleccionados.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=MultiSelect.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Esta implementación del componente no necesita de una plantilla &lt;em&gt;tml&lt;/em&gt; sino que todo el HTML se generará desde el código Java. El componente soporta parámetros informales como indicamos con la anotación &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/annotations/SupportsInformalParameters.html&#34;&gt;@SupportsInformalParameters&lt;/a&gt; que son parámetros que se añadirán a la etiqueta &lt;em&gt;select&lt;/em&gt; incluidos tal cual se indican en su uso que por ejemplo podemos utilizar para variar el número de opciones visibles, personalizar los textos y otras funcionalidades de &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;El código HTML generado por el componente es el siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/880b9471c7f6ded2212fd5418c34a94a.js?file=Index.html&#34;&gt;&lt;/script&gt;

&lt;p&gt;Este sería el aspecto del &lt;em&gt;select&lt;/em&gt; múltiple con sus botones para seleccionar todas las opciones y deseleccionar todas, además de personalizados los textos y una pequeña flecha en el desplegable hacia el componente &lt;em&gt;select&lt;/em&gt;, todo esto configurado principalmente a través de atributos &lt;em&gt;data&lt;/em&gt; y clases &lt;abbr title=&#34;Cascading Stylesheets&#34;&gt;CSS&lt;/abbr&gt;.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/multiselect.png&#34; title=&#34;Aspecto del componente select mútiple&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/multiselect-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/multiselect-2.png&#34; title=&#34;Vista con opciones seleccionadas enviadas al servidor&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/multiselect-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componente MultiSelect con bootstrap-select&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Si queremos seleccionar múltiples opciones usando &lt;em&gt;checkboxes&lt;/em&gt; Tapestry ofrece el componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Checklist.html&#34;&gt;Checklist&lt;/a&gt; y usando &lt;em&gt;selects&lt;/em&gt; otra opción es el componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Palette.html&#34;&gt;Palette&lt;/a&gt; pero seguramente no sea lo que deseamos.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/checklist.png&#34; title=&#34;Componente Checklist de Tapestry&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/checklist-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/palette.png&#34; title=&#34;Componente Palette de Tapestry&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/188/palette-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componentes Checklist y Palette&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;En un artículo anterior comenté como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/&#34;&gt;adaptar el componente &lt;em&gt;Select&lt;/em&gt; y este &lt;em&gt;MultiSelect&lt;/em&gt; para añadirle funcionalidades de la librería bootstrap-select&lt;/a&gt; como cuadro de búsqueda, búsqueda por palabras clave, divisores, etc que consiste en añadir a las etiquetas HTML &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;optiongrp&lt;/em&gt; y &lt;em&gt;option&lt;/em&gt; ciertos atributos con sus correspondientes valores con una combinación de parámetros informales y personalización de la clase &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html&#34;&gt;SelectModel&lt;/a&gt;. En el siguiente artículo comentaré como &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/&#34;&gt;añadir botones selectores de opciones&lt;/a&gt; además de los que incorpora &lt;em&gt;bootstrap-select&lt;/em&gt; de Todos y Ninguno.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;Bootstrap Select&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/</id>
        <title>Componente select de Apache Tapestry con funcionalidades adicionales usando bootstrap-select</title>        
        <updated>2016-10-25T12:30:00+02:00</updated>
        <published>2016-10-15T13:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/componente-select-de-apache-tapestry-con-funcionalidades-adicionales-usando-bootstrap-select/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/apache-tapestry.png&#34; class=&#34;right&#34; alt=&#34;Apache Tapestry&#34; title=&#34;Apache Tapestry&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El selector de opciones implementado en los navegadores es muy simple pudiendo seleccionar un elemento de una lista, mostrar los elementos agrupados por categorías o seleccionar múltiples elementos pero mostrándolos en formato de una lista en vez de como un desplegable. &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;bootstrap-select&lt;/a&gt; es una librería que utiliza los estilos de &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; y que añade algunas funcionalidades más a los componentes de selección de opciones de los formularios de una página web.&lt;/p&gt;

&lt;p&gt;Algunas de estas funcionalidades adicionales está explicadas más detalladamente en los &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/examples/&#34;&gt;ejemplos&lt;/a&gt;, que son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuadro de búsqueda&lt;/li&gt;
&lt;li&gt;Búsqueda por palabras clave&lt;/li&gt;
&lt;li&gt;Limitar el número de opciones seleccionables&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción no seleccionada&lt;/li&gt;
&lt;li&gt;Texto personalizado de opción seleccionada (distinto al texto de la opción)&lt;/li&gt;
&lt;li&gt;Texto de opciones seleccionadas personalizado&lt;/li&gt;
&lt;li&gt;Estilos personalizados&lt;/li&gt;
&lt;li&gt;Marca en la opción seleccionada&lt;/li&gt;
&lt;li&gt;Flecha hacia el campo del formulario en el desplegable&lt;/li&gt;
&lt;li&gt;Estilos  personalizados en opciones individuales&lt;/li&gt;
&lt;li&gt;Anchuras personalizables&lt;/li&gt;
&lt;li&gt;Iconos en las opciones&lt;/li&gt;
&lt;li&gt;Contenido personalizado en las opciones&lt;/li&gt;
&lt;li&gt;Subtextos&lt;/li&gt;
&lt;li&gt;Tamaño de menú personalizado&lt;/li&gt;
&lt;li&gt;Opciones de selección y deselección&lt;/li&gt;
&lt;li&gt;Divisores&lt;/li&gt;
&lt;li&gt;Cabecera&lt;/li&gt;
&lt;li&gt;Posición desplegable&lt;/li&gt;
&lt;li&gt;Deshabilitar &lt;em&gt;select&lt;/em&gt;, opción o grupo de opciones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todas estas capacidades de personalización se consiguen bien añadiendo atributos a las etiquetas &lt;abbr title=&#34;HyperText Markup Language&#34;&gt;HTML&lt;/abbr&gt; &lt;em&gt;select&lt;/em&gt; o a las etiquetas &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt; con lo que usar el componente &lt;em&gt;bootstrap-select&lt;/em&gt; consiste básicamente generar el marcado HTML adecuado. Con JavaScript se puede construir el componente donde podemos indicar las mismas &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/options/&#34;&gt;opciones adicionales&lt;/a&gt; que con los atributos &lt;em&gt;data-&lt;/em&gt;, también tiene &lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;métodos&lt;/a&gt; para manipular su comportamiento de forma programática como por ejemplo recibir eventos cuando cambia la selección.&lt;/p&gt;

&lt;p&gt;Usando &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; con su concepto de parámetros informales añadiremos las atributos necesarios en la etiqueta &lt;em&gt;select&lt;/em&gt; y con el modelo de datos proporcionado en &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/SelectModel.html&#34;&gt;SelectModel&lt;/a&gt;, &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionGroupModel.html&#34;&gt;OptionGroupModel&lt;/a&gt; y &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/OptionModel.html&#34;&gt;OptionModel&lt;/a&gt; podremos proporcionar los atributos adicionales para las etiquetas de los &lt;em&gt;option&lt;/em&gt; y &lt;em&gt;optgroup&lt;/em&gt;. El modelo de datos de una etiqueta &lt;em&gt;select&lt;/em&gt; es una lista de opciones y grupos de opciones, cada opción tiene una etiqueta que se le mostrará al usuario, si está habilitada o no, el valor que se enviará al servidor cuando esté seleccionada y un mapa de atributos a añadir en la etiqueta de la opción.&lt;/p&gt;

&lt;p&gt;Este sería el código para crear una instancia de &lt;em&gt;SelectModel&lt;/em&gt; para un componente &lt;a href=&#34;https://tapestry.apache.org/current/apidocs/org/apache/tapestry5/corelib/components/Select.html&#34;&gt;Select&lt;/a&gt; de Tapestry para un ficticio selector de país. En el ejemplo en vez de usar un mapa vacío con &lt;em&gt;Collections.EMPTY_MAP&lt;/em&gt; se podría sustituir por un mapa con atributos que se añadirían a la opción para usar alguna otra funcionalidad de &lt;em&gt;bootstrap-select&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionGroupModel.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=AppOptionModel.java&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/187/select-1.png&#34; title=&#34;Componente selector con bootstrap-select&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/187/select-1-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/187/select-2.png&#34; title=&#34;&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/187/select-2-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;Componente selector con bootstrap-select&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Al ser enviado el formulario que contiene el &lt;em&gt;select&lt;/em&gt; el valor seleccionado los tendremos en la propiedad que hayamos indicado en el parámetro &lt;em&gt;value&lt;/em&gt; del componente &lt;em&gt;Select&lt;/em&gt;, este caso en la propiedad &lt;em&gt;pais&lt;/em&gt; de la clase &lt;em&gt;Index&lt;/em&gt; que representa la página.&lt;/p&gt;

&lt;p&gt;En la clase &lt;em&gt;PlugInStack&lt;/em&gt; hay que especificar los recursos CSS y de JavaScript necesarios para usar &lt;em&gt;bootstrap-select&lt;/em&gt;, además de iniciarlizar los selectores con JavaScript.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=PlugInStack.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/128dcbc596aeeb6f40d89d95542925ce.js?file=index.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el artículo &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/componente-select-multiple-en-apache-tapestry/&#34;&gt;Componente select múltiple en Apache Tapestry&lt;/a&gt; explico como crear un &lt;em&gt;select&lt;/em&gt; múltiple que por defecto no incluye Tapestry pero el estandar HTML soporta y en algún caso nos será necesario y en &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/anadir-botones-selectores-de-opciones-a-select-multiple-de-bootsrap-select/&#34;&gt;añadir botones selectores de opciones&lt;/a&gt; como incluir selectores adicionales además de Todos y Ninguno.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/PlugInTapestry&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/&#34;&gt;Bootstrap Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/examples/&#34;&gt;Bootstrap Select Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://silviomoreto.github.io/bootstrap-select/methods/&#34;&gt;Bootstrap Select Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="javascript"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
                <category term="software"/>
            
                <category term="tapestry"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/</id>
        <title>Integrar autenticación OAuth con Keycloak, Shiro, Apache Tapestry y Spring Boot</title>        
        <updated>2016-10-08T00:30:00+02:00</updated>
        <published>2016-10-07T10:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/integrar-autenticacion-oauth-con-keycloak-shiro-apache-tapestry-y-spring-boot/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;OAuth es un protocolo usado para permitir a una aplicación acceder a los recursos de un usuario sin que este proporcione a la aplicación cliente sus credenciales y manteniendo el control de revocar los permisos concedidos. Es ampliamente usado por los servicios de redes sociales de las empresas más conocidas, también lo podemos usar en nuestras aplicaciones. En el ejemplo usaré Keycloak y una aplicación Java con Spring Boot, Apache Shiro y Apache Tapestry.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/keycloak.png&#34; class=&#34;right&#34; alt=&#34;Keycloak&#34; title=&#34;Keycloak&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;El protocolo &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt; permite a una aplicación cliente acceder a los recursos de un usuario almacenados en otra aplicación sin que el usuario proporcione a la aplicación cliente sus credenciales, además el usuario tiene la capacidad de revocar en caulquier momento los permisos concedidos a la aplicación cliente. El protocolo OAuth es ampliamente usado por empresas como &lt;a href=&#34;https://www.google.es/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://www.facebook.com/&#34;&gt;Facebook&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; en sus aplicaciones y servicios. También aplicando una arquitectura de microservicios, al dividir una aplicación en varios módulos o simplemente varias aplicaciones independientes pero que son usadas al mismo tiempo por el mismo usuario para evitar que el usuario se autentique en cada aplicación individualmente y que cada aplicación implemente la funcionalidad de autenticación podemos centralizarla usando OAuth a modo de autenticación única o &lt;a href=&#34;https://es.wikipedia.org/wiki/Single_Sign-On&#34;&gt;&lt;abbr title=&#34;Single Sign-On&#34;&gt;SSO&lt;/abbr&gt;&lt;/a&gt;. Usando &lt;a href=&#34;http://www.keycloak.org/&#34;&gt;Keycloak&lt;/a&gt; como servidor de OAuth podemos integrarlo en una aplicación Java que use &lt;a href=&#34;http://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt; para la autorización, &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Boot&lt;/a&gt; para iniciar la aplicación y &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; como &lt;em&gt;framework&lt;/em&gt; web.&lt;/p&gt;

&lt;p&gt;En el protocolo OAuth se diferencia las aplicaciones cliente que son capaces de mantener seguras sus credenciales como es el caso de una aplicación web ejecutada en el servidor o las aplicaciones que no son capaces de mantener sus credenciales seguras como es el caso de una aplicación cliente ejecutada en el navegador o en algunos casos nativa en el móvil. Independientemente de la aplicación cliente o de los &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#page-8&#34;&gt;varios flujos de autenticación&lt;/a&gt; el acceso a los recursos del usuario se hace mediante la obtención de un &lt;em&gt;token&lt;/em&gt; que es una cadena de caracteres opaca de cierta longitud pero que descifrada contiene información del usuario autenticado también está firmada digitalmente por el servidor de OAuth para evitar alteraciones. El protocolo define varios flujos para obtener un &lt;em&gt;token&lt;/em&gt;, obtenido el &lt;em&gt;token&lt;/em&gt; con cualquiera de ellos el acceso a los recursos es indiferente del flujo que haya sido empleado.&lt;/p&gt;

&lt;p&gt;En una aplicación segura con el &lt;em&gt;grant&lt;/em&gt; de tipo &lt;em&gt;authorization code&lt;/em&gt; los pasos que se siguen son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El servidor redirige al usuario al servidor de OAuth cuando intenta acceder a una URL protegida.&lt;/li&gt;
&lt;li&gt;El usuario introduce sus credenciales en una página de inicio de sesión proporcionada por el servidor OAuth, normalmente un usuario y contraseña.&lt;/li&gt;
&lt;li&gt;El servidor OAuth envía al navegador una redirección hacia la aplicación proporcionado un código de autorización en la URL que puede intercambiarse por un &lt;em&gt;token&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;El navegador con la redirección envía el código de autorización al servidor, el servidor obtiene de la URL, obtiene el código de autorización y lo usa para intercambiarlo por un &lt;em&gt;token&lt;/em&gt; del servidor OAuth proporcionado además las credenciales del cliente.&lt;/li&gt;
&lt;li&gt;Obtenido el &lt;em&gt;token&lt;/em&gt; con los permisos adecuados la aplicación ya puede permitir acceso o acceder a los recursos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para obtener el &lt;em&gt;token&lt;/em&gt; el servidor mantiene seguras sus credenciales como cliente OAuth. Nótese también que con el &lt;em&gt;token&lt;/em&gt; el servidor (cliente OAuth) no necesita comunicarse con el servidor OAuth para validar el &lt;em&gt;token&lt;/em&gt; ya que está firmado digitalmente, cifrado y tiene concecido un periodo de validadez.&lt;/p&gt;

&lt;p&gt;Un cliente se considera inseguro si la aplicación cliente no puede mantener seguras sus credenciales, si las credenciales de la aplicación están en el navegador o en una aplicación nativa del móvil se considera que las credenciales podrían obtenerse. En una aplicación web en un servidor las credenciales de la aplicación se mantienen seguras en el servidor.&lt;/p&gt;

&lt;p&gt;El siguiente ejemplo muestra como autenticar con Keycloak como proveedor de OAuth una aplicación Java que usa Shiro para la autorización, Spring Boot y el &lt;em&gt;framework&lt;/em&gt; web Apache Tapestry. OAuth y Keycloak también puede usarse para &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/09/autenticacion-con-oauth-y-keycloak-en-un-servicio-rest-con-jax-rs-y-spring-boot/&#34;&gt;securizar con OAuth un servicio REST con JAX-RS&lt;/a&gt; y crear un &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/2016/10/cliente-de-un-servicio-rest-autenticado-con-oauth2-en-java/&#34;&gt;cliente Java para acceder al servicio REST securizado con OAuth&lt;/a&gt; emplenado el flujo &lt;em&gt;client credentials&lt;/em&gt;. Lo mostrado en este artículo solo es una pequeña parte de las opciones y posibilidades que ofrece Keycloak, en las capturas de pantalla mostradas hay muchas pestañas, opciones y campos con funcionalidades adicionales.&lt;/p&gt;

&lt;p&gt;Iniciar el servidor OAuth de Keycloak usando &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; es muy sencillo con el siguiente comando y archivo de &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, en el primer acceso se nos solicitará una clave y contraseña de administración:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=docker-compose.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;Para el ejemplo crearé un nuevo &lt;em&gt;realm&lt;/em&gt; que contendrá los usuarios y en el que registraremos la aplicación cliente.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-realm.png&#34; title=&#34;Keycloak realm&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-realm-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-client.png&#34; title=&#34;Keycloak client&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-client-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-client-roles.png&#34; title=&#34;Keycloak client roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-client-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-roles.png&#34; title=&#34;Keycloak roles&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-roles-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-users.png&#34; title=&#34;Keycloak users&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-users-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-users-role-mappings.png&#34; title=&#34;Keycloak users role mappings&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/keycloak-users-role-mappings-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Usando uno de los &lt;a href=&#34;https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.2/topics/overview/supported-platforms.html&#34;&gt;adaptadores proporcionados por Keycloak&lt;/a&gt; para la integración en servidores y aplicaciones su uso no es complicado, en este caso usaré el adaptador para Spring Boot. Usándolo básicamente deberemos proporcionar en la configuración las credenciales de la aplicación cliente que hemos registrado previamente en Keycloak. Además indicaremos que URLs de la aplicación requiere autenticación y que roles han de poseer los usuarios autenticados. Al acceder a estas URLs el adaptador de Keycloak redirigirá al servidor para que el usuario se autentique, una vez autenticado se redirigirá a la aplicación de nuevo.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=application.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Autenticado el usuario podemos obtener la instancia de &lt;a href=&#34;http://www.keycloak.org/docs/javadocs/org/keycloak/representations/AccessToken.html&#34;&gt;AccessToken&lt;/a&gt; que representa el &lt;em&gt;token&lt;/em&gt; de OAuth, para la autorización podemos usar Apache Shiro y para ellos deberemos implementar un Realm de tipo &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html&#34;&gt;AuthorizingRealm&lt;/a&gt;. Tiene dos métodos que deberemos implementar &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthenticatingRealm.html#doGetAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-&#34;&gt;doGetAuthenticationInfo&lt;/a&gt; y &lt;a href=&#34;https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/AuthorizingRealm.html#doGetAuthorizationInfo-org.apache.shiro.subject.PrincipalCollection-&#34;&gt;doGetAuthorizationInfo&lt;/a&gt;, el primero lo usaremos para autenticar al usuario que en este caso teniendo el &lt;em&gt;AccessToken&lt;/em&gt; ya estará autenticado con Keycloak y el segundo método nos permitirá obtener los roles y permisos asociados al usuario que podríamos obtenerlos de una base de datos relacional, en el ejemplo los roles también se obtienen del token. Con un filtro realizaremos el inicio de sesión de forma programática del usuario representado por el &lt;em&gt;AccessToken&lt;/em&gt; cuando esté presente en la petición.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=KeycloakFilter.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=AppRealm.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con Apache Tapestry el filtro se registra en el módulo de la aplicación y con Shiro podemos realizar la autorización necesaria en las páginas u acciones de la aplicación usando anotaciones. En este caso una página pública que no requiere estar autenticado, una página accesible por un usuario autenticado y con rol &lt;em&gt;user&lt;/em&gt; y finalmente una página de administración que requiere rol &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Index.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=User.tml&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/091f6edb2dc3eb3a825e8d76f7cdf4cc.js?file=Admin.tml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Como la página de inicio no requiere autenticación es accesible por cualquier usuario. Al navegar a la página de usuario o administrador se iniciará el proceso de autenticación primeramente redirigiéndonos al servidor Keycloak para que introduzcamos las credenciales.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-index.png&#34; title=&#34;Index&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-index-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-keycloak-login.png&#34; title=&#34;Login&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-keycloak-login-thumb.png&#34;/&gt;&lt;/a&gt;
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-user.png&#34; title=&#34;User&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-user-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Si intentamos acceder a la página de usuario o administrador sin estar autenticados se nos mostrará la página de error 403 y al acceder a la página de administración con un usuario sin rol &lt;em&gt;admin&lt;/em&gt; se nos mostrará la página de error 401.&lt;/p&gt;

&lt;div class=&#34;media&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;figure&gt;
  
  &lt;a href=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-error403.png&#34; title=&#34;Error 403&#34; data-gallery&gt;&lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/185/tapestry-error403-thumb.png&#34;/&gt;&lt;/a&gt;
  
  
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Un buen libro sobre OAuth que he leído es &lt;a href=&#34;http://amzn.to/2cUkF9d&#34;&gt;Mastering OAuth 2.0&lt;/a&gt; que explica detalladamente el protocolo OAuth junto con el resto de formas de obtener un &lt;em&gt;token&lt;/em&gt; además del mostrado en este artículo usando las credenciales del cliente.&lt;/p&gt;

&lt;div class=&#34;media-amazon&#34; style=&#34;text-align: center;&#34;&gt;
    &lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=blobit-21&amp;o=30&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=1784395404&amp;linkId=726dc0d3e4914bc672e6b127da045db2&amp;internal=1&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Este artículo solo es introductorio a las posibilidades de OAuth y Keycloak, entre otras posibilidades que ofrece Keycloak creo que está permitir registrarse a los usuarios o personalizar los estilos y páginas de autenticación.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/Keycloak&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradle run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/posts/12/portada-PugInTapestry-thumb.png&#34; alt=&#34;Portada libro: PlugIn Tapestry&#34; title=&#34;Portada libro: PlugIn Tapestry&#34; style=&#34;float: left; margin-right: 1.5em;&#34;&gt;
    &lt;h3&gt;Libro PlugIn Tapestry&lt;/h3&gt;
    &lt;p&gt;Si te interesa Apache Tapestry descarga gratis el libro de más de 300 páginas que he escrito sobre este &lt;i&gt;framework&lt;/i&gt; en el formato que prefieras, &lt;a href=&#34;http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/&#34;&gt;PlugIn Tapestry: Desarrollo de aplicaciones y páginas web con Apache Tapestry&lt;/a&gt;, y el código de ejemplo asociado. En el libro comento detalladamente muchos aspectos que son necesarios en una aplicación web como persistencia, pruebas unitarias y de integración, inicio rápido, seguridad, formularios, internacionalización (i18n) y localización (l10n), AJAX, ... y como abordarlos usando Apache Tapestry.&lt;/p&gt;
    &lt;br style=&#34;clear: both;&#34;&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/dfySZ1&#34; class=&#34;btn btn-lg btn-success&#34;&gt;PDF&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/bs7Rtu&#34; class=&#34;btn btn-lg btn-success&#34;&gt;EPUB&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/lxOZMT&#34; class=&#34;btn btn-lg btn-success&#34;&gt;MOBI&lt;/a&gt;
        &lt;a href=&#34;http://goo.gl/MJJiPV&#34; class=&#34;btn btn-lg btn-success&#34;&gt;HTML&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&#34;buttons&#34;&gt;
        &lt;a href=&#34;http://goo.gl/EPw49k&#34; class=&#34;btn btn-lg btn-success&#34;&gt;Código fuente ejemplos&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oauth.net/getting-started/&#34;&gt;OAuth Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oauth.net/documentation/&#34;&gt;OAuth Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z-sUzl9eG6M&#34;&gt;Keycloak Basics Tutorial Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CXDrGJoCVhc&#34;&gt;Keycloak Basics Tutorial Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B-qIkB9lsLs&#34;&gt;Keycloak Demo Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QgWgUg5F_JQ&#34;&gt;Keycloak Demo Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
    <entry>
        <id>https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/</id>
        <title>Generación de código en tiempo de ejecución con Byte Buddy</title>        
        <updated>2016-10-07T09:15:00+02:00</updated>
        <published>2016-10-02T12:00:00+02:00</published>
        <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/10/generacion-de-codigo-en-tiempo-de-ejecucion-con-byte-buddy/"/>
        <author><name>pico.dev</name></author>
        <content type="html">
        
          &lt;p&gt;&lt;strong&gt;El tipado seguro y el sistema de tipos es sin duda una de las características más importante del lenguaje de programación Java que han contribuido a su éxito. Cuando no conocemos los tipos en tiempo de compilación el sistema de tipos es una limitación donde los lenguajes dinámicos son capaces de resolver el problema sin necesidad de los tipos pero perdiendo la ayuda del compilador. Usando una librería de generación de código en tiempo de compilación o ejecución tenemos la posibilidad en Java de realizar algunas tareas que los lenguajes dinámicos permiten.&lt;/strong&gt;&lt;/p&gt;
        
        &lt;div class=&#34;logotypes&#34; style=&#34;float: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/bytebuddy.png&#34; class=&#34;right&#34; alt=&#34;Byte Buddy&#34; title=&#34;Byte Buddy&#34;/&gt;
&lt;/div&gt;

&lt;div class=&#34;logotypes&#34; style=&#34;float: right; clear: right;&#34;&gt;
    &lt;img src=&#34;https://picodotdev.github.io/blog-bitix/assets/images/logotipos/java.png&#34; class=&#34;right&#34; alt=&#34;Java&#34; title=&#34;Java&#34;/&gt;
&lt;/div&gt;

&lt;p&gt;Java posee un sistema de tipos estricto con el que detectar errores de compilación y hace que el código sea más legible, con un &lt;abbr title=&#34;Integrated Development Environment&#34;&gt;IDE&lt;/abbr&gt; los errores de compilación los detectaremos inmediatamente según escribimos código. Este sistema de tipos estricto es deseable en aplicaciones de negocio y empresariales ya que ayuda a que las aplicaciones tengan menos errores o errores de compilación pasen inadvertidos y ser descubiertos incluso semanas después de haber sido desplegados en producción. Su sistema de tipos es uno de los responsables del éxito de Java. Sin embargo, el sistema de tipos estricto impone restricciones en otro tipo de ámbitos como en una biblioteca de propósito general ya que no se conocerán los tipos en tiempo de compilación y no podrán por tanto ser referenciados o alternativamente hayan ser definidos como interfaces o clases abstractas que posteriormente son implementadas o extendidas.&lt;/p&gt;

&lt;p&gt;Para acceder a propiedades e invocar métodos de tipos desconocidos en tiempo de compilación en Java disponemos de la &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html&#34;&gt;reflection API&lt;/a&gt; o API de introspección aunque tiene los siguientes inconvenientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es lenta: más que la invocación directa de un método. La API de introspección usa &lt;abbr title=&#34;Java Native Interface&#34;&gt;JNI&lt;/abbr&gt; y requiere hacer un análisis del objeto costosa para invocar el método del objeto.&lt;/li&gt;
&lt;li&gt;Inutiliza el tipado seguro: la API de introspección no es &lt;em&gt;type-safe&lt;/em&gt;. La comprobación de los tipos de los argumentos en la invocación de un método es retrasada hasta el momento de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usando la  API de introspección perdemos una de las grandes características de Java, el tipado seguro, adicionalmente el rendimiento será menor. Conocidas estas limitaciones hay varias librerías que las palían generando código en tiempo de ejecución, algunas de las más conocidas son &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&#34;&gt;Java Proxy&lt;/a&gt; que está incluida en el propio JDK, &lt;a href=&#34;https://github.com/cglib/cglib&#34;&gt;cglib&lt;/a&gt;, &lt;a href=&#34;https://jboss-javassist.github.io/javassist/&#34;&gt;Javassists&lt;/a&gt; o &lt;a href=&#34;http://asm.ow2.org/index.html&#34;&gt;ASM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leyendo uno de los artículos de la publicación gratuita &lt;a href=&#34;http://www.oracle.com/technetwork/java/javamagazine/index.html&#34;&gt;Java Magazine&lt;/a&gt; de &lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Nov/Dic 2015&lt;/a&gt; conocí otra alternativa llamada &lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt; con la que al contrario de otras posibilidades no estamos limitados a generar clases que implementen interfaces conocidas (como en Java proxies), tiene un mantenimiento activo y soporta las nuevas características de las últimas versiones del lenguaje (al contrario de cglib), no está tan limitada (como Javassists) y no hay que tener conocimientos de &lt;em&gt;byte code&lt;/em&gt; (como con ASM).&lt;/p&gt;

&lt;p&gt;La generación de código se ha vuelto ubicua en muchas de las librerías más populares de Java y se usa profusamente en &lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;, &lt;a href=&#34;http://hibernate.org/&#34;&gt;Hibernate&lt;/a&gt; o &lt;a href=&#34;http://tapestry.apache.org&#34;&gt;Apache Tapestry&lt;/a&gt; para aplicar seguridad, gestión de transacciones, mapeo modelo relacional-objeto o pruebas unitarias o de integración (&lt;em&gt;mocking&lt;/em&gt;, &amp;hellip;) y de manera similar a lo ofrecido por los &lt;a href=&#34;http://groovy-lang.org/metaprogramming.html&#34;&gt;&lt;abbr title=&#34;Abstract Syntax Tree&#34;&gt;AST&lt;/abbr&gt;&lt;/a&gt; de &lt;a href=&#34;http://www.groovy-lang.org/&#34;&gt;Groovy&lt;/a&gt;. Permite emular algunas propiedades que solo están accesibles al programar con lenguajes dinámicos sin perder las comprobaciones de tipos. Las clases generadas por Byte Buddy no se distinguen de las clases generadas por el compilador.&lt;/p&gt;

&lt;p&gt;Un ejemplo sencillo de la definición de una nueva clase en tiempo de ejecución con el método &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toString--&#34;&gt;String.toString&lt;/a&gt; que devuelve un valor fijo sería la siguiente:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-1.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Con los métodos &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#saveIn-java.io.File-&#34;&gt;saveIn&lt;/a&gt;, &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#inject-java.io.File-&#34;&gt;inject&lt;/a&gt; y &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.html#toJar-java.io.File-&#34;&gt;toJar&lt;/a&gt; de &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/dynamic/DynamicType.Unloaded.html&#34;&gt;DynamicType.Unloaded&lt;/a&gt; podemos generar las clases en el momento de construcción de la aplicación previo a que sea desplegada y guardarlas en archivos &lt;em&gt;.class&lt;/em&gt; o en librerías &lt;em&gt;.jar&lt;/em&gt;.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-2.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Usando los selectores adecuados como &lt;em&gt;method&lt;/em&gt;, &lt;em&gt;field&lt;/em&gt;, &lt;em&gt;constructor&lt;/em&gt;, &lt;em&gt;named&lt;/em&gt; entre muchos otros de la clase &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/matcher/ElementMatchers.html&#34;&gt;ElementMatchers&lt;/a&gt; seremos capaces de interceptar las llamadas a los métodos y establecerles el comportamiento que deseemos.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-3.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Foo.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Byte Buddy permite tres tipos de extensiones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;subclass&lt;/em&gt;: crea un nuevo tipo subclase de otro.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;redefine&lt;/em&gt;: redefine el comportamiento de un tipo existente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rebase&lt;/em&gt;: redefine el comportamiento de un tipo existente y renombra los métodos redefinidos de modo que siguen estando disponibles internamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devolver valores fijos en un método seguramente no será lo que deseemos en muchos casos pero podemos delegar el comportamiento de un método en otro y esta es una forma muy sencilla de manipular el comportamiento de un método sin conocer absolutamente nada de &lt;em&gt;bytecode&lt;/em&gt; ya que todo el código que proporcionamos es código Java. En el método en que se delega la llamada de uno interceptado es posible usar varias anotaciones para obtener diversos parámetros adicionales, &lt;em&gt;@Argument(n)&lt;/em&gt;, &lt;em&gt;@AllArguments&lt;/em&gt;, &lt;em&gt;@This&lt;/em&gt;, &lt;em&gt;@Super&lt;/em&gt;, &lt;em&gt;@Origin&lt;/em&gt; (Method, Constructor, Executable, Class, MethodHandle, MethodType, String o int), &lt;em&gt;@SuperCall&lt;/em&gt;, &lt;em&gt;@RuntimeType&lt;/em&gt;, &lt;em&gt;@DefaultCall&lt;/em&gt;, &lt;em&gt;@Default&lt;/em&gt;. El &lt;a href=&#34;http://bytebuddy.net/javadoc/1.4.28/net/bytebuddy/implementation/bind/annotation/package-summary.html&#34;&gt;listado completo de anotaciones&lt;/a&gt; está disponible en la API Javadoc.&lt;/p&gt;

&lt;p&gt;Podemos proporcionar implementaciones de métodos de la siguiente forma, suponiendo que queremos redefinir el método &lt;em&gt;hello&lt;/em&gt; de la clase &lt;em&gt;Source&lt;/em&gt; con el comportamiento implementado en la clase &lt;em&gt;Target&lt;/em&gt;:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Main-4.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Source.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=Target.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;Dicho esto, la generación de código en tiempo de ejecución o compilación nos permite nuevas posibilidades que solo ofrecían lenguajes dinámicos o de resolver problemas con &lt;a href=&#34;https://en.wikipedia.org/wiki/Aspect-oriented_programming&#34;&gt;programación orientada a aspectos&lt;/a&gt;. Aún así hay que tener en cuenta que las clases Java son elementos especiales para la la máquina virtual y nunca son recolectadas por el recolector de basura mientras su &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html&#34;&gt;ClassLoader&lt;/a&gt; este en uso por alguna de las clases que hay cargadas en la aplicación.&lt;/p&gt;

&lt;p&gt;Ejecutando esta pequeña aplicación obtenemos el siguiente resultado en la terminal.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/picodotdev/d4c18ea8e27c20450ba255e20715379a.js?file=System.out&#34;&gt;&lt;/script&gt;

&lt;p&gt;En el &lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;tutorial de Byte Buddy&lt;/a&gt; encontraremos más información y más detallada de las posibilidades que nos ofrece esta interesante librería en la plataforma &lt;abbr title=&#34;Java Virtual Machine&#34;&gt;JVM&lt;/abbr&gt; para manipular &lt;em&gt;bytecode&lt;/em&gt; y tipos con el lenguaje Java en tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;
    El &lt;a href=&#34;https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoByteBuddy&#34;&gt;código fuente completo del ejemplo&lt;/a&gt; puedes descargarlo del repositorio de ejemplos de Blog Bitix alojado en &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; y probarlo en tu equipo ejecutando el comando &lt;code&gt;./gradlew run&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;reference&#34;&gt;
    Referencia:&lt;br&gt;
    &lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/&#34;&gt;Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bytebuddy.net/#/tutorial&#34;&gt;Tutorial de Byte Buddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javamagazine.mozaicreader.com/NovDec2015#&amp;amp;pageSet=0&amp;amp;page=0&#34;&gt;Java Magazine Nov/Dic 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



        </content>
        
            
                <category term="blog-stack"/>
            
                <category term="java"/>
            
                <category term="planeta-codigo"/>
            
                <category term="programacion"/>
            
        
    </entry>
    
</feed>